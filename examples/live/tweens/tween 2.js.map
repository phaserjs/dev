{
  "version": 3,
  "sources": ["../../../../phaser-genesis/src/math/easing/back/In.ts", "../../../../phaser-genesis/src/math/easing/back/InOut.ts", "../../../../phaser-genesis/src/math/easing/back/Out.ts", "../../../../phaser-genesis/src/math/easing/bounce/index.ts", "../../../../phaser-genesis/src/math/easing/bounce/In.ts", "../../../../phaser-genesis/src/math/easing/bounce/InOut.ts", "../../../../phaser-genesis/src/math/easing/bounce/Out.ts", "../../../../phaser-genesis/src/math/easing/circular/In.ts", "../../../../phaser-genesis/src/math/easing/circular/InOut.ts", "../../../../phaser-genesis/src/math/easing/circular/Out.ts", "../../../../phaser-genesis/src/math/easing/cubic/In.ts", "../../../../phaser-genesis/src/math/easing/cubic/InOut.ts", "../../../../phaser-genesis/src/math/easing/cubic/Out.ts", "../../../../phaser-genesis/src/math/easing/elastic/In.ts", "../../../../phaser-genesis/src/math/easing/elastic/InOut.ts", "../../../../phaser-genesis/src/math/easing/elastic/Out.ts", "../../../../phaser-genesis/src/math/easing/expo/In.ts", "../../../../phaser-genesis/src/math/easing/expo/InOut.ts", "../../../../phaser-genesis/src/math/easing/expo/Out.ts", "../../../../phaser-genesis/src/math/easing/quadratic/index.ts", "../../../../phaser-genesis/src/math/easing/quadratic/In.ts", "../../../../phaser-genesis/src/math/easing/quadratic/InOut.ts", "../../../../phaser-genesis/src/math/easing/quadratic/Out.ts", "../../../../phaser-genesis/src/math/easing/quartic/In.ts", "../../../../phaser-genesis/src/math/easing/quartic/InOut.ts", "../../../../phaser-genesis/src/math/easing/quartic/Out.ts", "../../../../phaser-genesis/src/math/easing/quintic/In.ts", "../../../../phaser-genesis/src/math/easing/quintic/InOut.ts", "../../../../phaser-genesis/src/math/easing/quintic/Out.ts", "../../../../phaser-genesis/src/math/easing/sine/In.ts", "../../../../phaser-genesis/src/math/easing/sine/InOut.ts", "../../../../phaser-genesis/src/math/easing/sine/Out.ts", "../../../../phaser-genesis/src/math/easing/Linear.ts", "../../../../phaser-genesis/src/math/easing/Stepped.ts", "../../../../phaser-genesis/src/math/easing/GetEase.ts", "../../../../phaser-genesis/src/display/DepthFirstSearch.ts", "../../../../phaser-genesis/src/display/GetChildIndex.ts", "../../../../phaser-genesis/src/display/RemoveChildAt.ts", "../../../../phaser-genesis/src/display/RemoveChild.ts", "../../../../phaser-genesis/src/gameobjects/events/AddedToWorldEvent.ts", "../../../../phaser-genesis/src/gameobjects/events/DestroyEvent.ts", "../../../../phaser-genesis/src/gameobjects/events/PostUpdateEvent.ts", "../../../../phaser-genesis/src/gameobjects/events/RemovedFromWorldEvent.ts", "../../../../phaser-genesis/src/gameobjects/events/UpdateEvent.ts", "../../../../phaser-genesis/src/events/Emit.ts", "../../../../phaser-genesis/src/display/SetWorld.ts", "../../../../phaser-genesis/src/display/SetParent.ts", "../../../../phaser-genesis/src/display/AddChild.ts", "../../../../phaser-genesis/src/display/AddChildren.ts", "../../../../phaser-genesis/src/gameobjects/DIRTY_CONST.ts", "../../../../phaser-genesis/src/display/RemoveChildrenBetween.ts", "../../../../phaser-genesis/src/display/DestroyChildren.ts", "../../../../phaser-genesis/src/geom/rectangle/RectangleContains.ts", "../../../../phaser-genesis/src/geom/rectangle/Rectangle.ts", "../../../../phaser-genesis/src/display/RemoveChildren.ts", "../../../../phaser-genesis/src/display/ReparentChildren.ts", "../../../../phaser-genesis/src/config/const.ts", "../../../../phaser-genesis/src/config/ConfigStore.ts", "../../../../phaser-genesis/src/config/backgroundcolor/SetBackgroundColor.ts", "../../../../phaser-genesis/src/config/backgroundcolor/BackgroundColor.ts", "../../../../phaser-genesis/src/config/banner/SetBanner.ts", "../../../../phaser-genesis/src/config/batchsize/SetBatchSize.ts", "../../../../phaser-genesis/src/config/size/GetHeight.ts", "../../../../phaser-genesis/src/config/size/GetResolution.ts", "../../../../phaser-genesis/src/config/size/GetWidth.ts", "../../../../phaser-genesis/src/config/size/SetSize.ts", "../../../../phaser-genesis/src/config/size/Size.ts", "../../../../phaser-genesis/src/renderer/BindingQueue.ts", "../../../../phaser-genesis/src/config/backgroundcolor/GetBackgroundColor.ts", "../../../../phaser-genesis/src/config/renderer/SetRenderer.ts", "../../../../phaser-genesis/src/config/defaultorigin/SetDefaultOrigin.ts", "../../../../phaser-genesis/src/config/globalvar/SetGlobalVar.ts", "../../../../phaser-genesis/src/config/globalvar/GlobalVar.ts", "../../../../phaser-genesis/src/config/maxtextures/SetMaxTextures.ts", "../../../../phaser-genesis/src/dom/GetElement.ts", "../../../../phaser-genesis/src/config/parent/SetParent.ts", "../../../../phaser-genesis/src/config/parent/Parent.ts", "../../../../phaser-genesis/src/config/scenes/SetScenes.ts", "../../../../phaser-genesis/src/config/scenes/Scenes.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Draw.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Flush.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/End.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/GetRGBArray.ts", "../../../../phaser-genesis/src/config/webglcontext/GetWebGLContext.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/CreateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/DeleteFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/DeleteGLTexture.ts", "../../../../phaser-genesis/src/math/pow2/IsSizePowerOfTwo.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/SetGLTextureFilterMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/UpdateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/GLTextureBinding.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ProcessBindingQueue.ts", "../../../../phaser-genesis/src/config/maxtextures/GetMaxTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CheckShaderMaxIfStatements.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CreateTempTextures.ts", "../../../../phaser-genesis/src/config/batchsize/GetBatchSize.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/DeleteGLBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/VertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/IndexedVertexBuffer.ts", "../../../../phaser-genesis/src/utils/array/matrix/CheckMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/MatrixToString.ts", "../../../../phaser-genesis/src/utils/array/matrix/ReverseColumns.ts", "../../../../phaser-genesis/src/utils/array/matrix/ReverseRows.ts", "../../../../phaser-genesis/src/utils/array/matrix/TransposeMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/Rotate180.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateLeft.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateRight.ts", "../../../../phaser-genesis/src/utils/array/NumberArray.ts", "../../../../phaser-genesis/src/math/RoundAwayFromZero.ts", "../../../../phaser-genesis/src/utils/array/NumberArrayStep.ts", "../../../../phaser-genesis/src/utils/base64/ArrayBufferToBase64.ts", "../../../../phaser-genesis/src/utils/base64/Base64ToArrayBuffer.ts", "../../../../phaser-genesis/src/utils/string/UppercaseFirst.ts", "../../../../phaser-genesis/src/utils/NOOP.ts", "../../../../phaser-genesis/src/math/mat4/Matrix4.ts", "../../../../phaser-genesis/src/math/mat4/Mat4Ortho.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DeleteShaders.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateProgram.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniformSetter.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL_CONST.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateDepthBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_VERT.ts", "../../../../phaser-genesis/src/textures/Frame.ts", "../../../../phaser-genesis/src/textures/Texture.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/Shader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/QuadShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/MULTI_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/MultiTextureQuadShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultViewport.ts", "../../../../phaser-genesis/src/GameInstance.ts", "../../../../phaser-genesis/src/math/mat4/Mat4Identity.ts", "../../../../phaser-genesis/src/math/mat2d/Matrix2D.ts", "../../../../phaser-genesis/src/math/angle/AngleBetween.ts", "../../../../phaser-genesis/src/math/angle/AngleBetweenY.ts", "../../../../phaser-genesis/src/math/const.ts", "../../../../phaser-genesis/src/math/angle/CounterClockwise.ts", "../../../../phaser-genesis/src/math/angle/NormalizeAngle.ts", "../../../../phaser-genesis/src/math/angle/ReverseAngle.ts", "../../../../phaser-genesis/src/math/angle/RotateAngleTo.ts", "../../../../phaser-genesis/src/math/angle/ShortestAngleBetween.ts", "../../../../phaser-genesis/src/math/Wrap.ts", "../../../../phaser-genesis/src/math/angle/WrapAngle.ts", "../../../../phaser-genesis/src/math/angle/WrapAngleDegrees.ts", "../../../../phaser-genesis/src/math/angle/index.ts", "../../../../phaser-genesis/src/camera/StaticCamera.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/RenderPass.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Begin.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/GetVertexBufferEntry.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Start.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRendererInstance.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRenderer.ts", "../../../../phaser-genesis/src/config/webgl/WebGL.ts", "../../../../phaser-genesis/src/config/webglcontext/SetWebGLContext.ts", "../../../../phaser-genesis/src/events/EventEmitter.ts", "../../../../phaser-genesis/src/events/EventInstance.ts", "../../../../phaser-genesis/src/events/Off.ts", "../../../../phaser-genesis/src/events/On.ts", "../../../../phaser-genesis/src/events/Once.ts", "../../../../phaser-genesis/src/motion/tween/TweenProperty.ts", "../../../../phaser-genesis/src/motion/tween/nano/NanoTween.ts", "../../../../phaser-genesis/src/motion/tween/nano/AddTween.ts", "../../../../phaser-genesis/src/dom/AddToDOM.ts", "../../../../phaser-genesis/src/dom/DOMContentLoaded.ts", "../../../../phaser-genesis/src/dom/ParseXML.ts", "../../../../phaser-genesis/src/config/banner/GetBanner.ts", "../../../../phaser-genesis/src/config/globalvar/GetGlobalVar.ts", "../../../../phaser-genesis/src/config/parent/GetParent.ts", "../../../../phaser-genesis/src/config/renderer/GetRenderer.ts", "../../../../phaser-genesis/src/scenes/CreateSceneRenderData.ts", "../../../../phaser-genesis/src/config/scenes/GetScenes.ts", "../../../../phaser-genesis/src/scenes/ResetSceneRenderData.ts", "../../../../phaser-genesis/src/scenes/SceneManagerInstance.ts", "../../../../phaser-genesis/src/scenes/SceneManager.ts", "../../../../phaser-genesis/src/config/SetConfigDefaults.ts", "../../../../phaser-genesis/src/textures/CreateCanvas.ts", "../../../../phaser-genesis/src/textures/TextureManagerInstance.ts", "../../../../phaser-genesis/src/textures/TextureManager.ts", "../../../../phaser-genesis/src/Game.ts", "../../../../phaser-genesis/src/loader/File.ts", "../../../../phaser-genesis/src/loader/GetURL.ts", "../../../../phaser-genesis/src/loader/ImageTagLoader.ts", "../../../../phaser-genesis/src/loader/files/ImageFile.ts", "../../../../phaser-genesis/src/loader/Loader.ts", "../../../../phaser-genesis/src/scenes/GetConfigValue.ts", "../../../../phaser-genesis/src/scenes/Install.ts", "../../../../phaser-genesis/src/scenes/Scene.ts", "../../../../phaser-genesis/src/components/transform/GetVertices.ts", "../../../../phaser-genesis/src/components/bounds/BoundsComponent.ts", "../../../../phaser-genesis/src/components/input/InputComponent.ts", "../../../../phaser-genesis/src/math/vec2/Vec2.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/PackColors.ts", "../../../../phaser-genesis/src/components/transform/UpdateVertices.ts", "../../../../phaser-genesis/src/components/transform/PreRenderVertices.ts", "../../../../phaser-genesis/src/math/mat2d/Mat2dCopyFrom.ts", "../../../../phaser-genesis/src/components/transform/UpdateWorldTransform.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/PackColor.ts", "../../../../phaser-genesis/src/components/Vertex.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/BatchTexturedQuad.ts", "../../../../phaser-genesis/src/config/defaultorigin/GetDefaultOriginX.ts", "../../../../phaser-genesis/src/config/defaultorigin/GetDefaultOriginY.ts", "../../../../phaser-genesis/src/geom/rectangle/GetRectangleSize.ts", "../../../../phaser-genesis/src/components/transform/TRANSFORM_CONST.ts", "../../../../phaser-genesis/node_modules/bitecs/src/Storage.js", "../../../../phaser-genesis/node_modules/bitecs/src/Serialize.js", "../../../../phaser-genesis/node_modules/bitecs/src/Entity.js", "../../../../phaser-genesis/node_modules/bitecs/src/Query.js", "../../../../phaser-genesis/node_modules/bitecs/src/Component.js", "../../../../phaser-genesis/node_modules/bitecs/src/World.js", "../../../../phaser-genesis/node_modules/bitecs/src/System.js", "../../../../phaser-genesis/node_modules/bitecs/src/index.js", "../../../../phaser-genesis/src/components/Transform2D.ts", "../../../../phaser-genesis/src/components/World.ts", "../../../../phaser-genesis/src/gameobjects/GameObject.ts", "../../../../phaser-genesis/src/gameobjects/container/Container.ts", "../../../../phaser-genesis/src/renderer/canvas/draw/DrawImage.ts", "../../../../phaser-genesis/src/gameobjects/sprite/SetFrame.ts", "../../../../phaser-genesis/src/textures/GetTexture.ts", "../../../../phaser-genesis/src/gameobjects/sprite/SetTexture.ts", "../../../../phaser-genesis/src/gameobjects/sprite/Sprite.ts", "../../../../phaser-genesis/src/math/Clamp.ts", "../../../../phaser-genesis/src/world/events/WorldRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldShutdownEvent.ts", "../../../../phaser-genesis/src/world/CalculateTotalRenderable.ts", "../../../../phaser-genesis/src/world/HasDirtyChildren.ts", "../../../../phaser-genesis/src/world/UpdateCachedLayers.ts", "../../../../phaser-genesis/src/world/WorldDepthFirstSearch.ts", "../../../../phaser-genesis/src/world/BuildRenderList.ts", "../../../../phaser-genesis/src/math/mat2d/Mat2dEquals.ts", "../../../../phaser-genesis/src/world/MergeRenderData.ts", "../../../../phaser-genesis/src/world/ResetWorldRenderData.ts", "../../../../phaser-genesis/src/world/BaseWorld.ts", "../../../../phaser-genesis/src/world/CreateWorldRenderData.ts", "../../../../phaser-genesis/src/world/StaticWorld.ts", "../../src/tweens/tween 2.ts"],
  "sourcesContent": ["export function In (v: number, overshoot: number = 1.70158): number\r\n{\r\n    return v * v * ((overshoot + 1) * v - overshoot);\r\n}\r\n", "export function InOut (v: number, overshoot: number = 1.70158): number\r\n{\r\n    const s = overshoot * 1.525;\r\n\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * (v * v * ((s + 1) * v - s));\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * ((v -= 2) * v * ((s + 1) * v + s) + 2);\r\n    }\r\n}\r\n", "export function Out (v: number, overshoot: number = 1.70158): number\r\n{\r\n    return --v * v * ((overshoot + 1) * v + overshoot) + 1;\r\n}\r\n", "import { In } from './In';\r\nimport { InOut } from './InOut';\r\nimport { Out } from './Out';\r\n\r\nexport {\r\n    In,\r\n    InOut,\r\n    Out\r\n};\r\n", "export function In (v: number): number\r\n{\r\n    v = 1 - v;\r\n\r\n    if (v < 1 / 2.75)\r\n    {\r\n        return 1 - (7.5625 * v * v);\r\n    }\r\n    else if (v < 2 / 2.75)\r\n    {\r\n        return 1 - (7.5625 * (v -= 1.5 / 2.75) * v + 0.75);\r\n    }\r\n    else if (v < 2.5 / 2.75)\r\n    {\r\n        return 1 - (7.5625 * (v -= 2.25 / 2.75) * v + 0.9375);\r\n    }\r\n    else\r\n    {\r\n        return 1 - (7.5625 * (v -= 2.625 / 2.75) * v + 0.984375);\r\n    }\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    let reverse = false;\r\n\r\n    if (v < 0.5)\r\n    {\r\n        v = 1 - (v * 2);\r\n        reverse = true;\r\n    }\r\n    else\r\n    {\r\n        v = (v * 2) - 1;\r\n    }\r\n\r\n    if (v < 1 / 2.75)\r\n    {\r\n        v = 7.5625 * v * v;\r\n    }\r\n    else if (v < 2 / 2.75)\r\n    {\r\n        v = 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;\r\n    }\r\n    else if (v < 2.5 / 2.75)\r\n    {\r\n        v = 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;\r\n    }\r\n    else\r\n    {\r\n        v = 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;\r\n    }\r\n\r\n    if (reverse)\r\n    {\r\n        return (1 - v) * 0.5;\r\n    }\r\n    else\r\n    {\r\n        return v * 0.5 + 0.5;\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    if (v < 1 / 2.75)\r\n    {\r\n        return 7.5625 * v * v;\r\n    }\r\n    else if (v < 2 / 2.75)\r\n    {\r\n        return 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;\r\n    }\r\n    else if (v < 2.5 / 2.75)\r\n    {\r\n        return 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;\r\n    }\r\n    else\r\n    {\r\n        return 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;\r\n    }\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return 1 - Math.sqrt(1 - v * v);\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return -0.5 * (Math.sqrt(1 - v * v) - 1);\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * (Math.sqrt(1 - (v -= 2) * v) + 1);\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return Math.sqrt(1 - (--v * v));\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return v * v * v;\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * v * v * v;\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * ((v -= 2) * v * v + 2);\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return --v * v * v + 1;\r\n}\r\n", "export function In (v: number, amplitude: number = 0.1, period: number = 0.1): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        let s = period / 4;\r\n\r\n        if (amplitude < 1)\r\n        {\r\n            amplitude = 1;\r\n        }\r\n        else\r\n        {\r\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\r\n        }\r\n\r\n        return -(amplitude * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period));\r\n    }\r\n}\r\n", "export function InOut (v: number, amplitude: number = 0.1, period: number = 0.1): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        let s = period / 4;\r\n\r\n        if (amplitude < 1)\r\n        {\r\n            amplitude = 1;\r\n        }\r\n        else\r\n        {\r\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\r\n        }\r\n\r\n        if ((v *= 2) < 1)\r\n        {\r\n            return -0.5 * (amplitude * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period));\r\n        }\r\n        else\r\n        {\r\n            return amplitude * Math.pow(2, -10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period) * 0.5 + 1;\r\n        }\r\n    }\r\n}\r\n", "export function Out (v: number, amplitude: number = 0.1, period: number = 0.1): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        let s = period / 4;\r\n\r\n        if (amplitude < 1)\r\n        {\r\n            amplitude = 1;\r\n        }\r\n        else\r\n        {\r\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\r\n        }\r\n\r\n        return (amplitude * Math.pow(2, -10 * v) * Math.sin((v - s) * (2 * Math.PI) / period) + 1);\r\n    }\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return Math.pow(2, 10 * (v - 1)) - 0.001;\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if (v == 0)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    if (v == 1)\r\n    {\r\n        return 1;\r\n    }\r\n\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * Math.pow(2, 10 * (v - 1));\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * (2 - Math.pow(2, -10 * (v - 1)));\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return 1 - Math.pow(2, -10 * v);\r\n}\r\n", "import { In } from './In';\r\nimport { InOut } from './InOut';\r\nimport { Out } from './Out';\r\n\r\nexport {\r\n    In,\r\n    InOut,\r\n    Out\r\n};\r\n", "export function In (v: number): number\r\n{\r\n    return v * v;\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * v * v;\r\n    }\r\n    else\r\n    {\r\n        return -0.5 * (--v * (v - 2) - 1);\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return v * (2 - v);\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return v * v * v * v;\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * v * v * v * v;\r\n    }\r\n    else\r\n    {\r\n        return -0.5 * ((v -= 2) * v * v * v - 2);\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return -(--v * v * v * v - 1);\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return v * v * v * v * v;\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * v * v * v * v * v;\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * ((v -= 2) * v * v * v * v + 2);\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return (v = v - 1) * v * v * v * v + 1;\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return 1 - Math.cos(v * Math.PI / 2);\r\n    }\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * (1 - Math.cos(Math.PI * v));\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return Math.sin(v * Math.PI / 2);\r\n    }\r\n}\r\n", "export function Linear (v: number): number\r\n{\r\n    return v;\r\n}\r\n", "export function Stepped (v: number, steps: number = 1): number\r\n{\r\n    if (v <= 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v >= 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return (((steps * v) | 0) + 1) * (1 / steps);\r\n    }\r\n}\r\n", "import * as Back from './back';\r\nimport * as Bounce from './bounce';\r\nimport * as Circular from './circular';\r\nimport * as Cubic from './cubic';\r\nimport * as Elastic from './elastic';\r\nimport * as Expo from './expo';\r\nimport * as Quadratic from './quadratic';\r\nimport * as Quartic from './quartic';\r\nimport * as Quintic from './quintic';\r\nimport * as Sine from './sine';\r\n\r\nimport { Linear } from './Linear';\r\nimport { Stepped } from './Stepped';\r\n\r\nconst EaseMap: Map<string, Function> = new Map([\r\n    [ 'power0', Linear ],\r\n    [ 'power1', Quadratic.Out ],\r\n    [ 'power2', Cubic.Out ],\r\n    [ 'power3', Quartic.Out ],\r\n    [ 'power4', Quintic.Out ],\r\n    [ 'linear', Linear ],\r\n    [ 'quad', Quadratic.Out ],\r\n    [ 'cubic', Cubic.Out ],\r\n    [ 'quart', Quartic.Out ],\r\n    [ 'quint', Quintic.Out ],\r\n    [ 'sine', Sine.Out ],\r\n    [ 'expo', Expo.Out ],\r\n    [ 'circ', Circular.Out ],\r\n    [ 'elastic', Elastic.Out ],\r\n    [ 'back', Back.Out ],\r\n    [ 'bounce', Bounce.Out ],\r\n    [ 'stepped', Stepped ],\r\n    [ 'quad.in', Quadratic.In ],\r\n    [ 'cubic.in', Cubic.In ],\r\n    [ 'quart.in', Quartic.In ],\r\n    [ 'quint.in', Quintic.In ],\r\n    [ 'sine.in', Sine.In ],\r\n    [ 'expo.in', Expo.In ],\r\n    [ 'circ.in', Circular.In ],\r\n    [ 'elastic.in', Elastic.In ],\r\n    [ 'back.in', Back.In ],\r\n    [ 'bounce.in', Bounce.In ],\r\n    [ 'quad.out', Quadratic.Out ],\r\n    [ 'cubic.out', Cubic.Out ],\r\n    [ 'quart.out', Quartic.Out ],\r\n    [ 'quint.out', Quintic.Out ],\r\n    [ 'sine.out', Sine.Out ],\r\n    [ 'expo.out', Expo.Out ],\r\n    [ 'circ.out', Circular.Out ],\r\n    [ 'elastic.out', Elastic.Out ],\r\n    [ 'back.out', Back.Out ],\r\n    [ 'bounce.out', Bounce.Out ],\r\n    [ 'quad.inout', Quadratic.InOut ],\r\n    [ 'cubic.inout', Cubic.InOut ],\r\n    [ 'quart.inout', Quartic.InOut ],\r\n    [ 'quint.inout', Quintic.InOut ],\r\n    [ 'sine.inout', Sine.InOut ],\r\n    [ 'expo.inout', Expo.InOut ],\r\n    [ 'circ.inout', Circular.InOut ],\r\n    [ 'elastic.inout', Elastic.InOut ],\r\n    [ 'back.inout', Back.InOut ],\r\n    [ 'bounce.inout', Bounce.InOut ]\r\n]);\r\n\r\n//  Allows GetEase('Back'), GetEase('Expo.InOut'), GetEase('Export.easeOut') or lower-case\r\n\r\nexport function GetEase (name: string): Function\r\n{\r\n    name = name.toLowerCase();\r\n    name = name.replace('ease', '');\r\n\r\n    if (EaseMap.has(name))\r\n    {\r\n        return EaseMap.get(name);\r\n    }\r\n    else\r\n    {\r\n        return Linear;\r\n    }\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\n\r\n//  Returns all children of the parent, no matter what depth they go to, using an iterative search.\r\n//  Does NOT include the parent in the results.\r\n\r\nexport function DepthFirstSearch (parent: IGameObject): IGameObject[]\r\n{\r\n    const stack: IGameObject[] = [ parent ];\r\n    const output: IGameObject[] = [];\r\n\r\n    while (stack.length > 0)\r\n    {\r\n        const node = stack.shift();\r\n\r\n        output.push(node);\r\n\r\n        const numChildren = node.numChildren;\r\n\r\n        if (numChildren > 0)\r\n        {\r\n            for (let i = numChildren - 1; i >= 0; i--)\r\n            {\r\n                stack.unshift(node.children[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //  Remove the parent from the results\r\n    output.shift();\r\n\r\n    return output;\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function GetChildIndex (parent: IGameObject, child: IGameObject): number\r\n{\r\n    return parent.children.indexOf(child);\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function RemoveChildAt (parent: IGameObject, index: number): IGameObject | undefined\r\n{\r\n    const children = parent.children;\r\n    let child: IGameObject;\r\n\r\n    if (index >= 0 && index < children.length)\r\n    {\r\n        const removed = children.splice(index, 1);\r\n\r\n        if (removed[0])\r\n        {\r\n            child = removed[0];\r\n            child.parent = null;\r\n        }\r\n    }\r\n\r\n    return child;\r\n}\r\n", "import { GetChildIndex } from './GetChildIndex';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildAt } from './RemoveChildAt';\r\n\r\nexport function RemoveChild <T extends IGameObject> (parent: IGameObject, child: T): T\r\n{\r\n    const currentIndex = GetChildIndex(parent, child);\r\n\r\n    if (currentIndex > -1)\r\n    {\r\n        RemoveChildAt(parent, currentIndex);\r\n    }\r\n\r\n    return child;\r\n}\r\n", "import { IBaseWorld } from '../../world/IBaseWorld';\r\nimport { IGameObject } from '../IGameObject';\r\n\r\nexport const AddedToWorldEvent: string = 'addedtoworld';\r\n\r\nexport type AddedToWorldEventHandler = <T extends IGameObject, U extends IBaseWorld> (child: T, world: U) => void;\r\n", "import { IGameObject } from '../IGameObject';\r\n\r\nexport const DestroyEvent: string = 'destroy';\r\n\r\nexport type DestroyEventHandler = <T extends IGameObject> (child: T) => void;\r\n", "import { IGameObject } from '../IGameObject';\r\n\r\nexport const PostUpdateEvent: string = 'postupdate';\r\n\r\nexport type PostUpdateEventHandler = <T extends IGameObject> (delta: number, time: number, child: T) => void;\r\n", "import { IBaseWorld } from '../../world/IBaseWorld';\r\nimport { IGameObject } from '../IGameObject';\r\n\r\nexport const RemovedFromWorldEvent: string = 'removedfromworld';\r\n\r\nexport type RemovedFromWorldEventHandler = <T extends IGameObject, U extends IBaseWorld> (child: T, world: U) => void;\r\n", "import { IGameObject } from '../IGameObject';\r\n\r\nexport const UpdateEvent: string = 'update';\r\n\r\nexport type UpdateEventHandler = <T extends IGameObject> (delta: number, time: number, child: T) => void;\r\n", "import { IEventEmitter } from './IEventEmitter';\r\n\r\nexport function Emit (emitter: IEventEmitter, event: string, ...args: unknown[]): boolean\r\n{\r\n    if (emitter.events.size === 0 || !emitter.events.has(event))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    const listeners = emitter.events.get(event);\r\n\r\n    for (const ee of listeners)\r\n    {\r\n        ee.callback.apply(ee.context, args);\r\n\r\n        if (ee.once)\r\n        {\r\n            listeners.delete(ee);\r\n        }\r\n    }\r\n\r\n    if (listeners.size === 0)\r\n    {\r\n        emitter.events.delete(event);\r\n    }\r\n\r\n    return true;\r\n}\r\n", "import { AddedToWorldEvent, RemovedFromWorldEvent } from '../gameobjects/events';\r\n\r\nimport { Emit } from '../events/Emit';\r\nimport { IBaseWorld } from '../world/IBaseWorld';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function SetWorld (world: IBaseWorld, ...children: IGameObject[]): IGameObject[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        if (child.world)\r\n        {\r\n            Emit(child.world, RemovedFromWorldEvent, child, child.world);\r\n            Emit(child, RemovedFromWorldEvent, child, child.world);\r\n        }\r\n\r\n        child.world = world;\r\n\r\n        Emit(world, AddedToWorldEvent, child, world);\r\n        Emit(child, AddedToWorldEvent, child, world);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "import { DepthFirstSearch } from './DepthFirstSearch';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChild } from './RemoveChild';\r\nimport { SetWorld } from './SetWorld';\r\n\r\nexport function SetParent (parent: IGameObject, ...children: IGameObject[]): IGameObject[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        if (child.parent)\r\n        {\r\n            RemoveChild(child.parent, child);\r\n        }\r\n\r\n        child.parent = parent;\r\n    });\r\n\r\n    const parentWorld = parent.world;\r\n\r\n    if (parentWorld)\r\n    {\r\n        //  Full list of all children, including sub-children\r\n        SetWorld(parentWorld, ...DepthFirstSearch(parent));\r\n    }\r\n\r\n    return children;\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { SetParent } from './SetParent';\r\n\r\nexport function AddChild <T extends IGameObject> (parent: IGameObject, child: T): T\r\n{\r\n    parent.children.push(child);\r\n\r\n    SetParent(parent, child);\r\n\r\n    child.updateWorldTransform();\r\n\r\n    return child;\r\n}\r\n", "import { AddChild } from './AddChild';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function AddChildren (parent: IGameObject, ...children: IGameObject[]): IGameObject[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        AddChild(parent, child);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "export const DIRTY_CONST = {\r\n\r\n    CLEAR: 0,\r\n    TRANSFORM: 1,\r\n    UPDATE: 2,\r\n    CHILD_CACHE: 4,\r\n    POST_RENDER: 8,\r\n    COLORS: 16,\r\n    BOUNDS: 32,\r\n    TEXTURE: 64,\r\n    FRAME: 128,\r\n    ALPHA: 256,\r\n    CHILD: 512,\r\n\r\n    //  Special combinations\r\n    DEFAULT: 1 + 2 + 16 + 32,\r\n\r\n    //  Reserved for future use:\r\n    //  1024\r\n    //  2048\r\n    //  4096\r\n    //  8192\r\n    //  16384\r\n    //  32768\r\n    //  65536\r\n    //  131072\r\n    //  262144\r\n    //  524288\r\n    //  1048576\r\n    //  2097152\r\n    //  4194304\r\n    //  8388608\r\n    //  16777216\r\n    //  33554432\r\n    //  67108864\r\n    //  134217728\r\n    //  268435456\r\n\r\n    //  Reserved for user use\r\n    USER1: 536870912,\r\n    USER2: 1073741824,\r\n    USER3: 2147483648,\r\n    USER4: 4294967296\r\n\r\n};\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function RemoveChildrenBetween (parent: IGameObject, beginIndex: number = 0, endIndex?: number): IGameObject[]\r\n{\r\n    const children = parent.children;\r\n\r\n    if (endIndex === undefined)\r\n    {\r\n        endIndex = children.length;\r\n    }\r\n\r\n    const range = endIndex - beginIndex;\r\n\r\n    if (range > 0 && range <= endIndex)\r\n    {\r\n        const removed = children.splice(beginIndex, range);\r\n\r\n        removed.forEach(child =>\r\n        {\r\n            child.parent = null;\r\n        });\r\n\r\n        return removed;\r\n    }\r\n    else\r\n    {\r\n        return [];\r\n    }\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\r\n\r\nexport function DestroyChildren (parent: IGameObject, beginIndex: number = 0, endIndex?: number): void\r\n{\r\n    const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\r\n\r\n    removed.forEach(child =>\r\n    {\r\n        child.destroy();\r\n    });\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { IRectangle } from './IRectangle';\r\n\r\n/**\r\n * Checks if a given point is inside a Rectangle's bounds.\r\n */\r\nexport function RectangleContains (rect: IRectangle, x: number, y: number): boolean\r\n{\r\n    if (rect.width <= 0 || rect.height <= 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RectangleContains } from './RectangleContains';\r\n\r\nexport class Rectangle\r\n{\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor (x: number = 0, y: number = 0, width: number = 0, height: number = 0)\r\n    {\r\n        this.set(x, y, width, height);\r\n    }\r\n\r\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    }\r\n\r\n    contains (x: number, y: number): boolean\r\n    {\r\n        return RectangleContains(this, x, y);\r\n    }\r\n\r\n    set right (value: number)\r\n    {\r\n        if (value <= this.x)\r\n        {\r\n            this.width = 0;\r\n        }\r\n        else\r\n        {\r\n            this.width = value - this.x;\r\n        }\r\n    }\r\n\r\n    get right (): number\r\n    {\r\n        return this.x + this.width;\r\n    }\r\n\r\n    set bottom (value: number)\r\n    {\r\n        if (value <= this.y)\r\n        {\r\n            this.height = 0;\r\n        }\r\n        else\r\n        {\r\n            this.height = value - this.y;\r\n        }\r\n    }\r\n\r\n    get bottom (): number\r\n    {\r\n        return this.y + this.height;\r\n    }\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChild } from './RemoveChild';\r\n\r\nexport function RemoveChildren (parent: IGameObject, ...children: IGameObject[]): IGameObject[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        RemoveChild(parent, child);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\r\nimport { SetParent } from './SetParent';\r\n\r\nexport function ReparentChildren (parent: IGameObject, newParent: IGameObject, beginIndex: number = 0, endIndex?: number): IGameObject[]\r\n{\r\n    const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\r\n\r\n    SetParent(newParent, ...moved);\r\n\r\n    moved.forEach(child =>\r\n    {\r\n        child.updateWorldTransform();\r\n    });\r\n\r\n    return moved;\r\n}\r\n", "export const CONFIG_DEFAULTS = {\r\n    AUTO: 'Auto',\r\n    BACKGROUND_COLOR: 'BackgroundColor',\r\n    BANNER: 'Banner',\r\n    BATCH_SIZE: 'BatchSize',\r\n    CANVAS_CONTEXT: 'CanvasContext',\r\n    CANVAS: 'Canvas',\r\n    DEFAULT_ORIGIN: 'DefaultOrigin',\r\n    GLOBAL_VAR: 'GlobalVar',\r\n    MAX_TEXTURES: 'MaxTextures',\r\n    PARENT: 'Parent',\r\n    RENDERER: 'Renderer',\r\n    SCENES: 'Scenes',\r\n    SIZE: 'Size',\r\n    WEBGL_CONTEXT: 'WebGLContext',\r\n    WEBGL: 'WebGL'\r\n};\r\n", "export const ConfigStore = new Map();\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBackgroundColor (color: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BACKGROUND_COLOR, color);\r\n}\r\n", "import { SetBackgroundColor } from './SetBackgroundColor';\r\n\r\nexport function BackgroundColor (color: number): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetBackgroundColor(color);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBanner (title: string = '', version: string = '', url: string = '', color: string = '#fff', background: string = 'linear-gradient(#3e0081 40%, #00bcc3)'): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BANNER, { title, version, url, color, background });\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBatchSize (size: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BATCH_SIZE, size);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetHeight (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).height;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetResolution (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).resolution;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetWidth (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).width;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetSize (width: number = 800, height: number = 600, resolution: number = 1): void\r\n{\r\n    if (resolution === 0)\r\n    {\r\n        resolution = window.devicePixelRatio;\r\n    }\r\n\r\n    ConfigStore.set(CONFIG_DEFAULTS.SIZE, { width, height, resolution });\r\n}\r\n", "import { SetSize } from './SetSize';\r\n\r\nexport function Size (width: number = 800, height: number = 600, resolution: number = 1): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetSize(width, height, resolution);\r\n    };\r\n}\r\n", "import { IGLTextureBindingConfig } from './webgl1/textures/IGLTextureBindingConfig';\r\nimport { ITexture } from '../textures/ITexture';\r\n\r\nexport type BindingQueueEntry = {\r\n    texture: ITexture,\r\n    glConfig: IGLTextureBindingConfig\r\n};\r\n\r\nconst queue: BindingQueueEntry[] = [];\r\n\r\nexport const BindingQueue =\r\n{\r\n    add: (texture: ITexture, glConfig?: IGLTextureBindingConfig): void =>\r\n    {\r\n        queue.push({ texture, glConfig });\r\n    },\r\n\r\n    get: (): BindingQueueEntry[] =>\r\n    {\r\n        return queue;\r\n    },\r\n\r\n    clear: (): void =>\r\n    {\r\n        queue.length = 0;\r\n    }\r\n};\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetBackgroundColor (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.BACKGROUND_COLOR);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\r\n\r\nexport function SetRenderer (renderer: IRendererConstructor): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.RENDERER, renderer);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetDefaultOrigin (x: number = 0.5, y: number = x): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.DEFAULT_ORIGIN, { x, y });\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetGlobalVar (name: string): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.GLOBAL_VAR, name);\r\n}\r\n", "import { SetGlobalVar } from './SetGlobalVar';\r\n\r\nexport function GlobalVar (name: string): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetGlobalVar(name);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetMaxTextures (max: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.MAX_TEXTURES, max);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Attempts to get the target DOM element based on the given value, which can be either\r\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\r\n * can be found it will return a reference to the document.body.\r\n *\r\n * @function Phaser.DOM.GetElement\r\n * @since 4.0.0\r\n *\r\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\r\n * \r\n * @returns {HTMLElement} The HTML Element that was found.\r\n */\r\nexport function GetElement (target?: string | HTMLElement): HTMLElement\r\n{\r\n    let element: HTMLElement;\r\n\r\n    if (target)\r\n    {\r\n        if (typeof target === 'string')\r\n        {\r\n            //  Hopefully an element ID\r\n            element = document.getElementById(target);\r\n        }\r\n        else if (typeof target === 'object' && target.nodeType === 1)\r\n        {\r\n            //  Quick test for a HTMLElement\r\n            element = target;\r\n        }\r\n    }\r\n\r\n    if (!element)\r\n    {\r\n        element = document.body;\r\n    }\r\n\r\n    return element;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { GetElement } from '../../dom/GetElement';\r\n\r\nexport function SetParent (parentElement?: string | HTMLElement): void\r\n{\r\n    //  If this function was called and `null` *wasn't* given as the parent\r\n    //  then we try to figure it out, or fallback to the document body\r\n    if (parentElement)\r\n    {\r\n        ConfigStore.set(CONFIG_DEFAULTS.PARENT, GetElement(parentElement));\r\n    }\r\n}\r\n", "import { SetParent } from './SetParent';\r\n\r\nexport function Parent (parentElement?: string | HTMLElement): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetParent(parentElement);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\n\r\nexport function SetScenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.SCENES, [].concat(scenes));\r\n}\r\n", "import { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\nimport { SetScenes } from './SetScenes';\r\n\r\nexport function Scenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetScenes(scenes);\r\n    };\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\n\r\nexport function AddViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): Rectangle\r\n{\r\n    const viewport = new Rectangle(x, y, width, height);\r\n\r\n    renderPass.viewportStack.push(viewport);\r\n\r\n    return viewport;\r\n}\r\n", "export let gl: WebGLRenderingContext;\r\n\r\nexport const GL =\r\n{\r\n    get: (): WebGLRenderingContext =>\r\n    {\r\n        return gl;\r\n    },\r\n\r\n    set: (context: WebGLRenderingContext | undefined): void =>\r\n    {\r\n        gl = context;\r\n    }\r\n};\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindViewport (renderPass: IRenderPass, viewport?: Rectangle): void\r\n{\r\n    if (!viewport)\r\n    {\r\n        viewport = renderPass.currentViewport;\r\n\r\n        if (!viewport)\r\n        {\r\n            return;\r\n        }\r\n    }\r\n\r\n    const glv = gl.getParameter(gl.VIEWPORT);\r\n\r\n    if (glv[0] !== viewport.x || glv[1] !== viewport.y || glv[2] !== viewport.width || glv[3] !== viewport.height)\r\n    {\r\n        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\r\n    }\r\n}\r\n", "import { AddViewport } from './AddViewport';\r\nimport { BindViewport } from './BindViewport';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function SetViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\r\n{\r\n    const entry = AddViewport(renderPass, x, y, width, height);\r\n\r\n    BindViewport(renderPass, entry);\r\n\r\n    renderPass.currentViewport = entry;\r\n}\r\n", "import { FramebufferStackEntry } from './RenderPass';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { SetViewport } from './SetViewport';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindFramebuffer (renderPass: IRenderPass, clear: boolean = true, entry?: FramebufferStackEntry): void\r\n{\r\n    if (!entry)\r\n    {\r\n        entry = renderPass.currentFramebuffer;\r\n    }\r\n\r\n    const { framebuffer, viewport } = entry;\r\n\r\n    //  TODO - Only bind if different\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    if (clear)\r\n    {\r\n        gl.clearColor(0, 0, 0, 0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    if (viewport)\r\n    {\r\n        SetViewport(renderPass, viewport.x, viewport.y, viewport.width, viewport.height);\r\n    }\r\n}\r\n", "import { BindViewport } from './BindViewport';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function PopViewport (renderPass: IRenderPass): void\r\n{\r\n    const stack = renderPass.viewportStack;\r\n\r\n    //  > 1 because index 0 contains the default, which we don't want to remove\r\n    if (stack.length > 1)\r\n    {\r\n        stack.pop();\r\n    }\r\n\r\n    renderPass.currentViewport = stack[ stack.length - 1 ];\r\n\r\n    BindViewport(renderPass);\r\n}\r\n", "import { BindFramebuffer } from './BindFramebuffer';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { PopViewport } from './PopViewport';\r\n\r\nexport function PopFramebuffer (renderPass: IRenderPass): void\r\n{\r\n    const stack = renderPass.framebufferStack;\r\n\r\n    //  > 1 because index 0 contains the default, which we don't want to remove\r\n    if (stack.length > 1)\r\n    {\r\n        if (renderPass.currentFramebuffer.viewport)\r\n        {\r\n            PopViewport(renderPass);\r\n        }\r\n\r\n        stack.pop();\r\n    }\r\n\r\n    renderPass.currentFramebuffer = stack[ stack.length - 1 ];\r\n\r\n    BindFramebuffer(renderPass, false);\r\n}\r\n", "import { FramebufferStackEntry } from './RenderPass';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\n\r\nexport function AddFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer, viewport?: Rectangle): FramebufferStackEntry\r\n{\r\n    const entry = { framebuffer, viewport };\r\n\r\n    renderPass.framebufferStack.push(entry);\r\n\r\n    return entry;\r\n}\r\n", "import { AddFramebuffer } from './AddFramebuffer';\r\nimport { BindFramebuffer } from './BindFramebuffer';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle';\r\n\r\nexport function SetFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer, clear: boolean = true, viewport?: Rectangle): void\r\n{\r\n    const entry = AddFramebuffer(renderPass, framebuffer, viewport);\r\n\r\n    BindFramebuffer(renderPass, clear, entry);\r\n\r\n    renderPass.currentFramebuffer = entry;\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { PopFramebuffer } from './PopFramebuffer';\r\nimport { SetFramebuffer } from './SetFramebuffer';\r\nimport { gl } from '../GL';\r\n\r\nexport function Draw (renderPass: IRenderPass): void\r\n{\r\n    const count = renderPass.count;\r\n\r\n    if (count === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    const currentBuffer = renderPass.currentVertexBuffer;\r\n    const currentShader = renderPass.currentShader;\r\n\r\n    const renderToFramebuffer = currentShader.shader.renderToFramebuffer;\r\n\r\n    if (renderToFramebuffer)\r\n    {\r\n        SetFramebuffer(renderPass, currentShader.shader.framebuffer, true);\r\n    }\r\n\r\n    if (count === currentBuffer.batchSize)\r\n    {\r\n        const type = (currentBuffer.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, currentBuffer.data, type);\r\n    }\r\n    else\r\n    {\r\n        const subsize = (currentBuffer.indexed) ? count * currentBuffer.entryElementSize : count * currentBuffer.vertexElementSize;\r\n\r\n        const view = currentBuffer.vertexViewF32.subarray(0, subsize);\r\n\r\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\r\n    }\r\n\r\n    if (currentBuffer.indexed)\r\n    {\r\n        gl.drawElements(gl.TRIANGLES, count * currentBuffer.entryIndexSize, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    else\r\n    {\r\n        gl.drawArrays(gl.TRIANGLES, 0, count);\r\n    }\r\n\r\n    if (renderToFramebuffer)\r\n    {\r\n        PopFramebuffer(renderPass);\r\n    }\r\n}\r\n", "import { Draw } from './Draw';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function Flush (renderPass: IRenderPass, forceCount?: number): boolean\r\n{\r\n    if (forceCount)\r\n    {\r\n        renderPass.count = forceCount;\r\n    }\r\n\r\n    const count = renderPass.count;\r\n\r\n    if (count === 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    Draw(renderPass);\r\n\r\n    renderPass.prevCount = count;\r\n\r\n    renderPass.count = 0;\r\n\r\n    renderPass.flushTotal++;\r\n\r\n    return true;\r\n}\r\n", "import { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function End (renderPass: IRenderPass): void\r\n{\r\n    Flush(renderPass);\r\n}\r\n", "export function GetRGBArray (color: number, output: number[] = []): number[]\r\n{\r\n    const r: number = color >> 16 & 0xFF;\r\n    const g: number = color >> 8 & 0xFF;\r\n    const b: number = color & 0xFF;\r\n    const a: number = (color > 16777215) ? color >>> 24 : 255;\r\n\r\n    output[0] = r / 255;\r\n    output[1] = g / 255;\r\n    output[2] = b / 255;\r\n    output[3] = a / 255;\r\n\r\n    return output;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetWebGLContext (): WebGLContextAttributes\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.WEBGL_CONTEXT);\r\n}\r\n", "import { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\r\n{\r\n    const { parent, flipY, unpackPremultiplyAlpha, minFilter, magFilter, wrapS, wrapT, generateMipmap, isPOT } = binding;\r\n\r\n    const source = parent.image;\r\n\r\n    let width = parent.width;\r\n    let height = parent.height;\r\n\r\n    const glTexture: WebGLTexture = gl.createTexture();\r\n\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\r\n\r\n    if (source)\r\n    {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n\r\n        width = source.width;\r\n        height = source.height;\r\n    }\r\n    else\r\n    {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    }\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n\r\n    if (generateMipmap && isPOT)\r\n    {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    binding.texture = glTexture;\r\n\r\n    return glTexture;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteFramebuffer (framebuffer: WebGLFramebuffer): void\r\n{\r\n    if (gl && gl.isFramebuffer(framebuffer))\r\n    {\r\n        gl.deleteFramebuffer(framebuffer);\r\n    }\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteGLTexture (texture: WebGLTexture): void\r\n{\r\n    if (gl.isTexture(texture))\r\n    {\r\n        gl.deleteTexture(texture);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if the given `width` and `height` are a power of two.\r\n * Useful for checking texture dimensions.\r\n *\r\n * @function Phaser.Math.Pow2.IsSize\r\n * @since 3.0.0\r\n *\r\n * @param {number} width - The width.\r\n * @param {number} height - The height.\r\n *\r\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\r\n */\r\nexport function IsSizePowerOfTwo (width: number, height: number): boolean\r\n{\r\n    if (width < 1 || height < 1)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function SetGLTextureFilterMode (texture: WebGLTexture, linear: boolean = true): void\r\n{\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\r\n}\r\n", "import { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { gl } from '../GL';\r\n\r\nexport function UpdateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\r\n{\r\n    const source = binding.parent.image;\r\n    const width = source.width;\r\n    const height = source.height;\r\n\r\n    if (width > 0 && height > 0)\r\n    {\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n    }\r\n\r\n    return binding.texture;\r\n}\r\n", "import { CreateGLTexture } from './CreateGLTexture';\r\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\r\nimport { DeleteGLTexture } from './DeleteGLTexture';\r\nimport { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { IGLTextureBindingConfig } from './IGLTextureBindingConfig';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { IsSizePowerOfTwo } from '../../../math/pow2/IsSizePowerOfTwo';\r\nimport { SetGLTextureFilterMode } from './SetGLTextureFilterMode';\r\nimport { UpdateGLTexture } from './UpdateGLTexture';\r\nimport { gl } from '../GL';\r\n\r\nexport class GLTextureBinding implements IGLTextureBinding\r\n{\r\n    parent: ITexture;\r\n\r\n    texture: WebGLTexture;\r\n    framebuffer: WebGLFramebuffer;\r\n    depthbuffer: WebGLRenderbuffer;\r\n\r\n    index: number = 0;\r\n    indexCounter: number = -1;\r\n\r\n    dirtyIndex: boolean = true;\r\n    unpackPremultiplyAlpha: boolean = true;\r\n\r\n    minFilter: GLenum;\r\n    magFilter: GLenum;\r\n    wrapS: GLenum;\r\n    wrapT: GLenum;\r\n\r\n    flipY: boolean = false;\r\n    isPOT: boolean = false;\r\n    generateMipmap: boolean = false;\r\n\r\n    constructor (parent: ITexture, config: IGLTextureBindingConfig = {})\r\n    {\r\n        this.parent = parent;\r\n\r\n        this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\r\n\r\n        const {\r\n            texture = null,\r\n            framebuffer = null,\r\n            depthbuffer = null,\r\n            unpackPremultiplyAlpha = true,\r\n            minFilter = (this.isPOT) ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR,\r\n            magFilter = gl.LINEAR,\r\n            wrapS = gl.CLAMP_TO_EDGE,\r\n            wrapT = gl.CLAMP_TO_EDGE,\r\n            generateMipmap = this.isPOT,\r\n            flipY = false\r\n        } = config;\r\n\r\n        this.minFilter = minFilter;\r\n        this.magFilter = magFilter;\r\n        this.wrapS = wrapS;\r\n        this.wrapT = wrapT;\r\n        this.generateMipmap = generateMipmap;\r\n        this.flipY = flipY;\r\n        this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\r\n\r\n        if (framebuffer)\r\n        {\r\n            this.framebuffer = framebuffer;\r\n        }\r\n\r\n        if (depthbuffer)\r\n        {\r\n            this.depthbuffer = depthbuffer;\r\n        }\r\n\r\n        if (texture)\r\n        {\r\n            this.texture = texture;\r\n        }\r\n        else\r\n        {\r\n            CreateGLTexture(this);\r\n        }\r\n    }\r\n\r\n    //  Needed?\r\n    setFilter (linear: boolean): void\r\n    {\r\n        if (this.texture)\r\n        {\r\n            SetGLTextureFilterMode(this.texture, linear);\r\n        }\r\n    }\r\n\r\n    create (): WebGLTexture\r\n    {\r\n        const texture = this.texture;\r\n\r\n        if (texture)\r\n        {\r\n            DeleteGLTexture(texture);\r\n        }\r\n\r\n        return CreateGLTexture(this);\r\n    }\r\n\r\n    update (): WebGLTexture\r\n    {\r\n        const texture = this.texture;\r\n\r\n        if (!texture)\r\n        {\r\n            return CreateGLTexture(this);\r\n        }\r\n        else\r\n        {\r\n            return UpdateGLTexture(this);\r\n        }\r\n    }\r\n\r\n    setIndex (index: number): void\r\n    {\r\n        this.dirtyIndex = (index !== this.index);\r\n        this.index = index;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        DeleteGLTexture(this.texture);\r\n        DeleteFramebuffer(this.framebuffer);\r\n\r\n        this.parent = null;\r\n        this.texture = null;\r\n        this.framebuffer = null;\r\n    }\r\n}\r\n", "import { BindingQueue } from '../../BindingQueue';\r\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\r\n\r\nexport function ProcessBindingQueue (): void\r\n{\r\n    const queue = BindingQueue.get();\r\n\r\n    queue.forEach(entry =>\r\n    {\r\n        const { texture, glConfig } = entry;\r\n\r\n        if (!texture.binding)\r\n        {\r\n            texture.binding = new GLTextureBinding(texture, glConfig);\r\n        }\r\n    });\r\n\r\n    BindingQueue.clear();\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetMaxTextures (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.MAX_TEXTURES);\r\n}\r\n", "import { gl } from '../GL';\r\n\r\n//  From Pixi v5\r\n\r\nconst fragTemplate = [\r\n    'precision mediump float;',\r\n    'void main(void){',\r\n    'float test = 0.1;',\r\n    '%forloop%',\r\n    'gl_FragColor = vec4(0.0);',\r\n    '}'\r\n].join('\\n');\r\n\r\nfunction GenerateSrc (maxIfs: number): string\r\n{\r\n    let src = '';\r\n\r\n    for (let i = 0; i < maxIfs; ++i)\r\n    {\r\n        if (i > 0)\r\n        {\r\n            src += '\\nelse ';\r\n        }\r\n\r\n        if (i < maxIfs - 1)\r\n        {\r\n            src += `if(test == ${i}.0){}`;\r\n        }\r\n    }\r\n\r\n    return src;\r\n}\r\n\r\nexport function CheckShaderMaxIfStatements (maxIfs: number): number\r\n{\r\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true)\r\n    {\r\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, GenerateSrc(maxIfs));\r\n\r\n        gl.shaderSource(shader, fragmentSrc);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\r\n        {\r\n            maxIfs = (maxIfs / 2) | 0;\r\n        }\r\n        else\r\n        {\r\n            // valid!\r\n            break;\r\n        }\r\n    }\r\n\r\n    return maxIfs;\r\n}\r\n", "import { GetMaxTextures, SetMaxTextures } from '../../../config/maxtextures/';\r\n\r\nimport { CheckShaderMaxIfStatements } from '../shaders/CheckShaderMaxIfStatements';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { gl } from '../GL';\r\n\r\n//  As per the WebGL spec, the browser should always support at least 8 texture units\r\n\r\nexport function CreateTempTextures (renderPass: IRenderPass): void\r\n{\r\n    let maxGPUTextures: number = CheckShaderMaxIfStatements(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));\r\n\r\n    const maxConfigTextures = GetMaxTextures();\r\n\r\n    if (maxConfigTextures === 0 || (maxConfigTextures > 0 && maxConfigTextures > maxGPUTextures))\r\n    {\r\n        //  Insert gpu limit into config value\r\n        SetMaxTextures(maxGPUTextures);\r\n    }\r\n    else if (maxConfigTextures > 0 && maxConfigTextures < maxGPUTextures)\r\n    {\r\n        //  Limit to config setting, or 8, whichever is higher\r\n        maxGPUTextures = Math.max(8, maxConfigTextures);\r\n    }\r\n\r\n    const tempTextures = renderPass.tempTextures;\r\n\r\n    if (tempTextures.length)\r\n    {\r\n        tempTextures.forEach(texture =>\r\n        {\r\n            gl.deleteTexture(texture);\r\n        });\r\n    }\r\n\r\n    const index = [];\r\n\r\n    //  Create temp textures to stop WebGL errors on mac os\r\n    for (let texturesIndex: number = 0; texturesIndex < maxGPUTextures; texturesIndex++)\r\n    {\r\n        const tempTexture = gl.createTexture();\r\n\r\n        gl.activeTexture(gl.TEXTURE0 + texturesIndex);\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, tempTexture);\r\n\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([ 0, 0, 255, 255 ]));\r\n\r\n        tempTextures[texturesIndex] = tempTexture;\r\n\r\n        index.push(texturesIndex);\r\n    }\r\n\r\n    renderPass.maxTextures = maxGPUTextures;\r\n\r\n    renderPass.textureIndex = index;\r\n\r\n    //  ID Zero is reserved for FBO Textures\r\n    renderPass.currentActiveTexture = 1;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetBatchSize (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.BATCH_SIZE);\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteGLBuffer (buffer: WebGLBuffer): void\r\n{\r\n    if (gl.isBuffer(buffer))\r\n    {\r\n        gl.deleteBuffer(buffer);\r\n    }\r\n}\r\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\r\nimport { IVertexBuffer } from './IVertexBuffer';\r\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\r\nimport { gl } from '../GL';\r\n\r\nexport class VertexBuffer implements IVertexBuffer\r\n{\r\n    /**\r\n     * Maximum number of entries per batch before a flush takes place.\r\n     * For a Mesh, this is the number of triangles / faces in the vertex buffer.\r\n     * Typically each face consists of 3 verticies.\r\n     *\r\n     * @type {number}\r\n     */\r\n    batchSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, per entry in the array buffer.\r\n     *\r\n     * @type {number}\r\n     */\r\n    dataSize: number;\r\n\r\n    /**\r\n     * The amount of elements / floats a single vertex consists of.\r\n     *\r\n     * The default is 6:\r\n     *\r\n     * position (x,y - 2 floats)\r\n     * texture coord (x,y - 2 floats)\r\n     * texture index (uint)\r\n     * packed color (uint)\r\n     *\r\n     * @type {number}\r\n     */\r\n    vertexElementSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of a single vertex in the array buffer.\r\n     *\r\n     * This is `vertexElementSize * dataSize`.\r\n     *\r\n     * @type {number}\r\n     */\r\n    vertexByteSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of a single entry in the array buffer.\r\n     *\r\n     * This is `vertexByteSize * 4` for a quad.\r\n     *\r\n     * @type {number}\r\n     */\r\n    entryByteSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of the Array Buffer.\r\n     *\r\n     * This is `batchSize * entryByteSize`\r\n     *\r\n     * @type {number}\r\n     */\r\n    bufferByteSize: number;\r\n\r\n    /**\r\n     * The Array Buffer.\r\n     *\r\n     * @type {ArrayBuffer}\r\n     */\r\n    data: ArrayBuffer;\r\n\r\n    /**\r\n     * Float32 View of the Array Buffer.\r\n     *\r\n     * @type {Float32Array}\r\n     */\r\n    vertexViewF32: Float32Array;\r\n\r\n    /**\r\n     * Uint32 View of the Array Buffer.\r\n     *\r\n     * @type {Uint32Array}\r\n     */\r\n    vertexViewU32: Uint32Array;\r\n\r\n    /**\r\n     * The data array buffer.\r\n     *\r\n     * @type {WebGLBuffer}\r\n     */\r\n    vertexBuffer: WebGLBuffer;\r\n\r\n    indexed: boolean = false;\r\n\r\n    isDynamic: boolean = false;\r\n\r\n    /**\r\n     * The total number of entries added to the buffer so far, or reserved to be added.\r\n     *\r\n     * This is the total number of indices / verticies, not faces.\r\n     * Typically there are 3 verts per face, so this value is usually batchSize x 3 for a Mesh.\r\n     *\r\n     * @type {number}\r\n     */\r\n    count: number = 0;\r\n\r\n    /**\r\n     * The current buffer offset.\r\n     *\r\n     * @type {number}\r\n     */\r\n    offset: number = 0;\r\n\r\n    elementsPerEntry: number;\r\n\r\n    constructor (config: IVertexBufferConfig = {})\r\n    {\r\n        const {\r\n            batchSize = 1,\r\n            dataSize = 4,\r\n            isDynamic = true,\r\n            elementsPerEntry = 4,\r\n            vertexElementSize = 6\r\n        } = config;\r\n\r\n        this.batchSize = batchSize;\r\n        this.dataSize = dataSize;\r\n        this.vertexElementSize = vertexElementSize;\r\n        this.isDynamic = isDynamic;\r\n        this.elementsPerEntry = elementsPerEntry;\r\n\r\n        //  Derive the remaining values\r\n        this.vertexByteSize = vertexElementSize * dataSize;\r\n        this.entryByteSize = this.vertexByteSize * elementsPerEntry;\r\n        this.bufferByteSize = batchSize * this.entryByteSize;\r\n\r\n        this.create();\r\n    }\r\n\r\n    resize (batchSize: number): void\r\n    {\r\n        this.batchSize = batchSize;\r\n        this.bufferByteSize = batchSize * this.entryByteSize;\r\n\r\n        if (this.vertexBuffer)\r\n        {\r\n            DeleteGLBuffer(this.vertexBuffer);\r\n        }\r\n\r\n        this.create();\r\n    }\r\n\r\n    create (): void\r\n    {\r\n        const data = new ArrayBuffer(this.bufferByteSize);\r\n\r\n        this.data = data;\r\n\r\n        this.vertexViewF32 = new Float32Array(data);\r\n        this.vertexViewU32 = new Uint32Array(data);\r\n\r\n        this.vertexBuffer = gl.createBuffer();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n\r\n        const type = (this.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, data, type);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    }\r\n\r\n    add (count: number): void\r\n    {\r\n        this.count += count;\r\n        this.offset += (this.vertexElementSize * count);\r\n    }\r\n\r\n    reset (): void\r\n    {\r\n        this.count = 0;\r\n        this.offset = 0;\r\n    }\r\n\r\n    canContain (count: number): boolean\r\n    {\r\n        return ((this.count + count) <= this.batchSize);\r\n    }\r\n\r\n    free (): number\r\n    {\r\n        return Math.max(0, 1 - (this.count / this.batchSize));\r\n    }\r\n\r\n    bind (): void\r\n    {\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        DeleteGLBuffer(this.vertexBuffer);\r\n\r\n        this.data = null;\r\n        this.vertexViewF32 = null;\r\n        this.vertexViewU32 = null;\r\n        this.vertexBuffer = null;\r\n    }\r\n}\r\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\r\nimport { IIndexedVertexBuffer } from './IIndexedVertexBuffer';\r\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\r\nimport { VertexBuffer } from './VertexBuffer';\r\nimport { gl } from '../GL';\r\n\r\nexport class IndexedVertexBuffer extends VertexBuffer implements IIndexedVertexBuffer\r\n{\r\n    /**\r\n     * The size, in bytes, per entry in the element index array.\r\n     *\r\n     * @type {number}\r\n     */\r\n    indexSize: number;\r\n\r\n    /**\r\n     * The size, in quantity of elements, of a single entry in the element index array.\r\n     *\r\n     * This is `vertexElementSize * 4` for a quad.\r\n     *\r\n     * @type {number}\r\n     */\r\n    entryElementSize: number;\r\n\r\n    /**\r\n     * The total number of entries per entry in the element index array.\r\n     *\r\n     * For a quad, the IBO contains 6 entries per entry:\r\n     *\r\n     * 0, 1, 2\r\n     * 2, 3, 0\r\n     *\r\n     * @type {number}\r\n     */\r\n    entryIndexSize: number;\r\n\r\n    /**\r\n     * The Element Array Buffer.\r\n     *\r\n     * @type {Uint16Array}\r\n     */\r\n    index: Uint16Array;\r\n\r\n    /**\r\n     * The element array buffer.\r\n     *\r\n     * @type {WebGLBuffer}\r\n     */\r\n    indexBuffer: WebGLBuffer;\r\n\r\n    indexLayout: number[];\r\n\r\n    constructor (config: IVertexBufferConfig = {})\r\n    {\r\n        super(config);\r\n\r\n        const {\r\n            indexSize = 4,\r\n            entryIndexSize = 6,\r\n            indexLayout = null\r\n        } = config;\r\n\r\n        this.indexed = true;\r\n\r\n        this.indexSize = indexSize;\r\n        this.entryIndexSize = entryIndexSize;\r\n\r\n        //  Derive the remaining values\r\n        this.entryElementSize = this.vertexElementSize * this.elementsPerEntry;\r\n\r\n        const seededIndexBuffer = [];\r\n\r\n        if (indexLayout)\r\n        {\r\n            this.indexLayout = indexLayout;\r\n\r\n            //  Seed the index buffer\r\n            for (let i = 0; i < (this.batchSize * indexSize); i += indexSize)\r\n            {\r\n                for (let c = 0; c < indexLayout.length; c++)\r\n                {\r\n                    seededIndexBuffer.push(i + indexLayout[c]);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.create();\r\n        this.createIndexBuffer(seededIndexBuffer);\r\n    }\r\n\r\n    createIndexBuffer (seededIndex: number[]): void\r\n    {\r\n        this.index = new Uint16Array(seededIndex);\r\n\r\n        this.indexBuffer = gl.createBuffer();\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.index, gl.STATIC_DRAW);\r\n\r\n        //  Free memory\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        seededIndex = [];\r\n    }\r\n\r\n    bind (): void\r\n    {\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        super.destroy();\r\n\r\n        DeleteGLBuffer(this.indexBuffer);\r\n\r\n        this.index = null;\r\n        this.indexLayout = null;\r\n        this.indexBuffer = null;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if an array can be used as a matrix.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows) have the same length. There must be at least two rows:\r\n *\r\n * ```\r\n *    [\r\n *        [ 1, 1, 1, 1, 1, 1 ],\r\n *        [ 2, 0, 0, 0, 0, 4 ],\r\n *        [ 2, 0, 1, 2, 0, 4 ],\r\n *        [ 2, 0, 3, 4, 0, 4 ],\r\n *        [ 2, 0, 0, 0, 0, 4 ],\r\n *        [ 3, 3, 3, 3, 3, 3 ]\r\n *    ]\r\n * ```\r\n */\r\nexport function CheckMatrix (matrix: unknown[][]): boolean\r\n{\r\n    if (!Array.isArray(matrix) || matrix.length < 2 || !Array.isArray(matrix[0]))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    //  How long is the first row?\r\n    const size = matrix[0].length;\r\n\r\n    //  Validate the rest of the rows are the same length\r\n    for (let i = 1; i < matrix.length; i++)\r\n    {\r\n        if (matrix[i].length !== size)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { CheckMatrix } from './CheckMatrix';\r\n\r\n/**\r\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\r\n */\r\nexport function MatrixToString (matrix: unknown[][]): string\r\n{\r\n    let str = '';\r\n\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return str;\r\n    }\r\n\r\n    for (let r = 0; r < matrix.length; r++)\r\n    {\r\n        for (let c = 0; c < matrix[r].length; c++)\r\n        {\r\n            const cell = matrix[r][c].toString();\r\n\r\n            if (cell !== 'undefined')\r\n            {\r\n                str = str.padEnd(2, cell);\r\n            }\r\n            else\r\n            {\r\n                str += '?';\r\n            }\r\n\r\n            if (c < matrix[r].length - 1)\r\n            {\r\n                str += ' |';\r\n            }\r\n        }\r\n\r\n        if (r < matrix.length - 1)\r\n        {\r\n            str += '\\n';\r\n\r\n            for (let i = 0; i < matrix[r].length; i++)\r\n            {\r\n                str += '---';\r\n\r\n                if (i < matrix[r].length - 1)\r\n                {\r\n                    str += '+';\r\n                }\r\n            }\r\n\r\n            str += '\\n';\r\n        }\r\n\r\n    }\r\n\r\n    return str;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Reverses the columns in the given Array Matrix.\r\n */\r\nexport function ReverseColumns (matrix: unknown[][]): unknown[][]\r\n{\r\n    return matrix.reverse();\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Reverses the rows in the given Array Matrix.\r\n */\r\nexport function ReverseRows (matrix: unknown[][]): unknown[][]\r\n{\r\n    for (let i = 0; i < matrix.length; i++)\r\n    {\r\n        matrix[i].reverse();\r\n    }\r\n\r\n    return matrix;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Transposes the elements of the given matrix (array of arrays).\r\n *\r\n * The transpose of a matrix is a new matrix whose rows are the columns of the original.\r\n */\r\nexport function TransposeMatrix (matrix: unknown[][]): unknown[][]\r\n{\r\n    const sourceRowCount = matrix.length;\r\n    const sourceColCount = matrix[0].length;\r\n\r\n    const result = new Array(sourceColCount);\r\n\r\n    for (let i = 0; i < sourceColCount; i++)\r\n    {\r\n        result[i] = new Array(sourceRowCount);\r\n\r\n        for (let j = sourceRowCount - 1; j > -1; j--)\r\n        {\r\n            result[i][j] = matrix[j][i];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { CheckMatrix } from './CheckMatrix';\r\nimport { TransposeMatrix } from './TransposeMatrix';\r\n\r\n/**\r\n * Rotates the array matrix based on the given rotation value.\r\n *\r\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\r\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\r\n *\r\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\r\n */\r\nexport function RotateMatrix (matrix: unknown[][], direction: number | string = 90): unknown[][]\r\n{\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return matrix;\r\n    }\r\n\r\n    if (typeof direction !== 'string')\r\n    {\r\n        direction = ((direction % 360) + 360) % 360;\r\n    }\r\n\r\n    if (direction === 90 || direction === -270 || direction === 'rotateLeft')\r\n    {\r\n        matrix = TransposeMatrix(matrix);\r\n        matrix.reverse();\r\n    }\r\n    else if (direction === -90 || direction === 270 || direction === 'rotateRight')\r\n    {\r\n        matrix.reverse();\r\n        matrix = TransposeMatrix(matrix);\r\n    }\r\n    else if (Math.abs(direction as number) === 180 || direction === 'rotate180')\r\n    {\r\n        for (let i = 0; i < matrix.length; i++)\r\n        {\r\n            matrix[i].reverse();\r\n        }\r\n\r\n        matrix.reverse();\r\n    }\r\n\r\n    return matrix;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RotateMatrix } from './RotateMatrix';\r\n\r\n/**\r\n * Rotates the array matrix 180 degrees.\r\n *\r\n * @function Phaser.Utils.Array.Matrix.Rotate180\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nexport function Rotate180 (matrix: unknown[][]): unknown[][]\r\n{\r\n    return RotateMatrix(matrix, 180);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RotateMatrix } from './RotateMatrix';\r\n\r\n/**\r\n * Rotates the array matrix to the left (or 90 degrees)\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateLeft\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nexport function RotateLeft (matrix: unknown[][]): unknown[][]\r\n{\r\n    return RotateMatrix(matrix, 90);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RotateMatrix } from './RotateMatrix';\r\n\r\n/**\r\n * Rotates the array matrix to the left (or -90 degrees)\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateRight\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nexport function RotateRight (matrix: unknown[][]): unknown[][]\r\n{\r\n    return RotateMatrix(matrix, -90);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Create an array representing the range of numbers (usually integers), between, and inclusive of,\r\n * the given `start` and `end` arguments. For example:\r\n *\r\n * `var array = numberArray(2, 4); // array = [2, 3, 4]`\r\n * `var array = numberArray(0, 9); // array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\r\n *\r\n * This is equivalent to `numberArrayStep(start, end, 1)`.\r\n *\r\n * You can optionally provide a prefix and / or suffix string. If given the array will contain\r\n * strings, not integers. For example:\r\n *\r\n * `var array = numberArray(1, 4, 'Level '); // array = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]`\r\n * `var array = numberArray(5, 7, 'HD-', '.png'); // array = [\"HD-5.png\", \"HD-6.png\", \"HD-7.png\"]`\r\n *\r\n * @param {number} start - The minimum value the array starts with.\r\n * @param {number} end - The maximum value the array contains.\r\n * @param {string} [prefix] - Optional prefix to place before the number. If provided the array will contain strings, not integers.\r\n * @param {string} [suffix] - Optional suffix to place after the number. If provided the array will contain strings, not integers.\r\n *\r\n * @return {(number[]|string[])} The array of number values, or strings if a prefix or suffix was provided.\r\n */\r\nexport function NumberArray (start: number, end: number, prefix?: string, suffix?: string): (string | number)[]\r\n{\r\n    const result: (string | number)[] = [];\r\n\r\n    for (let i = start; i <= end; i++)\r\n    {\r\n        if (prefix || suffix)\r\n        {\r\n            let key = (prefix) ? prefix + i.toString() : i.toString();\r\n\r\n            if (suffix)\r\n            {\r\n                key = key.concat(suffix);\r\n            }\r\n\r\n            result.push(key);\r\n        }\r\n        else\r\n        {\r\n            result.push(i);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Round a given number so it is further away from zero. That is, positive numbers are rounded up, and negative numbers are rounded down.\r\n *\r\n * @function Phaser.Math.RoundAwayFromZero\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The number to round.\r\n *\r\n * @return {number} The rounded number, rounded away from zero.\r\n */\r\nexport function RoundAwayFromZero (value: number): number\r\n{\r\n    // \"Opposite\" of truncate.\r\n    return (value > 0) ? Math.ceil(value) : Math.floor(value);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RoundAwayFromZero } from '../../math/RoundAwayFromZero';\r\n\r\n/**\r\n * Create an array of numbers (positive and/or negative) progressing from `start`\r\n * up to but not including `end` by advancing by `step`.\r\n *\r\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\r\n *\r\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\r\n * for forward compatibility make sure to pass in actual numbers.\r\n *\r\n * @example\r\n * NumberArrayStep(4);\r\n * // => [0, 1, 2, 3]\r\n *\r\n * NumberArrayStep(1, 5);\r\n * // => [1, 2, 3, 4]\r\n *\r\n * NumberArrayStep(0, 20, 5);\r\n * // => [0, 5, 10, 15]\r\n *\r\n * NumberArrayStep(0, -4, -1);\r\n * // => [0, -1, -2, -3]\r\n *\r\n * NumberArrayStep(1, 4, 0);\r\n * // => [1, 1, 1]\r\n *\r\n * NumberArrayStep(0);\r\n * // => []\r\n *\r\n * @param {number} [start=0] - The start of the range.\r\n * @param {number} [end=null] - The end of the range.\r\n * @param {number} [step=1] - The value to increment or decrement by.\r\n *\r\n * @return {number[]} The array of number values.\r\n */\r\nexport function NumberArrayStep (start: number, end: number, step: number): number[]\r\n{\r\n    const result: number[] = [];\r\n\r\n    const total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\r\n\r\n    for (let i = 0; i < total; i++)\r\n    {\r\n        result.push(start);\r\n\r\n        start += step;\r\n    }\r\n\r\n    return result;\r\n}\r\n", "/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n/**\r\n * Converts an ArrayBuffer into a base64 string.\r\n *\r\n * The resulting string can optionally be a data uri if the `mediaType` argument is provided.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs for more details.\r\n *\r\n * @function Phaser.Utils.Base64.ArrayBufferToBase64\r\n * @since 3.18.0\r\n *\r\n * @param {ArrayBuffer} arrayBuffer - The Array Buffer to encode.\r\n * @param {string} [mediaType] - An optional media type, i.e. `audio/ogg` or `image/jpeg`. If included the resulting string will be a data URI.\r\n *\r\n * @return {string} The base64 encoded Array Buffer.\r\n */\r\nexport function ArrayBufferToBase64 (arrayBuffer: ArrayBuffer, mediaType: string): string\r\n{\r\n    const bytes = new Uint8Array(arrayBuffer);\r\n    const len = bytes.length;\r\n\r\n    let base64 = (mediaType) ? 'data:' + mediaType + ';base64,' : '';\r\n\r\n    for (let i = 0; i < len; i += 3)\r\n    {\r\n        base64 += chars[bytes[i] >> 2];\r\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\r\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\r\n        base64 += chars[bytes[i + 2] & 63];\r\n    }\r\n\r\n    if ((len % 3) === 2)\r\n    {\r\n        base64 = base64.substring(0, base64.length - 1) + '=';\r\n    }\r\n    else if (len % 3 === 1)\r\n    {\r\n        base64 = base64.substring(0, base64.length - 2) + '==';\r\n    }\r\n\r\n    return base64;\r\n}\r\n", "/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n//  Use a lookup table to find the index.\r\nconst lookup = new Uint8Array(256);\r\n\r\nfor (let i = 0; i < chars.length; i++)\r\n{\r\n    lookup[chars.charCodeAt(i)] = i;\r\n}\r\n\r\n/**\r\n * Converts a base64 string, either with or without a data uri, into an Array Buffer.\r\n *\r\n * @function Phaser.Utils.Base64.Base64ToArrayBuffer\r\n * @since 3.18.0\r\n *\r\n * @param {string} base64 - The base64 string to be decoded. Can optionally contain a data URI header, which will be stripped out prior to decoding.\r\n *\r\n * @return {ArrayBuffer} An ArrayBuffer decoded from the base64 data.\r\n */\r\nexport function Base64ToArrayBuffer (base64: string): ArrayBuffer\r\n{\r\n    //  Is it a data uri? if so, strip the header away\r\n    base64 = base64.substr(base64.indexOf(',') + 1);\r\n\r\n    const len = base64.length;\r\n    let bufferLength = len * 0.75;\r\n    let p = 0;\r\n    let encoded1;\r\n    let encoded2;\r\n    let encoded3;\r\n    let encoded4;\r\n\r\n    if (base64[len - 1] === '=')\r\n    {\r\n        bufferLength--;\r\n\r\n        if (base64[len - 2] === '=')\r\n        {\r\n            bufferLength--;\r\n        }\r\n    }\r\n\r\n    const arrayBuffer = new ArrayBuffer(bufferLength);\r\n    const bytes = new Uint8Array(arrayBuffer);\r\n\r\n    for (let i = 0; i < len; i += 4)\r\n    {\r\n        encoded1 = lookup[base64.charCodeAt(i)];\r\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\r\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\r\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\r\n\r\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\r\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\r\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\r\n    }\r\n\r\n    return arrayBuffer;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Capitalizes the first letter of a string if there is one.\r\n * @example\r\n * UppercaseFirst('abc');\r\n * // returns 'Abc'\r\n * @example\r\n * UppercaseFirst('the happy family');\r\n * // returns 'The happy family'\r\n * @example\r\n * UppercaseFirst('');\r\n * // returns ''\r\n *\r\n * @function Phaser.Utils.String.UppercaseFirst\r\n * @since 3.0.0\r\n *\r\n * @param {string} str - The string to capitalize.\r\n *\r\n * @return {string} A new string, same as the first, but with the first letter capitalized.\r\n */\r\nexport function UppercaseFirst (str: string): string\r\n{\r\n    return str && str[0].toUpperCase() + str.slice(1);\r\n}\r\n", "export function NOOP (): void\r\n{\r\n    //  No-op\r\n}\r\n", "import { NOOP } from '../../utils';\r\n\r\n//  4x4 Matrix in column-major format\r\n\r\n/**\r\n * data[0] = m00\r\n * data[1] = m01\r\n * data[2] = m02\r\n * data[3] = m03\r\n * data[4] = m10\r\n * data[5] = m11\r\n * data[6] = m12\r\n * data[7] = m13\r\n * data[8] = m20\r\n * data[9] = m21\r\n * data[10] = m22\r\n * data[11] = m23\r\n * data[12] = m30\r\n * data[13] = m31\r\n * data[14] = m32\r\n * data[15] = m33\r\n */\r\n\r\nexport class Matrix4\r\n{\r\n    data: Float32Array;\r\n\r\n    onChange: (mat4: Matrix4) => void;\r\n\r\n    constructor (src?: Matrix4 | Float32List)\r\n    {\r\n        const data = new Float32Array(16);\r\n\r\n        this.data = data;\r\n        this.onChange = NOOP;\r\n\r\n        if (src)\r\n        {\r\n            if (Array.isArray(src))\r\n            {\r\n                this.fromArray(src);\r\n            }\r\n            else\r\n            {\r\n                this.fromArray((src as Matrix4).data);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            data[0] = 1;\r\n            data[5] = 1;\r\n            data[10] = 1;\r\n            data[15] = 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param m00 - 1st value of 1st row\r\n     * @param m01 - 2nd value of 1st row\r\n     * @param m02 - 3rd value of 1st row\r\n     * @param m03 - 4th value of 1st row\r\n     * @param m10 - 1st value of 2nd row\r\n     * @param m11 - 2nd value of 2nd row\r\n     * @param m12 - 3rd value of 2nd row\r\n     * @param m13 - 4th value of 2nd row\r\n     * @param m20 - 1st value of 3rd row\r\n     * @param m21 - 2nd value of 3rd row\r\n     * @param m22 - 3rd value of 3rd row\r\n     * @param m23 - 4th value of 3rd row\r\n     * @param m30 - 1st value of 4th row\r\n     * @param m31 - 2nd value of 4th row\r\n     * @param m32 - 3rd value of 4th row\r\n     * @param m33 - 4th value of 4th row\r\n     */\r\n    set (m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number): this\r\n    {\r\n        const data = this.data;\r\n\r\n        data[ 0 ] = m00;\r\n        data[ 1 ] = m01;\r\n        data[ 2 ] = m02;\r\n        data[ 3 ] = m03;\r\n\r\n        data[ 4 ] = m10;\r\n        data[ 5 ] = m11;\r\n        data[ 6 ] = m12;\r\n        data[ 7 ] = m13;\r\n\r\n        data[ 8 ] = m20;\r\n        data[ 9 ] = m21;\r\n        data[ 10 ] = m22;\r\n        data[ 11 ] = m23;\r\n\r\n        data[ 12 ] = m30;\r\n        data[ 13 ] = m31;\r\n        data[ 14 ] = m32;\r\n        data[ 15 ] = m33;\r\n\r\n        this.onChange(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    toArray (dst: Float32List = [], index: number = 0): Float32List\r\n    {\r\n        const data = this.data;\r\n\r\n        for (let i = 0; i < 16; i++)\r\n        {\r\n            dst[ index + i ] = data[i];\r\n        }\r\n\r\n        return dst;\r\n    }\r\n\r\n    fromArray (src: Float32List, index: number = 0): this\r\n    {\r\n        const data = this.data;\r\n\r\n        for (let i = 0; i < 16; i++)\r\n        {\r\n            data[i] = src[ index + i ];\r\n        }\r\n\r\n        this.onChange(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    toString (): string\r\n    {\r\n        return '[ mat4=' + this.data.join(', ') + ' ]';\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.onChange = NOOP;\r\n        this.data = null;\r\n    }\r\n}\r\n", "import { Matrix4 } from './Matrix4';\r\n\r\n// Generates a orthogonal projection matrix with the given bounds\r\n\r\nexport function Mat4Ortho (left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix4 = new Matrix4()): Matrix4\r\n{\r\n    const lr = 1 / (left - right);\r\n    const bt = 1 / (bottom - top);\r\n    const nf = 1 / (near - far);\r\n\r\n    return out.set(\r\n        -2 * lr,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        -2 * bt,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        2 * nf,\r\n        0,\r\n        (left + right) * lr,\r\n        (top + bottom) * bt,\r\n        (far + near) * nf,\r\n        1\r\n    );\r\n}\r\n", "import { IVertexAttribPointer } from './IVertexAttribPointer';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateAttributes (program: WebGLProgram, config: Object): Map<string, IVertexAttribPointer>\r\n{\r\n    const attributes = new Map();\r\n\r\n    const defaultSettings =\r\n    {\r\n        size: 1,\r\n        type: gl.FLOAT,\r\n        normalized: false,\r\n        stride: 0,\r\n        offset: 0\r\n    };\r\n\r\n    const total = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n\r\n    for (let i = 0; i < total; i++)\r\n    {\r\n        const attrib = gl.getActiveAttrib(program, i);\r\n\r\n        if (!attrib)\r\n        {\r\n            break;\r\n        }\r\n\r\n        const name = attrib.name;\r\n\r\n        const index = gl.getAttribLocation(program, name);\r\n\r\n        gl.enableVertexAttribArray(index);\r\n\r\n        const setting = config.hasOwnProperty(name) ? config[name] : {};\r\n\r\n        const {\r\n\r\n            size = defaultSettings.size,\r\n            type = defaultSettings.type,\r\n            normalized = defaultSettings.normalized,\r\n            stride = defaultSettings.stride,\r\n            offset = defaultSettings.offset\r\n\r\n        } = setting;\r\n\r\n        attributes.set(name, { index, size, type, normalized, stride, offset });\r\n    }\r\n\r\n    return attributes;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteShaders (...shaders: WebGLShader[]): void\r\n{\r\n    shaders.forEach(shader =>\r\n    {\r\n        gl.deleteShader(shader);\r\n    });\r\n}\r\n", "import { DeleteShaders } from './DeleteShaders';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateProgram (...shaders: WebGLShader[]): WebGLProgram\r\n{\r\n    const program = gl.createProgram();\r\n\r\n    shaders.forEach(shader =>\r\n    {\r\n        gl.attachShader(program, shader);\r\n    });\r\n\r\n    gl.linkProgram(program);\r\n\r\n    const status = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n    if (!status)\r\n    {\r\n        const info = gl.getProgramInfoLog(program);\r\n\r\n        console.error(`Error linking program: ${info}`);\r\n\r\n        gl.deleteProgram(program);\r\n\r\n        DeleteShaders(...shaders);\r\n\r\n        return null;\r\n    }\r\n\r\n    return program;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateShader (source: string, type: GLenum): WebGLShader | null\r\n{\r\n    const shader = gl.createShader(type);\r\n\r\n    gl.shaderSource(shader, source);\r\n\r\n    gl.compileShader(shader);\r\n\r\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n    if (!status)\r\n    {\r\n        const info = gl.getShaderInfoLog(shader);\r\n\r\n        //  Adding line numbers idea borrowed from Gregg Tavares!\r\n        const sourceLines = source.split('\\n').map((line, index) =>\r\n        {\r\n            return `${index}: ${line}`;\r\n        });\r\n\r\n        console.error(`Error compiling shader: ${info}`, sourceLines.join('\\n'));\r\n\r\n        gl.deleteShader(shader);\r\n\r\n        return null;\r\n    }\r\n\r\n    return shader;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport type FloatSetter = (v: number) => void;\r\nexport type F32Setter = (v: Float32List) => void;\r\nexport type I32Setter = (v: Int32List) => void;\r\n\r\nexport function CreateUniformSetter (uniform: WebGLActiveInfo, location: WebGLUniformLocation, isArray: boolean = false): FloatSetter | F32Setter | I32Setter\r\n{\r\n    switch (uniform.type)\r\n    {\r\n        case gl.INT:\r\n        case gl.BOOL:\r\n        {\r\n            if (isArray)\r\n            {\r\n                return (v: Int32List): void =>\r\n                {\r\n                    gl.uniform1iv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1i(location, v);\r\n                };\r\n            }\r\n        }\r\n\r\n        case gl.INT_VEC2:\r\n        case gl.BOOL_VEC2:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform2iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.INT_VEC3:\r\n        case gl.BOOL_VEC3:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform3iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.INT_VEC4:\r\n        case gl.BOOL_VEC4:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform4iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT:\r\n        {\r\n            if (isArray)\r\n            {\r\n                return (v: Float32List): void =>\r\n                {\r\n                    gl.uniform1fv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1f(location, v);\r\n                };\r\n            }\r\n        }\r\n\r\n        case gl.FLOAT_VEC2:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform2fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_VEC3:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform3fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_VEC4:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform4fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT2:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix2fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT3:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix3fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT4:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix4fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.SAMPLER_2D:\r\n        case gl.SAMPLER_CUBE:\r\n        {\r\n            if (uniform.size > 1)\r\n            {\r\n                return (v: Int32List): void =>\r\n                {\r\n                    gl.uniform1iv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1i(location, v);\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { CreateUniformSetter } from './CreateUniformSetter';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateUniforms (program: WebGLProgram): Map<string, Function>\r\n{\r\n    const uniforms = new Map();\r\n\r\n    const total = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n    for (let i = 0; i < total; i++)\r\n    {\r\n        const uniform = gl.getActiveUniform(program, i);\r\n\r\n        let name = uniform.name;\r\n\r\n        if (name.startsWith('gl_') || name.startsWith('webgl_'))\r\n        {\r\n            //  Skip built-in uniforms\r\n            continue;\r\n        }\r\n\r\n        const location = gl.getUniformLocation(program, uniform.name);\r\n\r\n        if (location)\r\n        {\r\n            let isArray = false;\r\n\r\n            //  If uniform name has [0] at the end, remove it\r\n            if (name.substr(-3) === '[0]')\r\n            {\r\n                name = name.substr(0, name.length - 3);\r\n\r\n                isArray = (uniform.size > 1);\r\n            }\r\n\r\n            uniforms.set(name, CreateUniformSetter(uniform, location, isArray));\r\n        }\r\n    }\r\n\r\n    return uniforms;\r\n}\r\n", "const BYTE                   = 0x1400;\r\nconst UNSIGNED_BYTE          = 0x1401;\r\nconst SHORT                  = 0x1402;\r\nconst UNSIGNED_SHORT         = 0x1403;\r\nconst INT                    = 0x1404;\r\nconst UNSIGNED_INT           = 0x1405;\r\nconst FLOAT                  = 0x1406;\r\nconst REPEAT                 = 0x2901;  // eslint-disable-line\r\nconst CLAMP_TO_EDGE          = 0x812F;\r\nconst MIRRORED_REPEAT        = 0x8370;  // eslint-disable-line\r\nconst NEAREST                = 0x2600;  // eslint-disable-line\r\nconst LINEAR                 = 0x2601;\r\nconst NEAREST_MIPMAP_NEAREST = 0x2700;  // eslint-disable-line\r\nconst LINEAR_MIPMAP_NEAREST  = 0x2701;  // eslint-disable-line\r\nconst NEAREST_MIPMAP_LINEAR  = 0x2702;  // eslint-disable-line\r\nconst LINEAR_MIPMAP_LINEAR   = 0x2703;  // eslint-disable-line\r\n\r\nexport {\r\n    BYTE,\r\n    UNSIGNED_BYTE,\r\n    SHORT,\r\n    UNSIGNED_SHORT,\r\n    INT,\r\n    UNSIGNED_INT,\r\n    FLOAT,\r\n    REPEAT,\r\n    CLAMP_TO_EDGE,\r\n    MIRRORED_REPEAT,\r\n    NEAREST,\r\n    LINEAR,\r\n    NEAREST_MIPMAP_NEAREST,\r\n    LINEAR_MIPMAP_NEAREST,\r\n    NEAREST_MIPMAP_LINEAR,\r\n    LINEAR_MIPMAP_LINEAR\r\n};\r\n", "import * as GL_CONST from '../GL_CONST';\r\n\r\n// size = 8\r\n// size = 8, offset = position\r\n// size = 4, offset = position + tex coord\r\n// size = 4, offset = position + tex coord + index\r\n\r\nexport const DefaultQuadAttributes =\r\n{\r\n    aVertexPosition: { size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 0 },\r\n    aTextureCoord: { size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 8 },\r\n    aTextureId: { size: 1, type: GL_CONST.FLOAT, normalized: false, offset: 16 },\r\n    aTintColor: { size: 4, type: GL_CONST.UNSIGNED_BYTE, normalized: true, offset: 20 }\r\n};\r\n", "export const DefaultQuadUniforms =\r\n{\r\n    uProjectionMatrix: new Float32Array(),\r\n    uCameraMatrix: new Float32Array(),\r\n    uTexture: 0\r\n};\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateDepthBuffer (framebuffer: WebGLFramebuffer, textureWidth: number, textureHeight: number): WebGLRenderbuffer\r\n{\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    const depthBuffer = gl.createRenderbuffer();\r\n\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\r\n\r\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureWidth, textureHeight);\r\n\r\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n    return depthBuffer;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateFramebuffer (texture: WebGLTexture, attachment?: GLenum): WebGLFramebuffer\r\n{\r\n    if (!attachment)\r\n    {\r\n        attachment = gl.COLOR_ATTACHMENT0;\r\n    }\r\n\r\n    const framebuffer = gl.createFramebuffer();\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n    return framebuffer;\r\n}\r\n", "export const SINGLE_QUAD_FRAG =\r\n`#define SHADER_NAME SINGLE_QUAD_FRAG\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture;\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color = texture2D(uTexture, vTextureCoord);\r\n\r\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\r\n}`;\r\n", "export const SINGLE_QUAD_VERT =\r\n`#define SHADER_NAME SINGLE_QUAD_VERT\r\n\r\nprecision highp float;\r\n\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute float aTextureId;\r\nattribute vec4 aTintColor;\r\n\r\nuniform mat4 uProjectionMatrix;\r\nuniform mat4 uCameraMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nvoid main (void)\r\n{\r\n    vTextureCoord = aTextureCoord;\r\n    vTextureId = aTextureId;\r\n    vTintColor = aTintColor;\r\n\r\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\r\n}`;\r\n", "import { IFrame } from './IFrame';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { Texture } from './Texture';\r\nimport { Vertex } from '../components';\r\n\r\nexport class Frame implements IFrame\r\n{\r\n    texture: Texture;\r\n    key: string | number;\r\n\r\n    //  This is the actual area of the texture to draw to canvas / webgl, including any extruded data.\r\n    //  This is the same as the 'trimmed' + 'extruded' area from an atlas.\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    trimmed: boolean = false;\r\n\r\n    //  Original size of the image before being trimmed or added to an atlas (which can add extrude data to it).\r\n    sourceSizeWidth: number;\r\n    sourceSizeHeight: number;\r\n\r\n    //  The size of the image having been trimmed, before being added to the atlas (i.e. doesn't have any extrusion values in it)\r\n    spriteSourceSizeX: number;\r\n    spriteSourceSizeY: number;\r\n    spriteSourceSizeWidth: number;\r\n    spriteSourceSizeHeight: number;\r\n\r\n    pivot: { x: number; y: number };\r\n\r\n    u0: number;\r\n    v0: number;\r\n    u1: number;\r\n    v1: number;\r\n\r\n    constructor (texture: Texture, key: string | number, x: number, y: number, width: number, height: number)\r\n    {\r\n        this.texture = texture;\r\n        this.key = key;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n\r\n        this.updateUVs();\r\n    }\r\n\r\n    setPivot (x: number, y: number): void\r\n    {\r\n        this.pivot = { x, y };\r\n    }\r\n\r\n    setSize (width: number, height: number): void\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n\r\n        this.updateUVs();\r\n    }\r\n\r\n    setSourceSize (width: number, height: number): void\r\n    {\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n    }\r\n\r\n    setTrim (width: number, height: number, x: number, y: number, w: number, h: number): void\r\n    {\r\n        this.trimmed = true;\r\n\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n\r\n        this.spriteSourceSizeX = x;\r\n        this.spriteSourceSizeY = y;\r\n        this.spriteSourceSizeWidth = w;\r\n        this.spriteSourceSizeHeight = h;\r\n    }\r\n\r\n    getExtent (originX: number, originY: number): { left: number; right: number; top: number; bottom: number }\r\n    {\r\n        const sourceSizeWidth = this.sourceSizeWidth;\r\n        const sourceSizeHeight = this.sourceSizeHeight;\r\n\r\n        let left: number;\r\n        let right: number;\r\n        let top: number;\r\n        let bottom: number;\r\n\r\n        if (this.trimmed)\r\n        {\r\n            left = this.spriteSourceSizeX - (originX * sourceSizeWidth);\r\n            right = left + this.spriteSourceSizeWidth;\r\n\r\n            top = this.spriteSourceSizeY - (originY * sourceSizeHeight);\r\n            bottom = top + this.spriteSourceSizeHeight;\r\n        }\r\n        else\r\n        {\r\n            left = -originX * sourceSizeWidth;\r\n            right = left + sourceSizeWidth;\r\n\r\n            top = -originY * sourceSizeHeight;\r\n            bottom = top + sourceSizeHeight;\r\n        }\r\n\r\n        return { left, right, top, bottom };\r\n    }\r\n\r\n    copyToExtent (child: IGameObject): this\r\n    {\r\n        const originX = child.originX;\r\n        const originY = child.originY;\r\n\r\n        const sourceSizeWidth = this.sourceSizeWidth;\r\n        const sourceSizeHeight = this.sourceSizeHeight;\r\n\r\n        let x: number;\r\n        let y: number;\r\n        let width: number;\r\n        let height: number;\r\n\r\n        if (this.trimmed)\r\n        {\r\n            x = this.spriteSourceSizeX - (originX * sourceSizeWidth);\r\n            y = this.spriteSourceSizeY - (originY * sourceSizeHeight);\r\n\r\n            width = this.spriteSourceSizeWidth;\r\n            height = this.spriteSourceSizeHeight;\r\n        }\r\n        else\r\n        {\r\n            x = -originX * sourceSizeWidth;\r\n            y = -originY * sourceSizeHeight;\r\n\r\n            width = sourceSizeWidth;\r\n            height = sourceSizeHeight;\r\n        }\r\n\r\n        child.setExtent(x, y, width, height);\r\n\r\n        return this;\r\n    }\r\n\r\n    copyToVertices (vertices: Vertex[], offset: number = 0): this\r\n    {\r\n        const { u0, u1, v0, v1 } = this;\r\n\r\n        vertices[offset + 0].setUV(u0, v0);\r\n        vertices[offset + 1].setUV(u0, v1);\r\n        vertices[offset + 2].setUV(u1, v1);\r\n        vertices[offset + 3].setUV(u1, v0);\r\n\r\n        return this;\r\n    }\r\n\r\n    updateUVs (): void\r\n    {\r\n        const { x, y, width, height } = this;\r\n\r\n        const baseTextureWidth = this.texture.width;\r\n        const baseTextureHeight = this.texture.height;\r\n\r\n        this.u0 = x / baseTextureWidth;\r\n        this.v0 = y / baseTextureHeight;\r\n\r\n        this.u1 = (x + width) / baseTextureWidth;\r\n        this.v1 = (y + height) / baseTextureHeight;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.texture = null;\r\n    }\r\n}\r\n", "import { BindingQueue } from '../renderer/BindingQueue';\r\nimport { Frame } from './Frame';\r\nimport { IGLTextureBinding } from '../renderer/webgl1/textures/IGLTextureBinding';\r\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\r\nimport { ITexture } from './ITexture';\r\n\r\nexport class Texture implements ITexture\r\n{\r\n    //  Unique identifier of this Texture, if stored in the Texture Manager\r\n    key: string = '';\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    image: TexImageSource;\r\n\r\n    binding: IGLTextureBinding;\r\n\r\n    firstFrame: Frame;\r\n\r\n    frames: Map<string | number, Frame>;\r\n\r\n    data: unknown;\r\n\r\n    constructor (image?: TexImageSource, width?: number, height?: number, glConfig?: IGLTextureBindingConfig)\r\n    {\r\n        if (image)\r\n        {\r\n            width = image.width;\r\n            height = image.height;\r\n        }\r\n\r\n        this.image = image;\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.frames = new Map();\r\n\r\n        this.data = {};\r\n\r\n        this.addFrame('__BASE', 0, 0, width, height);\r\n\r\n        BindingQueue.add(this, glConfig);\r\n    }\r\n\r\n    addFrame (key: string | number, x: number, y: number, width: number, height: number): Frame\r\n    {\r\n        if (this.frames.has(key))\r\n        {\r\n            return null;\r\n        }\r\n\r\n        const frame = new Frame(this, key, x, y, width, height);\r\n\r\n        this.frames.set(key, frame);\r\n\r\n        if (!this.firstFrame || this.firstFrame.key === '__BASE')\r\n        {\r\n            this.firstFrame = frame;\r\n        }\r\n\r\n        return frame;\r\n    }\r\n\r\n    getFrame (key?: string | number | Frame): Frame\r\n    {\r\n        //  null, undefined, empty string, zero\r\n        if (!key)\r\n        {\r\n            return this.firstFrame;\r\n        }\r\n\r\n        if (key instanceof Frame)\r\n        {\r\n            key = key.key;\r\n        }\r\n\r\n        let frame: Frame = this.frames.get(key);\r\n\r\n        if (!frame)\r\n        {\r\n            console.warn(`Frame missing: ${key}`);\r\n\r\n            frame = this.firstFrame;\r\n        }\r\n\r\n        return frame;\r\n    }\r\n\r\n    setSize (width: number, height: number): void\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        const frame = this.frames.get('__BASE');\r\n\r\n        frame.setSize(width, height);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        if (this.binding)\r\n        {\r\n            this.binding.destroy();\r\n        }\r\n\r\n        this.frames.clear();\r\n\r\n        this.data = null;\r\n        this.image = null;\r\n        this.firstFrame = null;\r\n    }\r\n}\r\n", "import { GetHeight, GetResolution, GetWidth } from '../../../config/size/';\r\n\r\nimport { CreateAttributes } from './CreateAttributes';\r\nimport { CreateDepthBuffer } from '../fbo/CreateDepthBuffer';\r\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\r\nimport { CreateProgram } from './CreateProgram';\r\nimport { CreateShader } from './CreateShader';\r\nimport { CreateUniforms } from './CreateUniforms';\r\nimport { DefaultQuadAttributes } from './DefaultQuadAttributes';\r\nimport { DefaultQuadUniforms } from './DefaultQuadUniforms';\r\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\r\nimport { DeleteGLTexture } from '../textures/DeleteGLTexture';\r\nimport { DeleteShaders } from './DeleteShaders';\r\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from './IShader';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\r\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\r\nimport { SINGLE_QUAD_VERT } from '../glsl/SINGLE_QUAD_VERT';\r\nimport { Texture } from '../../../textures/Texture';\r\nimport { gl } from '../GL';\r\n\r\nexport class Shader implements IShader\r\n{\r\n    program: WebGLProgram;\r\n\r\n    attributes: Map<string, IVertexAttribPointer>;\r\n\r\n    uniforms: Map<string, unknown>;\r\n\r\n    uniformSetters: Map<string, Function>;\r\n\r\n    texture: Texture;\r\n\r\n    framebuffer: WebGLFramebuffer;\r\n\r\n    renderToFramebuffer: boolean = false;\r\n\r\n    renderToDepthbuffer: boolean = false;\r\n\r\n    constructor (config?: IShaderConfig)\r\n    {\r\n        if (config)\r\n        {\r\n            this.fromConfig(config);\r\n        }\r\n    }\r\n\r\n    fromConfig (config: IShaderConfig): void\r\n    {\r\n        const {\r\n            attributes = DefaultQuadAttributes,\r\n            fragmentShader = SINGLE_QUAD_FRAG,\r\n            height = GetHeight(),\r\n            renderToFramebuffer = false,\r\n            renderToDepthbuffer = false,\r\n            resolution = GetResolution(),\r\n            vertexShader = SINGLE_QUAD_VERT,\r\n            width = GetWidth(),\r\n            uniforms = DefaultQuadUniforms\r\n        } = config;\r\n\r\n        this.create(fragmentShader, vertexShader, uniforms, attributes);\r\n\r\n        if (renderToFramebuffer)\r\n        {\r\n            this.renderToFramebuffer = true;\r\n\r\n            const texture = new Texture(null, width * resolution, height * resolution);\r\n            const binding = new GLTextureBinding(texture);\r\n\r\n            texture.binding = binding;\r\n\r\n            binding.framebuffer = CreateFramebuffer(binding.texture);\r\n\r\n            if (renderToDepthbuffer)\r\n            {\r\n                this.renderToDepthbuffer = true;\r\n\r\n                binding.depthbuffer = CreateDepthBuffer(binding.framebuffer, texture.width, texture.height);\r\n            }\r\n\r\n            this.texture = texture;\r\n            this.framebuffer = binding.framebuffer;\r\n        }\r\n    }\r\n\r\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\r\n    {\r\n        const fragmentShader = CreateShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\r\n        const vertexShader = CreateShader(vertexShaderSource, gl.VERTEX_SHADER);\r\n\r\n        if (!fragmentShader || !vertexShader)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const program = CreateProgram(fragmentShader, vertexShader);\r\n\r\n        if (!program)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n        gl.useProgram(program);\r\n\r\n        this.program = program;\r\n\r\n        this.uniformSetters = CreateUniforms(program);\r\n\r\n        this.uniforms = new Map();\r\n\r\n        //  Copy starting values from the config object to the uniforms map\r\n        for (const [ key, value ] of Object.entries(uniforms))\r\n        {\r\n            this.uniforms.set(key, value);\r\n        }\r\n\r\n        this.attributes = CreateAttributes(program, attribs);\r\n\r\n        gl.useProgram(currentProgram);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    updateUniforms (renderPass: IRenderPass): void\r\n    {\r\n        //  Use this to set any extra uniform values prior to the bind\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        const uniforms = this.uniforms;\r\n\r\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\r\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\r\n\r\n        this.updateUniforms(renderPass);\r\n\r\n        return this.setUniforms(renderPass);\r\n    }\r\n\r\n    setUniform (key: string, value: unknown): void\r\n    {\r\n        const uniforms = this.uniforms;\r\n\r\n        if (uniforms.has(key))\r\n        {\r\n            uniforms.set(key, value);\r\n\r\n            const setter = this.uniformSetters.get(key);\r\n\r\n            setter(value);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    setUniforms (renderPass: IRenderPass): boolean\r\n    {\r\n        if (!this.program)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        gl.useProgram(this.program);\r\n\r\n        const uniforms = this.uniforms;\r\n\r\n        for (const [ name, setter ] of this.uniformSetters.entries())\r\n        {\r\n            setter(uniforms.get(name));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //  stride = vertexByteSize\r\n    setAttributes (renderPass: IRenderPass): void\r\n    {\r\n        if (this.program)\r\n        {\r\n            const stride = renderPass.currentVertexBuffer.vertexByteSize;\r\n\r\n            this.attributes.forEach(attrib =>\r\n            {\r\n                gl.vertexAttribPointer(attrib.index, attrib.size, attrib.type, attrib.normalized, stride, attrib.offset);\r\n            });\r\n        }\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        DeleteShaders(this.program);\r\n        DeleteGLTexture(this.texture);\r\n        DeleteFramebuffer(this.framebuffer);\r\n\r\n        this.uniforms.clear();\r\n        this.uniformSetters.clear();\r\n        this.attributes.clear();\r\n\r\n        this.program = null;\r\n        this.texture = null;\r\n        this.framebuffer = null;\r\n    }\r\n}\r\n", "import { DefaultQuadAttributes } from './DefaultQuadAttributes';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from './IShader';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { Shader } from './Shader';\r\n\r\nexport class QuadShader extends Shader implements IShader\r\n{\r\n    constructor (config: IShaderConfig = {})\r\n    {\r\n        const shaderConfig = config;\r\n\r\n        shaderConfig.attributes = (!shaderConfig.attributes) ? DefaultQuadAttributes : shaderConfig.attributes;\r\n\r\n        super(shaderConfig);\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        const uniforms = this.uniforms;\r\n\r\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\r\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\r\n\r\n        return super.bind(renderPass);\r\n    }\r\n}\r\n", "export const MULTI_QUAD_FRAG =\r\n`#define SHADER_NAME MULTI_QUAD_FRAG\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture[%count%];\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color;\r\n\r\n    %forloop%\r\n\r\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\r\n}`;\r\n", "import { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { MULTI_QUAD_FRAG } from '../glsl/MULTI_QUAD_FRAG';\r\nimport { QuadShader } from './QuadShader';\r\n\r\nexport class MultiTextureQuadShader extends QuadShader\r\n{\r\n    constructor (config: IShaderConfig = {})\r\n    {\r\n        if (!config.fragmentShader)\r\n        {\r\n            config.fragmentShader = MULTI_QUAD_FRAG;\r\n        }\r\n\r\n        super(config);\r\n    }\r\n\r\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\r\n    {\r\n        const maxTextures = GetMaxTextures();\r\n\r\n        let src = '';\r\n\r\n        for (let i = 1; i < maxTextures; i++)\r\n        {\r\n            if (i > 1)\r\n            {\r\n                src += '\\n\\telse ';\r\n            }\r\n\r\n            if (i < maxTextures - 1)\r\n            {\r\n                src += `if (vTextureId < ${i}.5)`;\r\n            }\r\n\r\n            src += '\\n\\t{';\r\n            src += `\\n\\t\\tcolor = texture2D(uTexture[${i}], vTextureCoord);`;\r\n            src += '\\n\\t}';\r\n        }\r\n\r\n        fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\r\n        fragmentShaderSource = fragmentShaderSource.replace(/%forloop%/gi, src);\r\n\r\n        super.create(fragmentShaderSource, vertexShaderSource, uniforms, attribs);\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        this.uniforms.set('uTexture', renderPass.textureIndex);\r\n\r\n        return super.bind(renderPass);\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\n\r\nexport function SetDefaultBlendMode (renderPass: IRenderPass, enable: boolean, sfactor?: number, dfactor?: number): void\r\n{\r\n    const entry = { enable, sfactor, dfactor };\r\n\r\n    //  The default entry always goes into index zero\r\n    renderPass.blendModeStack[0] = entry;\r\n\r\n    renderPass.currentBlendMode = entry;\r\n    renderPass.defaultBlendMode = entry;\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\n\r\nexport function SetDefaultFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer = null, viewport?: Rectangle): void\r\n{\r\n    const entry = { framebuffer, viewport };\r\n\r\n    //  The default entry always goes into index zero\r\n    renderPass.framebufferStack[0] = entry;\r\n\r\n    renderPass.currentFramebuffer = entry;\r\n    renderPass.defaultFramebuffer = entry;\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { IShader } from '../shaders/IShader';\r\n\r\nexport function SetDefaultShader (renderPass: IRenderPass, shader: IShader, textureID?: number): void\r\n{\r\n    const entry = { shader, textureID };\r\n\r\n    //  The default entry always goes into index zero\r\n    renderPass.shaderStack[0] = entry;\r\n\r\n    renderPass.currentShader = entry;\r\n    renderPass.defaultShader = entry;\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\r\n\r\nexport function SetDefaultVertexBuffer (renderPass: IRenderPass, buffer: IVertexBuffer): void\r\n{\r\n    //  The default entry always goes into index zero\r\n    renderPass.vertexBufferStack[0] = buffer;\r\n\r\n    renderPass.currentVertexBuffer = buffer;\r\n    renderPass.defaultVertexBuffer = buffer;\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\n\r\nexport function SetDefaultViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\r\n{\r\n    const entry = new Rectangle(x, y, width, height);\r\n\r\n    //  The default entry always goes into index zero\r\n    renderPass.viewportStack[0] = entry;\r\n\r\n    renderPass.currentViewport = entry;\r\n    renderPass.defaultViewport = entry;\r\n}\r\n", "import { Game } from './Game';\r\n\r\nexport let instance: Game;\r\nexport let frame: number = 0;\r\nexport let elapsed: number = 0;\r\n\r\nexport const GameInstance =\r\n{\r\n    get: (): Game =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (game: Game | undefined): void =>\r\n    {\r\n        instance = game;\r\n    },\r\n\r\n    getFrame: (): number =>\r\n    {\r\n        return frame;\r\n    },\r\n\r\n    setFrame: (current: number): void =>\r\n    {\r\n        frame = current;\r\n    },\r\n\r\n    getElapsed: (): number =>\r\n    {\r\n        return elapsed;\r\n    },\r\n\r\n    setElapsed: (current: number): void =>\r\n    {\r\n        elapsed = current;\r\n    }\r\n\r\n};\r\n", "import { Matrix4 } from './Matrix4';\r\n\r\nexport function Mat4Identity (matrix: Matrix4 = new Matrix4()): Matrix4\r\n{\r\n    return matrix.set(\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1\r\n    );\r\n}\r\n", "//  A Matrix2D contains six elements in a short-form of the 3x3 Matrix, with the last column ignored.\r\n\r\n//  |----|----|----|\r\n//  | a  | b  | 0  |\r\n//  |----|----|----|\r\n//  | c  | d  | 0  |\r\n//  |----|----|----|\r\n//  | tx | ty | 1  |\r\n//  |----|----|----|\r\n\r\nexport class Matrix2D\r\n{\r\n    a: number; // element 0\r\n    b: number; // element 1\r\n    c: number; // element 2\r\n    d: number; // element 3\r\n    tx: number; // element 4\r\n    ty: number; // element 5\r\n\r\n    /**\r\n     * Creates an instance of Matrix2D.\r\n     *\r\n     * @param {number} [a=1] - X scale.\r\n     * @param {number} [b=0] - X skew.\r\n     * @param {number} [c=0] - Y skew.\r\n     * @param {number} [d=1] - Y scale.\r\n     * @param {number} [tx=0] - X translation\r\n     * @param {number} [ty=0] - Y translation\r\n     * @memberof Matrix2D\r\n     */\r\n    constructor (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0)\r\n    {\r\n        this.set(a, b, c, d, tx, ty);\r\n    }\r\n\r\n    set (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0): this\r\n    {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.tx = tx;\r\n        this.ty = ty;\r\n\r\n        return this;\r\n    }\r\n\r\n    identity (): this\r\n    {\r\n        return this.set();\r\n    }\r\n\r\n    toArray (): number[]\r\n    {\r\n        const  { a, b, c, d, tx, ty } = this;\r\n\r\n        return [ a, b, c, d, tx, ty ];\r\n    }\r\n\r\n    fromArray (src: number[]): Matrix2D\r\n    {\r\n        return this.set(src[0], src[1], src[2], src[3], src[4], src[5]);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\r\n *\r\n * @function Phaser.Math.Angle.Between\r\n * @since 3.0.0\r\n *\r\n * @param {number} x1 - The x coordinate of the first point.\r\n * @param {number} y1 - The y coordinate of the first point.\r\n * @param {number} x2 - The x coordinate of the second point.\r\n * @param {number} y2 - The y coordinate of the second point.\r\n *\r\n * @return {number} The angle in radians.\r\n */\r\nexport function AngleBetween (x1: number, y1: number, x2: number, y2: number): number\r\n{\r\n    return Math.atan2(y2 - y1, x2 - x1);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\r\n *\r\n * The difference between this method and {@link Phaser.Math.Angle.Between} is that this assumes the y coordinate\r\n * travels down the screen.\r\n *\r\n * @function Phaser.Math.Angle.BetweenY\r\n * @since 3.0.0\r\n *\r\n * @param {number} x1 - The x coordinate of the first point.\r\n * @param {number} y1 - The y coordinate of the first point.\r\n * @param {number} x2 - The x coordinate of the second point.\r\n * @param {number} y2 - The y coordinate of the second point.\r\n *\r\n * @return {number} The angle in radians.\r\n */\r\nexport function AngleBetweenY (x1: number, y1: number, x2: number, y2: number): number\r\n{\r\n    return Math.atan2(x2 - x1, y2 - y1);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nexport const MATH_CONST = {\r\n\r\n    /**\r\n     * The value of PI * 2.\r\n     *\r\n     * @name Phaser.Math.PI2\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PI2: Math.PI * 2,\r\n\r\n    /**\r\n     * The value of PI * 2.\r\n     *\r\n     * @name Phaser.Math.HALF_PI\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    HALF_PI: Math.PI * 0.5,\r\n\r\n    /**\r\n     * An epsilon value (1.0e-6)\r\n     *\r\n     * @name Phaser.Math.EPSILON\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    EPSILON: 1.0e-6,\r\n\r\n    /**\r\n     * For converting degrees to radians (PI / 180)\r\n     *\r\n     * @name Phaser.Math.DEG_TO_RAD\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    DEG_TO_RAD: Math.PI / 180,\r\n\r\n    /**\r\n     * For converting radians to degrees (180 / PI)\r\n     *\r\n     * @name Phaser.Math.RAD_TO_DEG\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    RAD_TO_DEG: 180 / Math.PI,\r\n\r\n    /**\r\n     * The minimum safe integer this browser supports.\r\n     * We use a const for backward compatibility with Internet Explorer.\r\n     *\r\n     * @name Phaser.Math.MIN_SAFE_INTEGER\r\n     * @type {number}\r\n     * @since 3.21.0\r\n     */\r\n    MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -9007199254740991,\r\n\r\n    /**\r\n     * The maximum safe integer this browser supports.\r\n     * We use a const for backward compatibility with Internet Explorer.\r\n     *\r\n     * @name Phaser.Math.MAX_SAFE_INTEGER\r\n     * @type {number}\r\n     * @since 3.21.0\r\n     */\r\n    MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991\r\n\r\n};\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST as CONST } from '../const';\r\n\r\n/**\r\n * Takes an angle in Phasers default clockwise format and converts it so that\r\n * 0 is North, 90 is West, 180 is South and 270 is East,\r\n * therefore running counter-clockwise instead of clockwise.\r\n * \r\n * You can pass in the angle from a Game Object using:\r\n * \r\n * ```javascript\r\n * var converted = CounterClockwise(gameobject.rotation);\r\n * ```\r\n * \r\n * All values for this function are in radians.\r\n *\r\n * @function Phaser.Math.Angle.CounterClockwise\r\n * @since 3.16.0\r\n *\r\n * @param {number} angle - The angle to convert, in radians.\r\n *\r\n * @return {number} The converted angle, in radians.\r\n */\r\nexport function CounterClockwise (angle: number): number\r\n{\r\n    if (angle > Math.PI)\r\n    {\r\n        angle -= CONST.PI2;\r\n    }\r\n\r\n    return Math.abs((((angle + CONST.HALF_PI) % CONST.PI2) - CONST.PI2) % CONST.PI2);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST } from '../const';\r\n\r\n/**\r\n * Normalize an angle to the [0, 2pi] range.\r\n *\r\n * @function Phaser.Math.Angle.Normalize\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to normalize, in radians.\r\n *\r\n * @return {number} The normalized angle, in radians.\r\n */\r\nexport function NormalizeAngle (angle: number): number\r\n{\r\n    angle = angle % MATH_CONST.PI2;\r\n\r\n    if (angle >= 0)\r\n    {\r\n        return angle;\r\n    }\r\n    else\r\n    {\r\n        return angle + MATH_CONST.PI2;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { NormalizeAngle } from './NormalizeAngle';\r\n\r\n/**\r\n * Reverse the given angle.\r\n *\r\n * @function Phaser.Math.Angle.Reverse\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to reverse, in radians.\r\n *\r\n * @return {number} The reversed angle, in radians.\r\n */\r\nexport function ReverseAngle (angle: number): number\r\n{\r\n    return NormalizeAngle(angle + Math.PI);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST } from '../const';\r\n\r\n/**\r\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\r\n *\r\n * @function Phaser.Math.Angle.RotateTo\r\n * @since 3.0.0\r\n *\r\n * @param {number} currentAngle - The current angle, in radians.\r\n * @param {number} targetAngle - The target angle to rotate to, in radians.\r\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\r\n *\r\n * @return {number} The adjusted angle.\r\n */\r\nexport function RotateAngleTo (currentAngle: number, targetAngle: number, lerp: number = 0.05): number\r\n{\r\n    if (currentAngle === targetAngle)\r\n    {\r\n        return currentAngle;\r\n    }\r\n\r\n    if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= (MATH_CONST.PI2 - lerp))\r\n    {\r\n        currentAngle = targetAngle;\r\n    }\r\n    else\r\n    {\r\n        if (Math.abs(targetAngle - currentAngle) > Math.PI)\r\n        {\r\n            if (targetAngle < currentAngle)\r\n            {\r\n                targetAngle += MATH_CONST.PI2;\r\n            }\r\n            else\r\n            {\r\n                targetAngle -= MATH_CONST.PI2;\r\n            }\r\n        }\r\n\r\n        if (targetAngle > currentAngle)\r\n        {\r\n            currentAngle += lerp;\r\n        }\r\n        else if (targetAngle < currentAngle)\r\n        {\r\n            currentAngle -= lerp;\r\n        }\r\n    }\r\n\r\n    return currentAngle;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Gets the shortest angle between `angle1` and `angle2`.\r\n *\r\n * Both angles must be in the range -180 to 180, which is the same clamped\r\n * range that `sprite.angle` uses, so you can pass in two sprite angles to\r\n * this method and get the shortest angle back between the two of them.\r\n *\r\n * The angle returned will be in the same range. If the returned angle is\r\n * greater than 0 then it's a counter-clockwise rotation, if < 0 then it's\r\n * a clockwise rotation.\r\n *\r\n * TODO: Wrap the angles in this function?\r\n *\r\n * @function Phaser.Math.Angle.ShortestBetween\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle1 - The first angle in the range -180 to 180.\r\n * @param {number} angle2 - The second angle in the range -180 to 180.\r\n *\r\n * @return {number} The shortest angle, in degrees. If greater than zero it's a counter-clockwise rotation.\r\n */\r\nexport function ShortestAngleBetween (angle1: number, angle2: number): number\r\n{\r\n    const difference = angle2 - angle1;\r\n\r\n    if (difference === 0)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    const times = Math.floor((difference - (-180)) / 360);\r\n\r\n    return difference - (times * 360);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Wrap the given `value` between `min` and `max.\r\n *\r\n * @function Phaser.Math.Wrap\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to wrap.\r\n * @param {number} min - The minimum value.\r\n * @param {number} max - The maximum value.\r\n *\r\n * @return {number} The wrapped value.\r\n */\r\nexport function Wrap (value: number, min: number, max: number): number\r\n{\r\n    const range = max - min;\r\n\r\n    return (min + ((((value - min) % range) + range) % range));\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Wrap } from '../Wrap';\r\n\r\n/**\r\n * Wrap an angle.\r\n *\r\n * Wraps the angle to a value in the range of -PI to PI.\r\n *\r\n * @function Phaser.Math.Angle.Wrap\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to wrap, in radians.\r\n *\r\n * @return {number} The wrapped angle, in radians.\r\n */\r\nexport function WrapAngle (angle: number): number\r\n{\r\n    return Wrap(angle, -Math.PI, Math.PI);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Wrap } from '../Wrap';\r\n\r\n/**\r\n * Wrap an angle in degrees.\r\n *\r\n * Wraps the angle to a value in the range of -180 to 180.\r\n *\r\n * @function Phaser.Math.Angle.WrapDegrees\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to wrap, in degrees.\r\n *\r\n * @return {number} The wrapped angle, in degrees.\r\n */\r\nexport function WrapAngleDegrees (angle: number): number\r\n{\r\n    return Wrap(angle, -180, 180);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { AngleBetween } from './AngleBetween';\r\nimport { AngleBetweenY } from './AngleBetweenY';\r\nimport { CounterClockwise } from './CounterClockwise';\r\nimport { NormalizeAngle } from './NormalizeAngle';\r\nimport { ReverseAngle } from './ReverseAngle';\r\nimport { RotateAngleTo } from './RotateAngleTo';\r\nimport { ShortestAngleBetween } from './ShortestAngleBetween';\r\nimport { WrapAngle } from './WrapAngle';\r\nimport { WrapAngleDegrees } from './WrapAngleDegrees';\r\n\r\n/**\r\n * @namespace Phaser.Math.Angle\r\n */\r\n\r\nexport {\r\n    AngleBetween,\r\n    AngleBetweenY,\r\n    CounterClockwise,\r\n    NormalizeAngle,\r\n    ReverseAngle,\r\n    RotateAngleTo,\r\n    ShortestAngleBetween,\r\n    WrapAngle,\r\n    WrapAngleDegrees\r\n};\r\n", "import { GameInstance } from '../GameInstance';\r\nimport { IRenderer } from '../renderer/IRenderer';\r\nimport { IStaticCamera } from './IStaticCamera';\r\nimport { IStaticWorld } from '../world/IStaticWorld';\r\nimport { Mat4Identity } from '../math/mat4';\r\nimport { Matrix2D } from '../math/mat2d/Matrix2D';\r\nimport { Matrix4 } from '../math/mat4/Matrix4';\r\nimport { Rectangle } from '../geom/rectangle/Rectangle';\r\n\r\nexport class StaticCamera implements IStaticCamera\r\n{\r\n    world: IStaticWorld;\r\n    matrix: Matrix4;\r\n    renderer: IRenderer;\r\n    type: string;\r\n\r\n    width: number;\r\n    height: number;\r\n    bounds: Rectangle;\r\n\r\n    dirtyRender: boolean;\r\n    worldTransform: Matrix2D;\r\n\r\n    constructor ()\r\n    {\r\n        this.dirtyRender = true;\r\n\r\n        const game = GameInstance.get();\r\n\r\n        this.renderer = game.renderer;\r\n\r\n        this.matrix = Mat4Identity();\r\n\r\n        this.bounds = new Rectangle();\r\n\r\n        this.worldTransform = new Matrix2D();\r\n\r\n        this.reset();\r\n    }\r\n\r\n    reset (): void\r\n    {\r\n        const renderer = this.renderer;\r\n\r\n        if (renderer)\r\n        {\r\n            const width = renderer.width;\r\n            const height = renderer.height;\r\n\r\n            this.width = width;\r\n            this.height = height;\r\n        }\r\n\r\n        this.bounds.set(0, 0, this.width, this.height);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.world = null;\r\n        this.worldTransform = null;\r\n        this.renderer = null;\r\n        this.matrix = null;\r\n        this.bounds = null;\r\n    }\r\n}\r\n", "import { CreateTempTextures } from './CreateTempTextures';\r\nimport { GetBatchSize } from '../../../config/batchsize/GetBatchSize';\r\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { IShader } from '../shaders/IShader';\r\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\r\nimport { IWebGLRenderer } from '../IWebGLRenderer';\r\nimport { IndexedVertexBuffer } from '../buffers/IndexedVertexBuffer';\r\nimport { Mat4Ortho } from '../../../math/mat4/Mat4Ortho';\r\nimport { Matrix4 } from '../../../math/mat4/Matrix4';\r\nimport { MultiTextureQuadShader } from '../shaders';\r\nimport { QuadShader } from '../shaders/QuadShader';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\nimport { SetDefaultBlendMode } from './SetDefaultBlendMode';\r\nimport { SetDefaultFramebuffer } from './SetDefaultFramebuffer';\r\nimport { SetDefaultShader } from './SetDefaultShader';\r\nimport { SetDefaultVertexBuffer } from './SetDefaultVertexBuffer';\r\nimport { SetDefaultViewport } from './SetDefaultViewport';\r\nimport { StaticCamera } from '../../../camera';\r\n\r\nexport type FramebufferStackEntry = {\r\n    framebuffer: WebGLFramebuffer;\r\n    viewport?: Rectangle;\r\n};\r\n\r\nexport type ShaderStackEntry = {\r\n    shader: IShader;\r\n    textureID?: number;\r\n};\r\n\r\nexport type BlendModeStackEntry = {\r\n    enable: boolean;\r\n    sfactor?: number;\r\n    dfactor?: number;\r\n};\r\n\r\nexport class RenderPass implements IRenderPass\r\n{\r\n    renderer: IWebGLRenderer;\r\n\r\n    projectionMatrix: Matrix4;\r\n    cameraMatrix: Matrix4;\r\n\r\n    count: number = 0;\r\n    prevCount: number = 0;\r\n    flushTotal: number = 0;\r\n\r\n    //  The maximum number of combined image units the GPU supports\r\n    //  According to the WebGL spec the minimum is 8\r\n    maxTextures: number = 0;\r\n    currentActiveTexture: number = 0;\r\n    startActiveTexture: number = 0;\r\n    tempTextures: WebGLTexture[] = [];\r\n    textureIndex: number[] = [];\r\n\r\n    //  FBO\r\n    framebufferStack: FramebufferStackEntry[] = [];\r\n    currentFramebuffer: FramebufferStackEntry = null;\r\n    defaultFramebuffer: FramebufferStackEntry = null;\r\n\r\n    //  VBO\r\n    vertexBufferStack: IVertexBuffer[] = [];\r\n    currentVertexBuffer: IVertexBuffer = null;\r\n    defaultVertexBuffer: IVertexBuffer = null;\r\n\r\n    //  Shader\r\n    shaderStack: ShaderStackEntry[] = [];\r\n    currentShader: ShaderStackEntry = null;\r\n    defaultShader: ShaderStackEntry = null;\r\n\r\n    //  Viewport\r\n    viewportStack: Rectangle[] = [];\r\n    currentViewport: Rectangle = null;\r\n    defaultViewport: Rectangle = null;\r\n\r\n    //  Blend Mode\r\n    blendModeStack: BlendModeStackEntry[] = [];\r\n    currentBlendMode: BlendModeStackEntry = null;\r\n    defaultBlendMode: BlendModeStackEntry = null;\r\n\r\n    //  Single Texture Quad Shader + Camera\r\n    quadShader: IShader;\r\n    quadBuffer: IVertexBuffer;\r\n    quadCamera: IBaseCamera;\r\n\r\n    //  Current 2D Camera\r\n    current2DCamera: IBaseCamera;\r\n\r\n    constructor (renderer: IWebGLRenderer)\r\n    {\r\n        this.renderer = renderer;\r\n\r\n        this.projectionMatrix = new Matrix4();\r\n\r\n        this.reset();\r\n    }\r\n\r\n    //  TODO - Call when context is lost and restored\r\n    reset (): void\r\n    {\r\n        const gl = this.renderer.gl;\r\n\r\n        const indexLayout = [ 0, 1, 2, 2, 3, 0 ];\r\n\r\n        //  TODO - If already created, delete shaders / buffers first (i.e. during context loss)\r\n\r\n        //  Default QuadShader (for FBO drawing)\r\n\r\n        this.quadShader = new QuadShader();\r\n        this.quadBuffer = new IndexedVertexBuffer({ isDynamic: false, indexLayout });\r\n        this.quadCamera = new StaticCamera();\r\n\r\n        //  Default settings\r\n\r\n        CreateTempTextures(this);\r\n\r\n        SetDefaultFramebuffer(this);\r\n        SetDefaultBlendMode(this, true, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n        SetDefaultVertexBuffer(this, new IndexedVertexBuffer({ batchSize: GetBatchSize(), indexLayout }));\r\n        SetDefaultShader(this, new MultiTextureQuadShader());\r\n    }\r\n\r\n    resize (width: number, height: number): void\r\n    {\r\n        //  TODO - -1 to 1?\r\n        Mat4Ortho(0, width, height, 0, -1000, 1000, this.projectionMatrix);\r\n\r\n        this.quadCamera.reset();\r\n\r\n        SetDefaultViewport(this, 0, 0, width, height);\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { ShaderStackEntry } from '../shaders/ShaderStackEntry';\r\n\r\nexport function BindShader (renderPass: IRenderPass, entry?: ShaderStackEntry): void\r\n{\r\n    if (!entry)\r\n    {\r\n        entry = renderPass.currentShader;\r\n    }\r\n\r\n    const success = entry.shader.bind(renderPass, entry.textureID);\r\n\r\n    if (success)\r\n    {\r\n        entry.shader.setAttributes(renderPass);\r\n    }\r\n}\r\n", "import { BindShader } from './BindShader';\r\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function Begin (renderPass: IRenderPass, camera2D: IBaseCamera): void\r\n{\r\n    renderPass.current2DCamera = camera2D;\r\n    renderPass.cameraMatrix = camera2D.matrix;\r\n\r\n    BindShader(renderPass);\r\n}\r\n", "import { BlendModeStackEntry } from './RenderPass';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindBlendMode (renderPass: IRenderPass, entry?: BlendModeStackEntry): void\r\n{\r\n    if (!entry)\r\n    {\r\n        entry = renderPass.currentBlendMode;\r\n    }\r\n\r\n    //  TODO - Only set if different\r\n    if (entry.enable)\r\n    {\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(entry.sfactor, entry.dfactor);\r\n    }\r\n    else\r\n    {\r\n        gl.disable(gl.BLEND);\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindVertexBuffer (renderPass: IRenderPass, buffer?: IVertexBuffer): void\r\n{\r\n    if (!buffer)\r\n    {\r\n        buffer = renderPass.currentVertexBuffer;\r\n    }\r\n\r\n    //  TODO - Only bind if different\r\n    const indexBuffer = (buffer.indexed) ? buffer.indexBuffer : null;\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer);\r\n}\r\n", "import { BufferEntry } from '../draw/BufferEntry';\r\nimport { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function GetVertexBufferEntry (renderPass: IRenderPass, addToCount: number = 0): BufferEntry\r\n{\r\n    const buffer = renderPass.currentVertexBuffer;\r\n\r\n    //  If batch cannot take the size of this entry, flush it first\r\n    if (renderPass.count + addToCount >= buffer.batchSize)\r\n    {\r\n        Flush(renderPass);\r\n    }\r\n\r\n    const offset = (buffer.indexed) ? renderPass.count * buffer.entryElementSize : renderPass.count * buffer.vertexElementSize;\r\n\r\n    renderPass.count += addToCount;\r\n\r\n    return {\r\n        buffer,\r\n        F32: buffer.vertexViewF32,\r\n        U32: buffer.vertexViewU32,\r\n        offset\r\n    };\r\n}\r\n", "import { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { gl } from '../GL';\r\n\r\n//  request the next available texture and bind it\r\n//  returns the new ID\r\nexport function SetTexture (renderPass: IRenderPass, texture: ITexture): number\r\n{\r\n    const binding = texture.binding;\r\n    const currentActiveTexture = renderPass.currentActiveTexture;\r\n\r\n    if (binding.indexCounter < renderPass.startActiveTexture)\r\n    {\r\n        binding.indexCounter = renderPass.startActiveTexture;\r\n\r\n        if (currentActiveTexture < renderPass.maxTextures)\r\n        {\r\n            binding.setIndex(currentActiveTexture);\r\n\r\n            gl.activeTexture(gl.TEXTURE0 + currentActiveTexture);\r\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n\r\n            renderPass.currentActiveTexture++;\r\n        }\r\n        else\r\n        {\r\n            //  We're out of textures, so flush the batch and reset back to 1\r\n            Flush(renderPass);\r\n\r\n            renderPass.startActiveTexture++;\r\n\r\n            binding.indexCounter = renderPass.startActiveTexture;\r\n\r\n            binding.setIndex(1);\r\n\r\n            gl.activeTexture(gl.TEXTURE1);\r\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n\r\n            renderPass.currentActiveTexture = 2;\r\n        }\r\n    }\r\n\r\n    return binding.index;\r\n}\r\n", "import { BindBlendMode } from './BindBlendMode';\r\nimport { BindFramebuffer } from './BindFramebuffer';\r\nimport { BindVertexBuffer } from './BindVertexBuffer';\r\nimport { BindViewport } from './BindViewport';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function Start (renderPass: IRenderPass): void\r\n{\r\n    renderPass.current2DCamera = renderPass.quadCamera;\r\n    renderPass.cameraMatrix = renderPass.quadCamera.matrix;\r\n\r\n    renderPass.count = 0;\r\n    renderPass.flushTotal = 0;\r\n\r\n    BindFramebuffer(renderPass, false, renderPass.defaultFramebuffer);\r\n    BindBlendMode(renderPass, renderPass.defaultBlendMode);\r\n    BindViewport(renderPass, renderPass.defaultViewport);\r\n    BindVertexBuffer(renderPass, renderPass.defaultVertexBuffer);\r\n}\r\n", "import { WebGLRenderer } from './WebGLRenderer';\r\n\r\nexport let instance: WebGLRenderer;\r\n\r\nexport const WebGLRendererInstance =\r\n{\r\n    get: (): WebGLRenderer =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (renderer: WebGLRenderer | undefined): void =>\r\n    {\r\n        instance = renderer;\r\n    }\r\n};\r\n", "import { GetHeight, GetResolution, GetWidth } from '../../config/size/';\r\n\r\nimport { End } from './renderpass/End';\r\nimport { GL } from './GL';\r\nimport { GetBackgroundColor } from '../../config/backgroundcolor/GetBackgroundColor';\r\nimport { GetRGBArray } from './colors/GetRGBArray';\r\nimport { GetWebGLContext } from '../../config/webglcontext/GetWebGLContext';\r\nimport { IRenderPass } from './renderpass/IRenderPass';\r\nimport { ISceneRenderData } from '../../scenes/ISceneRenderData';\r\nimport { ProcessBindingQueue } from './renderpass/ProcessBindingQueue';\r\nimport { RenderPass } from './renderpass/RenderPass';\r\nimport { Start } from './renderpass';\r\nimport { WebGLRendererInstance } from './WebGLRendererInstance';\r\n\r\nexport class WebGLRenderer\r\n{\r\n    canvas: HTMLCanvasElement;\r\n    gl: WebGLRenderingContext;\r\n\r\n    renderPass: IRenderPass;\r\n\r\n    clearColor = [ 0, 0, 0, 1 ];\r\n\r\n    width: number;\r\n    height: number;\r\n    resolution: number;\r\n\r\n    clearBeforeRender: boolean = true;\r\n    optimizeRedraw: boolean = false;\r\n    autoResize: boolean = true;\r\n\r\n    contextLost: boolean = false;\r\n\r\n    constructor ()\r\n    {\r\n        this.width = GetWidth();\r\n        this.height = GetHeight();\r\n        this.resolution = GetResolution();\r\n\r\n        this.setBackgroundColor(GetBackgroundColor());\r\n\r\n        const canvas = document.createElement('canvas');\r\n\r\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\r\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\r\n\r\n        this.canvas = canvas;\r\n\r\n        this.initContext();\r\n\r\n        //  By this stage the context is available\r\n        WebGLRendererInstance.set(this);\r\n\r\n        this.renderPass = new RenderPass(this);\r\n\r\n        this.resize(this.width, this.height, this.resolution);\r\n    }\r\n\r\n    initContext (): void\r\n    {\r\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\r\n\r\n        GL.set(gl);\r\n\r\n        this.gl = gl;\r\n\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.disable(gl.CULL_FACE);\r\n    }\r\n\r\n    resize (width: number, height: number, resolution: number = 1): void\r\n    {\r\n        const calcWidth = width * resolution;\r\n        const calcHeight = height * resolution;\r\n\r\n        this.width = calcWidth;\r\n        this.height = calcHeight;\r\n        this.resolution = resolution;\r\n\r\n        const canvas = this.canvas;\r\n\r\n        canvas.width = calcWidth;\r\n        canvas.height = calcHeight;\r\n\r\n        if (this.autoResize)\r\n        {\r\n            canvas.style.width = width.toString() + 'px';\r\n            canvas.style.height = height.toString() + 'px';\r\n        }\r\n\r\n        this.renderPass.resize(calcWidth, calcHeight);\r\n    }\r\n\r\n    onContextLost (event: Event): void\r\n    {\r\n        event.preventDefault();\r\n\r\n        this.contextLost = true;\r\n    }\r\n\r\n    onContextRestored (): void\r\n    {\r\n        this.contextLost = false;\r\n\r\n        this.initContext();\r\n    }\r\n\r\n    setBackgroundColor (color: number): this\r\n    {\r\n        GetRGBArray(color, this.clearColor);\r\n\r\n        return this;\r\n    }\r\n\r\n    //  TODO - Remove?\r\n    reset (): void\r\n    {\r\n        // this.renderPass.reset();\r\n    }\r\n\r\n    render (renderData: ISceneRenderData): void\r\n    {\r\n        if (this.contextLost)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const gl = this.gl;\r\n        const renderPass = this.renderPass;\r\n\r\n        //  This is only here because if we don't do _something_ with the context,\r\n        //  GL Spector can't see it!\r\n        gl.getContextAttributes();\r\n\r\n        ProcessBindingQueue();\r\n\r\n        //  Nothing dirty? Display the previous frame\r\n        if (this.optimizeRedraw && renderData.numDirtyFrames === 0 && renderData.numDirtyCameras === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (this.clearBeforeRender)\r\n        {\r\n            const cls = this.clearColor;\r\n\r\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n\r\n        const worlds = renderData.worldData;\r\n\r\n        Start(renderPass);\r\n\r\n        for (let i: number = 0; i < worlds.length; i++)\r\n        {\r\n            const { world } = worlds[i];\r\n\r\n            world.renderGL(renderPass);\r\n\r\n            //  Stats sweep\r\n\r\n            world.postRenderGL(renderPass);\r\n        }\r\n\r\n        End(renderPass);\r\n\r\n        // eslint-disable-next-line no-debugger\r\n        // debugger;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        WebGLRendererInstance.set(undefined);\r\n    }\r\n}\r\n", "import { SetRenderer } from '../renderer/SetRenderer';\r\nimport { WebGLRenderer } from '../../renderer/webgl1/WebGLRenderer';\r\n\r\nexport function WebGL (): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetRenderer(WebGLRenderer);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetWebGLContext (contextAttributes: WebGLContextAttributes): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.WEBGL_CONTEXT, contextAttributes);\r\n}\r\n", "import { IEventInstance } from './IEventInstance';\r\n\r\nexport class EventEmitter\r\n{\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor ()\r\n    {\r\n        this.events = new Map();\r\n    }\r\n}\r\n", "export class EventInstance\r\n{\r\n    callback: Function;\r\n    context: unknown;\r\n    once: boolean;\r\n\r\n    constructor (callback: Function, context: unknown, once: boolean = false)\r\n    {\r\n        this.callback = callback;\r\n        this.context = context;\r\n        this.once = once;\r\n    }\r\n}\r\n", "import { EventInstance } from './EventInstance';\r\nimport { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\n\r\nexport function Off (emitter: IEventEmitter, event: string, callback?: Function | IEventInstance, context?: unknown, once?: boolean): IEventEmitter\r\n{\r\n    const events = emitter.events;\r\n    const listeners = events.get(event);\r\n\r\n    if (!callback)\r\n    {\r\n        //  Remove all events matching the given key\r\n        events.delete(event);\r\n    }\r\n    else if (callback instanceof EventInstance)\r\n    {\r\n        listeners.delete(callback as IEventInstance);\r\n    }\r\n    else\r\n    {\r\n        const hasContext: boolean = !context;\r\n        const hasOnce: boolean = (once !== undefined);\r\n\r\n        for (const listener of listeners)\r\n        {\r\n            if (\r\n                (listener.callback === callback) &&\r\n                (hasContext && listener.context === context) &&\r\n                (hasOnce && listener.once === once)\r\n            )\r\n            {\r\n                listeners.delete(listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (listeners.size === 0)\r\n    {\r\n        events.delete(event);\r\n    }\r\n\r\n    return emitter;\r\n}\r\n", "import { EventInstance } from './EventInstance';\r\nimport { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\n\r\nexport function On (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter, once: boolean = false): IEventInstance\r\n{\r\n    if (typeof callback !== 'function')\r\n    {\r\n        throw new TypeError('Listener not a function');\r\n    }\r\n\r\n    const listener = new EventInstance(callback, context, once);\r\n    const listeners = emitter.events.get(event);\r\n\r\n    if (!listeners)\r\n    {\r\n        emitter.events.set(event, new Set([ listener ]));\r\n    }\r\n    else\r\n    {\r\n        listeners.add(listener);\r\n    }\r\n\r\n    return listener;\r\n}\r\n", "import { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\nimport { On } from './On';\r\n\r\nexport function Once (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter): IEventInstance\r\n{\r\n    return On(emitter, event, callback, context, true);\r\n}\r\n", "export class TweenProperty\r\n{\r\n    name: string;\r\n    start: number;\r\n    end: number;\r\n    modifier: string;\r\n\r\n    constructor (name: string, end: number | string)\r\n    {\r\n        this.name = name;\r\n\r\n        if (typeof end === 'string')\r\n        {\r\n            this.modifier = end.substr(0, 1);\r\n            this.end = parseFloat(end.substring(1));\r\n        }\r\n        else\r\n        {\r\n            this.end = end;\r\n        }\r\n    }\r\n\r\n    getEnd (start: number): number\r\n    {\r\n        const modifier = this.modifier;\r\n        const end = this.end;\r\n\r\n        if (modifier === '+')\r\n        {\r\n            return start + end;\r\n        }\r\n        else if (modifier === '-')\r\n        {\r\n            return start - end;\r\n        }\r\n        else\r\n        {\r\n            return end;\r\n        }\r\n    }\r\n\r\n    to (target: unknown): void\r\n    {\r\n        const current = target[ this.name ];\r\n        const end = this.getEnd(current);\r\n\r\n        this.start = current;\r\n        this.end = end;\r\n    }\r\n\r\n    from (target: unknown): void\r\n    {\r\n        const current = target[ this.name ];\r\n        const end = this.getEnd(current);\r\n\r\n        this.start = end;\r\n        this.end = current;\r\n\r\n        target[ this.name ] = end;\r\n    }\r\n\r\n    update (target: unknown, v: number): void\r\n    {\r\n        target[ this.name ] = this.start + ((this.end - this.start) * v);\r\n    }\r\n}\r\n", "import { Off, On } from '../../../events';\r\n\r\nimport { GameInstance } from '../../../GameInstance';\r\nimport { IEventEmitter } from '../../../events/IEventEmitter';\r\nimport { IEventInstance } from '../../../events/IEventInstance';\r\nimport { Linear } from '../../../math/easing/Linear';\r\nimport { TweenProperty } from '../TweenProperty';\r\nimport { UpdateEvent } from '../../../gameobjects/events';\r\n\r\n/*\r\n    Done\r\n    ----\r\n\r\n    Delay (influences start of playback)\r\n    Repeat Counter (number of times to repeat full tween cycle)\r\n    Repeat Delay (how long before repeat starts)\r\n    Yoyo (repeat tween in reverse back to starting values)\r\n    Hold Delay (how long before a yoyo should start)\r\n    AutoStart (tween will begin automatically, or wait for 'start' to be called)\r\n    Restart (reset tween to beginning at any point during playback)\r\n    Easing (set ease function to use)\r\n    From and To flow\r\n    Value modifiers via strings, i.e. '-200' or '+0.5'\r\n    All durations now given in ms\r\n\r\n    Todo\r\n    ----\r\n\r\n    Bezier values\r\n    Callbacks based on tween state\r\n    Overall duration (based on delay + repeat, hold, etc)\r\n    Overall progress (based on an overall elapsed / overall duration)\r\n    Tween.stop (plus option to jump to end values, or end at current)\r\n    GetEase function (for eases that provide input values, like Elastic)\r\n\r\n    Todo - but maybe not Nano features?\r\n    -----------------------------------\r\n\r\n    Config object instead of methods?\r\n    Allow multiple targets?\r\n    Allow for infinite repeats?\r\n    Tween.seek\r\n    Short Rotate to\r\n    Scale via a single property instead of scaleX & scaleY\r\n*/\r\n\r\ntype TweenState = {\r\n    running: boolean;\r\n    repeat: boolean;\r\n    hold: boolean;\r\n    delay: boolean;\r\n    yoyo: boolean;\r\n    yoyoing: boolean;\r\n    autoStart: boolean;\r\n    reversed: boolean;\r\n};\r\n\r\ntype TweenInit = {\r\n    duration: number;\r\n    repeat: number;\r\n    repeatDelay: number;\r\n    hold: number;\r\n    delay: number;\r\n};\r\n\r\ntype TweenCounters = {\r\n    repeat: number;\r\n    delay: number;\r\n    progress: number;\r\n    elapsed: number;\r\n};\r\n\r\ntype EaseFunction = (v: number) => number;\r\n\r\nexport class NanoTween\r\n{\r\n    target: unknown;\r\n\r\n    state: TweenState = { running: false, repeat: false, hold: false, delay: false, yoyo: false, yoyoing: false, autoStart: true, reversed: false };\r\n    init: TweenInit = { duration: 0, repeat: 0, repeatDelay: 0, hold: 0, delay: 0 };\r\n    counters: TweenCounters = { repeat: 0, delay: 0, progress: 0, elapsed: 0 };\r\n\r\n    ease: EaseFunction = Linear;\r\n    listener: IEventInstance;\r\n    emitter: IEventEmitter;\r\n\r\n    private properties: TweenProperty[] = [];\r\n\r\n    constructor (target: unknown, emitter: IEventEmitter, autoStart: boolean = true)\r\n    {\r\n        if (!emitter)\r\n        {\r\n            emitter = GameInstance.get();\r\n        }\r\n\r\n        this.target = target;\r\n\r\n        this.state.autoStart = autoStart;\r\n\r\n        this.emitter = emitter;\r\n    }\r\n\r\n    to (duration: number, properties: Record<string, number | string> = null): this\r\n    {\r\n        return this.add(duration, properties, false);\r\n    }\r\n\r\n    from (duration: number, properties: Record<string, number | string> = null): this\r\n    {\r\n        return this.add(duration, properties, true);\r\n    }\r\n\r\n    private add (duration: number, props: Record<string, number | string>, reversed: boolean): this\r\n    {\r\n        const state = this.state;\r\n        const init = this.init;\r\n\r\n        if (state.running)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        const properties = this.properties;\r\n\r\n        for (const [ name, value ] of Object.entries(props))\r\n        {\r\n            properties.push(new TweenProperty(name, value));\r\n        }\r\n\r\n        init.duration = duration;\r\n        state.reversed = reversed;\r\n\r\n        if (state.autoStart)\r\n        {\r\n            this.start();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    start (): this\r\n    {\r\n        const state = this.state;\r\n\r\n        if (state.running)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        const target = this.target;\r\n        const properties = this.properties;\r\n\r\n        properties.forEach(property =>\r\n        {\r\n            if (state.reversed)\r\n            {\r\n                property.from(target);\r\n            }\r\n            else\r\n            {\r\n                property.to(target);\r\n            }\r\n        });\r\n\r\n        state.running = true;\r\n\r\n        this.listener = On(this.emitter, UpdateEvent, (delta: number) => this.update(delta));\r\n\r\n        return this;\r\n    }\r\n\r\n    restart (): this\r\n    {\r\n        const state = this.state;\r\n        const init = this.init;\r\n        const counters = this.counters;\r\n\r\n        if (!state)\r\n        {\r\n            throw 'Cannot restart destroyed tween';\r\n        }\r\n\r\n        counters.delay = init.delay;\r\n        counters.elapsed = 0;\r\n        counters.progress = 0;\r\n        counters.repeat = init.repeat;\r\n\r\n        state.yoyoing = false;\r\n        state.running = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    //  If it returns true it means this Tween has completed\r\n    update (delta: number): boolean\r\n    {\r\n        const state = this.state;\r\n        const init = this.init;\r\n        const counters = this.counters;\r\n\r\n        if (!state.running)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (counters.delay > 0)\r\n        {\r\n            //  Tween delayed? either via start delay, repeat delay or hold\r\n            counters.delay -= delta;\r\n\r\n            if (counters.delay <= 0)\r\n            {\r\n                //  Carry over the difference to the duration\r\n                counters.elapsed = Math.abs(counters.delay) - delta;\r\n                counters.delay = 0;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //  If we got here, the Tween isn't delayed\r\n        counters.elapsed += delta;\r\n\r\n        const progress = Math.min(counters.elapsed / init.duration, 1);\r\n\r\n        counters.progress = progress;\r\n\r\n        const v = (state.yoyoing) ? this.ease(1 - progress) : this.ease(progress);\r\n\r\n        const target = this.target;\r\n        const properties = this.properties;\r\n\r\n        properties.forEach(property =>\r\n        {\r\n            property.update(target, v);\r\n        });\r\n\r\n        //  Nothing more to do here\r\n        if (progress < 1)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  Tween progress is at 100%, what next? Either yoyo or repeat\r\n\r\n        //  How much extra time do we have?\r\n        const diff = counters.elapsed - init.duration;\r\n\r\n        //  Should we yoyo?\r\n        if (state.yoyo && !state.yoyoing)\r\n        {\r\n            //  Resetting elapsed also resets progress\r\n            counters.elapsed = diff;\r\n            counters.delay = init.hold - diff;\r\n\r\n            state.yoyoing = true;\r\n\r\n            return false;\r\n        }\r\n\r\n        if (counters.repeat > 0)\r\n        {\r\n            counters.repeat--;\r\n\r\n            counters.elapsed = diff;\r\n            counters.delay = init.repeatDelay - diff;\r\n\r\n            state.yoyoing = false;\r\n\r\n            return false;\r\n        }\r\n\r\n        //  If we got this far, the tween is complete\r\n        // console.log('Tween Complete');\r\n\r\n        this.destroy();\r\n\r\n        return true;\r\n    }\r\n\r\n    delay (duration: number): this\r\n    {\r\n        const delay = duration;\r\n\r\n        this.init.delay = delay;\r\n        this.counters.delay = delay;\r\n\r\n        return this;\r\n    }\r\n\r\n    hold (duration: number): this\r\n    {\r\n        this.init.hold = duration;\r\n\r\n        return this;\r\n    }\r\n\r\n    yoyo (value: boolean = true): this\r\n    {\r\n        this.state.yoyo = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    repeat (repeatCount: number = 1, delay: number = 0): this\r\n    {\r\n        const init = this.init;\r\n\r\n        this.state.repeat = (repeatCount > 0);\r\n        this.counters.repeat = repeatCount;\r\n\r\n        init.repeat = repeatCount;\r\n        init.repeatDelay = delay;\r\n\r\n        return this;\r\n    }\r\n\r\n    easing (f: EaseFunction): this\r\n    {\r\n        this.ease = f;\r\n\r\n        return this;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        Off(this.emitter, UpdateEvent, this.listener);\r\n\r\n        this.properties.length = 0;\r\n\r\n        this.target = null;\r\n        this.ease = null;\r\n        this.emitter = null;\r\n        this.state = null;\r\n        this.init = null;\r\n        this.counters = null;\r\n    }\r\n}\r\n", "import { IEventEmitter } from '../../../events/IEventEmitter';\r\nimport { NanoTween } from './NanoTween';\r\n\r\nexport function AddTween (target: unknown, emitter: IEventEmitter = null, autoStart: boolean = true): NanoTween\r\n{\r\n    return new NanoTween(target, emitter, autoStart);\r\n}\r\n", "import { GetElement } from './GetElement';\r\n\r\nexport function AddToDOM (element: HTMLElement, parent?: string | HTMLElement): HTMLElement\r\n{\r\n    const target: HTMLElement = GetElement(parent);\r\n\r\n    target.appendChild(element);\r\n\r\n    return element;\r\n}\r\n", "export function DOMContentLoaded (callback: () => void): void\r\n{\r\n    const readyState = document.readyState;\r\n\r\n    if (readyState === 'complete' || readyState === 'interactive')\r\n    {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n\r\n    const check = (): void =>\r\n    {\r\n        document.removeEventListener('deviceready', check, true);\r\n        document.removeEventListener('DOMContentLoaded', check, true);\r\n        window.removeEventListener('load', check, true);\r\n\r\n        callback();\r\n    };\r\n\r\n    // TODO - Swap is IsCordova call\r\n\r\n    if (!document.body)\r\n    {\r\n        window.setTimeout(check, 20);\r\n    }\r\n    else if (window.hasOwnProperty('cordova'))\r\n    {\r\n        document.addEventListener('deviceready', check, true);\r\n    }\r\n    else\r\n    {\r\n        document.addEventListener('DOMContentLoaded', check, true);\r\n        window.addEventListener('load', check, true);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes the given data string and parses it as XML using the native DOMParser interface.\r\n * The parsed XML object is returned, or `null` if there was an error while parsing the data.\r\n *\r\n * @function Phaser.DOM.ParseXML\r\n * @since 3.0.0\r\n *\r\n * @param {string} data - The XML source stored in a string.\r\n *\r\n * @return {?XMLDocument} The parsed XML data, or `null` if the data could not be parsed.\r\n */\r\nexport function ParseXML (data: string): XMLDocument | null\r\n{\r\n    let xml: XMLDocument;\r\n\r\n    try\r\n    {\r\n        const parser = new DOMParser();\r\n\r\n        xml = parser.parseFromString(data, 'text/xml');\r\n\r\n        if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length)\r\n        {\r\n            return null;\r\n        }\r\n        else\r\n        {\r\n            return xml;\r\n        }\r\n    }\r\n    catch (error)\r\n    {\r\n        return null;\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetBanner (): void\r\n{\r\n    const { title, version, url, color, background } = ConfigStore.get(CONFIG_DEFAULTS.BANNER);\r\n\r\n    if (title !== '')\r\n    {\r\n        const str = (version !== '') ? title + ' ' + version : title;\r\n\r\n        console.log(\r\n            `%c${str}%c ${url}`,\r\n            `padding: 4px 16px; color: ${color}; background: ${background}`,\r\n            ''\r\n        );\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetGlobalVar (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.GLOBAL_VAR);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetParent (): string | HTMLElement | undefined\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.PARENT);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\r\n\r\nexport function GetRenderer (): IRendererConstructor\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.RENDERER);\r\n}\r\n", "import { ISceneRenderData } from './ISceneRenderData';\r\n\r\nexport function CreateSceneRenderData (): ISceneRenderData\r\n{\r\n    return {\r\n        gameFrame: 0,\r\n        numTotalFrames: 0,\r\n        numDirtyFrames: 0,\r\n        numDirtyCameras: 0,\r\n        worldData: []\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\n\r\nexport function GetScenes (): ISceneConstructor[]\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SCENES);\r\n}\r\n", "import { ISceneRenderData } from './ISceneRenderData';\r\n\r\nexport function ResetSceneRenderData (renderData: ISceneRenderData, gameFrame: number = 0): void\r\n{\r\n    renderData.gameFrame = gameFrame;\r\n    renderData.numTotalFrames = 0;\r\n    renderData.numDirtyFrames = 0;\r\n    renderData.numDirtyCameras = 0;\r\n    renderData.worldData.length = 0;\r\n}\r\n", "import { SceneManager } from './SceneManager';\r\n\r\nlet instance: SceneManager;\r\n\r\nexport const SceneManagerInstance =\r\n{\r\n    get: (): SceneManager =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (manager: SceneManager | null): void =>\r\n    {\r\n        instance = manager;\r\n    }\r\n};\r\n", "import { Emit, Once } from '../events';\r\n\r\nimport { CreateSceneRenderData } from './CreateSceneRenderData';\r\nimport { Game } from '../Game';\r\nimport { GameInstance } from '../GameInstance';\r\nimport { GetScenes } from '../config/scenes';\r\nimport { IScene } from './IScene';\r\nimport { ISceneRenderData } from './ISceneRenderData';\r\nimport { ResetSceneRenderData } from './ResetSceneRenderData';\r\nimport { SceneManagerInstance } from './SceneManagerInstance';\r\n\r\nexport class SceneManager\r\n{\r\n    game: Game;\r\n\r\n    scenes: Map<string, IScene>  = new Map();\r\n\r\n    //  Used by Install to assign default scene keys when not specified\r\n    sceneIndex: number = 0;\r\n\r\n    //  Flush the cache\r\n    flush: boolean = false;\r\n\r\n    renderResult: ISceneRenderData = CreateSceneRenderData();\r\n\r\n    constructor ()\r\n    {\r\n        this.game = GameInstance.get();\r\n\r\n        SceneManagerInstance.set(this);\r\n\r\n        Once(this.game, 'boot', () => this.boot());\r\n    }\r\n\r\n    boot (): void\r\n    {\r\n        GetScenes().forEach(scene => new scene());\r\n    }\r\n\r\n    update (delta: number, time: number): void\r\n    {\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            Emit(scene, 'update', delta, time);\r\n        }\r\n    }\r\n\r\n    render (gameFrame: number): ISceneRenderData\r\n    {\r\n        const results = this.renderResult;\r\n\r\n        ResetSceneRenderData(results, gameFrame);\r\n\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            Emit(scene, 'render', results);\r\n        }\r\n\r\n        if (this.flush)\r\n        {\r\n            //  Invalidate the renderer cache\r\n            results.numDirtyFrames++;\r\n\r\n            //  And reset\r\n            this.flush = false;\r\n        }\r\n\r\n        return results;\r\n    }\r\n}\r\n", "import { SetBackgroundColor } from './backgroundcolor/SetBackgroundColor';\r\nimport { SetBanner } from './banner/SetBanner';\r\nimport { SetBatchSize } from './batchsize/SetBatchSize';\r\nimport { SetDefaultOrigin } from './defaultorigin/SetDefaultOrigin';\r\nimport { SetMaxTextures } from './maxtextures/SetMaxTextures';\r\nimport { SetSize } from './size/SetSize';\r\nimport { SetWebGLContext } from './webglcontext';\r\n\r\n//  Phaser 4 defaults\r\n\r\nexport function SetConfigDefaults (): void\r\n{\r\n    SetBackgroundColor(0);\r\n    SetBatchSize(4096);\r\n    SetBanner('Phaser', '4.0.0', 'https://phaser4.io');\r\n    SetMaxTextures(0);\r\n    SetDefaultOrigin(0.5, 0.5);\r\n    SetSize(800, 600, 1);\r\n    SetWebGLContext({\r\n        antialias: true,\r\n        desynchronized: true,\r\n        preserveDrawingBuffer: true\r\n    });\r\n}\r\n", "export function CreateCanvas (width: number, height: number): CanvasRenderingContext2D\r\n{\r\n    const canvas = document.createElement('canvas');\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    return canvas.getContext('2d');\r\n}\r\n", "import { TextureManager } from './TextureManager';\r\n\r\nlet instance: TextureManager;\r\n\r\nexport const TextureManagerInstance =\r\n{\r\n    get: (): TextureManager =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (manager: TextureManager | null): void =>\r\n    {\r\n        instance = manager;\r\n    }\r\n};\r\n", "import { CreateCanvas } from './CreateCanvas';\r\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\r\nimport { Texture } from './Texture';\r\nimport { TextureManagerInstance } from './TextureManagerInstance';\r\n\r\nexport class TextureManager\r\n{\r\n    textures: Map<string, Texture>;\r\n\r\n    constructor ()\r\n    {\r\n        this.textures = new Map();\r\n\r\n        this.createDefaultTextures();\r\n\r\n        TextureManagerInstance.set(this);\r\n    }\r\n\r\n    private createDefaultTextures (): void\r\n    {\r\n        this.add('__BLANK', new Texture(CreateCanvas(32, 32).canvas));\r\n\r\n        const missing = CreateCanvas(32, 32);\r\n\r\n        missing.strokeStyle = '#0f0';\r\n        missing.moveTo(0, 0);\r\n        missing.lineTo(32, 32);\r\n        missing.stroke();\r\n        missing.strokeRect(0.5, 0.5, 31, 31);\r\n\r\n        this.add('__MISSING', new Texture(missing.canvas));\r\n\r\n        const white = CreateCanvas(32, 32);\r\n\r\n        white.fillStyle = '#fff';\r\n        white.fillRect(0, 0, 32, 32);\r\n\r\n        this.add('__WHITE', new Texture(white.canvas));\r\n    }\r\n\r\n    get (key: string): Texture\r\n    {\r\n        const textures = this.textures;\r\n\r\n        if (textures.has(key))\r\n        {\r\n            return textures.get(key);\r\n        }\r\n        else\r\n        {\r\n            return textures.get('__MISSING');\r\n        }\r\n    }\r\n\r\n    has (key: string): boolean\r\n    {\r\n        return this.textures.has(key);\r\n    }\r\n\r\n    add (key: string, source: Texture | HTMLImageElement, glConfig?: IGLTextureBindingConfig): Texture\r\n    {\r\n        let texture: Texture;\r\n        const textures = this.textures;\r\n\r\n        if (!textures.has(key))\r\n        {\r\n            if (source instanceof Texture)\r\n            {\r\n                texture = source;\r\n            }\r\n            else\r\n            {\r\n                texture = new Texture(source, 0, 0, glConfig);\r\n            }\r\n\r\n            texture.key = key;\r\n\r\n            textures.set(key, texture);\r\n        }\r\n\r\n        return texture;\r\n    }\r\n}\r\n", "import { AddToDOM, DOMContentLoaded } from './dom';\r\nimport { Emit, EventEmitter } from './events';\r\n\r\nimport { GameInstance } from './GameInstance';\r\nimport { GetBanner } from './config/banner';\r\nimport { GetGlobalVar } from './config/globalvar';\r\nimport { GetParent } from './config/parent';\r\nimport { GetRenderer } from './config/renderer';\r\nimport { IRenderer } from './renderer/IRenderer';\r\nimport { SceneManager } from './scenes/SceneManager';\r\nimport { SetConfigDefaults } from './config/SetConfigDefaults';\r\nimport { TextureManager } from './textures/TextureManager';\r\n\r\nexport class Game extends EventEmitter\r\n{\r\n    readonly VERSION: string = '4.0.0-beta1';\r\n\r\n    isBooted: boolean = false;\r\n    isPaused: boolean = false;\r\n\r\n    willUpdate: boolean = true;\r\n    willRender: boolean = true;\r\n\r\n    lastTick: number = 0;\r\n    elapsed: number = 0;\r\n\r\n    //  The current game frame\r\n    frame: number = 0;\r\n\r\n    renderer: IRenderer;\r\n    textureManager: TextureManager;\r\n    sceneManager: SceneManager;\r\n\r\n    constructor (...settings: { (): void }[])\r\n    {\r\n        super();\r\n\r\n        GameInstance.set(this);\r\n\r\n        SetConfigDefaults();\r\n\r\n        DOMContentLoaded(() => this.boot(settings));\r\n    }\r\n\r\n    boot (settings: { (): void }[]): void\r\n    {\r\n        //  Activate the settings post DOM Content Loaded\r\n        settings.forEach(setting => setting());\r\n\r\n        const renderer = GetRenderer();\r\n\r\n        this.renderer = new renderer();\r\n        this.textureManager = new TextureManager();\r\n        this.sceneManager = new SceneManager();\r\n\r\n        //  Only add to the DOM if they either didn't set a Parent, or expressly set it to be non-null\r\n        //  Otherwise we'll let them add the canvas to the DOM themselves\r\n        const parent = GetParent();\r\n\r\n        if (parent)\r\n        {\r\n            AddToDOM(this.renderer.canvas, parent);\r\n        }\r\n\r\n        const globalVar = GetGlobalVar();\r\n\r\n        if (globalVar && window)\r\n        {\r\n            (window as unknown)[globalVar] = this;\r\n        }\r\n\r\n        this.isBooted = true;\r\n\r\n        GetBanner();\r\n\r\n        Emit(this, 'boot');\r\n\r\n        this.lastTick = performance.now();\r\n\r\n        this.step(this.lastTick);\r\n    }\r\n\r\n    pause (): void\r\n    {\r\n        this.isPaused = true;\r\n    }\r\n\r\n    resume (): void\r\n    {\r\n        this.isPaused = false;\r\n\r\n        this.lastTick = performance.now();\r\n    }\r\n\r\n    step (time: number): void\r\n    {\r\n        //  Note that privacy.resistFingerprinting can round this value to 100ms or more!\r\n        const delta = time - this.lastTick;\r\n\r\n        this.lastTick = time;\r\n        this.elapsed += delta;\r\n\r\n        if (!this.isPaused)\r\n        {\r\n            if (this.willUpdate)\r\n            {\r\n                this.sceneManager.update(delta, time);\r\n\r\n                Emit(this, 'update', delta, time);\r\n            }\r\n\r\n            if (this.willRender)\r\n            {\r\n                this.renderer.render(this.sceneManager.render(this.frame));\r\n            }\r\n        }\r\n\r\n        //  The frame always advances by 1 each step (even when paused)\r\n        this.frame++;\r\n\r\n        GameInstance.setFrame(this.frame);\r\n        GameInstance.setElapsed(this.elapsed);\r\n\r\n        requestAnimationFrame(now => this.step(now));\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        //  TODO - Code destroy function\r\n    }\r\n}\r\n", "import { Loader } from './Loader';\r\n\r\nexport class File\r\n{\r\n    key: string;\r\n    url: string;\r\n    responseType: XMLHttpRequestResponseType = 'text';\r\n    crossOrigin: string | undefined = undefined;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    data: any;\r\n\r\n    error: ErrorEvent | undefined;\r\n    config: unknown;\r\n    skipCache: boolean = false;\r\n    hasLoaded: boolean = false;\r\n    loader: Loader;\r\n    load: () => Promise<File>;\r\n\r\n    constructor (key: string, url: string, config?: unknown)\r\n    {\r\n        this.key = key;\r\n        this.url = url;\r\n        this.config = config;\r\n    }\r\n}\r\n", "import { Loader } from './Loader';\r\n\r\nexport function GetURL (key: string, url: string, extension: string, loader?: Loader): string\r\n{\r\n    if (!url)\r\n    {\r\n        url = key + extension;\r\n    }\r\n\r\n    if ((/^(?:blob:|data:|http:\\/\\/|https:\\/\\/|\\/\\/)/).exec(url))\r\n    {\r\n        return url;\r\n    }\r\n    else if (loader)\r\n    {\r\n        return loader.baseURL + loader.path + url;\r\n    }\r\n    else\r\n    {\r\n        return url;\r\n    }\r\n}\r\n", "import { File } from './File';\r\n\r\nexport function ImageTagLoader (file: File): Promise<File>\r\n{\r\n    file.data = new Image();\r\n\r\n    if (file.crossOrigin)\r\n    {\r\n        file.data.crossOrigin = file.crossOrigin;\r\n    }\r\n\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        file.data.onload = (): void =>\r\n        {\r\n            if (file.data.onload)\r\n            {\r\n                file.data.onload = null;\r\n                file.data.onerror = null;\r\n                resolve(file);\r\n            }\r\n        };\r\n\r\n        file.data.onerror = (event: ErrorEvent): void =>\r\n        {\r\n            if (file.data.onload)\r\n            {\r\n                file.data.onload = null;\r\n                file.data.onerror = null;\r\n                file.error = event;\r\n                reject(file);\r\n            }\r\n        };\r\n\r\n        file.data.src = file.url;\r\n\r\n        // Image is immediately-available or cached\r\n\r\n        if (file.data.complete && file.data.width && file.data.height)\r\n        {\r\n            file.data.onload = null;\r\n            file.data.onerror = null;\r\n            resolve(file);\r\n        }\r\n    });\r\n}\r\n", "import { File } from '../File';\r\nimport { GetURL } from '../GetURL';\r\nimport { IGLTextureBindingConfig } from '../../renderer/webgl1/textures/IGLTextureBindingConfig';\r\nimport { ImageTagLoader } from '../ImageTagLoader';\r\nimport { TextureManagerInstance } from '../../textures/TextureManagerInstance';\r\n\r\nexport function ImageFile (key: string, url?: string, glConfig?: IGLTextureBindingConfig): File\r\n{\r\n    const file = new File(key, url);\r\n\r\n    file.load = (): Promise<File> =>\r\n    {\r\n        file.url = GetURL(file.key, file.url, '.png', file.loader);\r\n\r\n        if (file.loader)\r\n        {\r\n            file.crossOrigin = file.loader.crossOrigin;\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n        {\r\n            const textureManager = TextureManagerInstance.get();\r\n\r\n            if (textureManager.has(file.key))\r\n            {\r\n                resolve(file);\r\n            }\r\n            else\r\n            {\r\n                ImageTagLoader(file).then(file =>\r\n                {\r\n                    textureManager.add(file.key, file.data as HTMLImageElement, glConfig);\r\n\r\n                    resolve(file);\r\n\r\n                }).catch(file =>\r\n                {\r\n                    reject(file);\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    return file;\r\n}\r\n", "import { Emit, EventEmitter } from '../events';\r\n\r\nimport { File } from './File';\r\n\r\nexport class Loader extends EventEmitter\r\n{\r\n    baseURL: string = '';\r\n    path: string = '';\r\n    crossOrigin: string = 'anonymous';\r\n\r\n    //  -1 means load everything at once (only recommended on http/2 servers)\r\n    maxParallelDownloads: number = -1;\r\n\r\n    isLoading: boolean = false;\r\n    progress: number;\r\n\r\n    queue: Set<File>;\r\n    inflight: Set<File>;\r\n    completed: Set<File>;\r\n\r\n    onComplete: Function;\r\n    onError: Function;\r\n\r\n    constructor ()\r\n    {\r\n        super();\r\n\r\n        this.reset();\r\n    }\r\n\r\n    reset (): void\r\n    {\r\n        this.isLoading = false;\r\n\r\n        this.queue = new Set();\r\n        this.inflight = new Set();\r\n        this.completed = new Set();\r\n\r\n        this.progress = 0;\r\n    }\r\n\r\n    add (...file: File[]): this\r\n    {\r\n        file.forEach(entity =>\r\n        {\r\n            entity.loader = this;\r\n\r\n            this.queue.add(entity);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    start (): Promise<Loader>\r\n    {\r\n        if (this.isLoading)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n        {\r\n            this.completed.clear();\r\n            this.progress = 0;\r\n\r\n            if (this.queue.size > 0)\r\n            {\r\n                this.isLoading = true;\r\n\r\n                this.onComplete = resolve;\r\n                this.onError = reject;\r\n\r\n                // console.log('Loader.start');\r\n\r\n                Emit(this, 'start');\r\n\r\n                this.nextFile();\r\n            }\r\n            else\r\n            {\r\n                this.progress = 1;\r\n\r\n                Emit(this, 'complete');\r\n\r\n                resolve(this);\r\n                // onComplete();\r\n            }\r\n        });\r\n\r\n        /*\r\n        if (this.isLoading)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        this.completed.clear();\r\n        this.progress = 0;\r\n\r\n        if (this.queue.size > 0)\r\n        {\r\n            this.isLoading = true;\r\n\r\n            this.onComplete = onComplete;\r\n\r\n            // console.log('Loader.start');\r\n\r\n            Emit(this, 'start');\r\n\r\n            this.nextFile();\r\n        }\r\n        else\r\n        {\r\n            this.progress = 1;\r\n\r\n            Emit(this, 'complete');\r\n\r\n            onComplete();\r\n        }\r\n\r\n        return this;\r\n        */\r\n    }\r\n\r\n    nextFile (): void\r\n    {\r\n        let limit = this.queue.size;\r\n\r\n        if (this.maxParallelDownloads !== -1)\r\n        {\r\n            limit = Math.min(limit, this.maxParallelDownloads) - this.inflight.size;\r\n        }\r\n\r\n        // console.log('Loader.nextFile', limit);\r\n\r\n        if (limit)\r\n        {\r\n            // console.log('Batching', limit, 'files to download');\r\n\r\n            const iterator = this.queue.values();\r\n\r\n            while (limit > 0)\r\n            {\r\n                const file = iterator.next().value;\r\n\r\n                // console.log('Loader.nextFile', file.key, '=>', file.url);\r\n\r\n                this.inflight.add(file);\r\n\r\n                this.queue.delete(file);\r\n\r\n                file.load()\r\n                    .then(\r\n                        (file: File) => this.fileComplete(file)\r\n                    )\r\n                    .catch(\r\n                        (file: File) => this.fileError(file)\r\n                    );\r\n\r\n                limit--;\r\n            }\r\n        }\r\n        else if (this.inflight.size === 0)\r\n        {\r\n            // console.log('Loader inflight zero');\r\n\r\n            this.stop();\r\n\r\n            // window.setTimeout(() => this.stop(), 0);\r\n        }\r\n    }\r\n\r\n    stop (): void\r\n    {\r\n        if (!this.isLoading)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.isLoading = false;\r\n\r\n        Emit(this, 'complete', this.completed);\r\n\r\n        this.onComplete();\r\n\r\n        this.completed.clear();\r\n    }\r\n\r\n    private updateProgress (file: File): void\r\n    {\r\n        this.inflight.delete(file);\r\n        this.completed.add(file);\r\n\r\n        const totalCompleted = this.completed.size;\r\n        const totalQueued = this.queue.size + this.inflight.size;\r\n\r\n        if (totalCompleted > 0)\r\n        {\r\n            this.progress = totalCompleted / (totalCompleted + totalQueued);\r\n        }\r\n\r\n        Emit(this, 'progress', this.progress, totalCompleted, totalQueued);\r\n\r\n        this.nextFile();\r\n    }\r\n\r\n    private fileComplete (file: File): void\r\n    {\r\n        Emit(this, 'filecomplete', file);\r\n\r\n        this.updateProgress(file);\r\n    }\r\n\r\n    private fileError (file: File): void\r\n    {\r\n        Emit(this, 'fileerror', file);\r\n\r\n        this.updateProgress(file);\r\n    }\r\n\r\n    totalFilesToLoad (): number\r\n    {\r\n        return this.queue.size + this.inflight.size;\r\n    }\r\n\r\n    setBaseURL (url: string = ''): this\r\n    {\r\n        if (url !== '' && url.substr(-1) !== '/')\r\n        {\r\n            url = url.concat('/');\r\n        }\r\n\r\n        this.baseURL = url;\r\n\r\n        return this;\r\n    }\r\n\r\n    setPath (path: string = ''): this\r\n    {\r\n        if (path !== '' && path.substr(-1) !== '/')\r\n        {\r\n            path = path.concat('/');\r\n        }\r\n\r\n        this.path = path;\r\n\r\n        return this;\r\n    }\r\n\r\n    setCORS (crossOrigin: string): this\r\n    {\r\n        this.crossOrigin = crossOrigin;\r\n\r\n        return this;\r\n    }\r\n\r\n    setMaxParallelDownloads (max: number): this\r\n    {\r\n        this.maxParallelDownloads = max;\r\n\r\n        return this;\r\n    }\r\n}\r\n", "import { ISceneConfig } from './ISceneConfig';\r\n\r\nexport function GetConfigValue<Property extends keyof ISceneConfig> (config: ISceneConfig, property: Property, defaultValue: ISceneConfig[Property]): ISceneConfig[Property]\r\n{\r\n    if (Object.prototype.hasOwnProperty.call(config, property))\r\n    {\r\n        return config[property];\r\n    }\r\n    else\r\n    {\r\n        return defaultValue;\r\n    }\r\n}\r\n", "import { GetConfigValue } from './GetConfigValue';\r\nimport { IScene } from './IScene';\r\nimport { ISceneConfig } from './ISceneConfig';\r\nimport { SceneManagerInstance } from './SceneManagerInstance';\r\n\r\nexport function Install (scene: IScene, config: string | ISceneConfig = {}): void\r\n{\r\n    const sceneManager = SceneManagerInstance.get();\r\n\r\n    const size = sceneManager.scenes.size;\r\n    const sceneIndex = sceneManager.sceneIndex;\r\n    const firstScene = (size === 0);\r\n\r\n    if (typeof config === 'string')\r\n    {\r\n        scene.key = config;\r\n    }\r\n    else if (config || (!config && firstScene))\r\n    {\r\n        scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex.toString());\r\n    }\r\n\r\n    if (sceneManager.scenes.has(scene.key))\r\n    {\r\n        console.warn('Scene key already in use: ' + scene.key);\r\n    }\r\n    else\r\n    {\r\n        sceneManager.scenes.set(scene.key, scene);\r\n\r\n        sceneManager.flush = true;\r\n\r\n        sceneManager.sceneIndex++;\r\n    }\r\n}\r\n", "// import { Emit } from '../events/Emit';\r\n\r\nimport { Game } from '../Game';\r\nimport { GameInstance } from '../GameInstance';\r\nimport { IEventEmitter } from '../events/IEventEmitter';\r\nimport { IEventInstance } from '../events/IEventInstance';\r\nimport { IScene } from './IScene';\r\nimport { ISceneConfig } from './ISceneConfig';\r\nimport { Install } from './Install';\r\n\r\nexport class Scene implements IScene, IEventEmitter\r\n{\r\n    key: string;\r\n    game: Game;\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor (config?: string | ISceneConfig)\r\n    {\r\n        this.game = GameInstance.get();\r\n        this.events = new Map();\r\n\r\n        Install(this, config);\r\n    }\r\n\r\n    // shutdown (): void\r\n    // {\r\n    //     Emit(this, 'shutdown');\r\n    // }\r\n\r\n    // destroy (): void\r\n    // {\r\n    //     Emit(this, 'destroy');\r\n\r\n    //     this.events.clear();\r\n\r\n    //     this.game = null;\r\n    //     this.events = null;\r\n    // }\r\n}\r\n", "import { Matrix2D } from '../../math/mat2d';\r\nimport { Rectangle } from '../../geom/rectangle';\r\nimport { Vertices } from './Vertices';\r\n\r\nexport function GetVertices (worldTransform: Matrix2D, transformExtent: Rectangle): Vertices\r\n{\r\n    const { a, b, c, d, tx, ty } = worldTransform;\r\n    const { x, y, right, bottom } = transformExtent;\r\n\r\n    const x0 = (x * a) + (y * c) + tx;\r\n    const y0 = (x * b) + (y * d) + ty;\r\n\r\n    const x1 = (x * a) + (bottom * c) + tx;\r\n    const y1 = (x * b) + (bottom * d) + ty;\r\n\r\n    const x2 = (right * a) + (bottom * c) + tx;\r\n    const y2 = (right * b) + (bottom * d) + ty;\r\n\r\n    const x3 = (right * a) + (y * c) + tx;\r\n    const y3 = (right * b) + (y * d) + ty;\r\n\r\n    return { x0, y0, x1, y1, x2, y2, x3, y3 };\r\n}\r\n", "import { DIRTY_CONST } from '../../gameobjects/DIRTY_CONST';\r\nimport { GetVertices } from '../transform/GetVertices';\r\nimport { IBoundsComponent } from './IBoundsComponent';\r\nimport { IGameObject } from '../../gameobjects/IGameObject';\r\nimport { Rectangle } from '../../geom/rectangle/Rectangle';\r\n\r\nexport class BoundsComponent implements IBoundsComponent\r\n{\r\n    entity: IGameObject;\r\n\r\n    //  The bounds of the entity calculated in world space\r\n    private area: Rectangle;\r\n\r\n    fixed: boolean = false;\r\n\r\n    includeChildren: boolean = true;\r\n\r\n    visibleOnly: boolean = true;\r\n\r\n    constructor (entity: IGameObject)\r\n    {\r\n        this.entity = entity;\r\n\r\n        this.area = new Rectangle();\r\n    }\r\n\r\n    set (x: number, y: number, width: number, height: number): void\r\n    {\r\n        this.area.set(x, y, width, height);\r\n    }\r\n\r\n    get (): Rectangle\r\n    {\r\n        if (this.entity.isDirty(DIRTY_CONST.BOUNDS) && !this.fixed)\r\n        {\r\n            this.update();\r\n        }\r\n\r\n        return this.area;\r\n    }\r\n\r\n    updateLocal (): Rectangle\r\n    {\r\n        const { x0, y0, x1, y1, x2, y2, x3, y3 } = GetVertices(this.entity.worldTransform, this.entity.transformExtent);\r\n\r\n        const x = Math.min(x0, x1, x2, x3);\r\n        const y = Math.min(y0, y1, y2, y3);\r\n        const right = Math.max(x0, x1, x2, x3);\r\n        const bottom = Math.max(y0, y1, y2, y3);\r\n\r\n        return this.area.set(\r\n            x,\r\n            y,\r\n            right - x,\r\n            bottom - y\r\n        );\r\n    }\r\n\r\n    update (): Rectangle\r\n    {\r\n        //  First we get the bounds for this Game Object\r\n        const bounds = this.updateLocal();\r\n\r\n        this.entity.clearDirty(DIRTY_CONST.BOUNDS);\r\n\r\n        if (!this.includeChildren || !this.entity.numChildren)\r\n        {\r\n            return bounds;\r\n        }\r\n\r\n        const visibleOnly = this.visibleOnly;\r\n        const children = this.entity.children;\r\n\r\n        let x = bounds.x;\r\n        let y = bounds.y;\r\n        let right = bounds.right;\r\n        let bottom = bounds.bottom;\r\n\r\n        for (let i = 0; i < children.length; i++)\r\n        {\r\n            const child = children[i];\r\n\r\n            if (!child || (visibleOnly && !child.visible))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            const childBounds = child.bounds.get();\r\n\r\n            if (childBounds.x < x)\r\n            {\r\n                x = childBounds.x;\r\n            }\r\n\r\n            if (childBounds.y < y)\r\n            {\r\n                y = childBounds.y;\r\n            }\r\n\r\n            if (childBounds.right > right)\r\n            {\r\n                right = childBounds.right;\r\n            }\r\n\r\n            if (childBounds.bottom > bottom)\r\n            {\r\n                bottom = childBounds.bottom;\r\n            }\r\n        }\r\n\r\n        return bounds.set(\r\n            x,\r\n            y,\r\n            right - x,\r\n            bottom - y\r\n        );\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.entity = null;\r\n        this.area = null;\r\n    }\r\n}\r\n", "import { IGameObject } from '../../gameobjects/IGameObject';\r\nimport { IInputComponent } from './IInputComponent';\r\nimport { IInteractiveArea } from '../../input/IInteractiveArea';\r\n\r\nexport class InputComponent implements IInputComponent\r\n{\r\n    entity: IGameObject;\r\n    enabled: boolean = false;\r\n    enabledChildren: boolean = true;\r\n    hitArea: IInteractiveArea;\r\n\r\n    constructor (entity: IGameObject)\r\n    {\r\n        this.entity = entity;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.entity = null;\r\n        this.hitArea = null;\r\n    }\r\n}\r\n", "export class Vec2\r\n{\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor (x: number = 0, y: number = 0)\r\n    {\r\n        this.set(x, y);\r\n    }\r\n\r\n    set (x: number = 0, y: number = 0): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    toArray (dst: Float32List = [], index: number = 0): Float32List\r\n    {\r\n        const { x, y } = this;\r\n\r\n        dst[ index ] = x;\r\n        dst[ index + 1 ] = y;\r\n\r\n        return dst;\r\n    }\r\n\r\n    fromArray (src: Float32List, index: number = 0): this\r\n    {\r\n        return this.set(\r\n            src[ index ],\r\n            src[ index + 1 ]\r\n        );\r\n    }\r\n\r\n    toString (): string\r\n    {\r\n        const { x, y } = this;\r\n\r\n        return `{ x=${x}, y=${y} }`;\r\n    }\r\n}\r\n", "import { Vertex } from '../../../components/Vertex';\r\n\r\nexport function PackColors (vertices: Vertex[]): void\r\n{\r\n    vertices.forEach(vertex =>\r\n    {\r\n        vertex.packColor();\r\n    });\r\n}\r\n", "import { GetVertices } from './GetVertices';\r\nimport { Matrix2D } from '../../math/mat2d/Matrix2D';\r\nimport { Rectangle } from '../../geom/rectangle/Rectangle';\r\nimport { Vertex } from '../Vertex';\r\n\r\nexport function UpdateVertices (vertices: Vertex[], worldTransform: Matrix2D, transformExtent: Rectangle): void\r\n{\r\n    const { x0, y0, x1, y1, x2, y2, x3, y3 } = GetVertices(worldTransform, transformExtent);\r\n\r\n    vertices[0].setPosition(x0, y0);\r\n    vertices[1].setPosition(x1, y1);\r\n    vertices[2].setPosition(x2, y2);\r\n    vertices[3].setPosition(x3, y3);\r\n}\r\n", "import { DIRTY_CONST } from '../../gameobjects/DIRTY_CONST';\r\nimport { IGameObject } from '../../gameobjects/IGameObject';\r\nimport { PackColors } from '../../renderer/webgl1/colors/PackColors';\r\nimport { UpdateVertices } from './UpdateVertices';\r\n\r\nexport function PreRenderVertices <T extends IGameObject> (gameObject: T): T\r\n{\r\n    const vertices = gameObject.vertices;\r\n\r\n    if (gameObject.isDirty(DIRTY_CONST.COLORS))\r\n    {\r\n        PackColors(vertices);\r\n\r\n        gameObject.clearDirty(DIRTY_CONST.COLORS);\r\n    }\r\n\r\n    if (gameObject.isDirty(DIRTY_CONST.TRANSFORM))\r\n    {\r\n        UpdateVertices(vertices, gameObject.worldTransform, gameObject.transformExtent);\r\n\r\n        gameObject.clearDirty(DIRTY_CONST.TRANSFORM);\r\n    }\r\n\r\n    return gameObject;\r\n}\r\n", "import { IMatrix2D } from './IMatrix2D';\r\nimport { Matrix2D } from './Matrix2D';\r\n\r\n//  Copy the values from the src Matrix to the target Matrix and return the target Matrix.\r\n\r\nexport function Mat2dCopyFrom (src: IMatrix2D, target: Matrix2D): Matrix2D\r\n{\r\n    const { a, b, c, d, tx, ty } = src;\r\n\r\n    return target.set(a, b, c, d, tx, ty);\r\n}\r\n", "import { Mat2dCopyFrom } from '../../math/mat2d/Mat2dCopyFrom';\r\nimport { Matrix2D } from '../../math/mat2d';\r\n\r\nexport function UpdateWorldTransform (localTransform: Matrix2D, worldTransform: Matrix2D, passthru: boolean, parentWorldTransform?: Matrix2D): void\r\n{\r\n    if (!parentWorldTransform)\r\n    {\r\n        Mat2dCopyFrom(localTransform, worldTransform);\r\n    }\r\n    else if (passthru)\r\n    {\r\n        Mat2dCopyFrom(parentWorldTransform, worldTransform);\r\n    }\r\n    else\r\n    {\r\n        const { a, b, c, d, tx, ty } = localTransform;\r\n        const { a: pa, b: pb, c: pc, d: pd, tx: ptx, ty: pty } = parentWorldTransform;\r\n\r\n        worldTransform.set(\r\n            a  * pa + b  * pc,\r\n            a  * pb + b  * pd,\r\n            c  * pa + d  * pc,\r\n            c  * pb + d  * pd,\r\n            tx * pa + ty * pc + ptx,\r\n            tx * pb + ty * pd + pty\r\n        );\r\n    }\r\n}\r\n", "export function PackColor (rgb: number, alpha: number): number\r\n{\r\n    const ua = ((alpha * 255) | 0) & 0xFF;\r\n\r\n    return ((ua << 24) | rgb) >>> 0;\r\n}\r\n", "import { PackColor } from '../renderer/webgl1/colors/PackColor';\r\n\r\nexport class Vertex\r\n{\r\n    x: number = 0;\r\n    y: number = 0;\r\n    z: number = 0;\r\n\r\n    u: number = 0;\r\n    v: number = 0;\r\n\r\n    texture: number = 0;\r\n\r\n    tint: number = 0xffffff;\r\n    alpha: number = 1;\r\n    color: number = 4294967295;\r\n\r\n    constructor (x: number = 0, y: number = 0, z: number = 0)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n\r\n    setPosition (x: number, y: number, z: number = 0): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n\r\n        return this;\r\n    }\r\n\r\n    setUV (u: number, v: number): this\r\n    {\r\n        this.u = u;\r\n        this.v = v;\r\n\r\n        return this;\r\n    }\r\n\r\n    setColor (color: number, alpha: number = 1): this\r\n    {\r\n        this.tint = color;\r\n        this.alpha = alpha;\r\n\r\n        this.packColor();\r\n\r\n        return this;\r\n    }\r\n\r\n    setAlpha (value: number): this\r\n    {\r\n        this.alpha = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    setTint (value: number): this\r\n    {\r\n        this.tint = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    packColor (): void\r\n    {\r\n        this.color = PackColor(this.tint, this.alpha);\r\n    }\r\n}\r\n", "import { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { SetTexture } from '../renderpass/SetTexture';\r\nimport { Vertex } from '../../../components';\r\n\r\nexport function BatchTexturedQuad <T extends ITexture> (texture: T, vertices: Vertex[], renderPass: IRenderPass): void\r\n{\r\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\r\n\r\n    const textureIndex = SetTexture(renderPass, texture);\r\n\r\n    let vertOffset = offset;\r\n\r\n    vertices.forEach(vertex =>\r\n    {\r\n        F32[vertOffset + 0] = vertex.x;\r\n        F32[vertOffset + 1] = vertex.y;\r\n        F32[vertOffset + 2] = vertex.u;\r\n        F32[vertOffset + 3] = vertex.v;\r\n        F32[vertOffset + 4] = textureIndex;\r\n        U32[vertOffset + 5] = vertex.color;\r\n\r\n        vertOffset += 6;\r\n    });\r\n}\r\n\r\n/*\r\n    vertexData array structure:\r\n\r\n    0 = topLeft.x\r\n    1 = topLeft.y\r\n    2 = frame.u0\r\n    3 = frame.v0\r\n    4 = textureIndex\r\n    5 = topLeft.packedColor\r\n\r\n    6 = bottomLeft.x\r\n    7 = bottomLeft.y\r\n    8 = frame.u0\r\n    9 = frame.v1\r\n    10 = textureIndex\r\n    11 = bottomLeft.packedColor\r\n\r\n    12 = bottomRight.x\r\n    13 = bottomRight.y\r\n    14 = frame.u1\r\n    15 = frame.v1\r\n    16 = textureIndex\r\n    17 = bottomRight.packedColor\r\n\r\n    18 = topRight.x\r\n    19 = topRight.y\r\n    20 = frame.u1\r\n    21 = frame.v0\r\n    22 = textureIndex\r\n    23 = topRight.packedColor\r\n*/\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetDefaultOriginX (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).x;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetDefaultOriginY (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).y;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { IRectangle } from './IRectangle';\r\nimport { Vec2 } from '../../math/vec2/Vec2';\r\n\r\n/**\r\n * Returns the size of the Rectangle, expressed as a Point object.\r\n * With the value of the `width` as the `x` property and the `height` as the `y` property.\r\n */\r\nexport function GetRectangleSize (rect: IRectangle, out: Vec2 = new Vec2()): Vec2\r\n{\r\n    return out.set(rect.width, rect.height);\r\n}\r\n", "export const TRANSFORM_CONST = {\r\n\r\n    X: 0,\r\n    Y: 1,\r\n    ROTATION: 2,\r\n    SCALE_X: 3,\r\n    SCALE_Y: 4,\r\n    SKEW_X: 5,\r\n    SKEW_Y: 6,\r\n    ORIGIN_X: 7,\r\n    ORIGIN_Y: 8,\r\n    PASSTHRU: 9\r\n\r\n};\r\n", "export const TYPES_ENUM = {\r\n  i8: 'i8',\r\n  ui8: 'ui8',\r\n  ui8c: 'ui8c',\r\n  i16: 'i16',\r\n  ui16: 'ui16',\r\n  i32: 'i32',\r\n  ui32: 'ui32',\r\n  f32: 'f32',\r\n  f64: 'f64'\r\n}\r\n\r\nexport const TYPES_NAMES = {\r\n  i8: 'Int8',\r\n  ui8: 'Uint8',\r\n  ui8c: 'Uint8Clamped',\r\n  i16: 'Int16',\r\n  ui16: 'Uint16',\r\n  i32: 'Int32',\r\n  ui32: 'Uint32',\r\n  f32: 'Float32',\r\n  f64: 'Float64'\r\n}\r\n\r\nexport const TYPES = {\r\n  i8: Int8Array,\r\n  ui8: Uint8Array,\r\n  ui8c: Uint8ClampedArray,\r\n  i16: Int16Array,\r\n  ui16: Uint16Array,\r\n  i32: Int32Array,\r\n  ui32: Uint32Array,\r\n  f32: Float32Array,\r\n  f64: Float64Array\r\n}\r\n\r\nconst UNSIGNED_MAX = {\r\n  uint8: 2**8,\r\n  uint16: 2**16,\r\n  uint32: 2**32\r\n}\r\n\r\nconst roundToMultiple4 = x => Math.ceil(x / 4) * 4\r\n\r\nexport const $storeRef = Symbol('storeRef')\r\nexport const $storeSize = Symbol('storeSize')\r\nexport const $storeMaps = Symbol('storeMaps')\r\nexport const $storeFlattened = Symbol('storeFlattened')\r\nexport const $storeBase = Symbol('storeBase')\r\nexport const $storeType = Symbol('storeType')\r\n\r\nexport const $storeArrayCounts = Symbol('storeArrayCount')\r\nexport const $storeSubarrays = Symbol('storeSubarrays')\r\nexport const $storeCursor = Symbol('storeCursor')\r\nexport const $subarrayCursors = Symbol('subarrayCursors')\r\nexport const $subarray = Symbol('subarray')\r\nexport const $tagStore = Symbol('tagStore')\r\n\r\nexport const $queryShadow = Symbol('queryShadow')\r\nexport const $serializeShadow = Symbol('serializeShadow')\r\n\r\nexport const $indexType = Symbol('indexType')\r\nexport const $indexBytes = Symbol('indexBytes')\r\n\r\nconst stores = {}\r\n\r\nexport const resize = (ta, size) => {\r\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\r\n  const newTa = new ta.constructor(newBuffer)\r\n  newTa.set(ta, 0)\r\n  return newTa\r\n}\r\n\r\nconst resizeSubarray = (metadata, store, size) => {\r\n  const cursors = metadata[$subarrayCursors]\r\n  const type = store[$storeType]\r\n  const length = store[0].length\r\n  const indexType =\r\n    length < UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length < UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n  const arrayCount = metadata[$storeArrayCounts][type]\r\n  const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n  \r\n  // for threaded impl\r\n  // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n  // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n  // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n  const array = new TYPES[type](summedLength * size)\r\n\r\n  array.set(metadata[$storeSubarrays][type])\r\n  \r\n  metadata[$storeSubarrays][type] = array\r\n  metadata[$storeSubarrays][type][$queryShadow] = array.slice(0)\r\n  metadata[$storeSubarrays][type][$serializeShadow] = array.slice(0)\r\n  \r\n  array[$indexType] = TYPES_NAMES[indexType]\r\n  array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid].from = from\r\n    store[eid].to = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = array[$indexType]\r\n    store[eid][$indexBytes] = array[$indexBytes]\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n}\r\n\r\nconst resizeRecursive = (metadata, store, size) => {\r\n  Object.keys(store).forEach(key => {\r\n    const ta = store[key]\r\n    if (Array.isArray(ta)) {\r\n      resizeSubarray(metadata, ta, size)\r\n      store[$storeFlattened].push(ta)\r\n    } else if (ArrayBuffer.isView(ta)) {\r\n      store[key] = resize(ta, size)\r\n      store[$storeFlattened].push(store[key])\r\n      store[key][$queryShadow] = resize(ta[$queryShadow], size)\r\n      store[key][$serializeShadow] = resize(ta[$serializeShadow], size)\r\n    } else if (typeof ta === 'object') {\r\n      resizeRecursive(metadata, store[key], size)\r\n    }\r\n  })\r\n}\r\n\r\nexport const resizeStore = (store, size) => {\r\n  if (store[$tagStore]) return\r\n  store[$storeSize] = size\r\n  store[$storeFlattened].length = 0\r\n  Object.keys(store[$subarrayCursors]).forEach(k => {\r\n    store[$subarrayCursors][k] = 0\r\n  })\r\n  resizeRecursive(store, store, size)\r\n  // resizeSubarrays(store, size)\r\n}\r\n\r\nexport const resetStore = store => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      ta.fill(0)\r\n    })\r\n    Object.keys(store[$storeSubarrays]).forEach(key => {\r\n      store[$storeSubarrays][key].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nexport const resetStoreFor = (store, eid) => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\r\n      else ta[eid].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nconst createTypeStore = (type, length) => {\r\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\r\n  const buffer = new ArrayBuffer(totalBytes)\r\n  return new TYPES[type](buffer)\r\n}\r\n\r\nconst createArrayStore = (metadata, type, length) => {\r\n  const size = metadata[$storeSize]\r\n  const store = Array(size).fill(0)\r\n  store[$storeType] = type\r\n\r\n  const cursors = metadata[$subarrayCursors]\r\n  const indexType =\r\n    length < UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length < UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n\r\n  if (!length) throw new Error('\u274C Must define a length for component array.')\r\n  if (!TYPES[type]) throw new Error(`\u274C Invalid component array property type ${type}.`)\r\n\r\n  // create buffer for type if it does not already exist\r\n  if (!metadata[$storeSubarrays][type]) {\r\n    const arrayCount = metadata[$storeArrayCounts][type]\r\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n    \r\n    // for threaded impl\r\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n    // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n    const array = new TYPES[type](summedLength * size)\r\n\r\n    metadata[$storeSubarrays][type] = array\r\n    metadata[$storeSubarrays][type][$queryShadow] = array.slice(0)\r\n    metadata[$storeSubarrays][type][$serializeShadow] = array.slice(0)\r\n    \r\n    array[$indexType] = TYPES_NAMES[indexType]\r\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n  }\r\n\r\n  // pre-generate subarrays for each eid\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid].from = from\r\n    store[eid].to = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = TYPES_NAMES[indexType]\r\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n\r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  return store\r\n}\r\n\r\nconst createShadows = (store) => {\r\n  store[$queryShadow] = store.slice(0)\r\n  store[$serializeShadow] = store.slice(0)\r\n}\r\n\r\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\r\n\r\nexport const createStore = (schema, size) => {\r\n  const $store = Symbol('store')\r\n\r\n  if (!schema || !Object.keys(schema).length) {\r\n    // tag component\r\n    stores[$store] = {\r\n      [$storeSize]: size,\r\n      [$tagStore]: true,\r\n      [$storeBase]: () => stores[$store]\r\n    }\r\n    return stores[$store]\r\n  }\r\n\r\n  schema = JSON.parse(JSON.stringify(schema))\r\n\r\n  const arrayCounts = {}\r\n  const collectArrayCounts = s => {\r\n    const keys = Object.keys(s)\r\n    for (const k of keys) {\r\n      if (isArrayType(s[k])) {\r\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\r\n        arrayCounts[s[k][0]]++\r\n      } else if (s[k] instanceof Object) {\r\n        collectArrayCounts(s[k])\r\n      }\r\n    }\r\n  }\r\n  collectArrayCounts(schema)\r\n\r\n  const metadata = {\r\n    [$storeSize]: size,\r\n    [$storeMaps]: {},\r\n    [$storeSubarrays]: {},\r\n    [$storeRef]: $store,\r\n    [$storeCursor]: 0,\r\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\r\n    [$storeFlattened]: [],\r\n    [$storeArrayCounts]: arrayCounts\r\n  }\r\n\r\n  if (schema instanceof Object && Object.keys(schema).length) {\r\n\r\n    const recursiveTransform = (a, k) => {\r\n\r\n      if (typeof a[k] === 'string') {\r\n\r\n        a[k] = createTypeStore(a[k], size)\r\n        createShadows(a[k])\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n\r\n      } else if (isArrayType(a[k])) {\r\n        \r\n        const [type, length] = a[k]\r\n        a[k] = createArrayStore(metadata, type, length)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n        // Object.freeze(a[k])\r\n\r\n      } else if (a[k] instanceof Object) {\r\n        \r\n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\r\n        // Object.freeze(a[k])\r\n        \r\n      }\r\n\r\n      return a\r\n    }\r\n\r\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\r\n    stores[$store][$storeBase] = () => stores[$store]\r\n\r\n    // Object.freeze(stores[$store])\r\n\r\n    return stores[$store]\r\n\r\n  }\r\n}\r\n\r\nexport const free = (store) => {\r\n  delete stores[store[$storeRef]]\r\n}", "import { $indexBytes, $indexType, $serializeShadow, $storeBase, $storeFlattened, $tagStore } from \"./Storage.js\"\r\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\r\nimport { $entityArray, $entityEnabled, addEntity, eidToWorld } from \"./Entity.js\"\r\n\r\nlet resized = false\r\n\r\nexport const setSerializationResized = v => { resized = v }\r\n\r\nconst canonicalize = (target) => {\r\n  let componentProps = []\r\n  let changedProps = new Set()\r\n  if (Array.isArray(target)) {\r\n    componentProps = target\r\n      .map(p => {\r\n        if (typeof p === 'function' && p.name === 'QueryChanged') {\r\n          p()[$storeFlattened].forEach(prop => {\r\n            changedProps.add(prop)\r\n          })\r\n          return p()[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\r\n          return p[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\r\n          return p\r\n        }\r\n      })\r\n      .reduce((a,v) => a.concat(v), [])\r\n  }\r\n  return [componentProps, changedProps]\r\n}\r\n\r\nexport const defineSerializer = (target, maxBytes = 20000000) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n\r\n  let [componentProps, changedProps] = canonicalize(target)\r\n\r\n  // TODO: calculate max bytes based on target\r\n\r\n  const buffer = new ArrayBuffer(maxBytes)\r\n  const view = new DataView(buffer)\r\n\r\n  return ents => {\r\n\r\n    if (resized) {\r\n      [componentProps, changedProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n    \r\n    let world\r\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\r\n      world = ents\r\n      ents = ents[$entityArray]\r\n    } else {\r\n      world = eidToWorld.get(ents[0])\r\n    }\r\n\r\n    if (!ents.length) return\r\n\r\n    let where = 0\r\n\r\n    // iterate over component props\r\n    for (let pid = 0; pid < componentProps.length; pid++) {\r\n      const prop = componentProps[pid]\r\n      const diff = changedProps.has(prop)\r\n      \r\n      // write pid\r\n      view.setUint8(where, pid)\r\n      where += 1\r\n\r\n      // save space for entity count\r\n      const countWhere = where\r\n      where += 4\r\n      \r\n      let count = 0\r\n      // write eid,val\r\n      for (let i = 0; i < ents.length; i++) {\r\n        const eid = ents[i]\r\n\r\n        // skip if entity doesn't have this component\r\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\r\n          continue\r\n        }\r\n\r\n        // skip if diffing and no change\r\n        if (diff && prop[eid] === prop[$serializeShadow][eid]) {\r\n          continue\r\n        }\r\n        \r\n        count++\r\n\r\n        // write eid\r\n        view.setUint32(where, eid)\r\n        where += 4\r\n\r\n        if (prop[$tagStore]) {\r\n          continue\r\n        }\r\n\r\n        // if property is an array\r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const type = prop[eid].constructor.name.replace('Array', '')\r\n          const indexType = prop[eid][$indexType]\r\n          const indexBytes = prop[eid][$indexBytes]\r\n\r\n          // add space for count of dirty array elements\r\n          const countWhere2 = where\r\n          where += 1\r\n\r\n          let count2 = 0\r\n\r\n          // write index,value\r\n          for (let i = 0; i < prop[eid].length; i++) {\r\n            const value = prop[eid][i]\r\n\r\n            if (diff && prop[eid][i] === prop[eid][$serializeShadow][i]) {\r\n              continue\r\n            }\r\n\r\n            // write array index\r\n            view[`set${indexType}`](where, i)\r\n            where += indexBytes\r\n\r\n            // write value at that index\r\n            view[`set${type}`](where, value)\r\n            where += prop[eid].BYTES_PER_ELEMENT\r\n            count2++\r\n          }\r\n\r\n          // write total element count\r\n          view[`set${indexType}`](countWhere2, count2)\r\n\r\n        } else {\r\n          // regular property values\r\n          const type = prop.constructor.name.replace('Array', '')\r\n          // set value next [type] bytes\r\n          view[`set${type}`](where, prop[eid])\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          // sync shadow state\r\n          prop[$serializeShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n\r\n      view.setUint32(countWhere, count)\r\n    }\r\n    return buffer.slice(0, where)\r\n  }\r\n}\r\n\r\nexport const defineDeserializer = (target) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n  let [componentProps] = canonicalize(target)\r\n  return (world, packet) => {\r\n    \r\n    if (resized) {\r\n      [componentProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n\r\n    const view = new DataView(packet)\r\n    let where = 0\r\n\r\n    const newEntities = new Map()\r\n\r\n    while (where < packet.byteLength) {\r\n\r\n      // pid\r\n      const pid = view.getUint8(where)\r\n      where += 1\r\n\r\n      // entity count\r\n      const entityCount = view.getUint32(where)\r\n      where += 4\r\n\r\n      // component property\r\n      const prop = componentProps[pid]\r\n\r\n      // Get the entities and set their prop values\r\n      for (let i = 0; i < entityCount; i++) {\r\n        let eid = view.getUint32(where)\r\n        where += 4\r\n\r\n        let newEid = newEntities.get(eid)\r\n        if (newEid !== undefined) {\r\n          eid = newEid\r\n        }\r\n\r\n        // if this world hasn't seen this eid yet\r\n        if (!world[$entityEnabled][eid]) {\r\n          // make a new entity for the data\r\n          const newEid = addEntity(world)\r\n          newEntities.set(eid, newEid)\r\n          eid = newEid\r\n        }\r\n\r\n        const component = prop[$storeBase]()\r\n        if (!hasComponent(world, component, eid)) {\r\n          addComponent(world, component, eid)\r\n        }\r\n\r\n        if (component[$tagStore]) {\r\n          continue\r\n        }\r\n        \r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const array = prop[eid]\r\n          const count = view[`get${array[$indexType]}`](where)\r\n          where += array[$indexBytes]\r\n\r\n          // iterate over count\r\n          for (let i = 0; i < count; i++) {\r\n            const index = view[`get${array[$indexType]}`](where)\r\n            where += array[$indexBytes]\r\n\r\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\r\n            where += array.BYTES_PER_ELEMENT\r\n\r\n            prop[eid][index] = value\r\n          }\r\n        } else {\r\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          prop[eid] = value\r\n        }\r\n      }\r\n    }\r\n  }\r\n}", "import { $componentMap, resizeComponents } from './Component.js'\r\nimport { $queries, $queryMap, queryRemoveEntity } from './Query.js'\r\nimport { resize, resizeStore } from './Storage.js'\r\nimport { $size, $resizeThreshold, worlds, resizeWorlds } from './World.js'\r\nimport { setSerializationResized } from './Serialize.js'\r\n\r\nexport const $entityMasks = Symbol('entityMasks')\r\nexport const $entityEnabled = Symbol('entityEnabled')\r\nexport const $entityArray = Symbol('entityArray')\r\nexport const $entityIndices = Symbol('entityIndices')\r\nexport const $removedEntities = Symbol('removedEntities')\r\n\r\nconst NONE = 2**32\r\n\r\nexport const defaultSize = 100000\r\n\r\n// need a global EID cursor which all worlds and all components know about\r\n// so that world entities can posess entire rows spanning all component tables\r\nlet globalEntityCursor = 0\r\nlet globalSize = defaultSize\r\nlet resizeThreshold = () => globalSize - (globalSize / 5)\r\n\r\nexport const getGlobalSize = () => globalSize\r\n\r\n// removed eids should also be global to prevent memory leaks\r\nconst removed = []\r\n\r\nexport const resetGlobals = () => {\r\n  globalSize = defaultSize\r\n  globalEntityCursor = 0\r\n  removed.length = 0\r\n}\r\n\r\nexport const getEntityCursor = () => globalEntityCursor\r\nexport const getRemovedEntities = () => removed\r\n\r\nexport const eidToWorld = new Map()\r\n\r\nexport const addEntity = (world) => {\r\n  const enabled = world[$entityEnabled]\r\n  \r\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\r\n  enabled[eid] = 1\r\n  world[$entityIndices][eid] = world[$entityArray].push(eid) - 1\r\n  eidToWorld.set(eid, world)\r\n\r\n  // if data stores are 80% full\r\n  if (globalEntityCursor >= resizeThreshold()) {\r\n    // grow by half the original size rounded up to a multiple of 4\r\n    const size = globalSize\r\n    const amount = Math.ceil((size/2) / 4) * 4\r\n    const newSize = size + amount\r\n    globalSize = newSize\r\n    resizeWorlds(newSize)\r\n    resizeComponents(newSize)\r\n    setSerializationResized(true)\r\n    console.info(`\uD83D\uDC7E bitECS - resizing all worlds from ${size} to ${size+amount}`)\r\n  }\r\n\r\n  return eid\r\n}\r\n\r\nconst popSwap = (world, eid) => {\r\n  // pop swap\r\n  const index = world[$entityIndices][eid]\r\n\r\n  const swapped = world[$entityArray].pop()\r\n  if (swapped !== eid) {\r\n    world[$entityArray][index] = swapped\r\n    world[$entityIndices][swapped] = index\r\n  }\r\n  world[$entityIndices][eid] = NONE\r\n}\r\n\r\nexport const removeEntity = (world, eid) => {\r\n  const enabled = world[$entityEnabled]\r\n\r\n  // Check if entity is already removed\r\n  if (enabled[eid] === 0) return\r\n\r\n  // Remove entity from all queries\r\n  // TODO: archetype graph\r\n  world[$queries].forEach(query => {\r\n    queryRemoveEntity(world, query, eid)\r\n  })\r\n\r\n  // Free the entity\r\n  removed.push(eid)\r\n  enabled[eid] = 0\r\n\r\n  // pop swap\r\n  popSwap(world, eid)\r\n\r\n  // Clear entity bitmasks\r\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\r\n}", "import { $queryShadow, $storeFlattened, $storeSize } from './Storage.js'\r\nimport { $componentMap, registerComponent } from './Component.js'\r\nimport { $entityMasks, $entityEnabled, getEntityCursor } from './Entity.js'\r\n\r\nexport function Not(c) { return function QueryNot() { return c } }\r\nexport function Changed(c) { return function QueryChanged() { return c } }\r\n\r\nexport const $queries = Symbol('queries')\r\nexport const $queryMap = Symbol('queryMap')\r\nexport const $dirtyQueries = Symbol('$dirtyQueries')\r\nexport const $queryComponents = Symbol('queryComponents')\r\nexport const $enterQuery = Symbol('enterQuery')\r\nexport const $exitQuery = Symbol('exitQuery')\r\n\r\nconst NONE = 2**32\r\n\r\nexport const enterQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.entered.splice(0)\r\n}\r\n\r\nexport const exitQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.exited.splice(0)\r\n}\r\n\r\nexport const registerQuery = (world, query) => {\r\n\r\n  let components = []\r\n  let notComponents = []\r\n  let changedComponents = []\r\n\r\n  query[$queryComponents].forEach(c => {\r\n    if (typeof c === 'function') {\r\n      if (c.name === 'QueryNot') {\r\n        notComponents.push(c())\r\n      }\r\n      if (c.name === 'QueryChanged') {\r\n        changedComponents.push(c())\r\n        components.push(c())\r\n      }\r\n    } else {\r\n      components.push(c)\r\n    }\r\n  })\r\n\r\n  const mapComponents = c => world[$componentMap].get(c)\r\n\r\n  const size = components.concat(notComponents).reduce((a,c) => c[$storeSize] > a ? c[$storeSize] : a, 0)\r\n\r\n  const entities = []\r\n  const changed = []\r\n  const indices = new Uint32Array(size).fill(NONE)\r\n  const enabled = new Uint8Array(size)\r\n  const generations = components\r\n    .concat(notComponents)\r\n    .map (c => {\r\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\r\n      return c\r\n    })\r\n    .map(mapComponents)\r\n    .map(c => c.generationId)\r\n    .reduce((a,v) => {\r\n      if (a.includes(v)) return a\r\n      a.push(v)\r\n      return a\r\n    }, [])\r\n\r\n  const reduceBitmasks = (a,c) => {\r\n    if (!a[c.generationId]) a[c.generationId] = 0\r\n    a[c.generationId] |= c.bitflag\r\n    return a\r\n  }\r\n  const masks = components\r\n    .map(mapComponents)\r\n    .reduce(reduceBitmasks, {})\r\n\r\n  const notMasks = notComponents\r\n    .map(mapComponents)\r\n    .reduce((a,c) => {\r\n      if (!a[c.generationId]) {\r\n        a[c.generationId] = 0\r\n        a[c.generationId] |= c.bitflag\r\n      }\r\n      return a\r\n    }, {})\r\n\r\n  const flatProps = components\r\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\r\n    .reduce((a,v) => a.concat(v), [])\r\n\r\n  const toRemove = []\r\n  const entered = []\r\n  const exited = []\r\n\r\n  world[$queryMap].set(query, { \r\n    entities,\r\n    changed,\r\n    enabled,\r\n    components,\r\n    notComponents,\r\n    changedComponents,\r\n    masks,\r\n    notMasks,\r\n    generations,\r\n    indices,\r\n    flatProps,\r\n    toRemove,\r\n    entered,\r\n    exited,\r\n  })\r\n  \r\n  world[$queries].add(query)\r\n\r\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\r\n    if (!world[$entityEnabled][eid]) continue\r\n    if (queryCheckEntity(world, query, eid)) {\r\n      queryAddEntity(world, query, eid)\r\n    }\r\n  }\r\n}\r\n\r\nconst diff = (q) => {\r\n  q.changed.length = 0\r\n  const flat = q.flatProps\r\n  for (let i = 0; i < q.entities.length; i++) {\r\n    const eid = q.entities[i]\r\n    let dirty = false\r\n    for (let pid = 0; pid < flat.length; pid++) {\r\n      const prop = flat[pid]\r\n      if (ArrayBuffer.isView(prop[eid])) {\r\n        for (let i = 0; i < prop[eid].length; i++) {\r\n          if (prop[eid][i] !== prop[eid][$queryShadow][i]) {\r\n            dirty = true\r\n            prop[eid][$queryShadow][i] = prop[eid][i]\r\n          }\r\n        }\r\n      } else {\r\n        if (prop[eid] !== prop[$queryShadow][eid]) {\r\n          dirty = true\r\n          prop[$queryShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n    }\r\n    if (dirty) q.changed.push(eid)\r\n  }\r\n  return q.changed\r\n}\r\n\r\nexport const defineQuery = (components) => {\r\n  const query = function (world) {\r\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n    const q = world[$queryMap].get(query) \r\n    // queryHooks(q)\r\n    queryCommitRemovals(world, q)\r\n    if (q.changedComponents.length) return diff(q)\r\n    return q.entities\r\n  }\r\n  query[$queryComponents] = components\r\n  return query\r\n}\r\n\r\n// TODO: archetype graph\r\nexport const queryCheckEntity = (world, query, eid) => {\r\n  const { masks, notMasks, generations } = world[$queryMap].get(query)\r\n  for (let i = 0; i < generations.length; i++) {\r\n    const generationId = generations[i]\r\n    const qMask = masks[generationId]\r\n    const qNotMask = notMasks[generationId]\r\n    const eMask = world[$entityMasks][generationId][eid]\r\n    if (qNotMask && (eMask & qNotMask) !== 0) {\r\n      return false\r\n    }\r\n    if (qMask && (eMask & qMask) !== qMask) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport const queryCheckComponent = (world, query, component) => {\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n  const { masks } = world[$queryMap].get(query)\r\n  const mask = masks[generationId]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const queryAddEntity = (world, query, eid) => {\r\n  const q = world[$queryMap].get(query)\r\n  if (q.enabled[eid]) return\r\n  q.enabled[eid] = true\r\n  q.entities.push(eid)\r\n  q.indices[eid] = q.entities.length - 1\r\n  // TODO: pop swap so dupes don't enter\r\n  q.entered.push(eid)\r\n}\r\n\r\nconst queryCommitRemovals = (world, q) => {\r\n  while (q.toRemove.length) {\r\n    const eid = q.toRemove.pop()\r\n    const index = q.indices[eid]\r\n    if (index === NONE) continue\r\n\r\n    const swapped = q.entities.pop()\r\n    if (swapped !== eid) {\r\n      q.entities[index] = swapped\r\n      q.indices[swapped] = index\r\n    }\r\n    q.indices[eid] = NONE\r\n  }\r\n  world[$dirtyQueries].delete(q)\r\n}\r\n\r\nexport const commitRemovals = (world) => {\r\n  world[$dirtyQueries].forEach(q => {\r\n    queryCommitRemovals(world, q)\r\n  })\r\n}\r\n\r\nexport const queryRemoveEntity = (world, query, eid) => {\r\n  const q = world[$queryMap].get(query)\r\n  if (!q.enabled[eid]) return\r\n  q.enabled[eid] = false\r\n  q.toRemove.push(eid)\r\n  world[$dirtyQueries].add(q)\r\n  // TODO: pop swap so dupes don't enter\r\n  q.exited.push(eid)\r\n}\r\n", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\r\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, queryCheckComponent } from './Query.js'\r\nimport { $bitflag, $size } from './World.js'\r\nimport { $entityMasks, defaultSize } from './Entity.js'\r\n\r\nexport const $componentMap = Symbol('componentMap')\r\n\r\nexport const components = []\r\n\r\nexport const resizeComponents = (size) => {\r\n  components.forEach(component => resizeStore(component, size))\r\n}\r\n\r\nexport const defineComponent = (schema) => {\r\n  const component = createStore(schema, defaultSize)\r\n  if (schema && Object.keys(schema).length) components.push(component)\r\n  return component\r\n}\r\n\r\nexport const incrementBitflag = (world) => {\r\n  world[$bitflag] *= 2\r\n  if (world[$bitflag] >= 2**32) {\r\n    world[$bitflag] = 1\r\n    world[$entityMasks].push(new Uint32Array(world[$size]))\r\n  }\r\n}\r\n\r\nexport const registerComponent = (world, component) => {\r\n  world[$componentMap].set(component, { \r\n    generationId: world[$entityMasks].length - 1,\r\n    bitflag: world[$bitflag],\r\n    store: component\r\n  })\r\n\r\n  if (component[$storeSize] < world[$size]) {\r\n    resizeStore(component, world[$size])\r\n  }\r\n\r\n  incrementBitflag(world)\r\n}\r\n\r\nexport const registerComponents = (world, components) => {\r\n  components.forEach(c => registerComponent(world, c))\r\n}\r\n\r\nexport const hasComponent = (world, component, eid) => {\r\n  const registeredComponent = world[$componentMap].get(component)\r\n  if (!registeredComponent) return\r\n  const { generationId, bitflag } = registeredComponent\r\n  const mask = world[$entityMasks][generationId][eid]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const addComponent = (world, component, eid, reset=false) => {\r\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\r\n  if (hasComponent(world, component, eid)) return\r\n  // Add bitflag to entity bitmask\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n  world[$entityMasks][generationId][eid] |= bitflag\r\n\r\n  // todo: archetype graph\r\n  world[$queries].forEach(query => {\r\n    if (!queryCheckComponent(world, query, component)) return\r\n    const match = queryCheckEntity(world, query, eid)\r\n    if (match) queryAddEntity(world, query, eid)\r\n  })\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n\r\nexport const removeComponent = (world, component, eid, reset=true) => {\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n\r\n  if (!(world[$entityMasks][generationId][eid] & bitflag)) return\r\n\r\n  // todo: archetype graph\r\n  world[$queries].forEach(query => {\r\n    if (!queryCheckComponent(world, query, component)) return\r\n    const match = queryCheckEntity(world, query, eid)\r\n    if (match) queryRemoveEntity(world, query, eid)\r\n  })\r\n\r\n  // Remove flag from entity bitmask\r\n  world[$entityMasks][generationId][eid] &= ~bitflag\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n", "import { $componentMap } from './Component.js'\r\nimport { $queryMap, $queries, $dirtyQueries } from './Query.js'\r\nimport { $entityArray, $entityIndices, $entityEnabled, $entityMasks, getGlobalSize } from './Entity.js'\r\nimport { resize } from './Storage.js'\r\n\r\nexport const $size = Symbol('size')\r\nexport const $resizeThreshold = Symbol('resizeThreshold')\r\nexport const $bitflag = Symbol('bitflag')\r\n\r\n\r\nexport const worlds = []\r\n\r\nexport const resizeWorlds = (size) => {\r\n  worlds.forEach(world => {\r\n    world[$size] = size\r\n    \r\n    world[$queryMap].forEach(q => {\r\n      q.indices = resize(q.indices, size)\r\n      q.enabled = resize(q.enabled, size)\r\n    })\r\n    \r\n    world[$entityEnabled] = resize(world[$entityEnabled], size)\r\n    world[$entityIndices] = resize(world[$entityIndices], size)\r\n    \r\n    for (let i = 0; i < world[$entityMasks].length; i++) {\r\n      const masks = world[$entityMasks][i];\r\n      world[$entityMasks][i] = resize(masks, size)\r\n    }\r\n    \r\n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\r\n  })\r\n}\r\n\r\nexport const createWorld = () => {\r\n  const world = {}\r\n  const size = getGlobalSize()\r\n\r\n  world[$size] = size\r\n\r\n  world[$entityEnabled] = new Uint8Array(size)\r\n  world[$entityMasks] = [new Uint32Array(size)]\r\n\r\n  world[$entityArray] = []\r\n  world[$entityIndices] = new Uint32Array(size)\r\n\r\n  world[$bitflag] = 1\r\n\r\n  world[$componentMap] = new Map()\r\n\r\n  world[$queryMap] = new Map()\r\n  world[$queries] = new Set()\r\n  world[$dirtyQueries] = new Set()\r\n\r\n  worlds.push(world)\r\n\r\n  return world\r\n}\r\n", "import { commitRemovals } from './Query.js'\r\n\r\nexport const defineSystem = (fn1, fn2) => {\r\n  const update = fn2 !== undefined ? fn2 : fn1\r\n  const create = fn2 !== undefined ? fn1 : undefined\r\n  const init = new Set()\r\n  const system = world => {\r\n    if (create && !init.has(world)) {\r\n      create(world)\r\n      init.add(world)\r\n    }\r\n    update(world)\r\n    commitRemovals(world)\r\n    return world\r\n  }\r\n\r\n  Object.defineProperty(system, 'name', {\r\n    value: (update.name || \"AnonymousSystem\") + \"_internal\",\r\n    configurable: true,\r\n  })\r\n\r\n  return system\r\n}", "import { createWorld } from './World.js'\r\nimport { addEntity, removeEntity } from './Entity.js'\r\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\r\nimport { defineSystem } from './System.js'\r\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals } from './Query.js'\r\nimport { defineSerializer, defineDeserializer } from './Serialize.js'\r\nimport { TYPES_ENUM } from './Storage.js'\r\n\r\nexport const pipe = (...fns) => input => {\r\n  if (!input || Array.isArray(input) && input.length === 0) return\r\n  fns = Array.isArray(fns[0]) ? fns[0] : fns\r\n  let tmp = input\r\n  for (let i = 0; i < fns.length; i++) {\r\n    const fn = fns[i]\r\n    if (Array.isArray(tmp)) {\r\n      tmp = tmp.reduce((a,v) => a.concat(fn(v)),[])\r\n    } else {\r\n      tmp = fn(tmp)\r\n    }\r\n  }\r\n  return tmp\r\n}\r\n\r\nexport const Types = TYPES_ENUM\r\n\r\nexport {\r\n\r\n  createWorld,\r\n  addEntity,\r\n  removeEntity,\r\n\r\n  registerComponent,\r\n  registerComponents,\r\n  defineComponent,\r\n  addComponent,\r\n  removeComponent,\r\n  hasComponent,\r\n  \r\n  defineQuery,\r\n  Changed,\r\n  Not,\r\n  enterQuery,\r\n  exitQuery,\r\n  commitRemovals,\r\n\r\n  defineSystem,\r\n  \r\n  defineSerializer,\r\n  defineDeserializer,\r\n\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst TransformComponent = defineComponent({\r\n    x: Types.f32,\r\n    y: Types.f32,\r\n    rotation: Types.f32,\r\n    scaleX: Types.f32,\r\n    scaleY: Types.f32,\r\n    skewX: Types.f32,\r\n    skewY: Types.f32\r\n});\r\n\r\nexport const Transform2D = TransformComponent;\r\n", "import { createWorld } from 'bitecs';\r\n\r\nconst world = createWorld();\r\n\r\nexport const World = world;\r\n", "import { GetDefaultOriginX, GetDefaultOriginY } from '../config/defaultorigin';\r\nimport { UpdateLocalTransform, UpdateWorldTransform } from '../components/transform';\r\n\r\nimport { BoundsComponent } from '../components/bounds/BoundsComponent';\r\nimport { DIRTY_CONST } from './DIRTY_CONST';\r\nimport { DestroyChildren } from '../display/DestroyChildren';\r\nimport { DestroyEvent } from './events/DestroyEvent';\r\nimport { Emit } from '../events/Emit';\r\nimport { GameInstance } from '../GameInstance';\r\nimport { GetRectangleSize } from '../geom/rectangle/GetRectangleSize';\r\nimport { IBaseWorld } from '../world/IBaseWorld';\r\nimport { IBoundsComponent } from '../components/bounds/IBoundsComponent';\r\nimport { ICanvasRenderer } from '../renderer/canvas/ICanvasRenderer';\r\nimport { IEventInstance } from '../events/IEventInstance';\r\nimport { IGameObject } from './IGameObject';\r\nimport { IInputComponent } from '../components/input/IInputComponent';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { InputComponent } from '../components/input/InputComponent';\r\nimport { Matrix2D } from '../math/mat2d/Matrix2D';\r\nimport { Position } from '../components/Position';\r\nimport { Rectangle } from '../geom/rectangle/Rectangle';\r\nimport { ReparentChildren } from '../display/ReparentChildren';\r\nimport { TRANSFORM_CONST } from '../components/transform/TRANSFORM_CONST';\r\nimport { Transform2D } from '../components/Transform2D';\r\nimport { Vec2 } from '../math/vec2/Vec2';\r\nimport { Vertex } from '../components/Vertex';\r\nimport { World } from '../components/World';\r\nimport { addEntity } from 'bitecs';\r\n\r\nexport class GameObject implements IGameObject\r\n{\r\n    name: string = '';\r\n\r\n    //  The World this Game Object belongs to. A Game Object can only belong to one World instance at any one time.\r\n    world: IBaseWorld;\r\n\r\n    //  The direct parent of this Game Object in the scene graph (if any)\r\n    parent: IGameObject;\r\n\r\n    children: IGameObject[];\r\n\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    willUpdate: boolean = true;\r\n    willUpdateChildren: boolean = true;\r\n\r\n    willRender: boolean = true;\r\n    willRenderChildren: boolean = true;\r\n    willCacheChildren: boolean = false;\r\n\r\n    dirty: number = 0;\r\n    dirtyFrame: number = 0;\r\n\r\n    localTransform: Matrix2D;\r\n    worldTransform: Matrix2D;\r\n    transformData: Float32Array;\r\n    transformExtent: Rectangle;\r\n\r\n    id: number;\r\n\r\n    bounds: IBoundsComponent;\r\n    input: IInputComponent;\r\n\r\n    vertices: Vertex[];\r\n\r\n    visible: boolean = true;\r\n\r\n    constructor (x: number = 0, y: number = 0)\r\n    {\r\n        this.children = [];\r\n        this.vertices = [];\r\n\r\n        this.events = new Map();\r\n\r\n        this.localTransform = new Matrix2D();\r\n        this.worldTransform = new Matrix2D();\r\n\r\n        //  See TRANSFORM_CONST for array layout\r\n        this.transformData = new Float32Array([ x, y, 0, 1, 1, 0, 0, GetDefaultOriginX(), GetDefaultOriginY(), 0 ]);\r\n        this.transformExtent = new Rectangle();\r\n\r\n        this.bounds = new BoundsComponent(this);\r\n        this.input = new InputComponent(this);\r\n\r\n        this.dirty = DIRTY_CONST.DEFAULT;\r\n\r\n        const id = addEntity(World);\r\n\r\n        Transform2D.x[id] = x;\r\n        Transform2D.y[id] = y;\r\n        Transform2D.rotation[id] = 0;\r\n        Transform2D.scaleX[id] = 1;\r\n        Transform2D.scaleY[id] = 1;\r\n        Transform2D.skewX[id] = 0;\r\n        Transform2D.skewY[id] = 0;\r\n\r\n        this.id = id;\r\n\r\n        this.updateTransform();\r\n\r\n        // this.updateLocalTransform();\r\n        // this.updateWorldTransform();\r\n    }\r\n\r\n    isRenderable (): boolean\r\n    {\r\n        return (this.visible && this.willRender);\r\n    }\r\n\r\n    isDirty (flag: number): boolean\r\n    {\r\n        return (this.dirty & flag) !== 0;\r\n    }\r\n\r\n    clearDirty (flag: number): this\r\n    {\r\n        if (this.isDirty(flag))\r\n        {\r\n            this.dirty ^= flag;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    setDirty (flag: number, flag2?: number): this\r\n    {\r\n        if (!this.isDirty(flag))\r\n        {\r\n            this.dirty ^= flag;\r\n            this.dirtyFrame = GameInstance.getFrame();\r\n        }\r\n\r\n        if (!this.isDirty(flag2))\r\n        {\r\n            this.dirty ^= flag2;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    update (delta: number, time: number): void\r\n    {\r\n        if (this.willUpdateChildren)\r\n        {\r\n            const children = this.children;\r\n\r\n            for (let i = 0; i < children.length; i++)\r\n            {\r\n                const child = children[i];\r\n\r\n                if (child && child.willUpdate)\r\n                {\r\n                    child.update(delta, time);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.postUpdate(delta, time);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    postUpdate (delta: number, time: number): void\r\n    {\r\n        //  Empty for parent classes to use.\r\n        //  Called after this GameObject and all of its children have been updated.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        //  Called after this GameObject and all of its children have been rendered.\r\n        //  If it doesn't have any children, this method is never called.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    postRenderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n        //  Called after this GameObject and all of its children have been rendered.\r\n        //  If it doesn't have any children, this method is never called.\r\n    }\r\n\r\n    get numChildren (): number\r\n    {\r\n        return this.children.length;\r\n    }\r\n\r\n    getBounds (): Rectangle\r\n    {\r\n        return this.bounds.get();\r\n    }\r\n\r\n    /*\r\n    updateTransform (flag: number, value: number): void\r\n    {\r\n        if (this.transformData[flag] !== value)\r\n        {\r\n            this.transformData[flag] = value;\r\n\r\n            this.updateLocalTransform();\r\n            this.updateWorldTransform();\r\n        }\r\n    }\r\n\r\n    updateLocalTransform (): void\r\n    {\r\n        this.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\r\n\r\n        UpdateLocalTransform(this.localTransform, this.transformData);\r\n    }\r\n    */\r\n\r\n    updateTransform (): void\r\n    {\r\n        this.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\r\n\r\n        const id = this.id;\r\n\r\n        const x = Transform2D.x[id];\r\n        const y = Transform2D.y[id];\r\n        const rotation = Transform2D.rotation[id];\r\n        const scaleX = Transform2D.scaleX[id];\r\n        const scaleY = Transform2D.scaleY[id];\r\n        const skewX = Transform2D.skewX[id];\r\n        const skewY = Transform2D.skewY[id];\r\n\r\n        this.localTransform.set(\r\n            Math.cos(rotation + skewY) * scaleX,\r\n            Math.sin(rotation + skewY) * scaleX,\r\n            -Math.sin(rotation - skewX) * scaleY,\r\n            Math.cos(rotation - skewX) * scaleY,\r\n            x,\r\n            y\r\n        );\r\n\r\n        this.updateWorldTransform();\r\n    }\r\n\r\n    updateWorldTransform (): void\r\n    {\r\n        this.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\r\n\r\n        const parentWorldTransform = (this.parent) ? this.parent.worldTransform : undefined;\r\n\r\n        UpdateWorldTransform(this.localTransform, this.worldTransform, this.passthru, parentWorldTransform);\r\n\r\n        if (this.numChildren)\r\n        {\r\n            //  Sweep all children - by this point our local and world transforms are correct\r\n            const children = this.children;\r\n\r\n            for (let i = 0; i < children.length; i++)\r\n            {\r\n                const child = children[i];\r\n\r\n                child.updateWorldTransform();\r\n            }\r\n        }\r\n    }\r\n\r\n    //  The area covered by this transform component + origin + size (usually from a Frame)\r\n    setExtent (x: number, y: number, width: number, height: number): void\r\n    {\r\n        this.transformExtent.set(x, y, width, height);\r\n\r\n        this.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\r\n    }\r\n\r\n    updateExtent (width?: number, height?: number): void\r\n    {\r\n        const extent = this.transformExtent;\r\n\r\n        if (width !== undefined)\r\n        {\r\n            extent.width = width;\r\n        }\r\n\r\n        if (height !== undefined)\r\n        {\r\n            extent.height = height;\r\n        }\r\n\r\n        extent.x = -(this.originX) * extent.width;\r\n        extent.y = -(this.originY) * extent.height;\r\n\r\n        this.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\r\n    }\r\n\r\n    setSize (width: number, height: number = width): this\r\n    {\r\n        this.updateExtent(width, height);\r\n\r\n        return this;\r\n    }\r\n\r\n    setPosition (x: number, y: number): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    setSkew (x: number, y: number = x): this\r\n    {\r\n        this.skewX = x;\r\n        this.skewY = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    setScale (x: number, y: number = x): this\r\n    {\r\n        this.scaleX = x;\r\n        this.scaleY = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    setRotation (value: number): this\r\n    {\r\n        this.rotation = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    setOrigin (x: number, y: number = x): this\r\n    {\r\n        const transformData = this.transformData;\r\n\r\n        transformData[TRANSFORM_CONST.ORIGIN_X] = x;\r\n        transformData[TRANSFORM_CONST.ORIGIN_Y] = y;\r\n\r\n        this.updateExtent();\r\n\r\n        return this;\r\n    }\r\n\r\n    getSize (out: Vec2 = new Vec2()): Vec2\r\n    {\r\n        return GetRectangleSize(this.transformExtent, out);\r\n    }\r\n\r\n    getPosition (out: Vec2 = new Vec2()): Vec2\r\n    {\r\n        return out.set(this.x, this.y);\r\n    }\r\n\r\n    getOrigin (out: Vec2 = new Vec2()): Vec2\r\n    {\r\n        return out.set(this.originX, this.originY);\r\n    }\r\n\r\n    getSkew (out: Vec2 = new Vec2()): Vec2\r\n    {\r\n        return out.set(this.skewX, this.skewY);\r\n    }\r\n\r\n    getScale (out: Vec2 = new Vec2()): Vec2\r\n    {\r\n        return out.set(this.scaleX, this.scaleY);\r\n    }\r\n\r\n    getRotation (): number\r\n    {\r\n        return this.rotation;\r\n    }\r\n\r\n    set width (value: number)\r\n    {\r\n        this.updateExtent(value);\r\n    }\r\n\r\n    get width (): number\r\n    {\r\n        return this.transformExtent.width;\r\n    }\r\n\r\n    set height (value: number)\r\n    {\r\n        this.updateExtent(undefined, value);\r\n    }\r\n\r\n    get height (): number\r\n    {\r\n        return this.transformExtent.height;\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        Transform2D.x[this.id] = value;\r\n\r\n        this.updateTransform();\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return Transform2D.x[this.id];\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        Transform2D.y[this.id] = value;\r\n\r\n        this.updateTransform();\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return Transform2D.y[this.id];\r\n    }\r\n\r\n    set originX (value: number)\r\n    {\r\n        const transformData = this.transformData;\r\n\r\n        if (value !== transformData[TRANSFORM_CONST.ORIGIN_X])\r\n        {\r\n            transformData[TRANSFORM_CONST.ORIGIN_X] = value;\r\n\r\n            this.updateExtent();\r\n        }\r\n    }\r\n\r\n    get originX (): number\r\n    {\r\n        return this.transformData[TRANSFORM_CONST.ORIGIN_X];\r\n    }\r\n\r\n    set originY (value: number)\r\n    {\r\n        const transformData = this.transformData;\r\n\r\n        if (value !== transformData[TRANSFORM_CONST.ORIGIN_Y])\r\n        {\r\n            transformData[TRANSFORM_CONST.ORIGIN_Y] = value;\r\n\r\n            this.updateExtent();\r\n        }\r\n    }\r\n\r\n    get originY (): number\r\n    {\r\n        return this.transformData[TRANSFORM_CONST.ORIGIN_Y];\r\n    }\r\n\r\n    set skewX (value: number)\r\n    {\r\n        Transform2D.skewX[this.id] = value;\r\n\r\n        this.updateTransform();\r\n    }\r\n\r\n    get skewX (): number\r\n    {\r\n        return Transform2D.skewX[this.id];\r\n    }\r\n\r\n    set skewY (value: number)\r\n    {\r\n        Transform2D.skewY[this.id] = value;\r\n\r\n        this.updateTransform();\r\n    }\r\n\r\n    get skewY (): number\r\n    {\r\n        return Transform2D.skewY[this.id];\r\n    }\r\n\r\n    set scaleX (value: number)\r\n    {\r\n        Transform2D.scaleX[this.id] = value;\r\n\r\n        this.updateTransform();\r\n    }\r\n\r\n    get scaleX (): number\r\n    {\r\n        return Transform2D.scaleX[this.id];\r\n    }\r\n\r\n    set scaleY (value: number)\r\n    {\r\n        Transform2D.scaleY[this.id] = value;\r\n\r\n        this.updateTransform();\r\n    }\r\n\r\n    get scaleY (): number\r\n    {\r\n        return Transform2D.scaleY[this.id];\r\n    }\r\n\r\n    set rotation (value: number)\r\n    {\r\n        Transform2D.rotation[this.id] = value;\r\n\r\n        this.updateTransform();\r\n    }\r\n\r\n    get rotation (): number\r\n    {\r\n        return Transform2D.rotation[this.id];\r\n    }\r\n\r\n    set passthru (value: boolean)\r\n    {\r\n        // this.updateTransform(TRANSFORM_CONST.PASSTHRU, Number(value));\r\n    }\r\n\r\n    get passthru (): boolean\r\n    {\r\n        return Boolean(this.transformData[TRANSFORM_CONST.PASSTHRU]);\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        if (reparentChildren)\r\n        {\r\n            ReparentChildren(this, reparentChildren);\r\n        }\r\n        else\r\n        {\r\n            DestroyChildren(this);\r\n        }\r\n\r\n        Emit(this, DestroyEvent, this);\r\n\r\n        this.bounds.destroy();\r\n        this.input.destroy();\r\n\r\n        this.events.clear();\r\n\r\n        this.world = null;\r\n        this.parent = null;\r\n        this.children = null;\r\n\r\n        this.vertices = [];\r\n    }\r\n}\r\n", "import { DIRTY_CONST } from '../DIRTY_CONST';\r\nimport { GameObject } from '../GameObject';\r\nimport { IContainer } from './IContainer';\r\n\r\nexport class Container extends GameObject implements IContainer\r\n{\r\n    protected _alpha: number = 1;\r\n\r\n    constructor (x: number = 0, y: number = 0)\r\n    {\r\n        super(x, y);\r\n    }\r\n\r\n    get alpha (): number\r\n    {\r\n        return this._alpha;\r\n    }\r\n\r\n    set alpha (value: number)\r\n    {\r\n        if (value !== this._alpha)\r\n        {\r\n            this._alpha = value;\r\n\r\n            this.vertices.forEach(vertex =>\r\n            {\r\n                vertex.setAlpha(value);\r\n            });\r\n\r\n            this.setDirty(DIRTY_CONST.COLORS);\r\n        }\r\n    }\r\n}\r\n", "import { Frame } from '../../../textures';\r\nimport { ICanvasRenderer } from '../ICanvasRenderer';\r\nimport { Matrix2D } from '../../../math/mat2d';\r\nimport { Rectangle } from '../../../geom/rectangle';\r\n\r\nexport function DrawImage (frame: Frame, alpha: number, worldTransform: Matrix2D, transformExtent: Rectangle, renderer: ICanvasRenderer): void\r\n{\r\n    if (!frame)\r\n    {\r\n        return;\r\n    }\r\n\r\n    const ctx = renderer.ctx;\r\n\r\n    const { a, b, c, d, tx, ty } = worldTransform;\r\n    const { x, y } = transformExtent;\r\n\r\n    ctx.save();\r\n\r\n    ctx.setTransform(a, b, c, d, tx, ty);\r\n\r\n    ctx.globalAlpha = alpha;\r\n\r\n    ctx.drawImage(frame.texture.image as HTMLImageElement, frame.x, frame.y, frame.width, frame.height, x, y, frame.width, frame.height);\r\n\r\n    ctx.restore();\r\n}\r\n", "import { Frame } from '../../textures/Frame';\r\nimport { ISprite } from './ISprite';\r\nimport { Texture } from '../../textures';\r\n\r\nexport function SetFrame <T extends ISprite> (texture: Texture, key?: string | number | Frame, ...children: T[]): T[]\r\n{\r\n    const frame = texture.getFrame(key);\r\n\r\n    const pivot = frame.pivot;\r\n\r\n    children.forEach(child =>\r\n    {\r\n        //  TODO - If frame is dirty, reset it anyway\r\n        if (!child || frame === child.frame)\r\n        {\r\n            return;\r\n        }\r\n\r\n        child.frame = frame;\r\n        child.hasTexture = true;\r\n\r\n        if (pivot)\r\n        {\r\n            child.setOrigin(pivot.x, pivot.y);\r\n        }\r\n\r\n        frame.copyToExtent(child);\r\n\r\n        //  This rarely changes, so we'll set it here, rather than every game step:\r\n        frame.copyToVertices(child.vertices);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "import { Texture } from './Texture';\r\nimport { TextureManagerInstance } from './TextureManagerInstance';\r\n\r\nexport function GetTexture (key: string): Texture\r\n{\r\n    return TextureManagerInstance.get().get(key);\r\n}\r\n", "import { Frame } from '../../textures/Frame';\r\nimport { GetTexture } from '../../textures/GetTexture';\r\nimport { IFrame } from '../../textures/IFrame';\r\nimport { ISprite } from './ISprite';\r\nimport { ITexture } from '../../textures/ITexture';\r\nimport { SetFrame } from './SetFrame';\r\nimport { Texture } from '../../textures/Texture';\r\n\r\nexport function SetTexture <T extends ISprite> (key: string | ITexture | IFrame, frame: string | number | IFrame, ...children: T[]): T[]\r\n{\r\n    if (!key)\r\n    {\r\n        //  Remove texture from all children\r\n        children.forEach(child =>\r\n        {\r\n            child.texture = null;\r\n            child.frame = null;\r\n            child.hasTexture = false;\r\n        });\r\n    }\r\n    else\r\n    {\r\n        let texture: Texture;\r\n\r\n        if (key instanceof Frame)\r\n        {\r\n            frame = key;\r\n            texture = key.texture;\r\n        }\r\n        else if (key instanceof Texture)\r\n        {\r\n            texture = key;\r\n        }\r\n        else\r\n        {\r\n            texture = GetTexture(key as string);\r\n        }\r\n\r\n        if (!texture)\r\n        {\r\n            console.warn(`Invalid Texture key: ${key as string}`);\r\n        }\r\n        else\r\n        {\r\n            children.forEach(child =>\r\n            {\r\n                child.texture = texture;\r\n            });\r\n\r\n            SetFrame(texture, frame, ...children);\r\n        }\r\n    }\r\n\r\n    return children;\r\n}\r\n", "import { BatchTexturedQuad } from '../../renderer/webgl1/draw/BatchTexturedQuad';\r\nimport { Container } from '../container/Container';\r\nimport { DIRTY_CONST } from '../DIRTY_CONST';\r\nimport { DrawImage } from '../../renderer/canvas/draw/DrawImage';\r\nimport { Frame } from '../../textures/Frame';\r\nimport { ICanvasRenderer } from '../../renderer/canvas/ICanvasRenderer';\r\nimport { IFrame } from '../../textures/IFrame';\r\nimport { IGameObject } from '../IGameObject';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\nimport { ISprite } from './ISprite';\r\nimport { ITexture } from '../../textures/ITexture';\r\nimport { PreRenderVertices } from '../../components/transform/PreRenderVertices';\r\nimport { SetFrame } from './SetFrame';\r\nimport { SetTexture } from './SetTexture';\r\nimport { Texture } from '../../textures/Texture';\r\nimport { Vertex } from '../../components/Vertex';\r\n\r\nexport class Sprite extends Container implements ISprite\r\n{\r\n    texture: Texture;\r\n    frame: Frame;\r\n    hasTexture: boolean = false;\r\n\r\n    protected _tint: number = 0xffffff;\r\n\r\n    constructor (x: number, y: number, texture: string | Texture | Frame, frame?: string | number | Frame)\r\n    {\r\n        super(x, y);\r\n\r\n        this.vertices = [ new Vertex(), new Vertex(), new Vertex(), new Vertex() ];\r\n\r\n        this.setTexture(texture, frame);\r\n    }\r\n\r\n    setTexture (key: string | ITexture | IFrame, frame?: string | number | IFrame): this\r\n    {\r\n        SetTexture(key, frame, this);\r\n\r\n        return this;\r\n    }\r\n\r\n    setFrame (key?: string | number | IFrame): this\r\n    {\r\n        SetFrame(this.texture, key, this);\r\n\r\n        return this;\r\n    }\r\n\r\n    isRenderable (): boolean\r\n    {\r\n        return (this.visible && this.willRender && this.hasTexture && this.alpha > 0);\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        PreRenderVertices(this);\r\n\r\n        BatchTexturedQuad(this.texture, this.vertices, renderPass);\r\n    }\r\n\r\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n        PreRenderVertices(this);\r\n\r\n        DrawImage(this.frame, this.alpha, this.worldTransform, this.transformExtent, renderer);\r\n    }\r\n\r\n    get tint (): number\r\n    {\r\n        return this._tint;\r\n    }\r\n\r\n    set tint (value: number)\r\n    {\r\n        if (value !== this._tint)\r\n        {\r\n            this._tint = value;\r\n\r\n            this.vertices.forEach(vertex =>\r\n            {\r\n                vertex.setTint(value);\r\n            });\r\n\r\n            this.setDirty(DIRTY_CONST.COLORS);\r\n        }\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        super.destroy(reparentChildren);\r\n\r\n        this.texture = null;\r\n        this.frame = null;\r\n        this.hasTexture = false;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\r\n *\r\n * @function Phaser.Math.Clamp\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to be clamped.\r\n * @param {number} min - The minimum bounds.\r\n * @param {number} max - The maximum bounds.\r\n *\r\n * @return {number} The clamped value.\r\n */\r\nexport function Clamp (value: number, min: number, max: number): number\r\n{\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\nimport { IWorldRenderData } from '../IWorldRenderData';\r\n\r\nexport const WorldRenderEvent: string = 'worldrender';\r\n\r\nexport type WorldRenderEventHandler = (renderData: IWorldRenderData, world: IBaseWorld) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldShutdownEvent: string = 'worldshutdown';\r\n\r\nexport type WorldShutdownEventHandler = (world: IBaseWorld) => void;\r\n", "import { IWorldRenderData } from './IWorldRenderData';\r\nimport { SearchEntry } from '../display/SearchEntryType';\r\n\r\nexport function CalculateTotalRenderable (entry: SearchEntry, renderData: IWorldRenderData): void\r\n{\r\n    renderData.numRendered++;\r\n    renderData.numRenderable++;\r\n\r\n    if (entry.node.dirtyFrame >= renderData.gameFrame)\r\n    {\r\n        renderData.dirtyFrame++;\r\n    }\r\n\r\n    entry.children.forEach(child =>\r\n    {\r\n        if (child.children.length > 0)\r\n        {\r\n            CalculateTotalRenderable(child, renderData);\r\n        }\r\n    });\r\n}\r\n", "import { DIRTY_CONST } from '../gameobjects/DIRTY_CONST';\r\nimport { SearchEntry } from '../display/SearchEntryType';\r\n\r\nexport function HasDirtyChildren (parent: SearchEntry): boolean\r\n{\r\n    if (parent.node.isDirty(DIRTY_CONST.CHILD_CACHE))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    const stack = [ parent ];\r\n\r\n    while (stack.length > 0)\r\n    {\r\n        const entry = stack.pop();\r\n\r\n        if (entry.node.isDirty(DIRTY_CONST.TRANSFORM))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        const numChildren = entry.children.length;\r\n\r\n        if (numChildren > 0)\r\n        {\r\n            for (let i = 0; i < numChildren; i++)\r\n            {\r\n                stack.push(entry.children[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    stack.length = 0;\r\n\r\n    return false;\r\n}\r\n", "import { DIRTY_CONST } from '../gameobjects/DIRTY_CONST';\r\nimport { HasDirtyChildren } from './HasDirtyChildren';\r\nimport { SearchEntry } from '../display/SearchEntryType';\r\n\r\nexport function UpdateCachedLayers (cachedLayers: SearchEntry[], dirtyCamera: boolean): void\r\n{\r\n    cachedLayers.forEach(layer =>\r\n    {\r\n        if (dirtyCamera || HasDirtyChildren(layer))\r\n        {\r\n            //  Camera is dirty, or layer has at least one dirty child\r\n            layer.node.setDirty(DIRTY_CONST.CHILD_CACHE);\r\n        }\r\n        else\r\n        {\r\n            //  Camera is clean and no dirty children, so we can re-use layer cache\r\n            //  So let's remove the children for this layer\r\n            layer.children.length = 0;\r\n        }\r\n    });\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { SearchEntry } from '../display/SearchEntryType';\r\n\r\nexport function WorldDepthFirstSearch (cachedLayers: SearchEntry[], parent: IGameObject, output: SearchEntry[] = []): SearchEntry[]\r\n{\r\n    for (let i = 0; i < parent.numChildren; i++)\r\n    {\r\n        const node = parent.children[i];\r\n\r\n        if (node.isRenderable())\r\n        {\r\n            const children: SearchEntry[] = [];\r\n\r\n            const entry = { node, children };\r\n\r\n            output.push(entry);\r\n\r\n            if (node.willRenderChildren && node.numChildren > 0)\r\n            {\r\n                if (node.willCacheChildren)\r\n                {\r\n                    cachedLayers.push(entry);\r\n                }\r\n\r\n                WorldDepthFirstSearch(cachedLayers, node, children);\r\n            }\r\n        }\r\n    }\r\n\r\n    return output;\r\n}\r\n", "import { CalculateTotalRenderable } from './CalculateTotalRenderable';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { SearchEntry } from '../display/SearchEntryType';\r\nimport { UpdateCachedLayers } from './UpdateCachedLayers';\r\nimport { WorldDepthFirstSearch } from './WorldDepthFirstSearch';\r\n\r\nexport function BuildRenderList (world: IBaseWorld): void\r\n{\r\n    const cachedLayers: SearchEntry[] = [];\r\n    const stack: SearchEntry[] = [];\r\n\r\n    //  entries is now populated with the n-tree search results, only containing nodes that will actually render\r\n    const entries = WorldDepthFirstSearch(cachedLayers, world, stack);\r\n\r\n    const renderData = world.renderData;\r\n\r\n    //  We can now sweep through the entries and purge non-dirty children of cached layers,\r\n    //  before finally building the render list. We can only do this if the camera is clean.\r\n\r\n    if (cachedLayers.length > 0)\r\n    {\r\n        UpdateCachedLayers(cachedLayers, world.camera.dirtyRender);\r\n    }\r\n\r\n    //  TODO: numRenderable probably needs to move to the search function\r\n    entries.forEach(entry =>\r\n    {\r\n        if (entry.children.length > 0)\r\n        {\r\n            CalculateTotalRenderable(entry, renderData);\r\n        }\r\n        else\r\n        {\r\n            renderData.numRendered++;\r\n            renderData.numRenderable++;\r\n\r\n            if (entry.node.dirtyFrame >= renderData.gameFrame)\r\n            {\r\n                renderData.dirtyFrame++;\r\n            }\r\n        }\r\n    });\r\n\r\n    world.renderList = entries;\r\n\r\n    if (world.forceRefresh)\r\n    {\r\n        renderData.dirtyFrame++;\r\n\r\n        world.forceRefresh = false;\r\n    }\r\n\r\n    // console.log(entries);\r\n    // console.log(renderData);\r\n    // eslint-disable-next-line no-debugger\r\n    // debugger;\r\n}\r\n", "import { IMatrix2D } from './IMatrix2D';\r\n\r\n//  Compares the a and b matrix and returns if they are equal.\r\n\r\nexport function Mat2dEquals (a: IMatrix2D, b: IMatrix2D): boolean\r\n{\r\n    return (\r\n        a.a === b.a &&\r\n        a.b === b.b &&\r\n        a.c === b.c &&\r\n        a.d === b.d &&\r\n        a.tx === b.tx &&\r\n        a.ty === b.ty\r\n    );\r\n}\r\n", "import { ISceneRenderData } from '../scenes/ISceneRenderData';\r\nimport { IWorldRenderData } from './IWorldRenderData';\r\n\r\nexport function MergeRenderData (sceneRenderData: ISceneRenderData, worldRenderData: IWorldRenderData): void\r\n{\r\n    sceneRenderData.numDirtyFrames += worldRenderData.dirtyFrame;\r\n    sceneRenderData.numTotalFrames += worldRenderData.numRendered;\r\n\r\n    if (worldRenderData.camera.dirtyRender)\r\n    {\r\n        sceneRenderData.numDirtyCameras++;\r\n    }\r\n\r\n    sceneRenderData.worldData.push(worldRenderData);\r\n}\r\n", "import { IWorldRenderData } from './IWorldRenderData';\r\n\r\nexport function ResetWorldRenderData (renderData: IWorldRenderData, gameFrame: number): void\r\n{\r\n    renderData.gameFrame = gameFrame;\r\n    renderData.dirtyFrame = 0;\r\n    renderData.numRendered = 0;\r\n    renderData.numRenderable = 0;\r\n}\r\n", "import * as GameObjectEvents from '../gameobjects/events';\r\nimport * as WorldEvents from './events';\r\n\r\nimport { Begin, Flush } from '../renderer/webgl1/renderpass';\r\nimport { Emit, Off, On, Once } from '../events';\r\n\r\nimport { BuildRenderList } from './BuildRenderList';\r\nimport { GameObject } from '../gameobjects';\r\nimport { IBaseCamera } from '../camera/IBaseCamera';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { IEventInstance } from '../events/IEventInstance';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IScene } from '../scenes/IScene';\r\nimport { ISceneRenderData } from '../scenes/ISceneRenderData';\r\nimport { IWorldRenderData } from './IWorldRenderData';\r\nimport { Mat2dEquals } from '../math/mat2d/Mat2dEquals';\r\nimport { MergeRenderData } from './MergeRenderData';\r\nimport { RemoveChildren } from '../display';\r\nimport { ResetWorldRenderData } from './ResetWorldRenderData';\r\nimport { SearchEntry } from '../display/SearchEntryType';\r\n\r\nexport class BaseWorld extends GameObject implements IBaseWorld\r\n{\r\n    scene: IScene;\r\n\r\n    camera: IBaseCamera;\r\n    renderData: IWorldRenderData;\r\n    forceRefresh: boolean = false;\r\n    events: Map<string, Set<IEventInstance>>;\r\n    is3D: boolean = false;\r\n\r\n    renderList: SearchEntry[];\r\n\r\n    private _updateListener: IEventInstance;\r\n    private _renderListener: IEventInstance;\r\n    private _shutdownListener: IEventInstance;\r\n\r\n    constructor (scene: IScene)\r\n    {\r\n        super();\r\n\r\n        this.scene = scene;\r\n        this.world = this;\r\n\r\n        this.events = new Map();\r\n\r\n        this.renderList = [];\r\n\r\n        this._updateListener = On(scene, 'update', (delta: number, time: number) => this.update(delta, time));\r\n        this._renderListener = On(scene, 'render', (renderData: ISceneRenderData) => this.render(renderData));\r\n        this._shutdownListener = On(scene, 'shutdown', () => this.shutdown());\r\n        Once(scene, 'destroy', () => this.destroy());\r\n    }\r\n\r\n    update (delta: number, time: number): void\r\n    {\r\n        if (!this.willUpdate)\r\n        {\r\n            return;\r\n        }\r\n\r\n        Emit(this, GameObjectEvents.UpdateEvent, delta, time, this);\r\n\r\n        super.update(delta, time);\r\n    }\r\n\r\n    postUpdate (delta: number, time: number): void\r\n    {\r\n        Emit(this, GameObjectEvents.PostUpdateEvent, delta, time, this);\r\n    }\r\n\r\n    render (sceneRenderData: ISceneRenderData): void\r\n    {\r\n        const renderData = this.renderData;\r\n\r\n        ResetWorldRenderData(renderData, sceneRenderData.gameFrame);\r\n\r\n        if (!this.willRender || !this.visible)\r\n        {\r\n            return;\r\n        }\r\n\r\n        BuildRenderList(this);\r\n\r\n        Emit(this, WorldEvents.WorldRenderEvent, renderData, this);\r\n\r\n        MergeRenderData(sceneRenderData, renderData);\r\n\r\n        this.camera.dirtyRender = false;\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        const currentCamera = renderPass.current2DCamera;\r\n        const camera = this.camera;\r\n\r\n        if (!currentCamera || !Mat2dEquals(camera.worldTransform, currentCamera.worldTransform))\r\n        {\r\n            Flush(renderPass);\r\n        }\r\n\r\n        Begin(renderPass, camera);\r\n\r\n        this.renderList.forEach(entry =>\r\n        {\r\n            if (entry.children.length > 0)\r\n            {\r\n                this.renderNode(entry, renderPass);\r\n            }\r\n            else\r\n            {\r\n                entry.node.renderGL(renderPass);\r\n            }\r\n        });\r\n    }\r\n\r\n    renderNode (entry: SearchEntry, renderPass: IRenderPass): void\r\n    {\r\n        entry.node.renderGL(renderPass);\r\n\r\n        entry.children.forEach(child =>\r\n        {\r\n            if (child.children.length > 0)\r\n            {\r\n                this.renderNode(child, renderPass);\r\n            }\r\n            else\r\n            {\r\n                child.node.renderGL(renderPass);\r\n            }\r\n        });\r\n\r\n        entry.node.postRenderGL(renderPass);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        //  Emit event?\r\n    }\r\n\r\n    shutdown (): void\r\n    {\r\n        const scene = this.scene;\r\n\r\n        Off(scene, 'update', this._updateListener);\r\n        Off(scene, 'render', this._renderListener);\r\n        Off(scene, 'shutdown', this._shutdownListener);\r\n\r\n        //  Clear the display list and reset the camera, but leave\r\n        //  everything in place so we can return to this World again\r\n        //  at a later stage\r\n\r\n        RemoveChildren(this);\r\n\r\n        Emit(this, WorldEvents.WorldShutdownEvent, this);\r\n\r\n        ResetWorldRenderData(this.renderData, 0);\r\n\r\n        if (this.camera)\r\n        {\r\n            this.camera.reset();\r\n        }\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        super.destroy(reparentChildren);\r\n\r\n        Emit(this, GameObjectEvents.DestroyEvent, this);\r\n\r\n        ResetWorldRenderData(this.renderData, 0);\r\n\r\n        if (this.camera)\r\n        {\r\n            this.camera.destroy();\r\n        }\r\n\r\n        this.events.clear();\r\n\r\n        this.camera = null;\r\n        this.renderData = null;\r\n        this.events = null;\r\n    }\r\n}\r\n", "import { IBaseCamera } from '../camera/IBaseCamera';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { IWorldRenderData } from './IWorldRenderData';\r\n\r\nexport function CreateWorldRenderData (world: IBaseWorld, camera: IBaseCamera): IWorldRenderData\r\n{\r\n    return {\r\n        world,\r\n        camera,\r\n        gameFrame: 0,\r\n        dirtyFrame: 0,\r\n        numRendered: 0,\r\n        numRenderable: 0\r\n    };\r\n}\r\n", "import { BaseWorld } from './BaseWorld';\r\nimport { CreateWorldRenderData } from './CreateWorldRenderData';\r\nimport { IScene } from '../scenes/IScene';\r\nimport { IStaticCamera } from '../camera/IStaticCamera';\r\nimport { IStaticWorld } from './IStaticWorld';\r\nimport { StaticCamera } from '../camera/StaticCamera';\r\n\r\n//  A Static World is designed specifically to have a bounds of a fixed size\r\n//  and a camera that doesn't move at all (no scrolling, rotation, etc)\r\n//  Because it has a fixed size, there is no camera culling enabled.\r\n//  Games that use this kind of world include Pacman, Bejeweled and 2048.\r\n\r\nexport class StaticWorld extends BaseWorld implements IStaticWorld\r\n{\r\n    camera: IStaticCamera;\r\n\r\n    constructor (scene: IScene)\r\n    {\r\n        super(scene);\r\n\r\n        this.camera = new StaticCamera();\r\n\r\n        this.renderData = CreateWorldRenderData(this, this.camera);\r\n    }\r\n}\r\n", "import * as Easing from '../../../../phaser-genesis/src/math/easing';\r\n\r\nimport { AddChild, AddChildren } from '../../../../phaser-genesis/src/display';\r\nimport { BackgroundColor, GlobalVar, Parent, Scenes, Size, WebGL } from '../../../../phaser-genesis/src/config';\r\n\r\nimport { AddTween } from '../../../../phaser-genesis/src/motion/tween/nano/AddTween';\r\nimport { Game } from '../../../../phaser-genesis/src/Game';\r\nimport { ImageFile } from '../../../../phaser-genesis/src/loader/files/ImageFile';\r\nimport { Loader } from '../../../../phaser-genesis/src/loader/Loader';\r\nimport { Scene } from '../../../../phaser-genesis/src/scenes/Scene';\r\nimport { Sprite } from '../../../../phaser-genesis/src/gameobjects';\r\nimport { StaticWorld } from '../../../../phaser-genesis/src/world/StaticWorld';\r\n\r\n// import { ITweenPlugin } from '../../../../phaser-genesis/src/motion/tween/ITweenPlugin';\r\n// import { TweenPlugin } from '../../../../phaser-genesis/src/motion/tween/TweenPlugin';\r\n\r\nclass Demo extends Scene\r\n{\r\n    constructor ()\r\n    {\r\n        super();\r\n\r\n        const world = new StaticWorld(this);\r\n\r\n        const loader = new Loader();\r\n\r\n        loader.setPath('assets/');\r\n\r\n        loader.add(ImageFile('logo', 'logo.png'));\r\n        loader.add(ImageFile('rocket', 'rocket.png'));\r\n        loader.add(ImageFile('star', 'star.png'));\r\n        loader.add(ImageFile('bubble', 'bubble256.png'));\r\n\r\n        loader.start().then(() => {\r\n\r\n            const logo = new Sprite(400, 100, 'logo').setRotation(0.5);\r\n            const rocket = new Sprite(200, 300, 'rocket');\r\n            const bubble = new Sprite(400, 500, 'bubble').setScale(0.5);\r\n\r\n            AddTween(logo).to(3000, { y: 500, rotation: 0 }).easing(Easing.Bounce.Out).repeat(100);\r\n            AddTween(rocket).delay(2000).to(1500, { x: 800 }).easing(Easing.Quadratic.In);\r\n\r\n            // AddTween(bubble).to(2000, { y: '-300' }).easing(Easing.Bounce.Out).repeat(2).yoyo();\r\n\r\n            // AddTween(bubble).to(2, { y: 600 }).yoyo().easing(Easing.Bounce.Out).hold(2);\r\n\r\n            AddTween(bubble).from(2000, { y: '-600' }).yoyo().easing(Easing.Bounce.Out).repeat(2, 2000).hold(500).delay(1000);\r\n\r\n            // AddTween(bubble).from(3, { y: 600 }).yoyo().easing(Easing.Bounce.Out);\r\n\r\n            // AddTween(bubble).to(2, { x: 200 }).easing(Easing.Sine.InOut).repeat(3);\r\n\r\n            // AddChildren(world, logo, rocket);\r\n\r\n            AddChildren(world, logo, rocket, bubble);\r\n\r\n        });\r\n    }\r\n}\r\n\r\nnew Game(\r\n    WebGL(),\r\n    Size(800, 600),\r\n    Parent('gameParent'),\r\n    GlobalVar('Phaser4'),\r\n    BackgroundColor(0x2d2d2d),\r\n    Scenes(Demo)\r\n);\r\n"],
  "mappings": "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",
  "names": []
}
