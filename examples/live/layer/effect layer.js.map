{
  "version": 3,
  "sources": ["../../../node_modules/@phaserjs/phaser/config/const.js", "../../../node_modules/@phaserjs/phaser/config/ConfigStore.js", "../../../node_modules/@phaserjs/phaser/config/backgroundcolor/SetBackgroundColor.js", "../../../node_modules/@phaserjs/phaser/config/backgroundcolor/BackgroundColor.js", "../../../node_modules/@phaserjs/phaser/config/banner/SetBanner.js", "../../../node_modules/@phaserjs/phaser/config/batchsize/SetBatchSize.js", "../../../node_modules/@phaserjs/phaser/config/size/GetHeight.js", "../../../node_modules/@phaserjs/phaser/config/size/GetResolution.js", "../../../node_modules/@phaserjs/phaser/config/size/GetWidth.js", "../../../node_modules/@phaserjs/phaser/config/size/SetSize.js", "../../../node_modules/@phaserjs/phaser/config/size/Size.js", "../../../node_modules/@phaserjs/phaser/renderer/BindingQueue.js", "../../../node_modules/@phaserjs/phaser/config/backgroundcolor/GetBackgroundColor.js", "../../../node_modules/@phaserjs/phaser/config/renderer/SetRenderer.js", "../../../node_modules/@phaserjs/phaser/config/defaultorigin/SetDefaultOrigin.js", "../../../node_modules/@phaserjs/phaser/config/maxtextures/SetMaxTextures.js", "../../../node_modules/@phaserjs/phaser/dom/GetElement.js", "../../../node_modules/@phaserjs/phaser/config/parent/SetParent.js", "../../../node_modules/@phaserjs/phaser/config/parent/Parent.js", "../../../node_modules/@phaserjs/phaser/config/scenes/SetScenes.js", "../../../node_modules/@phaserjs/phaser/config/scenes/Scenes.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/RectangleContains.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/Rectangle.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/AddViewport.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/GL.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/BindViewport.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/SetViewport.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/BindFramebuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/PopViewport.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/PopFramebuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/AddFramebuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/SetFramebuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/Draw.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/Flush.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/End.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/colors/GetRGBArray.js", "../../../node_modules/@phaserjs/phaser/config/webglcontext/GetWebGLContext.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/CreateGLTexture.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/fbo/DeleteFramebuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/DeleteGLTexture.js", "../../../node_modules/@phaserjs/phaser/math/pow2/IsSizePowerOfTwo.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/SetGLTextureFilterMode.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/UpdateGLTexture.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/GLTextureBinding.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/ProcessBindingQueue.js", "../../../node_modules/@phaserjs/phaser/config/maxtextures/GetMaxTextures.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/CheckShaderMaxIfStatements.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/CreateTempTextures.js", "../../../node_modules/@phaserjs/phaser/config/batchsize/GetBatchSize.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/buffers/DeleteGLBuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/buffers/VertexBuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/buffers/IndexedVertexBuffer.js", "../../../node_modules/@phaserjs/phaser/utils/array/matrix/CheckMatrix.js", "../../../node_modules/@phaserjs/phaser/utils/array/matrix/MatrixToString.js", "../../../node_modules/@phaserjs/phaser/utils/array/matrix/ReverseColumns.js", "../../../node_modules/@phaserjs/phaser/utils/array/matrix/ReverseRows.js", "../../../node_modules/@phaserjs/phaser/utils/array/matrix/TransposeMatrix.js", "../../../node_modules/@phaserjs/phaser/utils/array/matrix/RotateMatrix.js", "../../../node_modules/@phaserjs/phaser/utils/array/matrix/Rotate180.js", "../../../node_modules/@phaserjs/phaser/utils/array/matrix/RotateLeft.js", "../../../node_modules/@phaserjs/phaser/utils/array/matrix/RotateRight.js", "../../../node_modules/@phaserjs/phaser/utils/array/NumberArray.js", "../../../node_modules/@phaserjs/phaser/math/RoundAwayFromZero.js", "../../../node_modules/@phaserjs/phaser/utils/array/NumberArrayStep.js", "../../../node_modules/@phaserjs/phaser/utils/base64/ArrayBufferToBase64.js", "../../../node_modules/@phaserjs/phaser/utils/base64/Base64ToArrayBuffer.js", "../../../node_modules/@phaserjs/phaser/utils/string/UppercaseFirst.js", "../../../node_modules/@phaserjs/phaser/utils/NOOP.js", "../../../node_modules/@phaserjs/phaser/math/mat4/Matrix4.js", "../../../node_modules/@phaserjs/phaser/math/mat4/Mat4Ortho.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/CreateAttributes.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/DeleteShaders.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/CreateProgram.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/CreateShader.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/CreateUniformSetter.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/CreateUniforms.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/GL_CONST.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/DefaultQuadAttributes.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/DefaultQuadUniforms.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/fbo/CreateDepthBuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/fbo/CreateFramebuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/glsl/SINGLE_QUAD_FRAG.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/glsl/SINGLE_QUAD_VERT.js", "../../../node_modules/@phaserjs/phaser/textures/Frame.js", "../../../node_modules/@phaserjs/phaser/textures/Texture.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/Shader.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/QuadShader.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/glsl/MULTI_QUAD_FRAG.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/MultiTextureQuadShader.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/SetDefaultBlendMode.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/SetDefaultFramebuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/SetDefaultShader.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/SetDefaultVertexBuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/SetDefaultViewport.js", "../../../node_modules/@phaserjs/phaser/GameInstance.js", "../../../node_modules/@phaserjs/phaser/math/mat4/Mat4Identity.js", "../../../node_modules/@phaserjs/phaser/math/mat2d/Matrix2D.js", "../../../node_modules/@phaserjs/phaser/math/vec2/Vec2Callback.js", "../../../node_modules/@phaserjs/phaser/math/angle/AngleBetween.js", "../../../node_modules/@phaserjs/phaser/math/angle/AngleBetweenY.js", "../../../node_modules/@phaserjs/phaser/math/const.js", "../../../node_modules/@phaserjs/phaser/math/angle/CounterClockwise.js", "../../../node_modules/@phaserjs/phaser/math/angle/NormalizeAngle.js", "../../../node_modules/@phaserjs/phaser/math/angle/ReverseAngle.js", "../../../node_modules/@phaserjs/phaser/math/angle/RotateAngleTo.js", "../../../node_modules/@phaserjs/phaser/math/angle/ShortestAngleBetween.js", "../../../node_modules/@phaserjs/phaser/math/Wrap.js", "../../../node_modules/@phaserjs/phaser/math/angle/WrapAngle.js", "../../../node_modules/@phaserjs/phaser/math/angle/WrapAngleDegrees.js", "../../../node_modules/@phaserjs/phaser/math/angle/index.js", "../../../node_modules/@phaserjs/phaser/camera/StaticCamera.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/RenderPass.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/AddShader.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/AddVertexBuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/BindShader.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/Begin.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/BindBlendMode.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/BindTexture.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/BindVertexBuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/PopVertexBuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/SetVertexBuffer.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/GetVertexBufferEntry.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/PopShader.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/SetShader.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/SetTexture.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/Start.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/renderpass/UnbindTexture.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/WebGLRendererInstance.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/WebGLRenderer.js", "../../../node_modules/@phaserjs/phaser/config/webgl/WebGL.js", "../../../node_modules/@phaserjs/phaser/gameobjects/DIRTY_CONST.js", "../../../node_modules/@phaserjs/phaser/gameobjects/components/transform/GetVertices.js", "../../../node_modules/@phaserjs/phaser/gameobjects/components/bounds/BoundsComponent.js", "../../../node_modules/@phaserjs/phaser/gameobjects/components/input/InputComponent.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/colors/PackColors.js", "../../../node_modules/@phaserjs/phaser/gameobjects/components/transform/UpdateVertices.js", "../../../node_modules/@phaserjs/phaser/gameobjects/components/transform/PreRenderVertices.js", "../../../node_modules/@phaserjs/phaser/config/defaultorigin/GetDefaultOriginX.js", "../../../node_modules/@phaserjs/phaser/config/defaultorigin/GetDefaultOriginY.js", "../../../node_modules/@phaserjs/phaser/math/vec2/Vec2.js", "../../../node_modules/@phaserjs/phaser/math/Clamp.js", "../../../node_modules/@phaserjs/phaser/math/fuzzy/FuzzyEqual.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/CeilRectangle.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/CeilRectanglePosition.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/CenterRectangleOn.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/CloneRectangle.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/CopyRectangleFrom.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/DecomposeRectangle.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleAspectRatio.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleCenterX.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleCenterY.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/FitRectangleInside.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/FitRectangleOutside.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/FitRectangleToPoint.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/FitRectangleToPoints.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/FloorRectangle.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/FloorRectanglePosition.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleArea.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleCenter.js", "../../../node_modules/@phaserjs/phaser/geom/line/Line.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleIntersection.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectanglePerimeter.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleMarchingAnts.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleOverlap.js", "../../../node_modules/@phaserjs/phaser/math/DegToRad.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectanglePerimeterPoint.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectanglePoint.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectanglePoints.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleRandomPoint.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/RectangleContainsRectangle.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleRandomPointOutside.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleSize.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/GetRectangleUnion.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/InflateRectangle.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/MergeRectangle.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/RectangleContainsPoint.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/RectangleEquals.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/RectangleFromPoints.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/RectangleSizeEquals.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/ScaleRectangle.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/TranslateRectangle.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/TranslateRectanglePoint.js", "../../../node_modules/@phaserjs/phaser/geom/rectangle/index.js", "../../../node_modules/@phaserjs/phaser/gameobjects/components/transform/UpdateLocalTransform.js", "../../../node_modules/@phaserjs/phaser/math/mat2d/Mat2dCopyFrom.js", "../../../node_modules/@phaserjs/phaser/gameobjects/components/transform/UpdateWorldTransform.js", "../../../node_modules/@phaserjs/phaser/gameobjects/components/transform/TransformComponent.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/colors/PackColor.js", "../../../node_modules/@phaserjs/phaser/gameobjects/components/Vertex.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/draw/BatchTexturedQuad.js", "../../../node_modules/@phaserjs/phaser/display/RemoveChildrenBetween.js", "../../../node_modules/@phaserjs/phaser/display/DestroyChildren.js", "../../../node_modules/@phaserjs/phaser/gameobjects/events/DestroyEvent.js", "../../../node_modules/@phaserjs/phaser/events/Emit.js", "../../../node_modules/@phaserjs/phaser/display/DepthFirstSearch.js", "../../../node_modules/@phaserjs/phaser/display/GetChildIndex.js", "../../../node_modules/@phaserjs/phaser/display/RemoveChildAt.js", "../../../node_modules/@phaserjs/phaser/display/RemoveChild.js", "../../../node_modules/@phaserjs/phaser/gameobjects/events/AddedToWorldEvent.js", "../../../node_modules/@phaserjs/phaser/gameobjects/events/PostUpdateEvent.js", "../../../node_modules/@phaserjs/phaser/gameobjects/events/RemovedFromWorldEvent.js", "../../../node_modules/@phaserjs/phaser/gameobjects/events/UpdateEvent.js", "../../../node_modules/@phaserjs/phaser/display/SetWorld.js", "../../../node_modules/@phaserjs/phaser/display/SetParent.js", "../../../node_modules/@phaserjs/phaser/display/ReparentChildren.js", "../../../node_modules/@phaserjs/phaser/gameobjects/GameObject.js", "../../../node_modules/@phaserjs/phaser/gameobjects/container/Container.js", "../../../node_modules/@phaserjs/phaser/renderer/canvas/draw/DrawTexturedQuad.js", "../../../node_modules/@phaserjs/phaser/gameobjects/sprite/SetFrame.js", "../../../node_modules/@phaserjs/phaser/textures/TextureManagerInstance.js", "../../../node_modules/@phaserjs/phaser/gameobjects/sprite/SetTexture.js", "../../../node_modules/@phaserjs/phaser/gameobjects/sprite/Sprite.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/draw/BatchSingleQuad.js", "../../../node_modules/@phaserjs/phaser/renderer/webgl1/draw/DrawTexturedQuad.js", "../../../node_modules/@phaserjs/phaser/gameobjects/layer/Layer.js", "../../../node_modules/@phaserjs/phaser/gameobjects/renderlayer/RenderLayer.js", "../../../node_modules/@phaserjs/phaser/gameobjects/effectlayer/EffectLayer.js", "../../../node_modules/@phaserjs/phaser/textures/CreateCanvas.js", "../../../node_modules/@phaserjs/phaser/display/AddChild.js", "../../../node_modules/@phaserjs/phaser/display/AddChildren.js", "../../../node_modules/@phaserjs/phaser/display/RemoveChildren.js", "../../../node_modules/@phaserjs/phaser/dom/AddToDOM.js", "../../../node_modules/@phaserjs/phaser/dom/DOMContentLoaded.js", "../../../node_modules/@phaserjs/phaser/dom/ParseXML.js", "../../../node_modules/@phaserjs/phaser/events/EventEmitter.js", "../../../node_modules/@phaserjs/phaser/events/EventInstance.js", "../../../node_modules/@phaserjs/phaser/events/Off.js", "../../../node_modules/@phaserjs/phaser/events/On.js", "../../../node_modules/@phaserjs/phaser/events/Once.js", "../../../node_modules/@phaserjs/phaser/config/banner/GetBanner.js", "../../../node_modules/@phaserjs/phaser/config/globalvar/GetGlobalVar.js", "../../../node_modules/@phaserjs/phaser/config/parent/GetParent.js", "../../../node_modules/@phaserjs/phaser/config/renderer/GetRenderer.js", "../../../node_modules/@phaserjs/phaser/scenes/CreateSceneRenderData.js", "../../../node_modules/@phaserjs/phaser/config/scenes/GetScenes.js", "../../../node_modules/@phaserjs/phaser/scenes/ResetSceneRenderData.js", "../../../node_modules/@phaserjs/phaser/scenes/SceneManagerInstance.js", "../../../node_modules/@phaserjs/phaser/scenes/SceneManager.js", "../../../node_modules/@phaserjs/phaser/config/SetConfigDefaults.js", "../../../node_modules/@phaserjs/phaser/textures/TextureManager.js", "../../../node_modules/@phaserjs/phaser/Game.js", "../../../node_modules/@phaserjs/phaser/loader/File.js", "../../../node_modules/@phaserjs/phaser/loader/GetURL.js", "../../../node_modules/@phaserjs/phaser/loader/ImageTagLoader.js", "../../../node_modules/@phaserjs/phaser/loader/files/ImageFile.js", "../../../node_modules/@phaserjs/phaser/loader/Loader.js", "../../../node_modules/@phaserjs/phaser/scenes/GetConfigValue.js", "../../../node_modules/@phaserjs/phaser/scenes/Install.js", "../../../node_modules/@phaserjs/phaser/scenes/Scene.js", "../../../node_modules/@phaserjs/phaser/world/events/WorldRenderEvent.js", "../../../node_modules/@phaserjs/phaser/world/events/WorldShutdownEvent.js", "../../../node_modules/@phaserjs/phaser/world/CalculateTotalRenderable.js", "../../../node_modules/@phaserjs/phaser/world/HasDirtyChildren.js", "../../../node_modules/@phaserjs/phaser/world/UpdateCachedLayers.js", "../../../node_modules/@phaserjs/phaser/world/WorldDepthFirstSearch.js", "../../../node_modules/@phaserjs/phaser/world/BuildRenderList.js", "../../../node_modules/@phaserjs/phaser/math/mat2d/Mat2dEquals.js", "../../../node_modules/@phaserjs/phaser/world/MergeRenderData.js", "../../../node_modules/@phaserjs/phaser/world/ResetWorldRenderData.js", "../../../node_modules/@phaserjs/phaser/world/BaseWorld.js", "../../../node_modules/@phaserjs/phaser/world/CreateWorldRenderData.js", "../../../node_modules/@phaserjs/phaser/world/StaticWorld.js", "../../src/layer/effect layer.ts"],
  "sourcesContent": ["export const CONFIG_DEFAULTS = {\n  AUTO: \"Auto\",\n  BACKGROUND_COLOR: \"BackgroundColor\",\n  BANNER: \"Banner\",\n  BATCH_SIZE: \"BatchSize\",\n  CANVAS_CONTEXT: \"CanvasContext\",\n  CANVAS: \"Canvas\",\n  DEFAULT_ORIGIN: \"DefaultOrigin\",\n  GLOBAL_VAR: \"GlobalVar\",\n  MAX_TEXTURES: \"MaxTextures\",\n  PARENT: \"Parent\",\n  RENDERER: \"Renderer\",\n  SCENES: \"Scenes\",\n  SIZE: \"Size\",\n  WEBGL_CONTEXT: \"WebGLContext\",\n  WEBGL: \"WebGL\"\n};\n", "export const ConfigStore = new Map();\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function SetBackgroundColor(color) {\n  ConfigStore.set(CONFIG_DEFAULTS.BACKGROUND_COLOR, color);\n}\n", "import {SetBackgroundColor} from \"./SetBackgroundColor\";\nexport function BackgroundColor(color) {\n  return () => {\n    SetBackgroundColor(color);\n  };\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function SetBanner(title = \"\", version = \"\", url = \"\", color = \"#fff\", background = \"linear-gradient(#3e0081 40%, #00bcc3)\") {\n  ConfigStore.set(CONFIG_DEFAULTS.BANNER, {title, version, url, color, background});\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function SetBatchSize(size) {\n  ConfigStore.set(CONFIG_DEFAULTS.BATCH_SIZE, size);\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetHeight() {\n  return ConfigStore.get(CONFIG_DEFAULTS.SIZE).height;\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetResolution() {\n  return ConfigStore.get(CONFIG_DEFAULTS.SIZE).resolution;\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetWidth() {\n  return ConfigStore.get(CONFIG_DEFAULTS.SIZE).width;\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function SetSize(width = 800, height = 600, resolution = 1) {\n  if (resolution === 0) {\n    resolution = window.devicePixelRatio;\n  }\n  ConfigStore.set(CONFIG_DEFAULTS.SIZE, {width, height, resolution});\n}\n", "import {SetSize} from \"./SetSize\";\nexport function Size(width = 800, height = 600, resolution = 1) {\n  return () => {\n    SetSize(width, height, resolution);\n  };\n}\n", "const queue = [];\nexport const BindingQueue = {\n  add: (texture, glConfig) => {\n    queue.push({texture, glConfig});\n  },\n  get: () => {\n    return queue;\n  },\n  clear: () => {\n    queue.length = 0;\n  }\n};\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetBackgroundColor() {\n  return ConfigStore.get(CONFIG_DEFAULTS.BACKGROUND_COLOR);\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function SetRenderer(renderer) {\n  ConfigStore.set(CONFIG_DEFAULTS.RENDERER, renderer);\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function SetDefaultOrigin(x = 0.5, y = x) {\n  ConfigStore.set(CONFIG_DEFAULTS.DEFAULT_ORIGIN, {x, y});\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function SetMaxTextures(max) {\n  ConfigStore.set(CONFIG_DEFAULTS.MAX_TEXTURES, max);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function GetElement(target) {\n  let element;\n  if (target) {\n    if (typeof target === \"string\") {\n      element = document.getElementById(target);\n    } else if (typeof target === \"object\" && target.nodeType === 1) {\n      element = target;\n    }\n  }\n  if (!element) {\n    element = document.body;\n  }\n  return element;\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nimport {GetElement} from \"../../dom/GetElement\";\nexport function SetParent(parentElement) {\n  if (parentElement) {\n    ConfigStore.set(CONFIG_DEFAULTS.PARENT, GetElement(parentElement));\n  }\n}\n", "import {SetParent} from \"./SetParent\";\nexport function Parent(parentElement) {\n  return () => {\n    SetParent(parentElement);\n  };\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function SetScenes(scenes) {\n  ConfigStore.set(CONFIG_DEFAULTS.SCENES, [].concat(scenes));\n}\n", "import {SetScenes} from \"./SetScenes\";\nexport function Scenes(scenes) {\n  return () => {\n    SetScenes(scenes);\n  };\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function RectangleContains(rect, x, y) {\n  if (rect.width <= 0 || rect.height <= 0) {\n    return false;\n  }\n  return rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {RectangleContains} from \"./RectangleContains\";\nexport class Rectangle {\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.set(x, y, width, height);\n  }\n  set(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n  contains(x, y) {\n    return RectangleContains(this, x, y);\n  }\n  set right(value) {\n    if (value <= this.x) {\n      this.width = 0;\n    } else {\n      this.width = value - this.x;\n    }\n  }\n  get right() {\n    return this.x + this.width;\n  }\n  set bottom(value) {\n    if (value <= this.y) {\n      this.height = 0;\n    } else {\n      this.height = value - this.y;\n    }\n  }\n  get bottom() {\n    return this.y + this.height;\n  }\n}\n", "import {Rectangle} from \"../../../geom/rectangle/Rectangle\";\nexport function AddViewport(renderPass, x = 0, y = 0, width = 0, height = 0) {\n  const viewport = new Rectangle(x, y, width, height);\n  renderPass.viewportStack.push(viewport);\n  return viewport;\n}\n", "export let gl;\nexport const GL = {\n  get: () => {\n    return gl;\n  },\n  set: (context) => {\n    gl = context;\n  }\n};\n", "import {gl} from \"../GL\";\nexport function BindViewport(renderPass, viewport) {\n  if (!viewport) {\n    viewport = renderPass.currentViewport;\n    if (!viewport) {\n      return;\n    }\n  }\n  const glv = gl.getParameter(gl.VIEWPORT);\n  if (glv[0] !== viewport.x || glv[1] !== viewport.y || glv[2] !== viewport.width || glv[3] !== viewport.height) {\n    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n  }\n}\n", "import {AddViewport} from \"./AddViewport\";\nimport {BindViewport} from \"./BindViewport\";\nexport function SetViewport(renderPass, x = 0, y = 0, width = 0, height = 0) {\n  const entry = AddViewport(renderPass, x, y, width, height);\n  BindViewport(renderPass, entry);\n  renderPass.currentViewport = entry;\n}\n", "import {SetViewport} from \"./SetViewport\";\nimport {gl} from \"../GL\";\nexport function BindFramebuffer(renderPass, clear = true, entry) {\n  if (!entry) {\n    entry = renderPass.currentFramebuffer;\n  }\n  const {framebuffer, viewport} = entry;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  if (clear) {\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  }\n  if (viewport) {\n    SetViewport(renderPass, viewport.x, viewport.y, viewport.width, viewport.height);\n  }\n}\n", "import {BindViewport} from \"./BindViewport\";\nexport function PopViewport(renderPass) {\n  const stack = renderPass.viewportStack;\n  if (stack.length > 1) {\n    stack.pop();\n  }\n  renderPass.currentViewport = stack[stack.length - 1];\n  BindViewport(renderPass);\n}\n", "import {BindFramebuffer} from \"./BindFramebuffer\";\nimport {PopViewport} from \"./PopViewport\";\nexport function PopFramebuffer(renderPass) {\n  const stack = renderPass.framebufferStack;\n  if (stack.length > 1) {\n    if (renderPass.currentFramebuffer.viewport) {\n      PopViewport(renderPass);\n    }\n    stack.pop();\n  }\n  renderPass.currentFramebuffer = stack[stack.length - 1];\n  BindFramebuffer(renderPass, false);\n}\n", "export function AddFramebuffer(renderPass, framebuffer, viewport) {\n  const entry = {framebuffer, viewport};\n  renderPass.framebufferStack.push(entry);\n  return entry;\n}\n", "import {AddFramebuffer} from \"./AddFramebuffer\";\nimport {BindFramebuffer} from \"./BindFramebuffer\";\nexport function SetFramebuffer(renderPass, framebuffer, clear = true, viewport) {\n  const entry = AddFramebuffer(renderPass, framebuffer, viewport);\n  BindFramebuffer(renderPass, clear, entry);\n  renderPass.currentFramebuffer = entry;\n}\n", "import {PopFramebuffer} from \"./PopFramebuffer\";\nimport {SetFramebuffer} from \"./SetFramebuffer\";\nimport {gl} from \"../GL\";\nexport function Draw(renderPass) {\n  const count = renderPass.count;\n  if (count === 0) {\n    return;\n  }\n  const currentBuffer = renderPass.currentVertexBuffer;\n  const currentShader = renderPass.currentShader;\n  const renderToFramebuffer = currentShader.shader.renderToFramebuffer;\n  if (renderToFramebuffer) {\n    SetFramebuffer(renderPass, currentShader.shader.framebuffer, true);\n  }\n  if (count === currentBuffer.batchSize) {\n    const type = currentBuffer.isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n    gl.bufferData(gl.ARRAY_BUFFER, currentBuffer.data, type);\n  } else {\n    const subsize = currentBuffer.indexed ? count * currentBuffer.entryElementSize : count * currentBuffer.vertexElementSize;\n    const view = currentBuffer.vertexViewF32.subarray(0, subsize);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\n  }\n  if (currentBuffer.indexed) {\n    gl.drawElements(gl.TRIANGLES, count * currentBuffer.entryIndexSize, gl.UNSIGNED_SHORT, 0);\n  } else {\n    gl.drawArrays(gl.TRIANGLES, 0, count);\n  }\n  if (renderToFramebuffer) {\n    PopFramebuffer(renderPass);\n  }\n}\n", "import {Draw} from \"./Draw\";\nexport function Flush(renderPass, forceCount) {\n  if (forceCount) {\n    renderPass.count = forceCount;\n  }\n  const count = renderPass.count;\n  if (count === 0) {\n    return false;\n  }\n  Draw(renderPass);\n  renderPass.prevCount = count;\n  renderPass.count = 0;\n  renderPass.flushTotal++;\n  return true;\n}\n", "import {Flush} from \"./Flush\";\nexport function End(renderPass) {\n  Flush(renderPass);\n}\n", "export function GetRGBArray(color, output = []) {\n  const r = color >> 16 & 255;\n  const g = color >> 8 & 255;\n  const b = color & 255;\n  const a = color > 16777215 ? color >>> 24 : 255;\n  output[0] = r / 255;\n  output[1] = g / 255;\n  output[2] = b / 255;\n  output[3] = a / 255;\n  return output;\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetWebGLContext() {\n  return ConfigStore.get(CONFIG_DEFAULTS.WEBGL_CONTEXT);\n}\n", "import {gl} from \"../GL\";\nexport function CreateGLTexture(binding) {\n  const {parent, flipY, unpackPremultiplyAlpha, minFilter, magFilter, wrapS, wrapT, generateMipmap, isPOT} = binding;\n  const source = parent.image;\n  let width = parent.width;\n  let height = parent.height;\n  const glTexture = gl.createTexture();\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, glTexture);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\n  if (source) {\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n    width = source.width;\n    height = source.height;\n  } else {\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n  }\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n  if (generateMipmap && isPOT) {\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n  binding.texture = glTexture;\n  return glTexture;\n}\n", "import {gl} from \"../GL\";\nexport function DeleteFramebuffer(framebuffer) {\n  if (gl && gl.isFramebuffer(framebuffer)) {\n    gl.deleteFramebuffer(framebuffer);\n  }\n}\n", "import {gl} from \"../GL\";\nexport function DeleteGLTexture(texture) {\n  if (gl.isTexture(texture)) {\n    gl.deleteTexture(texture);\n  }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function IsSizePowerOfTwo(width, height) {\n  if (width < 1 || height < 1) {\n    return false;\n  }\n  return (width & width - 1) === 0 && (height & height - 1) === 0;\n}\n", "import {gl} from \"../GL\";\nexport function SetGLTextureFilterMode(texture, linear = true) {\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  const mode = linear ? gl.LINEAR : gl.NEAREST;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\n}\n", "import {gl} from \"../GL\";\nexport function UpdateGLTexture(binding) {\n  const source = binding.parent.image;\n  const width = source.width;\n  const height = source.height;\n  if (width > 0 && height > 0) {\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n  }\n  return binding.texture;\n}\n", "import {CreateGLTexture} from \"./CreateGLTexture\";\nimport {DeleteFramebuffer} from \"../fbo/DeleteFramebuffer\";\nimport {DeleteGLTexture} from \"./DeleteGLTexture\";\nimport {IsSizePowerOfTwo} from \"../../../math/pow2/IsSizePowerOfTwo\";\nimport {SetGLTextureFilterMode} from \"./SetGLTextureFilterMode\";\nimport {UpdateGLTexture} from \"./UpdateGLTexture\";\nimport {gl} from \"../GL\";\nexport class GLTextureBinding {\n  constructor(parent, config = {}) {\n    this.index = 0;\n    this.indexCounter = -1;\n    this.dirtyIndex = true;\n    this.unpackPremultiplyAlpha = true;\n    this.flipY = false;\n    this.isPOT = false;\n    this.generateMipmap = false;\n    this.parent = parent;\n    this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\n    const {\n      texture = null,\n      framebuffer = null,\n      depthbuffer = null,\n      unpackPremultiplyAlpha = true,\n      minFilter = this.isPOT ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR,\n      magFilter = gl.LINEAR,\n      wrapS = gl.CLAMP_TO_EDGE,\n      wrapT = gl.CLAMP_TO_EDGE,\n      generateMipmap = this.isPOT,\n      flipY = false\n    } = config;\n    this.minFilter = minFilter;\n    this.magFilter = magFilter;\n    this.wrapS = wrapS;\n    this.wrapT = wrapT;\n    this.generateMipmap = generateMipmap;\n    this.flipY = flipY;\n    this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\n    if (framebuffer) {\n      this.framebuffer = framebuffer;\n    }\n    if (depthbuffer) {\n      this.depthbuffer = depthbuffer;\n    }\n    if (texture) {\n      this.texture = texture;\n    } else {\n      CreateGLTexture(this);\n    }\n  }\n  setFilter(linear) {\n    if (this.texture) {\n      SetGLTextureFilterMode(this.texture, linear);\n    }\n  }\n  create() {\n    const texture = this.texture;\n    if (texture) {\n      DeleteGLTexture(texture);\n    }\n    return CreateGLTexture(this);\n  }\n  update() {\n    const texture = this.texture;\n    if (!texture) {\n      return CreateGLTexture(this);\n    } else {\n      return UpdateGLTexture(this);\n    }\n  }\n  setIndex(index) {\n    this.dirtyIndex = index !== this.index;\n    this.index = index;\n  }\n  destroy() {\n    DeleteGLTexture(this.texture);\n    DeleteFramebuffer(this.framebuffer);\n    this.parent = null;\n    this.texture = null;\n    this.framebuffer = null;\n  }\n}\n", "import {BindingQueue} from \"../../BindingQueue\";\nimport {GLTextureBinding} from \"../textures/GLTextureBinding\";\nexport function ProcessBindingQueue() {\n  const queue = BindingQueue.get();\n  queue.forEach((entry) => {\n    const {texture, glConfig} = entry;\n    if (!texture.binding) {\n      texture.binding = new GLTextureBinding(texture, glConfig);\n    }\n  });\n  BindingQueue.clear();\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetMaxTextures() {\n  return ConfigStore.get(CONFIG_DEFAULTS.MAX_TEXTURES);\n}\n", "import {gl} from \"../GL\";\nconst fragTemplate = [\n  \"precision mediump float;\",\n  \"void main(void){\",\n  \"float test = 0.1;\",\n  \"%forloop%\",\n  \"gl_FragColor = vec4(0.0);\",\n  \"}\"\n].join(\"\\n\");\nfunction GenerateSrc(maxIfs) {\n  let src = \"\";\n  for (let i = 0; i < maxIfs; ++i) {\n    if (i > 0) {\n      src += \"\\nelse \";\n    }\n    if (i < maxIfs - 1) {\n      src += `if(test == ${i}.0){}`;\n    }\n  }\n  return src;\n}\nexport function CheckShaderMaxIfStatements(maxIfs) {\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n  while (true) {\n    const fragmentSrc = fragTemplate.replace(/%forloop%/gi, GenerateSrc(maxIfs));\n    gl.shaderSource(shader, fragmentSrc);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      maxIfs = maxIfs / 2 | 0;\n    } else {\n      break;\n    }\n  }\n  return maxIfs;\n}\n", "import {GetMaxTextures, SetMaxTextures} from \"../../../config/maxtextures/\";\nimport {CheckShaderMaxIfStatements} from \"../shaders/CheckShaderMaxIfStatements\";\nimport {gl} from \"../GL\";\nexport function CreateTempTextures(renderPass) {\n  let maxGPUTextures = CheckShaderMaxIfStatements(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));\n  const maxConfigTextures = GetMaxTextures();\n  if (maxConfigTextures === 0 || maxConfigTextures > 0 && maxConfigTextures > maxGPUTextures) {\n    SetMaxTextures(maxGPUTextures);\n  } else if (maxConfigTextures > 0 && maxConfigTextures < maxGPUTextures) {\n    maxGPUTextures = Math.max(8, maxConfigTextures);\n  }\n  const tempTextures = renderPass.tempTextures;\n  if (tempTextures.length) {\n    tempTextures.forEach((texture) => {\n      gl.deleteTexture(texture);\n    });\n  }\n  const index = [];\n  for (let texturesIndex = 0; texturesIndex < maxGPUTextures; texturesIndex++) {\n    const tempTexture = gl.createTexture();\n    gl.activeTexture(gl.TEXTURE0 + texturesIndex);\n    gl.bindTexture(gl.TEXTURE_2D, tempTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n    tempTextures[texturesIndex] = tempTexture;\n    index.push(texturesIndex);\n  }\n  renderPass.maxTextures = maxGPUTextures;\n  renderPass.textureIndex = index;\n  renderPass.currentActiveTexture = 1;\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetBatchSize() {\n  return ConfigStore.get(CONFIG_DEFAULTS.BATCH_SIZE);\n}\n", "import {gl} from \"../GL\";\nexport function DeleteGLBuffer(buffer) {\n  if (gl.isBuffer(buffer)) {\n    gl.deleteBuffer(buffer);\n  }\n}\n", "import {DeleteGLBuffer} from \"./DeleteGLBuffer\";\nimport {gl} from \"../GL\";\nexport class VertexBuffer {\n  constructor(config = {}) {\n    this.indexed = false;\n    this.isDynamic = false;\n    this.count = 0;\n    this.offset = 0;\n    const {\n      batchSize = 1,\n      dataSize = 4,\n      isDynamic = true,\n      elementsPerEntry = 4,\n      vertexElementSize = 6\n    } = config;\n    this.batchSize = batchSize;\n    this.dataSize = dataSize;\n    this.vertexElementSize = vertexElementSize;\n    this.isDynamic = isDynamic;\n    this.elementsPerEntry = elementsPerEntry;\n    this.vertexByteSize = vertexElementSize * dataSize;\n    this.entryByteSize = this.vertexByteSize * elementsPerEntry;\n    this.bufferByteSize = batchSize * this.entryByteSize;\n    this.create();\n  }\n  resize(batchSize) {\n    this.batchSize = batchSize;\n    this.bufferByteSize = batchSize * this.entryByteSize;\n    if (this.vertexBuffer) {\n      DeleteGLBuffer(this.vertexBuffer);\n    }\n    this.create();\n  }\n  create() {\n    const data = new ArrayBuffer(this.bufferByteSize);\n    this.data = data;\n    this.vertexViewF32 = new Float32Array(data);\n    this.vertexViewU32 = new Uint32Array(data);\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    const type = this.isDynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n    gl.bufferData(gl.ARRAY_BUFFER, data, type);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n  add(count) {\n    this.count += count;\n    this.offset += this.vertexElementSize * count;\n  }\n  reset() {\n    this.count = 0;\n    this.offset = 0;\n  }\n  canContain(count) {\n    return this.count + count <= this.batchSize;\n  }\n  free() {\n    return Math.max(0, 1 - this.count / this.batchSize);\n  }\n  bind() {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n  }\n  destroy() {\n    DeleteGLBuffer(this.vertexBuffer);\n    this.data = null;\n    this.vertexViewF32 = null;\n    this.vertexViewU32 = null;\n    this.vertexBuffer = null;\n  }\n}\n", "import {DeleteGLBuffer} from \"./DeleteGLBuffer\";\nimport {VertexBuffer} from \"./VertexBuffer\";\nimport {gl} from \"../GL\";\nexport class IndexedVertexBuffer extends VertexBuffer {\n  constructor(config = {}) {\n    super(config);\n    const {\n      indexSize = 4,\n      entryIndexSize = 6,\n      indexLayout = null\n    } = config;\n    this.indexed = true;\n    this.indexSize = indexSize;\n    this.entryIndexSize = entryIndexSize;\n    this.entryElementSize = this.vertexElementSize * this.elementsPerEntry;\n    const seededIndexBuffer = [];\n    if (indexLayout) {\n      this.indexLayout = indexLayout;\n      for (let i = 0; i < this.batchSize * indexSize; i += indexSize) {\n        for (let c = 0; c < indexLayout.length; c++) {\n          seededIndexBuffer.push(i + indexLayout[c]);\n        }\n      }\n    }\n    this.create();\n    this.createIndexBuffer(seededIndexBuffer);\n  }\n  createIndexBuffer(seededIndex) {\n    this.index = new Uint16Array(seededIndex);\n    this.indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.index, gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    seededIndex = [];\n  }\n  bind() {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n  }\n  destroy() {\n    super.destroy();\n    DeleteGLBuffer(this.indexBuffer);\n    this.index = null;\n    this.indexLayout = null;\n    this.indexBuffer = null;\n  }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function CheckMatrix(matrix) {\n  if (!Array.isArray(matrix) || matrix.length < 2 || !Array.isArray(matrix[0])) {\n    return false;\n  }\n  const size = matrix[0].length;\n  for (let i = 1; i < matrix.length; i++) {\n    if (matrix[i].length !== size) {\n      return false;\n    }\n  }\n  return true;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {CheckMatrix} from \"./CheckMatrix\";\nexport function MatrixToString(matrix) {\n  let str = \"\";\n  if (!CheckMatrix(matrix)) {\n    return str;\n  }\n  for (let r = 0; r < matrix.length; r++) {\n    for (let c = 0; c < matrix[r].length; c++) {\n      const cell = matrix[r][c].toString();\n      if (cell !== \"undefined\") {\n        str = str.padEnd(2, cell);\n      } else {\n        str += \"?\";\n      }\n      if (c < matrix[r].length - 1) {\n        str += \" |\";\n      }\n    }\n    if (r < matrix.length - 1) {\n      str += \"\\n\";\n      for (let i = 0; i < matrix[r].length; i++) {\n        str += \"---\";\n        if (i < matrix[r].length - 1) {\n          str += \"+\";\n        }\n      }\n      str += \"\\n\";\n    }\n  }\n  return str;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function ReverseColumns(matrix) {\n  return matrix.reverse();\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function ReverseRows(matrix) {\n  for (let i = 0; i < matrix.length; i++) {\n    matrix[i].reverse();\n  }\n  return matrix;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function TransposeMatrix(matrix) {\n  const sourceRowCount = matrix.length;\n  const sourceColCount = matrix[0].length;\n  const result = new Array(sourceColCount);\n  for (let i = 0; i < sourceColCount; i++) {\n    result[i] = new Array(sourceRowCount);\n    for (let j = sourceRowCount - 1; j > -1; j--) {\n      result[i][j] = matrix[j][i];\n    }\n  }\n  return result;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {CheckMatrix} from \"./CheckMatrix\";\nimport {TransposeMatrix} from \"./TransposeMatrix\";\nexport function RotateMatrix(matrix, direction = 90) {\n  if (!CheckMatrix(matrix)) {\n    return matrix;\n  }\n  if (typeof direction !== \"string\") {\n    direction = (direction % 360 + 360) % 360;\n  }\n  if (direction === 90 || direction === -270 || direction === \"rotateLeft\") {\n    matrix = TransposeMatrix(matrix);\n    matrix.reverse();\n  } else if (direction === -90 || direction === 270 || direction === \"rotateRight\") {\n    matrix.reverse();\n    matrix = TransposeMatrix(matrix);\n  } else if (Math.abs(direction) === 180 || direction === \"rotate180\") {\n    for (let i = 0; i < matrix.length; i++) {\n      matrix[i].reverse();\n    }\n    matrix.reverse();\n  }\n  return matrix;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {RotateMatrix} from \"./RotateMatrix\";\nexport function Rotate180(matrix) {\n  return RotateMatrix(matrix, 180);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {RotateMatrix} from \"./RotateMatrix\";\nexport function RotateLeft(matrix) {\n  return RotateMatrix(matrix, 90);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {RotateMatrix} from \"./RotateMatrix\";\nexport function RotateRight(matrix) {\n  return RotateMatrix(matrix, -90);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function NumberArray(start, end, prefix, suffix) {\n  const result = [];\n  for (let i = start; i <= end; i++) {\n    if (prefix || suffix) {\n      let key = prefix ? prefix + i.toString() : i.toString();\n      if (suffix) {\n        key = key.concat(suffix);\n      }\n      result.push(key);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function RoundAwayFromZero(value) {\n  return value > 0 ? Math.ceil(value) : Math.floor(value);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {RoundAwayFromZero} from \"../../math/RoundAwayFromZero\";\nexport function NumberArrayStep(start, end, step) {\n  const result = [];\n  const total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\n  for (let i = 0; i < total; i++) {\n    result.push(start);\n    start += step;\n  }\n  return result;\n}\n", "/**\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nconst chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nexport function ArrayBufferToBase64(arrayBuffer, mediaType) {\n  const bytes = new Uint8Array(arrayBuffer);\n  const len = bytes.length;\n  let base64 = mediaType ? \"data:\" + mediaType + \";base64,\" : \"\";\n  for (let i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1) + \"=\";\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2) + \"==\";\n  }\n  return base64;\n}\n", "/**\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nconst chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst lookup = new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\nexport function Base64ToArrayBuffer(base64) {\n  base64 = base64.substr(base64.indexOf(\",\") + 1);\n  const len = base64.length;\n  let bufferLength = len * 0.75;\n  let p = 0;\n  let encoded1;\n  let encoded2;\n  let encoded3;\n  let encoded4;\n  if (base64[len - 1] === \"=\") {\n    bufferLength--;\n    if (base64[len - 2] === \"=\") {\n      bufferLength--;\n    }\n  }\n  const arrayBuffer = new ArrayBuffer(bufferLength);\n  const bytes = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n  return arrayBuffer;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function UppercaseFirst(str) {\n  return str && str[0].toUpperCase() + str.slice(1);\n}\n", "export function NOOP() {\n}\n", "import {NOOP} from \"../../utils\";\nexport class Matrix4 {\n  constructor(src) {\n    const data = new Float32Array(16);\n    this.data = data;\n    this.onChange = NOOP;\n    if (src) {\n      if (Array.isArray(src)) {\n        this.fromArray(src);\n      } else {\n        this.fromArray(src.data);\n      }\n    } else {\n      data[0] = 1;\n      data[5] = 1;\n      data[10] = 1;\n      data[15] = 1;\n    }\n  }\n  set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    const data = this.data;\n    data[0] = m00;\n    data[1] = m01;\n    data[2] = m02;\n    data[3] = m03;\n    data[4] = m10;\n    data[5] = m11;\n    data[6] = m12;\n    data[7] = m13;\n    data[8] = m20;\n    data[9] = m21;\n    data[10] = m22;\n    data[11] = m23;\n    data[12] = m30;\n    data[13] = m31;\n    data[14] = m32;\n    data[15] = m33;\n    this.onChange(this);\n    return this;\n  }\n  toArray(dst = [], index = 0) {\n    const data = this.data;\n    for (let i = 0; i < 16; i++) {\n      dst[index + i] = data[i];\n    }\n    return dst;\n  }\n  fromArray(src, index = 0) {\n    const data = this.data;\n    for (let i = 0; i < 16; i++) {\n      data[i] = src[index + i];\n    }\n    this.onChange(this);\n    return this;\n  }\n  toString() {\n    return \"[ mat4=\" + this.data.join(\", \") + \" ]\";\n  }\n  destroy() {\n    this.onChange = NOOP;\n    this.data = null;\n  }\n}\n", "import {Matrix4} from \"./Matrix4\";\nexport function Mat4Ortho(left, right, bottom, top, near, far, out = new Matrix4()) {\n  const lr = 1 / (left - right);\n  const bt = 1 / (bottom - top);\n  const nf = 1 / (near - far);\n  return out.set(-2 * lr, 0, 0, 0, 0, -2 * bt, 0, 0, 0, 0, 2 * nf, 0, (left + right) * lr, (top + bottom) * bt, (far + near) * nf, 1);\n}\n", "import {gl} from \"../GL\";\nexport function CreateAttributes(program, config) {\n  const attributes = new Map();\n  const defaultSettings = {\n    size: 1,\n    type: gl.FLOAT,\n    normalized: false,\n    stride: 0,\n    offset: 0\n  };\n  const total = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n  for (let i = 0; i < total; i++) {\n    const attrib = gl.getActiveAttrib(program, i);\n    if (!attrib) {\n      break;\n    }\n    const name = attrib.name;\n    const index = gl.getAttribLocation(program, name);\n    gl.enableVertexAttribArray(index);\n    const setting = config.hasOwnProperty(name) ? config[name] : {};\n    const {\n      size = defaultSettings.size,\n      type = defaultSettings.type,\n      normalized = defaultSettings.normalized,\n      stride = defaultSettings.stride,\n      offset = defaultSettings.offset\n    } = setting;\n    attributes.set(name, {index, size, type, normalized, stride, offset});\n  }\n  return attributes;\n}\n", "import {gl} from \"../GL\";\nexport function DeleteShaders(...shaders) {\n  shaders.forEach((shader) => {\n    gl.deleteShader(shader);\n  });\n}\n", "import {DeleteShaders} from \"./DeleteShaders\";\nimport {gl} from \"../GL\";\nexport function CreateProgram(...shaders) {\n  const program = gl.createProgram();\n  shaders.forEach((shader) => {\n    gl.attachShader(program, shader);\n  });\n  gl.linkProgram(program);\n  const status = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (!status) {\n    const info = gl.getProgramInfoLog(program);\n    console.error(`Error linking program: ${info}`);\n    gl.deleteProgram(program);\n    DeleteShaders(...shaders);\n    return null;\n  }\n  return program;\n}\n", "import {gl} from \"../GL\";\nexport function CreateShader(source, type) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (!status) {\n    const info = gl.getShaderInfoLog(shader);\n    const sourceLines = source.split(\"\\n\").map((line, index) => {\n      return `${index}: ${line}`;\n    });\n    console.error(`Error compiling shader: ${info}`, sourceLines.join(\"\\n\"));\n    gl.deleteShader(shader);\n    return null;\n  }\n  return shader;\n}\n", "import {gl} from \"../GL\";\nexport function CreateUniformSetter(uniform, location, isArray = false) {\n  switch (uniform.type) {\n    case gl.INT:\n    case gl.BOOL: {\n      if (isArray) {\n        return (v) => {\n          gl.uniform1iv(location, v);\n        };\n      } else {\n        return (v) => {\n          gl.uniform1i(location, v);\n        };\n      }\n    }\n    case gl.INT_VEC2:\n    case gl.BOOL_VEC2: {\n      return (v) => {\n        gl.uniform2iv(location, v);\n      };\n    }\n    case gl.INT_VEC3:\n    case gl.BOOL_VEC3: {\n      return (v) => {\n        gl.uniform3iv(location, v);\n      };\n    }\n    case gl.INT_VEC4:\n    case gl.BOOL_VEC4: {\n      return (v) => {\n        gl.uniform4iv(location, v);\n      };\n    }\n    case gl.FLOAT: {\n      if (isArray) {\n        return (v) => {\n          gl.uniform1fv(location, v);\n        };\n      } else {\n        return (v) => {\n          gl.uniform1f(location, v);\n        };\n      }\n    }\n    case gl.FLOAT_VEC2: {\n      return (v) => {\n        gl.uniform2fv(location, v);\n      };\n    }\n    case gl.FLOAT_VEC3: {\n      return (v) => {\n        gl.uniform3fv(location, v);\n      };\n    }\n    case gl.FLOAT_VEC4: {\n      return (v) => {\n        gl.uniform4fv(location, v);\n      };\n    }\n    case gl.FLOAT_MAT2: {\n      return (v) => {\n        gl.uniformMatrix2fv(location, false, v);\n      };\n    }\n    case gl.FLOAT_MAT3: {\n      return (v) => {\n        gl.uniformMatrix3fv(location, false, v);\n      };\n    }\n    case gl.FLOAT_MAT4: {\n      return (v) => {\n        gl.uniformMatrix4fv(location, false, v);\n      };\n    }\n    case gl.SAMPLER_2D:\n    case gl.SAMPLER_CUBE: {\n      if (uniform.size > 1) {\n        return (v) => {\n          gl.uniform1iv(location, v);\n        };\n      } else {\n        return (v) => {\n          gl.uniform1i(location, v);\n        };\n      }\n    }\n  }\n}\n", "import {CreateUniformSetter} from \"./CreateUniformSetter\";\nimport {gl} from \"../GL\";\nexport function CreateUniforms(program) {\n  const uniforms = new Map();\n  const total = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n  for (let i = 0; i < total; i++) {\n    const uniform = gl.getActiveUniform(program, i);\n    let name = uniform.name;\n    if (name.startsWith(\"gl_\") || name.startsWith(\"webgl_\")) {\n      continue;\n    }\n    const location = gl.getUniformLocation(program, uniform.name);\n    if (location) {\n      let isArray = false;\n      if (name.substr(-3) === \"[0]\") {\n        name = name.substr(0, name.length - 3);\n        isArray = uniform.size > 1;\n      }\n      uniforms.set(name, CreateUniformSetter(uniform, location, isArray));\n    }\n  }\n  return uniforms;\n}\n", "const BYTE = 5120;\nconst UNSIGNED_BYTE = 5121;\nconst SHORT = 5122;\nconst UNSIGNED_SHORT = 5123;\nconst INT = 5124;\nconst UNSIGNED_INT = 5125;\nconst FLOAT = 5126;\nconst REPEAT = 10497;\nconst CLAMP_TO_EDGE = 33071;\nconst MIRRORED_REPEAT = 33648;\nconst NEAREST = 9728;\nconst LINEAR = 9729;\nconst NEAREST_MIPMAP_NEAREST = 9984;\nconst LINEAR_MIPMAP_NEAREST = 9985;\nconst NEAREST_MIPMAP_LINEAR = 9986;\nconst LINEAR_MIPMAP_LINEAR = 9987;\nexport {\n  BYTE,\n  UNSIGNED_BYTE,\n  SHORT,\n  UNSIGNED_SHORT,\n  INT,\n  UNSIGNED_INT,\n  FLOAT,\n  REPEAT,\n  CLAMP_TO_EDGE,\n  MIRRORED_REPEAT,\n  NEAREST,\n  LINEAR,\n  NEAREST_MIPMAP_NEAREST,\n  LINEAR_MIPMAP_NEAREST,\n  NEAREST_MIPMAP_LINEAR,\n  LINEAR_MIPMAP_LINEAR\n};\n", "import * as GL_CONST from \"../GL_CONST\";\nexport const DefaultQuadAttributes = {\n  aVertexPosition: {size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 0},\n  aTextureCoord: {size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 8},\n  aTextureId: {size: 1, type: GL_CONST.FLOAT, normalized: false, offset: 16},\n  aTintColor: {size: 4, type: GL_CONST.UNSIGNED_BYTE, normalized: true, offset: 20}\n};\n", "export const DefaultQuadUniforms = {\n  uProjectionMatrix: new Float32Array(),\n  uCameraMatrix: new Float32Array(),\n  uTexture: 0\n};\n", "import {gl} from \"../GL\";\nexport function CreateDepthBuffer(framebuffer, textureWidth, textureHeight) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  const depthBuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureWidth, textureHeight);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  return depthBuffer;\n}\n", "import {gl} from \"../GL\";\nexport function CreateFramebuffer(texture, attachment) {\n  if (!attachment) {\n    attachment = gl.COLOR_ATTACHMENT0;\n  }\n  const framebuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  return framebuffer;\n}\n", "export const SINGLE_QUAD_FRAG = `#define SHADER_NAME SINGLE_QUAD_FRAG\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\n\nvoid main (void)\n{\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\n}`;\n", "export const SINGLE_QUAD_VERT = `#define SHADER_NAME SINGLE_QUAD_VERT\n\nprecision highp float;\n\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute float aTextureId;\nattribute vec4 aTintColor;\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uCameraMatrix;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nvoid main (void)\n{\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vTintColor = aTintColor;\n\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}`;\n", "export class Frame {\n  constructor(texture, key, x, y, width, height) {\n    this.trimmed = false;\n    this.texture = texture;\n    this.key = key;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.sourceSizeWidth = width;\n    this.sourceSizeHeight = height;\n    this.updateUVs();\n  }\n  setPivot(x, y) {\n    this.pivot = {x, y};\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.sourceSizeWidth = width;\n    this.sourceSizeHeight = height;\n    this.updateUVs();\n  }\n  setSourceSize(width, height) {\n    this.sourceSizeWidth = width;\n    this.sourceSizeHeight = height;\n  }\n  setTrim(width, height, x, y, w, h) {\n    this.trimmed = true;\n    this.sourceSizeWidth = width;\n    this.sourceSizeHeight = height;\n    this.spriteSourceSizeX = x;\n    this.spriteSourceSizeY = y;\n    this.spriteSourceSizeWidth = w;\n    this.spriteSourceSizeHeight = h;\n  }\n  getExtent(originX, originY) {\n    const sourceSizeWidth = this.sourceSizeWidth;\n    const sourceSizeHeight = this.sourceSizeHeight;\n    let left;\n    let right;\n    let top;\n    let bottom;\n    if (this.trimmed) {\n      left = this.spriteSourceSizeX - originX * sourceSizeWidth;\n      right = left + this.spriteSourceSizeWidth;\n      top = this.spriteSourceSizeY - originY * sourceSizeHeight;\n      bottom = top + this.spriteSourceSizeHeight;\n    } else {\n      left = -originX * sourceSizeWidth;\n      right = left + sourceSizeWidth;\n      top = -originY * sourceSizeHeight;\n      bottom = top + sourceSizeHeight;\n    }\n    return {left, right, top, bottom};\n  }\n  copyToExtent(child) {\n    const transform = child.transform;\n    const originX = transform.origin.x;\n    const originY = transform.origin.y;\n    const sourceSizeWidth = this.sourceSizeWidth;\n    const sourceSizeHeight = this.sourceSizeHeight;\n    let x;\n    let y;\n    let width;\n    let height;\n    if (this.trimmed) {\n      x = this.spriteSourceSizeX - originX * sourceSizeWidth;\n      y = this.spriteSourceSizeY - originY * sourceSizeHeight;\n      width = this.spriteSourceSizeWidth;\n      height = this.spriteSourceSizeHeight;\n    } else {\n      x = -originX * sourceSizeWidth;\n      y = -originY * sourceSizeHeight;\n      width = sourceSizeWidth;\n      height = sourceSizeHeight;\n    }\n    transform.setExtent(x, y, width, height);\n    return this;\n  }\n  copyToVertices(vertices, offset = 0) {\n    const {u0, u1, v0, v1} = this;\n    vertices[offset + 0].setUV(u0, v0);\n    vertices[offset + 1].setUV(u0, v1);\n    vertices[offset + 2].setUV(u1, v1);\n    vertices[offset + 3].setUV(u1, v0);\n    return this;\n  }\n  updateUVs() {\n    const {x, y, width, height} = this;\n    const baseTextureWidth = this.texture.width;\n    const baseTextureHeight = this.texture.height;\n    this.u0 = x / baseTextureWidth;\n    this.v0 = y / baseTextureHeight;\n    this.u1 = (x + width) / baseTextureWidth;\n    this.v1 = (y + height) / baseTextureHeight;\n  }\n}\n", "import {BindingQueue} from \"../renderer/BindingQueue\";\nimport {Frame} from \"./Frame\";\nexport class Texture {\n  constructor(image, width, height, glConfig) {\n    this.key = \"\";\n    if (image) {\n      width = image.width;\n      height = image.height;\n    }\n    this.image = image;\n    this.width = width;\n    this.height = height;\n    this.frames = new Map();\n    this.data = {};\n    this.addFrame(\"__BASE\", 0, 0, width, height);\n    BindingQueue.add(this, glConfig);\n  }\n  addFrame(key, x, y, width, height) {\n    if (this.frames.has(key)) {\n      return null;\n    }\n    const frame = new Frame(this, key, x, y, width, height);\n    this.frames.set(key, frame);\n    if (!this.firstFrame || this.firstFrame.key === \"__BASE\") {\n      this.firstFrame = frame;\n    }\n    return frame;\n  }\n  getFrame(key) {\n    if (!key) {\n      return this.firstFrame;\n    }\n    if (key instanceof Frame) {\n      key = key.key;\n    }\n    let frame = this.frames.get(key);\n    if (!frame) {\n      console.warn(`Frame missing: ${key}`);\n      frame = this.firstFrame;\n    }\n    return frame;\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    const frame = this.frames.get(\"__BASE\");\n    frame.setSize(width, height);\n  }\n  destroy() {\n    if (this.binding) {\n      this.binding.destroy();\n    }\n    this.frames.clear();\n    this.data = null;\n    this.image = null;\n    this.firstFrame = null;\n  }\n}\n", "import {GetHeight, GetResolution, GetWidth} from \"../../../config/size/\";\nimport {CreateAttributes} from \"./CreateAttributes\";\nimport {CreateDepthBuffer} from \"../fbo/CreateDepthBuffer\";\nimport {CreateFramebuffer} from \"../fbo/CreateFramebuffer\";\nimport {CreateProgram} from \"./CreateProgram\";\nimport {CreateShader} from \"./CreateShader\";\nimport {CreateUniforms} from \"./CreateUniforms\";\nimport {DefaultQuadAttributes} from \"./DefaultQuadAttributes\";\nimport {DefaultQuadUniforms} from \"./DefaultQuadUniforms\";\nimport {DeleteFramebuffer} from \"../fbo/DeleteFramebuffer\";\nimport {DeleteGLTexture} from \"../textures/DeleteGLTexture\";\nimport {DeleteShaders} from \"./DeleteShaders\";\nimport {GLTextureBinding} from \"../textures/GLTextureBinding\";\nimport {SINGLE_QUAD_FRAG} from \"../glsl/SINGLE_QUAD_FRAG\";\nimport {SINGLE_QUAD_VERT} from \"../glsl/SINGLE_QUAD_VERT\";\nimport {Texture} from \"../../../textures/Texture\";\nimport {gl} from \"../GL\";\nexport class Shader {\n  constructor(config) {\n    this.renderToFramebuffer = false;\n    this.renderToDepthbuffer = false;\n    if (config) {\n      this.fromConfig(config);\n    }\n  }\n  fromConfig(config) {\n    const {\n      attributes = DefaultQuadAttributes,\n      fragmentShader = SINGLE_QUAD_FRAG,\n      height = GetHeight(),\n      renderToFramebuffer = false,\n      renderToDepthbuffer = false,\n      resolution = GetResolution(),\n      vertexShader = SINGLE_QUAD_VERT,\n      width = GetWidth(),\n      uniforms = DefaultQuadUniforms\n    } = config;\n    this.create(fragmentShader, vertexShader, uniforms, attributes);\n    if (renderToFramebuffer) {\n      this.renderToFramebuffer = true;\n      const texture = new Texture(null, width * resolution, height * resolution);\n      const binding = new GLTextureBinding(texture);\n      texture.binding = binding;\n      binding.framebuffer = CreateFramebuffer(binding.texture);\n      if (renderToDepthbuffer) {\n        this.renderToDepthbuffer = true;\n        binding.depthbuffer = CreateDepthBuffer(binding.framebuffer, texture.width, texture.height);\n      }\n      this.texture = texture;\n      this.framebuffer = binding.framebuffer;\n    }\n  }\n  create(fragmentShaderSource, vertexShaderSource, uniforms, attribs) {\n    const fragmentShader = CreateShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n    const vertexShader = CreateShader(vertexShaderSource, gl.VERTEX_SHADER);\n    if (!fragmentShader || !vertexShader) {\n      return;\n    }\n    const program = CreateProgram(fragmentShader, vertexShader);\n    if (!program) {\n      return;\n    }\n    const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n    gl.useProgram(program);\n    this.program = program;\n    this.uniformSetters = CreateUniforms(program);\n    this.uniforms = new Map();\n    for (const [key, value] of Object.entries(uniforms)) {\n      this.uniforms.set(key, value);\n    }\n    this.attributes = CreateAttributes(program, attribs);\n    gl.useProgram(currentProgram);\n  }\n  updateUniforms(renderPass) {\n  }\n  bind(renderPass) {\n    this.updateUniforms(renderPass);\n    return this.setUniforms(renderPass);\n  }\n  setUniform(key, value) {\n    const uniforms = this.uniforms;\n    if (uniforms.has(key)) {\n      uniforms.set(key, value);\n      const setter = this.uniformSetters.get(key);\n      setter(value);\n    }\n  }\n  setUniforms(renderPass) {\n    if (!this.program) {\n      return false;\n    }\n    gl.useProgram(this.program);\n    const uniforms = this.uniforms;\n    for (const [name, setter] of this.uniformSetters.entries()) {\n      setter(uniforms.get(name));\n    }\n    return true;\n  }\n  setAttributes(renderPass) {\n    if (this.program) {\n      const stride = renderPass.currentVertexBuffer.vertexByteSize;\n      this.attributes.forEach((attrib) => {\n        gl.vertexAttribPointer(attrib.index, attrib.size, attrib.type, attrib.normalized, stride, attrib.offset);\n      });\n    }\n  }\n  destroy() {\n    DeleteShaders(this.program);\n    DeleteGLTexture(this.texture);\n    DeleteFramebuffer(this.framebuffer);\n    this.uniforms.clear();\n    this.uniformSetters.clear();\n    this.attributes.clear();\n    this.program = null;\n    this.texture = null;\n    this.framebuffer = null;\n  }\n}\n", "import {DefaultQuadAttributes} from \"./DefaultQuadAttributes\";\nimport {Shader} from \"./Shader\";\nexport class QuadShader extends Shader {\n  constructor(config = {}) {\n    const shaderConfig = config;\n    shaderConfig.attributes = !shaderConfig.attributes ? DefaultQuadAttributes : shaderConfig.attributes;\n    super(shaderConfig);\n  }\n  bind(renderPass) {\n    const uniforms = this.uniforms;\n    uniforms.set(\"uProjectionMatrix\", renderPass.projectionMatrix.data);\n    uniforms.set(\"uCameraMatrix\", renderPass.cameraMatrix.data);\n    return super.bind(renderPass);\n  }\n}\n", "export const MULTI_QUAD_FRAG = `#define SHADER_NAME MULTI_QUAD_FRAG\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture[%count%];\n\nvoid main (void)\n{\n    vec4 color;\n\n    %forloop%\n\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\n}`;\n", "import {GetMaxTextures} from \"../../../config/maxtextures/GetMaxTextures\";\nimport {MULTI_QUAD_FRAG} from \"../glsl/MULTI_QUAD_FRAG\";\nimport {QuadShader} from \"./QuadShader\";\nexport class MultiTextureQuadShader extends QuadShader {\n  constructor(config = {}) {\n    if (!config.fragmentShader) {\n      config.fragmentShader = MULTI_QUAD_FRAG;\n    }\n    super(config);\n  }\n  create(fragmentShaderSource, vertexShaderSource, uniforms, attribs) {\n    const maxTextures = GetMaxTextures();\n    let src = \"\";\n    for (let i = 1; i < maxTextures; i++) {\n      if (i > 1) {\n        src += \"\\n\telse \";\n      }\n      if (i < maxTextures - 1) {\n        src += `if (vTextureId < ${i}.5)`;\n      }\n      src += \"\\n\t{\";\n      src += `\n\t\tcolor = texture2D(uTexture[${i}], vTextureCoord);`;\n      src += \"\\n\t}\";\n    }\n    fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\n    fragmentShaderSource = fragmentShaderSource.replace(/%forloop%/gi, src);\n    super.create(fragmentShaderSource, vertexShaderSource, uniforms, attribs);\n  }\n  bind(renderPass) {\n    this.uniforms.set(\"uTexture\", renderPass.textureIndex);\n    return super.bind(renderPass);\n  }\n}\n", "export function SetDefaultBlendMode(renderPass, enable, sfactor, dfactor) {\n  const entry = {enable, sfactor, dfactor};\n  renderPass.blendModeStack[0] = entry;\n  renderPass.currentBlendMode = entry;\n  renderPass.defaultBlendMode = entry;\n}\n", "export function SetDefaultFramebuffer(renderPass, framebuffer = null, viewport) {\n  const entry = {framebuffer, viewport};\n  renderPass.framebufferStack[0] = entry;\n  renderPass.currentFramebuffer = entry;\n  renderPass.defaultFramebuffer = entry;\n}\n", "export function SetDefaultShader(renderPass, shader, textureID) {\n  const entry = {shader, textureID};\n  renderPass.shaderStack[0] = entry;\n  renderPass.currentShader = entry;\n  renderPass.defaultShader = entry;\n}\n", "export function SetDefaultVertexBuffer(renderPass, buffer) {\n  renderPass.vertexBufferStack[0] = buffer;\n  renderPass.currentVertexBuffer = buffer;\n  renderPass.defaultVertexBuffer = buffer;\n}\n", "import {Rectangle} from \"../../../geom/rectangle/Rectangle\";\nexport function SetDefaultViewport(renderPass, x = 0, y = 0, width = 0, height = 0) {\n  const entry = new Rectangle(x, y, width, height);\n  renderPass.viewportStack[0] = entry;\n  renderPass.currentViewport = entry;\n  renderPass.defaultViewport = entry;\n}\n", "export let instance;\nexport let frame = 0;\nexport let elapsed = 0;\nexport const GameInstance = {\n  get: () => {\n    return instance;\n  },\n  set: (game) => {\n    instance = game;\n  },\n  getFrame: () => {\n    return frame;\n  },\n  setFrame: (current) => {\n    frame = current;\n  },\n  getElapsed: () => {\n    return elapsed;\n  },\n  setElapsed: (current) => {\n    elapsed = current;\n  }\n};\n", "import {Matrix4} from \"./Matrix4\";\nexport function Mat4Identity(matrix = new Matrix4()) {\n  return matrix.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n}\n", "export class Matrix2D {\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    this.set(a, b, c, d, tx, ty);\n  }\n  set(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  }\n  identity() {\n    return this.set();\n  }\n  toArray() {\n    const {a, b, c, d, tx, ty} = this;\n    return [a, b, c, d, tx, ty];\n  }\n  fromArray(src) {\n    return this.set(src[0], src[1], src[2], src[3], src[4], src[5]);\n  }\n}\n", "import {NOOP} from \"../../utils/NOOP\";\nexport class Vec2Callback {\n  constructor(onChange, x = 0, y = 0) {\n    this._x = x;\n    this._y = y;\n    this.onChange = onChange;\n  }\n  destroy() {\n    this.onChange = NOOP;\n  }\n  set(x = 0, y = 0) {\n    this._x = x;\n    this._y = y;\n    if (this.onChange) {\n      this.onChange(this);\n    }\n    return this;\n  }\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    const prev = this._x;\n    this._x = value;\n    if (prev !== value) {\n      this.onChange(this);\n    }\n  }\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    const prev = this._y;\n    this._y = value;\n    if (prev !== value) {\n      this.onChange(this);\n    }\n  }\n  toArray(dst = [], index = 0) {\n    const {x, y} = this;\n    dst[index] = x;\n    dst[index + 1] = y;\n    return dst;\n  }\n  fromArray(src, index = 0) {\n    return this.set(src[index], src[index + 1]);\n  }\n  toString() {\n    const {x, y} = this;\n    return `{ x=${x}, y=${y} }`;\n  }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function AngleBetween(x1, y1, x2, y2) {\n  return Math.atan2(y2 - y1, x2 - x1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function AngleBetweenY(x1, y1, x2, y2) {\n  return Math.atan2(x2 - x1, y2 - y1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport const MATH_CONST = {\n  PI2: Math.PI * 2,\n  HALF_PI: Math.PI * 0.5,\n  EPSILON: 1e-6,\n  DEG_TO_RAD: Math.PI / 180,\n  RAD_TO_DEG: 180 / Math.PI,\n  MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -9007199254740991,\n  MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {MATH_CONST as CONST} from \"../const\";\nexport function CounterClockwise(angle) {\n  if (angle > Math.PI) {\n    angle -= CONST.PI2;\n  }\n  return Math.abs(((angle + CONST.HALF_PI) % CONST.PI2 - CONST.PI2) % CONST.PI2);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {MATH_CONST} from \"../const\";\nexport function NormalizeAngle(angle) {\n  angle = angle % MATH_CONST.PI2;\n  if (angle >= 0) {\n    return angle;\n  } else {\n    return angle + MATH_CONST.PI2;\n  }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {NormalizeAngle} from \"./NormalizeAngle\";\nexport function ReverseAngle(angle) {\n  return NormalizeAngle(angle + Math.PI);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {MATH_CONST} from \"../const\";\nexport function RotateAngleTo(currentAngle, targetAngle, lerp = 0.05) {\n  if (currentAngle === targetAngle) {\n    return currentAngle;\n  }\n  if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= MATH_CONST.PI2 - lerp) {\n    currentAngle = targetAngle;\n  } else {\n    if (Math.abs(targetAngle - currentAngle) > Math.PI) {\n      if (targetAngle < currentAngle) {\n        targetAngle += MATH_CONST.PI2;\n      } else {\n        targetAngle -= MATH_CONST.PI2;\n      }\n    }\n    if (targetAngle > currentAngle) {\n      currentAngle += lerp;\n    } else if (targetAngle < currentAngle) {\n      currentAngle -= lerp;\n    }\n  }\n  return currentAngle;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function ShortestAngleBetween(angle1, angle2) {\n  const difference = angle2 - angle1;\n  if (difference === 0) {\n    return 0;\n  }\n  const times = Math.floor((difference - -180) / 360);\n  return difference - times * 360;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function Wrap(value, min, max) {\n  const range = max - min;\n  return min + ((value - min) % range + range) % range;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {Wrap} from \"../Wrap\";\nexport function WrapAngle(angle) {\n  return Wrap(angle, -Math.PI, Math.PI);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {Wrap} from \"../Wrap\";\nexport function WrapAngleDegrees(angle) {\n  return Wrap(angle, -180, 180);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {AngleBetween} from \"./AngleBetween\";\nimport {AngleBetweenY} from \"./AngleBetweenY\";\nimport {CounterClockwise} from \"./CounterClockwise\";\nimport {NormalizeAngle} from \"./NormalizeAngle\";\nimport {ReverseAngle} from \"./ReverseAngle\";\nimport {RotateAngleTo} from \"./RotateAngleTo\";\nimport {ShortestAngleBetween} from \"./ShortestAngleBetween\";\nimport {WrapAngle} from \"./WrapAngle\";\nimport {WrapAngleDegrees} from \"./WrapAngleDegrees\";\nexport {\n  AngleBetween,\n  AngleBetweenY,\n  CounterClockwise,\n  NormalizeAngle,\n  ReverseAngle,\n  RotateAngleTo,\n  ShortestAngleBetween,\n  WrapAngle,\n  WrapAngleDegrees\n};\n", "import {GameInstance} from \"../GameInstance\";\nimport {Mat4Identity} from \"../math/mat4\";\nimport {Matrix2D} from \"../math/mat2d/Matrix2D\";\nimport {Rectangle} from \"../geom/rectangle/Rectangle\";\nexport class StaticCamera {\n  constructor() {\n    this.type = \"StaticCamera\";\n    this.dirtyRender = true;\n    const game = GameInstance.get();\n    this.renderer = game.renderer;\n    this.matrix = Mat4Identity();\n    this.bounds = new Rectangle();\n    this.worldTransform = new Matrix2D();\n    this.reset();\n  }\n  reset() {\n    const renderer = this.renderer;\n    if (renderer) {\n      const width = renderer.width;\n      const height = renderer.height;\n      this.width = width;\n      this.height = height;\n    }\n    this.bounds.set(0, 0, this.width, this.height);\n  }\n  destroy() {\n    this.world = null;\n    this.worldTransform = null;\n    this.renderer = null;\n    this.matrix = null;\n    this.bounds = null;\n  }\n}\n", "import {CreateTempTextures} from \"./CreateTempTextures\";\nimport {GetBatchSize} from \"../../../config/batchsize/GetBatchSize\";\nimport {IndexedVertexBuffer} from \"../buffers/IndexedVertexBuffer\";\nimport {Mat4Ortho} from \"../../../math/mat4/Mat4Ortho\";\nimport {Matrix4} from \"../../../math/mat4/Matrix4\";\nimport {MultiTextureQuadShader} from \"../shaders\";\nimport {QuadShader} from \"../shaders/QuadShader\";\nimport {SetDefaultBlendMode} from \"./SetDefaultBlendMode\";\nimport {SetDefaultFramebuffer} from \"./SetDefaultFramebuffer\";\nimport {SetDefaultShader} from \"./SetDefaultShader\";\nimport {SetDefaultVertexBuffer} from \"./SetDefaultVertexBuffer\";\nimport {SetDefaultViewport} from \"./SetDefaultViewport\";\nimport {StaticCamera} from \"../../../camera\";\nexport class RenderPass {\n  constructor(renderer) {\n    this.count = 0;\n    this.prevCount = 0;\n    this.flushTotal = 0;\n    this.maxTextures = 0;\n    this.currentActiveTexture = 0;\n    this.startActiveTexture = 0;\n    this.tempTextures = [];\n    this.textureIndex = [];\n    this.framebufferStack = [];\n    this.currentFramebuffer = null;\n    this.defaultFramebuffer = null;\n    this.vertexBufferStack = [];\n    this.currentVertexBuffer = null;\n    this.defaultVertexBuffer = null;\n    this.shaderStack = [];\n    this.currentShader = null;\n    this.defaultShader = null;\n    this.viewportStack = [];\n    this.currentViewport = null;\n    this.defaultViewport = null;\n    this.blendModeStack = [];\n    this.currentBlendMode = null;\n    this.defaultBlendMode = null;\n    this.renderer = renderer;\n    this.projectionMatrix = new Matrix4();\n    this.reset();\n  }\n  reset() {\n    const gl = this.renderer.gl;\n    const indexLayout = [0, 1, 2, 2, 3, 0];\n    this.quadShader = new QuadShader();\n    this.quadBuffer = new IndexedVertexBuffer({isDynamic: false, indexLayout});\n    this.quadCamera = new StaticCamera();\n    CreateTempTextures(this);\n    SetDefaultFramebuffer(this);\n    SetDefaultBlendMode(this, true, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    SetDefaultVertexBuffer(this, new IndexedVertexBuffer({batchSize: GetBatchSize(), indexLayout}));\n    SetDefaultShader(this, new MultiTextureQuadShader());\n  }\n  resize(width, height) {\n    Mat4Ortho(0, width, height, 0, -1e3, 1e3, this.projectionMatrix);\n    this.quadCamera.reset();\n    SetDefaultViewport(this, 0, 0, width, height);\n  }\n}\n", "export function AddShader(renderPass, shader, textureID) {\n  const stackEntry = {shader, textureID};\n  renderPass.shaderStack.push(stackEntry);\n  return stackEntry;\n}\n", "export function AddVertexBuffer(renderPass, buffer) {\n  renderPass.vertexBufferStack.push(buffer);\n  return buffer;\n}\n", "export function BindShader(renderPass, entry) {\n  if (!entry) {\n    entry = renderPass.currentShader;\n  }\n  const success = entry.shader.bind(renderPass, entry.textureID);\n  if (success) {\n    entry.shader.setAttributes(renderPass);\n  }\n}\n", "import {BindShader} from \"./BindShader\";\nexport function Begin(renderPass, camera2D) {\n  renderPass.current2DCamera = camera2D;\n  renderPass.cameraMatrix = camera2D.matrix;\n  BindShader(renderPass);\n}\n", "import {gl} from \"../GL\";\nexport function BindBlendMode(renderPass, entry) {\n  if (!entry) {\n    entry = renderPass.currentBlendMode;\n  }\n  if (entry.enable) {\n    gl.enable(gl.BLEND);\n    gl.blendFunc(entry.sfactor, entry.dfactor);\n  } else {\n    gl.disable(gl.BLEND);\n  }\n}\n", "import {gl} from \"../GL\";\nexport function BindTexture(texture, index = 0) {\n  const binding = texture.binding;\n  binding.setIndex(index);\n  gl.activeTexture(gl.TEXTURE0 + index);\n  gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n}\n", "import {gl} from \"../GL\";\nexport function BindVertexBuffer(renderPass, buffer) {\n  if (!buffer) {\n    buffer = renderPass.currentVertexBuffer;\n  }\n  const indexBuffer = buffer.indexed ? buffer.indexBuffer : null;\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer);\n}\n", "import {BindVertexBuffer} from \"./BindVertexBuffer\";\nexport function PopVertexBuffer(renderPass) {\n  const stack = renderPass.vertexBufferStack;\n  if (stack.length > 1) {\n    stack.pop();\n  }\n  renderPass.currentVertexBuffer = stack[stack.length - 1];\n  BindVertexBuffer(renderPass);\n}\n", "import {AddVertexBuffer} from \"./AddVertexBuffer\";\nimport {BindVertexBuffer} from \"./BindVertexBuffer\";\nexport function SetVertexBuffer(renderPass, buffer) {\n  const entry = AddVertexBuffer(renderPass, buffer);\n  BindVertexBuffer(renderPass, entry);\n  renderPass.currentVertexBuffer = entry;\n}\n", "import {Flush} from \"./Flush\";\nexport function GetVertexBufferEntry(renderPass, addToCount = 0) {\n  const buffer = renderPass.currentVertexBuffer;\n  if (renderPass.count + addToCount >= buffer.batchSize) {\n    Flush(renderPass);\n  }\n  const offset = buffer.indexed ? renderPass.count * buffer.entryElementSize : renderPass.count * buffer.vertexElementSize;\n  renderPass.count += addToCount;\n  return {\n    buffer,\n    F32: buffer.vertexViewF32,\n    U32: buffer.vertexViewU32,\n    offset\n  };\n}\n", "import {BindShader} from \"./BindShader\";\nexport function PopShader(renderPass) {\n  const stack = renderPass.shaderStack;\n  if (stack.length > 1) {\n    stack.pop();\n  }\n  renderPass.currentShader = stack[stack.length - 1];\n  BindShader(renderPass);\n}\n", "import {AddShader} from \"./AddShader\";\nimport {BindShader} from \"./BindShader\";\nexport function SetShader(renderPass, shader, textureID) {\n  const entry = AddShader(renderPass, shader, textureID);\n  BindShader(renderPass, entry);\n  renderPass.currentShader = entry;\n}\n", "import {Flush} from \"./Flush\";\nimport {gl} from \"../GL\";\nexport function SetTexture(renderPass, texture) {\n  const binding = texture.binding;\n  const currentActiveTexture = renderPass.currentActiveTexture;\n  if (binding.indexCounter < renderPass.startActiveTexture) {\n    binding.indexCounter = renderPass.startActiveTexture;\n    if (currentActiveTexture < renderPass.maxTextures) {\n      binding.setIndex(currentActiveTexture);\n      gl.activeTexture(gl.TEXTURE0 + currentActiveTexture);\n      gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n      renderPass.currentActiveTexture++;\n    } else {\n      Flush(renderPass);\n      renderPass.startActiveTexture++;\n      binding.indexCounter = renderPass.startActiveTexture;\n      binding.setIndex(1);\n      gl.activeTexture(gl.TEXTURE1);\n      gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n      renderPass.currentActiveTexture = 2;\n    }\n  }\n  return binding.index;\n}\n", "import {BindBlendMode} from \"./BindBlendMode\";\nimport {BindFramebuffer} from \"./BindFramebuffer\";\nimport {BindVertexBuffer} from \"./BindVertexBuffer\";\nimport {BindViewport} from \"./BindViewport\";\nexport function Start(renderPass) {\n  renderPass.current2DCamera = renderPass.quadCamera;\n  renderPass.cameraMatrix = renderPass.quadCamera.matrix;\n  renderPass.count = 0;\n  renderPass.flushTotal = 0;\n  BindFramebuffer(renderPass, false, renderPass.defaultFramebuffer);\n  BindBlendMode(renderPass, renderPass.defaultBlendMode);\n  BindViewport(renderPass, renderPass.defaultViewport);\n  BindVertexBuffer(renderPass, renderPass.defaultVertexBuffer);\n}\n", "import {gl} from \"../GL\";\nexport function UnbindTexture(renderPass, index = 0) {\n  gl.activeTexture(gl.TEXTURE0 + index);\n  gl.bindTexture(gl.TEXTURE_2D, renderPass.tempTextures[index]);\n  if (index > 0) {\n    renderPass.startActiveTexture++;\n  }\n}\n", "export let instance;\nexport const WebGLRendererInstance = {\n  get: () => {\n    return instance;\n  },\n  set: (renderer) => {\n    instance = renderer;\n  }\n};\n", "import {GetHeight, GetResolution, GetWidth} from \"../../config/size/\";\nimport {End} from \"./renderpass/End\";\nimport {GL} from \"./GL\";\nimport {GetBackgroundColor} from \"../../config/backgroundcolor/GetBackgroundColor\";\nimport {GetRGBArray} from \"./colors/GetRGBArray\";\nimport {GetWebGLContext} from \"../../config/webglcontext/GetWebGLContext\";\nimport {ProcessBindingQueue} from \"./renderpass/ProcessBindingQueue\";\nimport {RenderPass} from \"./renderpass/RenderPass\";\nimport {Start} from \"./renderpass\";\nimport {WebGLRendererInstance} from \"./WebGLRendererInstance\";\nexport class WebGLRenderer {\n  constructor() {\n    this.clearColor = [0, 0, 0, 1];\n    this.clearBeforeRender = true;\n    this.optimizeRedraw = false;\n    this.autoResize = true;\n    this.contextLost = false;\n    this.width = GetWidth();\n    this.height = GetHeight();\n    this.resolution = GetResolution();\n    this.setBackgroundColor(GetBackgroundColor());\n    const canvas = document.createElement(\"canvas\");\n    canvas.addEventListener(\"webglcontextlost\", (event) => this.onContextLost(event), false);\n    canvas.addEventListener(\"webglcontextrestored\", () => this.onContextRestored(), false);\n    this.canvas = canvas;\n    this.initContext();\n    WebGLRendererInstance.set(this);\n    this.renderPass = new RenderPass(this);\n    this.resize(this.width, this.height, this.resolution);\n  }\n  initContext() {\n    const gl = this.canvas.getContext(\"webgl\", GetWebGLContext());\n    GL.set(gl);\n    this.gl = gl;\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.CULL_FACE);\n  }\n  resize(width, height, resolution = 1) {\n    const calcWidth = width * resolution;\n    const calcHeight = height * resolution;\n    this.width = calcWidth;\n    this.height = calcHeight;\n    this.resolution = resolution;\n    const canvas = this.canvas;\n    canvas.width = calcWidth;\n    canvas.height = calcHeight;\n    if (this.autoResize) {\n      canvas.style.width = width.toString() + \"px\";\n      canvas.style.height = height.toString() + \"px\";\n    }\n    this.renderPass.resize(calcWidth, calcHeight);\n  }\n  onContextLost(event) {\n    event.preventDefault();\n    this.contextLost = true;\n  }\n  onContextRestored() {\n    this.contextLost = false;\n    this.initContext();\n  }\n  setBackgroundColor(color) {\n    GetRGBArray(color, this.clearColor);\n    return this;\n  }\n  reset() {\n  }\n  render(renderData) {\n    if (this.contextLost) {\n      return;\n    }\n    const gl = this.gl;\n    const renderPass = this.renderPass;\n    ProcessBindingQueue();\n    if (this.optimizeRedraw && renderData.numDirtyFrames === 0 && renderData.numDirtyCameras === 0) {\n      return;\n    }\n    if (this.clearBeforeRender) {\n      const cls = this.clearColor;\n      gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n    const worlds = renderData.worldData;\n    Start(renderPass);\n    for (let i = 0; i < worlds.length; i++) {\n      const {world} = worlds[i];\n      world.renderGL(renderPass);\n      world.postRenderGL(renderPass);\n    }\n    End(renderPass);\n  }\n  destroy() {\n    WebGLRendererInstance.set(void 0);\n  }\n}\n", "import {SetRenderer} from \"../renderer/SetRenderer\";\nimport {WebGLRenderer} from \"../../renderer/webgl1/WebGLRenderer\";\nexport function WebGL() {\n  return () => {\n    SetRenderer(WebGLRenderer);\n  };\n}\n", "export const DIRTY_CONST = {\n  CLEAR: 0,\n  TRANSFORM: 1,\n  UPDATE: 2,\n  CHILD_CACHE: 4,\n  POST_RENDER: 8,\n  COLORS: 16,\n  BOUNDS: 32,\n  TEXTURE: 64,\n  FRAME: 128,\n  ALPHA: 256,\n  CHILD: 512,\n  DEFAULT: 1 + 2 + 16 + 32,\n  USER1: 536870912,\n  USER2: 1073741824,\n  USER3: 2147483648,\n  USER4: 4294967296\n};\n", "export function GetVertices(transform) {\n  const {a, b, c, d, tx, ty} = transform.world;\n  const {x, y, right, bottom} = transform.extent;\n  const x0 = x * a + y * c + tx;\n  const y0 = x * b + y * d + ty;\n  const x1 = x * a + bottom * c + tx;\n  const y1 = x * b + bottom * d + ty;\n  const x2 = right * a + bottom * c + tx;\n  const y2 = right * b + bottom * d + ty;\n  const x3 = right * a + y * c + tx;\n  const y3 = right * b + y * d + ty;\n  return {x0, y0, x1, y1, x2, y2, x3, y3};\n}\n", "import {DIRTY_CONST} from \"../../DIRTY_CONST\";\nimport {GetVertices} from \"../transform/GetVertices\";\nimport {Rectangle} from \"../../../geom/rectangle/Rectangle\";\nexport class BoundsComponent {\n  constructor(entity) {\n    this.fixed = false;\n    this.includeChildren = true;\n    this.visibleOnly = true;\n    this.entity = entity;\n    this.area = new Rectangle();\n  }\n  set(x, y, width, height) {\n    this.area.set(x, y, width, height);\n  }\n  get() {\n    if (this.entity.isDirty(DIRTY_CONST.BOUNDS) && !this.fixed) {\n      this.update();\n    }\n    return this.area;\n  }\n  updateLocal() {\n    const {x0, y0, x1, y1, x2, y2, x3, y3} = GetVertices(this.entity.transform);\n    const x = Math.min(x0, x1, x2, x3);\n    const y = Math.min(y0, y1, y2, y3);\n    const right = Math.max(x0, x1, x2, x3);\n    const bottom = Math.max(y0, y1, y2, y3);\n    return this.area.set(x, y, right - x, bottom - y);\n  }\n  update() {\n    const bounds = this.updateLocal();\n    this.entity.clearDirty(DIRTY_CONST.BOUNDS);\n    if (!this.includeChildren || !this.entity.numChildren) {\n      return bounds;\n    }\n    const visibleOnly = this.visibleOnly;\n    const children = this.entity.children;\n    let x = bounds.x;\n    let y = bounds.y;\n    let right = bounds.right;\n    let bottom = bounds.bottom;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (!child || visibleOnly && !child.visible) {\n        continue;\n      }\n      const childBounds = child.bounds.get();\n      if (childBounds.x < x) {\n        x = childBounds.x;\n      }\n      if (childBounds.y < y) {\n        y = childBounds.y;\n      }\n      if (childBounds.right > right) {\n        right = childBounds.right;\n      }\n      if (childBounds.bottom > bottom) {\n        bottom = childBounds.bottom;\n      }\n    }\n    return bounds.set(x, y, right - x, bottom - y);\n  }\n  destroy() {\n    this.entity = null;\n    this.area = null;\n  }\n}\n", "export class InputComponent {\n  constructor(entity) {\n    this.enabled = false;\n    this.enabledChildren = true;\n    this.entity = entity;\n  }\n  destroy() {\n    this.entity = null;\n    this.hitArea = null;\n  }\n}\n", "export function PackColors(vertices) {\n  vertices.forEach((vertex) => {\n    vertex.packColor();\n  });\n}\n", "import {GetVertices} from \"./GetVertices\";\nexport function UpdateVertices(gameObject) {\n  const vertices = gameObject.vertices;\n  const {x0, y0, x1, y1, x2, y2, x3, y3} = GetVertices(gameObject.transform);\n  vertices[0].setPosition(x0, y0);\n  vertices[1].setPosition(x1, y1);\n  vertices[2].setPosition(x2, y2);\n  vertices[3].setPosition(x3, y3);\n  return gameObject;\n}\n", "import {DIRTY_CONST} from \"../../DIRTY_CONST\";\nimport {PackColors} from \"../../../renderer/webgl1/colors/PackColors\";\nimport {UpdateVertices} from \"./UpdateVertices\";\nexport function PreRenderVertices(gameObject) {\n  if (gameObject.isDirty(DIRTY_CONST.COLORS)) {\n    PackColors(gameObject.vertices);\n    gameObject.clearDirty(DIRTY_CONST.COLORS);\n  }\n  if (gameObject.isDirty(DIRTY_CONST.TRANSFORM)) {\n    UpdateVertices(gameObject);\n    gameObject.clearDirty(DIRTY_CONST.TRANSFORM);\n  }\n  return gameObject;\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetDefaultOriginX() {\n  return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).x;\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetDefaultOriginY() {\n  return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).y;\n}\n", "export class Vec2 {\n  constructor(x = 0, y = 0) {\n    this.set(x, y);\n  }\n  set(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n  toArray(dst = [], index = 0) {\n    const {x, y} = this;\n    dst[index] = x;\n    dst[index + 1] = y;\n    return dst;\n  }\n  fromArray(src, index = 0) {\n    return this.set(src[index], src[index + 1]);\n  }\n  toString() {\n    const {x, y} = this;\n    return `{ x=${x}, y=${y} }`;\n  }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function Clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function FuzzyEqual(a, b, epsilon = 1e-4) {\n  return Math.abs(a - b) < epsilon;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function CeilRectangle(rect) {\n  rect.x = Math.ceil(rect.x);\n  rect.y = Math.ceil(rect.y);\n  rect.width = Math.ceil(rect.width);\n  rect.height = Math.ceil(rect.height);\n  return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function CeilRectanglePosition(rect) {\n  rect.x = Math.ceil(rect.x);\n  rect.y = Math.ceil(rect.y);\n  return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function CenterRectangleOn(rect, x, y) {\n  rect.x = x - rect.width / 2;\n  rect.y = y - rect.height / 2;\n  return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {Rectangle} from \"./Rectangle\";\nexport function CloneRectangle(source) {\n  return new Rectangle(source.x, source.y, source.width, source.height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function CopyRectangleFrom(source, dest) {\n  return dest.set(source.x, source.y, source.width, source.height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {Vec2} from \"../../math/vec2/Vec2\";\nexport function DecomposeRectangle(rect, out = []) {\n  out.push(new Vec2(rect.x, rect.y), new Vec2(rect.right, rect.y), new Vec2(rect.right, rect.bottom), new Vec2(rect.x, rect.bottom));\n  return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function GetRectangleAspectRatio(rect) {\n  return rect.height === 0 ? NaN : rect.width / rect.height;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function GetRectangleCenterX(rect) {\n  return rect.x + rect.width / 2;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function GetRectangleCenterY(rect) {\n  return rect.y + rect.height / 2;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {GetRectangleAspectRatio} from \"./GetRectangleAspectRatio\";\nimport {GetRectangleCenterX} from \"./GetRectangleCenterX\";\nimport {GetRectangleCenterY} from \"./GetRectangleCenterY\";\nexport function FitRectangleInside(target, source) {\n  const ratio = GetRectangleAspectRatio(target);\n  let width = source.width;\n  let height = source.height;\n  if (ratio < GetRectangleAspectRatio(source)) {\n    width = source.height * ratio;\n  } else {\n    height = source.width / ratio;\n  }\n  return target.set(GetRectangleCenterX(source) - target.width / 2, GetRectangleCenterY(source) - target.height / 2, width, height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {GetRectangleAspectRatio} from \"./GetRectangleAspectRatio\";\nimport {GetRectangleCenterX} from \"./GetRectangleCenterX\";\nimport {GetRectangleCenterY} from \"./GetRectangleCenterY\";\nexport function FitRectangleOutside(target, source) {\n  const ratio = GetRectangleAspectRatio(target);\n  let width = source.width;\n  let height = source.height;\n  if (ratio > GetRectangleAspectRatio(source)) {\n    width = source.height * ratio;\n  } else {\n    height = source.width / ratio;\n  }\n  return target.set(GetRectangleCenterX(source) - target.width / 2, GetRectangleCenterY(source) - target.height / 2, width, height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function FitRectangleToPoint(target, x, y) {\n  const minX = Math.min(target.x, x);\n  const maxX = Math.max(target.right, x);\n  const minY = Math.min(target.y, y);\n  const maxY = Math.max(target.bottom, y);\n  return target.set(minX, minY, maxX - minX, maxY - minY);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function FitRectangleToPoints(target, points) {\n  let minX = target.x;\n  let maxX = target.right;\n  let minY = target.y;\n  let maxY = target.bottom;\n  for (let i = 0; i < points.length; i++) {\n    minX = Math.min(minX, points[i].x);\n    maxX = Math.max(maxX, points[i].x);\n    minY = Math.min(minY, points[i].y);\n    maxY = Math.max(maxY, points[i].y);\n  }\n  return target.set(minX, minY, maxX - minX, maxY - minY);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function FloorRectangle(rect) {\n  rect.x = Math.floor(rect.x);\n  rect.y = Math.floor(rect.y);\n  rect.width = Math.floor(rect.width);\n  rect.height = Math.floor(rect.height);\n  return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function FloorRectanglePosition(rect) {\n  rect.x = Math.floor(rect.x);\n  rect.y = Math.floor(rect.y);\n  return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function GetRectangleArea(rect) {\n  return rect.width * rect.height;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {GetRectangleCenterX} from \"./GetRectangleCenterX\";\nimport {GetRectangleCenterY} from \"./GetRectangleCenterY\";\nimport {Vec2} from \"../../math/vec2/Vec2\";\nexport function GetRectangleCenter(rect, out = new Vec2()) {\n  return out.set(GetRectangleCenterX(rect), GetRectangleCenterY(rect));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport class Line {\n  constructor(x1 = 0, y1 = 0, x2 = 0, y2 = 0) {\n    this.set(x1, y1, x2, y2);\n  }\n  set(x1 = 0, y1 = 0, x2 = 0, y2 = 0) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    return this;\n  }\n  get left() {\n    return Math.min(this.x1, this.x2);\n  }\n  set left(value) {\n    if (this.x1 <= this.x2) {\n      this.x1 = value;\n    } else {\n      this.x2 = value;\n    }\n  }\n  get right() {\n    return Math.max(this.x1, this.x2);\n  }\n  set right(value) {\n    if (this.x1 > this.x2) {\n      this.x1 = value;\n    } else {\n      this.x2 = value;\n    }\n  }\n  get top() {\n    return Math.min(this.y1, this.y2);\n  }\n  set top(value) {\n    if (this.y1 <= this.y2) {\n      this.y1 = value;\n    } else {\n      this.y2 = value;\n    }\n  }\n  get bottom() {\n    return Math.max(this.y1, this.y2);\n  }\n  set bottom(value) {\n    if (this.y1 > this.y2) {\n      this.y1 = value;\n    } else {\n      this.y2 = value;\n    }\n  }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {Rectangle} from \"./Rectangle\";\nimport {RectangleToRectangle} from \"../intersects/RectangleToRectangle\";\nexport function GetRectangleIntersection(rectA, rectB, out = new Rectangle()) {\n  if (RectangleToRectangle(rectA, rectB)) {\n    out.set(Math.max(rectA.x, rectB.x), Math.max(rectA.y, rectB.y), Math.min(rectA.right, rectB.right) - out.x, Math.min(rectA.bottom, rectB.bottom) - out.y);\n  } else {\n    out.set();\n  }\n  return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function GetRectanglePerimeter(rect) {\n  return 2 * (rect.width + rect.height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {GetRectanglePerimeter} from \"./GetRectanglePerimeter\";\nimport {Vec2} from \"../../math/vec2/Vec2\";\nexport function GetRectangleMarchingAnts(rect, step, quantity, out = []) {\n  if (!step && !quantity) {\n    return out;\n  }\n  if (!step) {\n    step = GetRectanglePerimeter(rect) / quantity;\n  } else {\n    quantity = Math.round(GetRectanglePerimeter(rect) / step);\n  }\n  let x = rect.x;\n  let y = rect.y;\n  let face = 0;\n  for (let i = 0; i < quantity; i++) {\n    out.push(new Vec2(x, y));\n    switch (face) {\n      case 0:\n        x += step;\n        if (x >= rect.right) {\n          face = 1;\n          y += x - rect.right;\n          x = rect.right;\n        }\n        break;\n      case 1:\n        y += step;\n        if (y >= rect.bottom) {\n          face = 2;\n          x -= y - rect.bottom;\n          y = rect.bottom;\n        }\n        break;\n      case 2:\n        x -= step;\n        if (x <= rect.x) {\n          face = 3;\n          y -= rect.x - x;\n          x = rect.x;\n        }\n        break;\n      case 3:\n        y -= step;\n        if (y <= rect.y) {\n          face = 0;\n          y = rect.y;\n        }\n        break;\n    }\n  }\n  return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function GetRectangleOverlap(rectA, rectB) {\n  return rectA.x < rectB.right && rectA.right > rectB.x && rectA.y < rectB.bottom && rectA.bottom > rectB.y;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {MATH_CONST} from \"./const\";\nexport function DegToRad(degrees) {\n  return degrees * MATH_CONST.DEG_TO_RAD;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {DegToRad} from \"../../math/DegToRad\";\nimport {GetRectangleCenterX} from \"./GetRectangleCenterX\";\nimport {GetRectangleCenterY} from \"./GetRectangleCenterY\";\nimport {Vec2} from \"../../math/vec2/Vec2\";\nexport function GetRectanglePerimeterPoint(rectangle, angle, out = new Vec2()) {\n  angle = DegToRad(angle);\n  const s = Math.sin(angle);\n  const c = Math.cos(angle);\n  let dx = c > 0 ? rectangle.width / 2 : rectangle.width / -2;\n  let dy = s > 0 ? rectangle.height / 2 : rectangle.height / -2;\n  if (Math.abs(dx * s) < Math.abs(dy * c)) {\n    dy = dx * s / c;\n  } else {\n    dx = dy * c / s;\n  }\n  return out.set(dx + GetRectangleCenterX(rectangle), dy + GetRectangleCenterY(rectangle));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {GetRectanglePerimeter} from \"./GetRectanglePerimeter\";\nimport {Vec2} from \"../../math/vec2/Vec2\";\nexport function GetRectanglePoint(rectangle, position, out = new Vec2()) {\n  if (position <= 0 || position >= 1) {\n    return out.set(rectangle.x, rectangle.y);\n  }\n  let p = GetRectanglePerimeter(rectangle) * position;\n  if (position > 0.5) {\n    p -= rectangle.width + rectangle.height;\n    if (p <= rectangle.width) {\n      return out.set(rectangle.right - p, rectangle.bottom);\n    } else {\n      return out.set(rectangle.x, rectangle.bottom - (p - rectangle.width));\n    }\n  } else if (p <= rectangle.width) {\n    return out.set(rectangle.x + p, rectangle.y);\n  } else {\n    return out.set(rectangle.right, rectangle.y + (p - rectangle.width));\n  }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {GetRectanglePerimeter} from \"./GetRectanglePerimeter\";\nimport {GetRectanglePoint} from \"./GetRectanglePoint\";\nexport function GetRectanglePoints(rectangle, step, quantity = 0, out = []) {\n  if (!quantity) {\n    quantity = GetRectanglePerimeter(rectangle) / step;\n  }\n  for (let i = 0; i < quantity; i++) {\n    out.push(GetRectanglePoint(rectangle, i / quantity));\n  }\n  return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {Vec2} from \"../../math/vec2/Vec2\";\nexport function GetRectangleRandomPoint(rect, out = new Vec2()) {\n  return out.set(rect.x + Math.random() * rect.width, rect.y + Math.random() * rect.height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function RectangleContainsRectangle(rectA, rectB) {\n  if (rectB.width * rectB.height > rectA.width * rectA.height) {\n    return false;\n  }\n  return rectB.x > rectA.x && rectB.x < rectA.right && (rectB.right > rectA.x && rectB.right < rectA.right) && (rectB.y > rectA.y && rectB.y < rectA.bottom) && (rectB.bottom > rectA.y && rectB.bottom < rectA.bottom);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {Between} from \"../../math/Between\";\nimport {RectangleContainsRectangle} from \"./RectangleContainsRectangle\";\nimport {Vec2} from \"../../math/vec2/Vec2\";\nexport function GetRectangleRandomPointOutside(outer, inner, out = new Vec2()) {\n  if (RectangleContainsRectangle(outer, inner)) {\n    switch (Between(0, 3)) {\n      case 0:\n        out.x = outer.x + Math.random() * (inner.right - outer.x);\n        out.y = outer.y + Math.random() * (inner.y - outer.y);\n        break;\n      case 1:\n        out.x = inner.x + Math.random() * (outer.right - inner.x);\n        out.y = inner.bottom + Math.random() * (outer.bottom - inner.bottom);\n        break;\n      case 2:\n        out.x = outer.x + Math.random() * (inner.x - outer.x);\n        out.y = inner.y + Math.random() * (outer.bottom - inner.y);\n        break;\n      case 3:\n        out.x = inner.right + Math.random() * (outer.right - inner.right);\n        out.y = outer.y + Math.random() * (inner.bottom - outer.y);\n        break;\n    }\n  }\n  return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {Vec2} from \"../../math/vec2/Vec2\";\nexport function GetRectangleSize(rect, out = new Vec2()) {\n  return out.set(rect.width, rect.height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {Rectangle} from \"./Rectangle\";\nexport function GetRectangleUnion(rectA, rectB, out = new Rectangle()) {\n  const x = Math.min(rectA.x, rectB.x);\n  const y = Math.min(rectA.y, rectB.y);\n  const w = Math.max(rectA.right, rectB.right) - x;\n  const h = Math.max(rectA.bottom, rectB.bottom) - y;\n  return out.set(x, y, w, h);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {CenterRectangleOn} from \"./CenterRectangleOn\";\nimport {GetRectangleCenterX} from \"./GetRectangleCenterX\";\nimport {GetRectangleCenterY} from \"./GetRectangleCenterY\";\nexport function InflateRectangle(rect, x, y) {\n  const cx = GetRectangleCenterX(rect);\n  const cy = GetRectangleCenterY(rect);\n  rect.width = rect.width + x * 2;\n  rect.height = rect.height + y * 2;\n  return CenterRectangleOn(rect, cx, cy);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function MergeRectangle(target, source) {\n  const minX = Math.min(target.x, source.x);\n  const maxX = Math.max(target.right, source.right);\n  const minY = Math.min(target.y, source.y);\n  const maxY = Math.max(target.bottom, source.bottom);\n  return target.set(minX, minY, maxX - minX, maxY - minY);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {RectangleContains} from \"./RectangleContains\";\nexport function RectangleContainsPoint(rect, point) {\n  return RectangleContains(rect, point.x, point.y);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function RectangleEquals(rect, toCompare) {\n  return rect.x === toCompare.x && rect.y === toCompare.y && rect.width === toCompare.width && rect.height === toCompare.height;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {MATH_CONST} from \"../../math/const\";\nimport {Rectangle} from \"./Rectangle\";\nexport function RectangleFromPoints(points, out = new Rectangle()) {\n  if (points.length === 0) {\n    return out;\n  }\n  let minX = Number.MAX_VALUE;\n  let minY = Number.MAX_VALUE;\n  let maxX = MATH_CONST.MIN_SAFE_INTEGER;\n  let maxY = MATH_CONST.MIN_SAFE_INTEGER;\n  for (let i = 0; i < points.length; i++) {\n    const px = points[i].x;\n    const py = points[i].y;\n    minX = Math.min(minX, px);\n    minY = Math.min(minY, py);\n    maxX = Math.max(maxX, px);\n    maxY = Math.max(maxY, py);\n  }\n  return out.set(minX, minY, maxX - minX, maxY - minY);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function RectangleSizeEquals(rect, toCompare) {\n  return rect.width === toCompare.width && rect.height === toCompare.height;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function ScaleRectangle(rect, x, y = x) {\n  rect.width *= x;\n  rect.height *= y;\n  return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function TranslateRectangle(rect, x, y) {\n  rect.x += x;\n  rect.y += y;\n  return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function TranslateRectanglePoint(rect, point) {\n  rect.x += point.x;\n  rect.y += point.y;\n  return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nimport {CeilRectangle} from \"./CeilRectangle\";\nimport {CeilRectanglePosition} from \"./CeilRectanglePosition\";\nimport {CenterRectangleOn} from \"./CenterRectangleOn\";\nimport {CloneRectangle} from \"./CloneRectangle\";\nimport {CopyRectangleFrom} from \"./CopyRectangleFrom\";\nimport {DecomposeRectangle} from \"./DecomposeRectangle\";\nimport {FitRectangleInside} from \"./FitRectangleInside\";\nimport {FitRectangleOutside} from \"./FitRectangleOutside\";\nimport {FitRectangleToPoint} from \"./FitRectangleToPoint\";\nimport {FitRectangleToPoints} from \"./FitRectangleToPoints\";\nimport {FloorRectangle} from \"./FloorRectangle\";\nimport {FloorRectanglePosition} from \"./FloorRectanglePosition\";\nimport {GetRectangleArea} from \"./GetRectangleArea\";\nimport {GetRectangleAspectRatio} from \"./GetRectangleAspectRatio\";\nimport {GetRectangleCenter} from \"./GetRectangleCenter\";\nimport {GetRectangleCenterX} from \"./GetRectangleCenterX\";\nimport {GetRectangleCenterY} from \"./GetRectangleCenterY\";\nimport {GetRectangleEdges} from \"./GetRectangleEdges\";\nimport {GetRectangleIntersection} from \"./GetRectangleIntersection\";\nimport {GetRectangleMarchingAnts} from \"./GetRectangleMarchingAnts\";\nimport {GetRectangleOverlap} from \"./GetRectangleOverlap\";\nimport {GetRectanglePerimeter} from \"./GetRectanglePerimeter\";\nimport {GetRectanglePerimeterPoint} from \"./GetRectanglePerimeterPoint\";\nimport {GetRectanglePoint} from \"./GetRectanglePoint\";\nimport {GetRectanglePoints} from \"./GetRectanglePoints\";\nimport {GetRectangleRandomPoint} from \"./GetRectangleRandomPoint\";\nimport {GetRectangleRandomPointOutside} from \"./GetRectangleRandomPointOutside\";\nimport {GetRectangleSize} from \"./GetRectangleSize\";\nimport {GetRectangleUnion} from \"./GetRectangleUnion\";\nimport {InflateRectangle} from \"./InflateRectangle\";\nimport {MergeRectangle} from \"./MergeRectangle\";\nimport {Rectangle} from \"./Rectangle\";\nimport {RectangleContains} from \"./RectangleContains\";\nimport {RectangleContainsPoint} from \"./RectangleContainsPoint\";\nimport {RectangleContainsRectangle} from \"./RectangleContainsRectangle\";\nimport {RectangleEquals} from \"./RectangleEquals\";\nimport {RectangleFromPoints} from \"./RectangleFromPoints\";\nimport {RectangleSizeEquals} from \"./RectangleSizeEquals\";\nimport {ScaleRectangle} from \"./ScaleRectangle\";\nimport {TranslateRectangle} from \"./TranslateRectangle\";\nimport {TranslateRectanglePoint} from \"./TranslateRectanglePoint\";\nexport {\n  CeilRectangle,\n  CeilRectanglePosition,\n  CenterRectangleOn,\n  CloneRectangle,\n  CopyRectangleFrom,\n  DecomposeRectangle,\n  FitRectangleInside,\n  FitRectangleOutside,\n  FitRectangleToPoint,\n  FitRectangleToPoints,\n  FloorRectangle,\n  FloorRectanglePosition,\n  GetRectangleArea,\n  GetRectangleAspectRatio,\n  GetRectangleCenter,\n  GetRectangleCenterX,\n  GetRectangleCenterY,\n  GetRectangleEdges,\n  GetRectangleIntersection,\n  GetRectangleMarchingAnts,\n  GetRectangleOverlap,\n  GetRectanglePerimeter,\n  GetRectanglePerimeterPoint,\n  GetRectanglePoint,\n  GetRectanglePoints,\n  GetRectangleRandomPoint,\n  GetRectangleRandomPointOutside,\n  GetRectangleSize,\n  GetRectangleUnion,\n  InflateRectangle,\n  MergeRectangle,\n  Rectangle,\n  RectangleContains,\n  RectangleContainsPoint,\n  RectangleContainsRectangle,\n  RectangleEquals,\n  RectangleFromPoints,\n  RectangleSizeEquals,\n  ScaleRectangle,\n  TranslateRectangle,\n  TranslateRectanglePoint\n};\n", "export function UpdateLocalTransform(transform) {\n  const local = transform.local;\n  const x = transform.position.x;\n  const y = transform.position.y;\n  const rotation = transform.rotation;\n  const scaleX = transform.scale.x;\n  const scaleY = transform.scale.y;\n  const skewX = transform.skew.x;\n  const skewY = transform.skew.y;\n  local.set(Math.cos(rotation + skewY) * scaleX, Math.sin(rotation + skewY) * scaleX, -Math.sin(rotation - skewX) * scaleY, Math.cos(rotation - skewX) * scaleY, x, y);\n}\n", "export function Mat2dCopyFrom(src, target) {\n  const {a, b, c, d, tx, ty} = src;\n  return target.set(a, b, c, d, tx, ty);\n}\n", "import {Mat2dCopyFrom} from \"../../../math/mat2d/Mat2dCopyFrom\";\nexport function UpdateWorldTransform(gameObject) {\n  const parent = gameObject.parent;\n  const transform = gameObject.transform;\n  const lt = transform.local;\n  const wt = transform.world;\n  if (!parent) {\n    Mat2dCopyFrom(lt, wt);\n  } else if (transform.passthru) {\n    Mat2dCopyFrom(parent.transform.world, wt);\n  } else {\n    const {a, b, c, d, tx, ty} = lt;\n    const {a: pa, b: pb, c: pc, d: pd, tx: ptx, ty: pty} = parent.transform.world;\n    wt.set(a * pa + b * pc, a * pb + b * pd, c * pa + d * pc, c * pb + d * pd, tx * pa + ty * pc + ptx, tx * pb + ty * pd + pty);\n  }\n}\n", "import {GetDefaultOriginX, GetDefaultOriginY} from \"../../../config/defaultorigin/\";\nimport {Vec2, Vec2Callback} from \"../../../math/vec2\";\nimport {DIRTY_CONST} from \"../../DIRTY_CONST\";\nimport {Matrix2D} from \"../../../math/mat2d/Matrix2D\";\nimport {Rectangle} from \"../../../geom/rectangle\";\nimport {UpdateLocalTransform} from \"./UpdateLocalTransform\";\nimport {UpdateWorldTransform} from \"./UpdateWorldTransform\";\nexport class TransformComponent {\n  constructor(entity, x = 0, y = 0) {\n    this.passthru = false;\n    this._rotation = 0;\n    this.entity = entity;\n    this.local = new Matrix2D();\n    this.world = new Matrix2D();\n    const update = () => this.update();\n    const updateExtent = () => this.updateExtent();\n    this.position = new Vec2Callback(update, x, y);\n    this.scale = new Vec2Callback(update, 1, 1);\n    this.skew = new Vec2Callback(update);\n    this.origin = new Vec2Callback(updateExtent, GetDefaultOriginX(), GetDefaultOriginY());\n    this.extent = new Rectangle();\n  }\n  update() {\n    this.updateLocal();\n    this.updateWorld();\n  }\n  updateLocal() {\n    this.entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n    UpdateLocalTransform(this);\n  }\n  updateWorld() {\n    const entity = this.entity;\n    entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n    UpdateWorldTransform(entity);\n    if (entity.numChildren) {\n      this.updateChildren();\n    }\n  }\n  updateChildren() {\n    const children = this.entity.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      child.transform.updateWorld();\n    }\n  }\n  globalToLocal(x, y, out = new Vec2()) {\n    const {a, b, c, d, tx, ty} = this.world;\n    const id = 1 / (a * d + c * -b);\n    out.x = d * id * x + -c * id * y + (ty * c - tx * d) * id;\n    out.y = a * id * y + -b * id * x + (-ty * a + tx * b) * id;\n    return out;\n  }\n  localToGlobal(x, y, out = new Vec2()) {\n    const {a, b, c, d, tx, ty} = this.world;\n    out.x = a * x + c * y + tx;\n    out.y = b * x + d * y + ty;\n    return out;\n  }\n  setExtent(x, y, width, height) {\n    this.extent.set(x, y, width, height);\n    this.entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n  }\n  updateExtent(width, height) {\n    const extent = this.extent;\n    const entity = this.entity;\n    if (width !== void 0) {\n      extent.width = width;\n    }\n    if (height !== void 0) {\n      extent.height = height;\n    }\n    extent.x = -this.origin.x * extent.width;\n    extent.y = -this.origin.y * extent.height;\n    entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n  }\n  set rotation(value) {\n    if (value !== this._rotation) {\n      this._rotation = value;\n      this.update();\n    }\n  }\n  get rotation() {\n    return this._rotation;\n  }\n  destroy() {\n    this.position.destroy();\n    this.scale.destroy();\n    this.skew.destroy();\n    this.origin.destroy();\n    this.entity = null;\n    this.local = null;\n    this.world = null;\n    this.position = null;\n    this.scale = null;\n    this.skew = null;\n    this.origin = null;\n    this.extent = null;\n  }\n}\n", "export function PackColor(rgb, alpha) {\n  const ua = (alpha * 255 | 0) & 255;\n  return (ua << 24 | rgb) >>> 0;\n}\n", "import {PackColor} from \"../../renderer/webgl1/colors/PackColor\";\nexport class Vertex {\n  constructor(x = 0, y = 0, z = 0) {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.u = 0;\n    this.v = 0;\n    this.texture = 0;\n    this.tint = 16777215;\n    this.alpha = 1;\n    this.color = 4294967295;\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  setPosition(x, y, z = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  setUV(u, v) {\n    this.u = u;\n    this.v = v;\n    return this;\n  }\n  setColor(color, alpha = 1) {\n    this.tint = color;\n    this.alpha = alpha;\n    this.packColor();\n    return this;\n  }\n  setAlpha(value) {\n    this.alpha = value;\n    return this;\n  }\n  setTint(value) {\n    this.tint = value;\n    return this;\n  }\n  packColor() {\n    this.color = PackColor(this.tint, this.alpha);\n  }\n}\n", "import {GetVertexBufferEntry} from \"../renderpass/GetVertexBufferEntry\";\nimport {SetTexture} from \"../renderpass/SetTexture\";\nexport function BatchTexturedQuad(texture, vertices, renderPass) {\n  const {F32, U32, offset} = GetVertexBufferEntry(renderPass, 1);\n  const textureIndex = SetTexture(renderPass, texture);\n  let vertOffset = offset;\n  vertices.forEach((vertex) => {\n    F32[vertOffset + 0] = vertex.x;\n    F32[vertOffset + 1] = vertex.y;\n    F32[vertOffset + 2] = vertex.u;\n    F32[vertOffset + 3] = vertex.v;\n    F32[vertOffset + 4] = textureIndex;\n    U32[vertOffset + 5] = vertex.color;\n    vertOffset += 6;\n  });\n}\n", "export function RemoveChildrenBetween(parent, beginIndex = 0, endIndex) {\n  const children = parent.children;\n  if (endIndex === void 0) {\n    endIndex = children.length;\n  }\n  const range = endIndex - beginIndex;\n  if (range > 0 && range <= endIndex) {\n    const removed = children.splice(beginIndex, range);\n    removed.forEach((child) => {\n      child.parent = null;\n    });\n    return removed;\n  } else {\n    return [];\n  }\n}\n", "import {RemoveChildrenBetween} from \"./RemoveChildrenBetween\";\nexport function DestroyChildren(parent, beginIndex = 0, endIndex) {\n  const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\n  removed.forEach((child) => {\n    child.destroy();\n  });\n}\n", "export const DestroyEvent = \"destroy\";\n", "export function Emit(emitter, event, ...args) {\n  if (emitter.events.size === 0 || !emitter.events.has(event)) {\n    return false;\n  }\n  const listeners = emitter.events.get(event);\n  for (const ee of listeners) {\n    ee.callback.apply(ee.context, args);\n    if (ee.once) {\n      listeners.delete(ee);\n    }\n  }\n  if (listeners.size === 0) {\n    emitter.events.delete(event);\n  }\n  return true;\n}\n", "export function DepthFirstSearch(parent) {\n  const stack = [parent];\n  const output = [];\n  while (stack.length > 0) {\n    const node = stack.shift();\n    output.push(node);\n    const numChildren = node.numChildren;\n    if (numChildren > 0) {\n      for (let i = numChildren - 1; i >= 0; i--) {\n        stack.unshift(node.children[i]);\n      }\n    }\n  }\n  output.shift();\n  return output;\n}\n", "export function GetChildIndex(parent, child) {\n  return parent.children.indexOf(child);\n}\n", "export function RemoveChildAt(parent, index) {\n  const children = parent.children;\n  let child;\n  if (index >= 0 && index < children.length) {\n    const removed = children.splice(index, 1);\n    if (removed[0]) {\n      child = removed[0];\n      child.parent = null;\n    }\n  }\n  return child;\n}\n", "import {GetChildIndex} from \"./GetChildIndex\";\nimport {RemoveChildAt} from \"./RemoveChildAt\";\nexport function RemoveChild(parent, child) {\n  const currentIndex = GetChildIndex(parent, child);\n  if (currentIndex > -1) {\n    RemoveChildAt(parent, currentIndex);\n  }\n  return child;\n}\n", "export const AddedToWorldEvent = \"addedtoworld\";\n", "export const PostUpdateEvent = \"postupdate\";\n", "export const RemovedFromWorldEvent = \"removedfromworld\";\n", "export const UpdateEvent = \"update\";\n", "import {AddedToWorldEvent, RemovedFromWorldEvent} from \"../gameobjects/events\";\nimport {Emit} from \"../events/Emit\";\nexport function SetWorld(world, ...children) {\n  children.forEach((child) => {\n    if (child.world) {\n      Emit(child.world, RemovedFromWorldEvent, child, child.world);\n      Emit(child, RemovedFromWorldEvent, child, child.world);\n    }\n    child.world = world;\n    Emit(world, AddedToWorldEvent, child, world);\n    Emit(child, AddedToWorldEvent, child, world);\n  });\n  return children;\n}\n", "import {DepthFirstSearch} from \"./DepthFirstSearch\";\nimport {RemoveChild} from \"./RemoveChild\";\nimport {SetWorld} from \"./SetWorld\";\nexport function SetParent(parent, ...children) {\n  children.forEach((child) => {\n    if (child.parent) {\n      RemoveChild(child.parent, child);\n    }\n    child.parent = parent;\n  });\n  const parentWorld = parent.world;\n  if (parentWorld) {\n    SetWorld(parentWorld, ...DepthFirstSearch(parent));\n  }\n  return children;\n}\n", "import {RemoveChildrenBetween} from \"./RemoveChildrenBetween\";\nimport {SetParent} from \"./SetParent\";\nexport function ReparentChildren(parent, newParent, beginIndex = 0, endIndex) {\n  const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\n  SetParent(newParent, ...moved);\n  moved.forEach((child) => {\n    child.transform.updateWorld();\n  });\n  return moved;\n}\n", "import {BoundsComponent} from \"./components/bounds/BoundsComponent\";\nimport {DIRTY_CONST} from \"./DIRTY_CONST\";\nimport {DestroyChildren} from \"../display/DestroyChildren\";\nimport {DestroyEvent} from \"./events/DestroyEvent\";\nimport {Emit} from \"../events/Emit\";\nimport {GameInstance} from \"../GameInstance\";\nimport {InputComponent} from \"./components/input/InputComponent\";\nimport {ReparentChildren} from \"../display/ReparentChildren\";\nimport {TransformComponent} from \"./components/transform/TransformComponent\";\nexport class GameObject {\n  constructor(x = 0, y = 0) {\n    this.type = \"GameObject\";\n    this.name = \"\";\n    this.willUpdate = true;\n    this.willUpdateChildren = true;\n    this.willRender = true;\n    this.willRenderChildren = true;\n    this.willCacheChildren = false;\n    this.dirty = 0;\n    this.dirtyFrame = 0;\n    this.visible = true;\n    this.children = [];\n    this.vertices = [];\n    this.events = new Map();\n    this.transform = new TransformComponent(this, x, y);\n    this.bounds = new BoundsComponent(this);\n    this.input = new InputComponent(this);\n    this.dirty = DIRTY_CONST.DEFAULT;\n    this.transform.update();\n  }\n  isRenderable() {\n    return this.visible && this.willRender;\n  }\n  isDirty(flag) {\n    return (this.dirty & flag) !== 0;\n  }\n  clearDirty(flag) {\n    if (this.isDirty(flag)) {\n      this.dirty ^= flag;\n    }\n    return this;\n  }\n  setDirty(flag, flag2) {\n    if (!this.isDirty(flag)) {\n      this.dirty ^= flag;\n      this.dirtyFrame = GameInstance.getFrame();\n    }\n    if (!this.isDirty(flag2)) {\n      this.dirty ^= flag2;\n    }\n    return this;\n  }\n  update(delta, time) {\n    if (this.willUpdateChildren) {\n      const children = this.children;\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        if (child && child.willUpdate) {\n          child.update(delta, time);\n        }\n      }\n    }\n    this.postUpdate(delta, time);\n  }\n  postUpdate(delta, time) {\n  }\n  renderGL(renderPass) {\n  }\n  renderCanvas(renderer) {\n  }\n  postRenderGL(renderPass) {\n  }\n  postRenderCanvas(renderer) {\n  }\n  get numChildren() {\n    return this.children.length;\n  }\n  getBounds() {\n    return this.bounds.get();\n  }\n  destroy(reparentChildren) {\n    if (reparentChildren) {\n      ReparentChildren(this, reparentChildren);\n    } else {\n      DestroyChildren(this);\n    }\n    Emit(this, DestroyEvent, this);\n    this.transform.destroy();\n    this.bounds.destroy();\n    this.input.destroy();\n    this.events.clear();\n    this.world = null;\n    this.parent = null;\n    this.children = null;\n    this.vertices = [];\n  }\n}\n", "import {DIRTY_CONST} from \"../DIRTY_CONST\";\nimport {GameObject} from \"../GameObject\";\nimport {GetRectangleSize} from \"../../geom/rectangle/GetRectangleSize\";\nimport {Vec2} from \"../../math/vec2/Vec2\";\nexport class Container extends GameObject {\n  constructor(x = 0, y = 0) {\n    super(x, y);\n    this._alpha = 1;\n    this.type = \"Container\";\n  }\n  setSize(width, height = width) {\n    this.transform.updateExtent(width, height);\n    return this;\n  }\n  getSize(out = new Vec2()) {\n    return GetRectangleSize(this.transform.extent, out);\n  }\n  setPosition(x, y) {\n    this.transform.position.set(x, y);\n    return this;\n  }\n  getPosition(out = new Vec2()) {\n    const position = this.transform.position;\n    return out.set(position.x, position.y);\n  }\n  setOrigin(x, y = x) {\n    this.transform.origin.set(x, y);\n    return this;\n  }\n  getOrigin(out = new Vec2()) {\n    const origin = this.transform.origin;\n    return out.set(origin.x, origin.y);\n  }\n  setSkew(x, y = x) {\n    this.transform.skew.set(x, y);\n    return this;\n  }\n  getSkew(out = new Vec2()) {\n    const skew = this.transform.skew;\n    return out.set(skew.x, skew.y);\n  }\n  setScale(x, y = x) {\n    this.transform.scale.set(x, y);\n    return this;\n  }\n  getScale(out = new Vec2()) {\n    const scale = this.transform.scale;\n    return out.set(scale.x, scale.y);\n  }\n  setRotation(value) {\n    this.transform.rotation = value;\n    return this;\n  }\n  getRotation() {\n    return this.transform.rotation;\n  }\n  set width(value) {\n    this.transform.updateExtent(value);\n  }\n  get width() {\n    return this.transform.extent.width;\n  }\n  set height(value) {\n    this.transform.updateExtent(void 0, value);\n  }\n  get height() {\n    return this.transform.extent.height;\n  }\n  set x(value) {\n    this.transform.position.x = value;\n  }\n  get x() {\n    return this.transform.position.x;\n  }\n  set y(value) {\n    this.transform.position.y = value;\n  }\n  get y() {\n    return this.transform.position.y;\n  }\n  set originX(value) {\n    this.transform.origin.x = value;\n  }\n  get originX() {\n    return this.transform.origin.x;\n  }\n  set originY(value) {\n    this.transform.origin.y = value;\n  }\n  get originY() {\n    return this.transform.origin.y;\n  }\n  set skewX(value) {\n    this.transform.skew.x = value;\n  }\n  get skewX() {\n    return this.transform.skew.x;\n  }\n  set skewY(value) {\n    this.transform.skew.y = value;\n  }\n  get skewY() {\n    return this.transform.skew.y;\n  }\n  set scaleX(value) {\n    this.transform.scale.x = value;\n  }\n  get scaleX() {\n    return this.transform.scale.x;\n  }\n  set scaleY(value) {\n    this.transform.scale.y = value;\n  }\n  get scaleY() {\n    return this.transform.scale.y;\n  }\n  set rotation(value) {\n    this.transform.rotation = value;\n  }\n  get rotation() {\n    return this.transform.rotation;\n  }\n  get alpha() {\n    return this._alpha;\n  }\n  set alpha(value) {\n    if (value !== this._alpha) {\n      this._alpha = value;\n      this.vertices.forEach((vertex) => {\n        vertex.setAlpha(value);\n      });\n      this.setDirty(DIRTY_CONST.COLORS);\n    }\n  }\n}\n", "export function DrawTexturedQuad(frame, alpha, transform, renderer) {\n  if (!frame) {\n    return;\n  }\n  const ctx = renderer.ctx;\n  const {a, b, c, d, tx, ty} = transform.world;\n  const {x, y} = transform.extent;\n  ctx.save();\n  ctx.setTransform(a, b, c, d, tx, ty);\n  ctx.globalAlpha = alpha;\n  ctx.drawImage(frame.texture.image, frame.x, frame.y, frame.width, frame.height, x, y, frame.width, frame.height);\n  ctx.restore();\n}\n", "export function SetFrame(texture, key, ...children) {\n  const frame = texture.getFrame(key);\n  const pivot = frame.pivot;\n  children.forEach((child) => {\n    if (!child || frame === child.frame) {\n      return;\n    }\n    child.frame = frame;\n    child.hasTexture = true;\n    if (pivot) {\n      child.setOrigin(pivot.x, pivot.y);\n    }\n    frame.copyToExtent(child);\n    frame.copyToVertices(child.vertices);\n  });\n  return children;\n}\n", "let instance;\nexport const TextureManagerInstance = {\n  get: () => {\n    return instance;\n  },\n  set: (manager) => {\n    instance = manager;\n  }\n};\n", "import {SetFrame} from \"./SetFrame\";\nimport {Texture} from \"../../textures/Texture\";\nimport {TextureManagerInstance} from \"../../textures/TextureManagerInstance\";\nexport function SetTexture(key, frame, ...children) {\n  if (!key) {\n    children.forEach((child) => {\n      child.texture = null;\n      child.frame = null;\n      child.hasTexture = false;\n    });\n  } else {\n    let texture;\n    if (key instanceof Texture) {\n      texture = key;\n    } else {\n      texture = TextureManagerInstance.get().get(key);\n    }\n    if (!texture) {\n      console.warn(`Invalid Texture key: ${key}`);\n    } else {\n      children.forEach((child) => {\n        child.texture = texture;\n      });\n      SetFrame(texture, frame, ...children);\n    }\n  }\n  return children;\n}\n", "import {BatchTexturedQuad} from \"../../renderer/webgl1/draw/BatchTexturedQuad\";\nimport {Container} from \"../container/Container\";\nimport {DIRTY_CONST} from \"../DIRTY_CONST\";\nimport {DrawTexturedQuad} from \"../../renderer/canvas/draw/DrawTexturedQuad\";\nimport {PreRenderVertices} from \"../components/transform/PreRenderVertices\";\nimport {SetFrame} from \"./SetFrame\";\nimport {SetTexture} from \"./SetTexture\";\nimport {Vertex} from \"../components/Vertex\";\nexport class Sprite extends Container {\n  constructor(x, y, texture, frame) {\n    super(x, y);\n    this.hasTexture = false;\n    this._tint = 16777215;\n    this.type = \"Sprite\";\n    this.vertices = [new Vertex(), new Vertex(), new Vertex(), new Vertex()];\n    this.setTexture(texture, frame);\n  }\n  setTexture(key, frame) {\n    SetTexture(key, frame, this);\n    return this;\n  }\n  setFrame(key) {\n    SetFrame(this.texture, key, this);\n    return this;\n  }\n  isRenderable() {\n    return this.visible && this.willRender && this.hasTexture && this.alpha > 0;\n  }\n  renderGL(renderPass) {\n    PreRenderVertices(this);\n    BatchTexturedQuad(this.texture, this.vertices, renderPass);\n  }\n  renderCanvas(renderer) {\n    PreRenderVertices(this);\n    DrawTexturedQuad(this.frame, this.alpha, this.transform, renderer);\n  }\n  get tint() {\n    return this._tint;\n  }\n  set tint(value) {\n    if (value !== this._tint) {\n      this._tint = value;\n      this.vertices.forEach((vertex) => {\n        vertex.setTint(value);\n      });\n      this.setDirty(DIRTY_CONST.COLORS);\n    }\n  }\n  destroy(reparentChildren) {\n    super.destroy(reparentChildren);\n    this.texture = null;\n    this.frame = null;\n    this.hasTexture = false;\n  }\n}\n", "import {GetVertexBufferEntry} from \"../renderpass/GetVertexBufferEntry\";\nexport function BatchSingleQuad(renderPass, x, y, width, height, u0, v0, u1, v1, textureIndex = 0, packedColor = 4294967295) {\n  const {F32, U32, offset} = GetVertexBufferEntry(renderPass, 1);\n  F32[offset + 0] = x;\n  F32[offset + 1] = y;\n  F32[offset + 2] = u0;\n  F32[offset + 3] = v1;\n  F32[offset + 4] = textureIndex;\n  U32[offset + 5] = packedColor;\n  F32[offset + 6] = x;\n  F32[offset + 7] = y + height;\n  F32[offset + 8] = u0;\n  F32[offset + 9] = v0;\n  F32[offset + 10] = textureIndex;\n  U32[offset + 11] = packedColor;\n  F32[offset + 12] = x + width;\n  F32[offset + 13] = y + height;\n  F32[offset + 14] = u1;\n  F32[offset + 15] = v0;\n  F32[offset + 16] = textureIndex;\n  U32[offset + 17] = packedColor;\n  F32[offset + 18] = x + width;\n  F32[offset + 19] = y;\n  F32[offset + 20] = u1;\n  F32[offset + 21] = v1;\n  F32[offset + 22] = textureIndex;\n  U32[offset + 23] = packedColor;\n}\n", "import {BindTexture, Flush, PopShader, PopVertexBuffer, SetShader, SetVertexBuffer, UnbindTexture} from \"../renderpass\";\nimport {BatchSingleQuad} from \"./BatchSingleQuad\";\nexport function DrawTexturedQuad(renderPass, texture, shader) {\n  if (!shader) {\n    shader = renderPass.quadShader;\n  }\n  const {u0, v0, u1, v1} = texture.firstFrame;\n  BindTexture(texture, 0);\n  SetVertexBuffer(renderPass, renderPass.quadBuffer);\n  SetShader(renderPass, shader, 0);\n  BatchSingleQuad(renderPass, 0, 0, texture.width, texture.height, u0, v0, u1, v1, 0);\n  Flush(renderPass);\n  PopVertexBuffer(renderPass);\n  PopShader(renderPass);\n  UnbindTexture(renderPass);\n}\n", "import {GameObject} from \"../GameObject\";\nexport class Layer extends GameObject {\n  constructor() {\n    super();\n    this.type = \"Layer\";\n    this.transform.passthru = true;\n    this.willRender = false;\n  }\n}\n", "import {Flush, PopFramebuffer, SetFramebuffer} from \"../../renderer/webgl1/renderpass\";\nimport {GetHeight, GetResolution, GetWidth} from \"../../config/size\";\nimport {CreateFramebuffer} from \"../../renderer/webgl1/fbo/CreateFramebuffer\";\nimport {DIRTY_CONST} from \"../DIRTY_CONST\";\nimport {DrawTexturedQuad} from \"../../renderer/webgl1/draw/DrawTexturedQuad\";\nimport {GLTextureBinding} from \"../../renderer/webgl1/textures/GLTextureBinding\";\nimport {Layer} from \"../layer/Layer\";\nimport {Texture} from \"../../textures/Texture\";\nexport class RenderLayer extends Layer {\n  constructor() {\n    super();\n    this.type = \"RenderLayer\";\n    this.willRender = true;\n    this.willRenderChildren = true;\n    this.willCacheChildren = true;\n    this.setDirty(DIRTY_CONST.CHILD_CACHE);\n    const width = GetWidth();\n    const height = GetHeight();\n    const resolution = GetResolution();\n    const texture = new Texture(null, width * resolution, height * resolution);\n    const binding = new GLTextureBinding(texture);\n    texture.binding = binding;\n    binding.framebuffer = CreateFramebuffer(binding.texture);\n    this.texture = texture;\n    this.framebuffer = binding.framebuffer;\n  }\n  renderGL(renderPass) {\n    if (this.numChildren > 0) {\n      Flush(renderPass);\n      if (!this.willCacheChildren || this.isDirty(DIRTY_CONST.CHILD_CACHE)) {\n        SetFramebuffer(renderPass, this.framebuffer, true);\n        this.clearDirty(DIRTY_CONST.CHILD_CACHE);\n      } else {\n        SetFramebuffer(renderPass, this.framebuffer, false);\n        this.postRenderGL(renderPass);\n      }\n    }\n  }\n  postRenderGL(renderPass) {\n    Flush(renderPass);\n    PopFramebuffer(renderPass);\n    DrawTexturedQuad(renderPass, this.texture);\n    this.clearDirty(DIRTY_CONST.TRANSFORM);\n  }\n}\n", "import {DIRTY_CONST} from \"../DIRTY_CONST\";\nimport {DrawTexturedQuad} from \"../../renderer/webgl1/draw/DrawTexturedQuad\";\nimport {Flush} from \"../../renderer/webgl1/renderpass/Flush\";\nimport {PopFramebuffer} from \"../../renderer/webgl1/renderpass/PopFramebuffer\";\nimport {RenderLayer} from \"../renderlayer/RenderLayer\";\nexport class EffectLayer extends RenderLayer {\n  constructor(...shaders) {\n    super();\n    this.shaders = [];\n    this.type = \"EffectLayer\";\n    if (Array.isArray(shaders)) {\n      this.shaders = shaders;\n    }\n  }\n  postRenderGL(renderPass) {\n    const shaders = this.shaders;\n    const texture = this.texture;\n    Flush(renderPass);\n    PopFramebuffer(renderPass);\n    if (shaders.length === 0) {\n      DrawTexturedQuad(renderPass, texture);\n    } else {\n      let prevTexture = texture;\n      for (let i = 0; i < shaders.length; i++) {\n        const shader = shaders[i];\n        DrawTexturedQuad(renderPass, prevTexture, shader);\n        prevTexture = shader.texture;\n      }\n      DrawTexturedQuad(renderPass, prevTexture);\n    }\n    this.clearDirty(DIRTY_CONST.TRANSFORM);\n  }\n}\n", "export function CreateCanvas(width, height) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  return canvas.getContext(\"2d\");\n}\n", "import {SetParent} from \"./SetParent\";\nexport function AddChild(parent, child) {\n  parent.children.push(child);\n  SetParent(parent, child);\n  child.transform.updateWorld();\n  return child;\n}\n", "import {AddChild} from \"./AddChild\";\nexport function AddChildren(parent, ...children) {\n  children.forEach((child) => {\n    AddChild(parent, child);\n  });\n  return children;\n}\n", "import {RemoveChild} from \"./RemoveChild\";\nexport function RemoveChildren(parent, ...children) {\n  children.forEach((child) => {\n    RemoveChild(parent, child);\n  });\n  return children;\n}\n", "import {GetElement} from \"./GetElement\";\nexport function AddToDOM(element, parent) {\n  const target = GetElement(parent);\n  target.appendChild(element);\n  return element;\n}\n", "export function DOMContentLoaded(callback) {\n  const readyState = document.readyState;\n  if (readyState === \"complete\" || readyState === \"interactive\") {\n    callback();\n    return;\n  }\n  const check = () => {\n    document.removeEventListener(\"deviceready\", check, true);\n    document.removeEventListener(\"DOMContentLoaded\", check, true);\n    window.removeEventListener(\"load\", check, true);\n    callback();\n  };\n  if (!document.body) {\n    window.setTimeout(check, 20);\n  } else if (window.hasOwnProperty(\"cordova\")) {\n    document.addEventListener(\"deviceready\", check, true);\n  } else {\n    document.addEventListener(\"DOMContentLoaded\", check, true);\n    window.addEventListener(\"load\", check, true);\n  }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\nexport function ParseXML(data) {\n  let xml;\n  try {\n    const parser = new DOMParser();\n    xml = parser.parseFromString(data, \"text/xml\");\n    if (!xml || !xml.documentElement || xml.getElementsByTagName(\"parsererror\").length) {\n      return null;\n    } else {\n      return xml;\n    }\n  } catch (error) {\n    return null;\n  }\n}\n", "export class EventEmitter {\n  constructor() {\n    this.events = new Map();\n  }\n}\n", "export class EventInstance {\n  constructor(callback, context, once = false) {\n    this.callback = callback;\n    this.context = context;\n    this.once = once;\n  }\n}\n", "import {EventInstance} from \"./EventInstance\";\nexport function Off(emitter, event, callback, context, once) {\n  const events = emitter.events;\n  const listeners = events.get(event);\n  if (!callback) {\n    events.delete(event);\n  } else if (callback instanceof EventInstance) {\n    listeners.delete(callback);\n  } else {\n    const hasContext = !context;\n    const hasOnce = once !== void 0;\n    for (const listener of listeners) {\n      if (listener.callback === callback && (hasContext && listener.context === context) && (hasOnce && listener.once === once)) {\n        listeners.delete(listener);\n      }\n    }\n  }\n  if (listeners.size === 0) {\n    events.delete(event);\n  }\n  return emitter;\n}\n", "import {EventInstance} from \"./EventInstance\";\nexport function On(emitter, event, callback, context = emitter, once = false) {\n  if (typeof callback !== \"function\") {\n    throw new TypeError(\"Listener not a function\");\n  }\n  const listener = new EventInstance(callback, context, once);\n  const listeners = emitter.events.get(event);\n  if (!listeners) {\n    emitter.events.set(event, new Set([listener]));\n  } else {\n    listeners.add(listener);\n  }\n  return listener;\n}\n", "import {On} from \"./On\";\nexport function Once(emitter, event, callback, context = emitter) {\n  return On(emitter, event, callback, context, true);\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetBanner() {\n  const {title, version, url, color, background} = ConfigStore.get(CONFIG_DEFAULTS.BANNER);\n  if (title !== \"\") {\n    const str = version !== \"\" ? title + \" \" + version : title;\n    console.log(`%c${str}%c ${url}`, `padding: 4px 16px; color: ${color}; background: ${background}`, \"\");\n  }\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetGlobalVar() {\n  return ConfigStore.get(CONFIG_DEFAULTS.GLOBAL_VAR);\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetParent() {\n  return ConfigStore.get(CONFIG_DEFAULTS.PARENT);\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetRenderer() {\n  return ConfigStore.get(CONFIG_DEFAULTS.RENDERER);\n}\n", "export function CreateSceneRenderData() {\n  return {\n    gameFrame: 0,\n    numTotalFrames: 0,\n    numDirtyFrames: 0,\n    numDirtyCameras: 0,\n    worldData: []\n  };\n}\n", "import {CONFIG_DEFAULTS} from \"../const\";\nimport {ConfigStore} from \"../ConfigStore\";\nexport function GetScenes() {\n  return ConfigStore.get(CONFIG_DEFAULTS.SCENES);\n}\n", "export function ResetSceneRenderData(renderData, gameFrame = 0) {\n  renderData.gameFrame = gameFrame;\n  renderData.numTotalFrames = 0;\n  renderData.numDirtyFrames = 0;\n  renderData.numDirtyCameras = 0;\n  renderData.worldData.length = 0;\n}\n", "let instance;\nexport const SceneManagerInstance = {\n  get: () => {\n    return instance;\n  },\n  set: (manager) => {\n    instance = manager;\n  }\n};\n", "import {Emit, Once} from \"../events\";\nimport {CreateSceneRenderData} from \"./CreateSceneRenderData\";\nimport {GameInstance} from \"../GameInstance\";\nimport {GetScenes} from \"../config/scenes\";\nimport {ResetSceneRenderData} from \"./ResetSceneRenderData\";\nimport {SceneManagerInstance} from \"./SceneManagerInstance\";\nexport class SceneManager {\n  constructor() {\n    this.scenes = new Map();\n    this.sceneIndex = 0;\n    this.flush = false;\n    this.renderResult = CreateSceneRenderData();\n    this.game = GameInstance.get();\n    SceneManagerInstance.set(this);\n    Once(this.game, \"boot\", () => this.boot());\n  }\n  boot() {\n    GetScenes().forEach((scene) => new scene());\n  }\n  update(delta, time) {\n    for (const scene of this.scenes.values()) {\n      Emit(scene, \"update\", delta, time);\n    }\n  }\n  render(gameFrame) {\n    const results = this.renderResult;\n    ResetSceneRenderData(results, gameFrame);\n    for (const scene of this.scenes.values()) {\n      Emit(scene, \"render\", results);\n    }\n    if (this.flush) {\n      results.numDirtyFrames++;\n      this.flush = false;\n    }\n    return results;\n  }\n}\n", "import {SetBackgroundColor} from \"./backgroundcolor/SetBackgroundColor\";\nimport {SetBanner} from \"./banner/SetBanner\";\nimport {SetBatchSize} from \"./batchsize/SetBatchSize\";\nimport {SetDefaultOrigin} from \"./defaultorigin/SetDefaultOrigin\";\nimport {SetMaxTextures} from \"./maxtextures/SetMaxTextures\";\nimport {SetSize} from \"./size/SetSize\";\nexport function SetConfigDefaults() {\n  SetBackgroundColor(0);\n  SetBatchSize(4096);\n  SetBanner(\"Phaser\", \"4.0.0\", \"https://phaser4.io\");\n  SetMaxTextures(0);\n  SetDefaultOrigin(0.5, 0.5);\n  SetSize(800, 600, 1);\n}\n", "import {CreateCanvas} from \"./CreateCanvas\";\nimport {Texture} from \"./Texture\";\nimport {TextureManagerInstance} from \"./TextureManagerInstance\";\nexport class TextureManager {\n  constructor() {\n    this.textures = new Map();\n    this.createDefaultTextures();\n    TextureManagerInstance.set(this);\n  }\n  createDefaultTextures() {\n    this.add(\"__BLANK\", new Texture(CreateCanvas(32, 32).canvas));\n    const missing = CreateCanvas(32, 32);\n    missing.strokeStyle = \"#0f0\";\n    missing.moveTo(0, 0);\n    missing.lineTo(32, 32);\n    missing.stroke();\n    missing.strokeRect(0.5, 0.5, 31, 31);\n    this.add(\"__MISSING\", new Texture(missing.canvas));\n    const white = CreateCanvas(32, 32);\n    white.fillStyle = \"#fff\";\n    white.fillRect(0, 0, 32, 32);\n    this.add(\"__WHITE\", new Texture(white.canvas));\n  }\n  get(key) {\n    const textures = this.textures;\n    if (textures.has(key)) {\n      return textures.get(key);\n    } else {\n      return textures.get(\"__MISSING\");\n    }\n  }\n  has(key) {\n    return this.textures.has(key);\n  }\n  add(key, source, glConfig) {\n    let texture;\n    const textures = this.textures;\n    if (!textures.has(key)) {\n      if (source instanceof Texture) {\n        texture = source;\n      } else {\n        texture = new Texture(source, 0, 0, glConfig);\n      }\n      texture.key = key;\n      textures.set(key, texture);\n    }\n    return texture;\n  }\n}\n", "import {AddToDOM, DOMContentLoaded} from \"./dom\";\nimport {Emit, EventEmitter} from \"./events\";\nimport {GameInstance} from \"./GameInstance\";\nimport {GetBanner} from \"./config/banner\";\nimport {GetGlobalVar} from \"./config/globalvar\";\nimport {GetParent} from \"./config/parent\";\nimport {GetRenderer} from \"./config/renderer\";\nimport {SceneManager} from \"./scenes/SceneManager\";\nimport {SetConfigDefaults} from \"./config/SetConfigDefaults\";\nimport {TextureManager} from \"./textures/TextureManager\";\nexport class Game extends EventEmitter {\n  constructor(...settings) {\n    super();\n    this.VERSION = \"4.0.0-beta1\";\n    this.isBooted = false;\n    this.isPaused = false;\n    this.willUpdate = true;\n    this.willRender = true;\n    this.lastTick = 0;\n    this.elapsed = 0;\n    this.frame = 0;\n    GameInstance.set(this);\n    SetConfigDefaults();\n    DOMContentLoaded(() => this.boot(settings));\n  }\n  boot(settings) {\n    settings.forEach((setting) => setting());\n    const renderer = GetRenderer();\n    this.renderer = new renderer();\n    this.textureManager = new TextureManager();\n    this.sceneManager = new SceneManager();\n    const parent = GetParent();\n    if (parent) {\n      AddToDOM(this.renderer.canvas, parent);\n    }\n    const globalVar = GetGlobalVar();\n    if (globalVar && window) {\n      window[globalVar] = this;\n    }\n    this.isBooted = true;\n    GetBanner();\n    Emit(this, \"boot\");\n    this.lastTick = performance.now();\n    this.step(this.lastTick);\n  }\n  pause() {\n    this.isPaused = true;\n  }\n  resume() {\n    this.isPaused = false;\n    this.lastTick = performance.now();\n  }\n  step(time) {\n    const delta = time - this.lastTick;\n    this.lastTick = time;\n    this.elapsed += delta;\n    if (!this.isPaused) {\n      if (this.willUpdate) {\n        this.sceneManager.update(delta, time);\n        Emit(this, \"update\", delta, time);\n      }\n      if (this.willRender) {\n        this.renderer.render(this.sceneManager.render(this.frame));\n      }\n    }\n    this.frame++;\n    GameInstance.setFrame(this.frame);\n    GameInstance.setElapsed(this.elapsed);\n    requestAnimationFrame((now) => this.step(now));\n  }\n  destroy() {\n  }\n}\n", "export class File {\n  constructor(key, url, config) {\n    this.responseType = \"text\";\n    this.crossOrigin = void 0;\n    this.skipCache = false;\n    this.hasLoaded = false;\n    this.key = key;\n    this.url = url;\n    this.config = config;\n  }\n}\n", "export function GetURL(key, url, extension, loader) {\n  if (!url) {\n    url = key + extension;\n  }\n  if (/^(?:blob:|data:|http:\\/\\/|https:\\/\\/|\\/\\/)/.exec(url)) {\n    return url;\n  } else if (loader) {\n    return loader.baseURL + loader.path + url;\n  } else {\n    return url;\n  }\n}\n", "export function ImageTagLoader(file) {\n  file.data = new Image();\n  if (file.crossOrigin) {\n    file.data.crossOrigin = file.crossOrigin;\n  }\n  return new Promise((resolve, reject) => {\n    file.data.onload = () => {\n      if (file.data.onload) {\n        file.data.onload = null;\n        file.data.onerror = null;\n        resolve(file);\n      }\n    };\n    file.data.onerror = (event) => {\n      if (file.data.onload) {\n        file.data.onload = null;\n        file.data.onerror = null;\n        file.error = event;\n        reject(file);\n      }\n    };\n    file.data.src = file.url;\n    if (file.data.complete && file.data.width && file.data.height) {\n      file.data.onload = null;\n      file.data.onerror = null;\n      resolve(file);\n    }\n  });\n}\n", "import {File} from \"../File\";\nimport {GetURL} from \"../GetURL\";\nimport {ImageTagLoader} from \"../ImageTagLoader\";\nimport {TextureManagerInstance} from \"../../textures/TextureManagerInstance\";\nexport function ImageFile(key, url, glConfig) {\n  const file = new File(key, url);\n  file.load = () => {\n    file.url = GetURL(file.key, file.url, \".png\", file.loader);\n    if (file.loader) {\n      file.crossOrigin = file.loader.crossOrigin;\n    }\n    return new Promise((resolve, reject) => {\n      const textureManager = TextureManagerInstance.get();\n      if (textureManager.has(file.key)) {\n        resolve(file);\n      } else {\n        ImageTagLoader(file).then((file2) => {\n          textureManager.add(file2.key, file2.data, glConfig);\n          resolve(file2);\n        }).catch((file2) => {\n          reject(file2);\n        });\n      }\n    });\n  };\n  return file;\n}\n", "import {Emit, EventEmitter} from \"../events\";\nexport class Loader extends EventEmitter {\n  constructor() {\n    super();\n    this.baseURL = \"\";\n    this.path = \"\";\n    this.crossOrigin = \"anonymous\";\n    this.maxParallelDownloads = -1;\n    this.isLoading = false;\n    this.reset();\n  }\n  reset() {\n    this.isLoading = false;\n    this.queue = new Set();\n    this.inflight = new Set();\n    this.completed = new Set();\n    this.progress = 0;\n  }\n  add(...file) {\n    file.forEach((entity) => {\n      entity.loader = this;\n      this.queue.add(entity);\n    });\n    return this;\n  }\n  start() {\n    if (this.isLoading) {\n      return null;\n    }\n    return new Promise((resolve, reject) => {\n      this.completed.clear();\n      this.progress = 0;\n      if (this.queue.size > 0) {\n        this.isLoading = true;\n        this.onComplete = resolve;\n        this.onError = reject;\n        Emit(this, \"start\");\n        this.nextFile();\n      } else {\n        this.progress = 1;\n        Emit(this, \"complete\");\n        resolve(this);\n      }\n    });\n  }\n  nextFile() {\n    let limit = this.queue.size;\n    if (this.maxParallelDownloads !== -1) {\n      limit = Math.min(limit, this.maxParallelDownloads) - this.inflight.size;\n    }\n    if (limit) {\n      const iterator = this.queue.values();\n      while (limit > 0) {\n        const file = iterator.next().value;\n        this.inflight.add(file);\n        this.queue.delete(file);\n        file.load().then((file2) => this.fileComplete(file2)).catch((file2) => this.fileError(file2));\n        limit--;\n      }\n    } else if (this.inflight.size === 0) {\n      this.stop();\n    }\n  }\n  stop() {\n    if (!this.isLoading) {\n      return;\n    }\n    this.isLoading = false;\n    Emit(this, \"complete\", this.completed);\n    this.onComplete();\n    this.completed.clear();\n  }\n  updateProgress(file) {\n    this.inflight.delete(file);\n    this.completed.add(file);\n    const totalCompleted = this.completed.size;\n    const totalQueued = this.queue.size + this.inflight.size;\n    if (totalCompleted > 0) {\n      this.progress = totalCompleted / (totalCompleted + totalQueued);\n    }\n    Emit(this, \"progress\", this.progress, totalCompleted, totalQueued);\n    this.nextFile();\n  }\n  fileComplete(file) {\n    Emit(this, \"filecomplete\", file);\n    this.updateProgress(file);\n  }\n  fileError(file) {\n    Emit(this, \"fileerror\", file);\n    this.updateProgress(file);\n  }\n  totalFilesToLoad() {\n    return this.queue.size + this.inflight.size;\n  }\n  setBaseURL(url = \"\") {\n    if (url !== \"\" && url.substr(-1) !== \"/\") {\n      url = url.concat(\"/\");\n    }\n    this.baseURL = url;\n    return this;\n  }\n  setPath(path = \"\") {\n    if (path !== \"\" && path.substr(-1) !== \"/\") {\n      path = path.concat(\"/\");\n    }\n    this.path = path;\n    return this;\n  }\n  setCORS(crossOrigin) {\n    this.crossOrigin = crossOrigin;\n    return this;\n  }\n  setMaxParallelDownloads(max) {\n    this.maxParallelDownloads = max;\n    return this;\n  }\n}\n", "export function GetConfigValue(config, property, defaultValue) {\n  if (Object.prototype.hasOwnProperty.call(config, property)) {\n    return config[property];\n  } else {\n    return defaultValue;\n  }\n}\n", "import {GetConfigValue} from \"./GetConfigValue\";\nimport {SceneManagerInstance} from \"./SceneManagerInstance\";\nexport function Install(scene, config = {}) {\n  const sceneManager = SceneManagerInstance.get();\n  const size = sceneManager.scenes.size;\n  const sceneIndex = sceneManager.sceneIndex;\n  const firstScene = size === 0;\n  if (typeof config === \"string\") {\n    scene.key = config;\n  } else if (config || !config && firstScene) {\n    scene.key = GetConfigValue(config, \"key\", \"scene\" + sceneIndex.toString());\n  }\n  if (sceneManager.scenes.has(scene.key)) {\n    console.warn(\"Scene key already in use: \" + scene.key);\n  } else {\n    sceneManager.scenes.set(scene.key, scene);\n    sceneManager.flush = true;\n    sceneManager.sceneIndex++;\n  }\n}\n", "import {GameInstance} from \"../GameInstance\";\nimport {Install} from \"./Install\";\nexport class Scene {\n  constructor(config) {\n    this.game = GameInstance.get();\n    this.events = new Map();\n    Install(this, config);\n  }\n}\n", "export const WorldRenderEvent = \"worldrender\";\n", "export const WorldShutdownEvent = \"worldshutdown\";\n", "export function CalculateTotalRenderable(entry, renderData) {\n  renderData.numRendered++;\n  renderData.numRenderable++;\n  if (entry.node.dirtyFrame >= renderData.gameFrame) {\n    renderData.dirtyFrame++;\n  }\n  entry.children.forEach((child) => {\n    if (child.children.length > 0) {\n      CalculateTotalRenderable(child, renderData);\n    }\n  });\n}\n", "import {DIRTY_CONST} from \"../gameobjects/DIRTY_CONST\";\nexport function HasDirtyChildren(parent) {\n  if (parent.node.isDirty(DIRTY_CONST.CHILD_CACHE)) {\n    return true;\n  }\n  const stack = [parent];\n  while (stack.length > 0) {\n    const entry = stack.pop();\n    if (entry.node.isDirty(DIRTY_CONST.TRANSFORM)) {\n      return true;\n    }\n    const numChildren = entry.children.length;\n    if (numChildren > 0) {\n      for (let i = 0; i < numChildren; i++) {\n        stack.push(entry.children[i]);\n      }\n    }\n  }\n  stack.length = 0;\n  return false;\n}\n", "import {DIRTY_CONST} from \"../gameobjects/DIRTY_CONST\";\nimport {HasDirtyChildren} from \"./HasDirtyChildren\";\nexport function UpdateCachedLayers(cachedLayers, dirtyCamera) {\n  cachedLayers.forEach((layer) => {\n    if (dirtyCamera || HasDirtyChildren(layer)) {\n      layer.node.setDirty(DIRTY_CONST.CHILD_CACHE);\n    } else {\n      layer.children.length = 0;\n    }\n  });\n}\n", "export function WorldDepthFirstSearch(cachedLayers, parent, output = []) {\n  for (let i = 0; i < parent.numChildren; i++) {\n    const node = parent.children[i];\n    if (node.isRenderable()) {\n      const children = [];\n      const entry = {node, children};\n      output.push(entry);\n      if (node.willRenderChildren && node.numChildren > 0) {\n        if (node.willCacheChildren) {\n          cachedLayers.push(entry);\n        }\n        WorldDepthFirstSearch(cachedLayers, node, children);\n      }\n    }\n  }\n  return output;\n}\n", "import {CalculateTotalRenderable} from \"./CalculateTotalRenderable\";\nimport {UpdateCachedLayers} from \"./UpdateCachedLayers\";\nimport {WorldDepthFirstSearch} from \"./WorldDepthFirstSearch\";\nexport function BuildRenderList(world) {\n  const cachedLayers = [];\n  const stack = [];\n  const entries = WorldDepthFirstSearch(cachedLayers, world, stack);\n  const renderData = world.renderData;\n  if (cachedLayers.length > 0) {\n    UpdateCachedLayers(cachedLayers, world.camera.dirtyRender);\n  }\n  entries.forEach((entry) => {\n    if (entry.children.length > 0) {\n      CalculateTotalRenderable(entry, renderData);\n    } else {\n      renderData.numRendered++;\n      renderData.numRenderable++;\n      if (entry.node.dirtyFrame >= renderData.gameFrame) {\n        renderData.dirtyFrame++;\n      }\n    }\n  });\n  world.renderList = entries;\n  if (world.forceRefresh) {\n    renderData.dirtyFrame++;\n    world.forceRefresh = false;\n  }\n}\n", "export function Mat2dEquals(a, b) {\n  return a.a === b.a && a.b === b.b && a.c === b.c && a.d === b.d && a.tx === b.tx && a.ty === b.ty;\n}\n", "export function MergeRenderData(sceneRenderData, worldRenderData) {\n  sceneRenderData.numDirtyFrames += worldRenderData.dirtyFrame;\n  sceneRenderData.numTotalFrames += worldRenderData.numRendered;\n  if (worldRenderData.camera.dirtyRender) {\n    sceneRenderData.numDirtyCameras++;\n  }\n  sceneRenderData.worldData.push(worldRenderData);\n}\n", "export function ResetWorldRenderData(renderData, gameFrame) {\n  renderData.gameFrame = gameFrame;\n  renderData.dirtyFrame = 0;\n  renderData.numRendered = 0;\n  renderData.numRenderable = 0;\n}\n", "import * as GameObjectEvents from \"../gameobjects/events\";\nimport * as WorldEvents from \"./events\";\nimport {Begin, Flush} from \"../renderer/webgl1/renderpass\";\nimport {Emit, Off, On, Once} from \"../events\";\nimport {BuildRenderList} from \"./BuildRenderList\";\nimport {GameObject} from \"../gameobjects\";\nimport {Mat2dEquals} from \"../math/mat2d/Mat2dEquals\";\nimport {MergeRenderData} from \"./MergeRenderData\";\nimport {RemoveChildren} from \"../display\";\nimport {ResetWorldRenderData} from \"./ResetWorldRenderData\";\nexport class BaseWorld extends GameObject {\n  constructor(scene) {\n    super();\n    this.forceRefresh = false;\n    this.is3D = false;\n    this.type = \"BaseWorld\";\n    this.scene = scene;\n    this.world = this;\n    this.events = new Map();\n    this.renderList = [];\n    this._updateListener = On(scene, \"update\", (delta, time) => this.update(delta, time));\n    this._renderListener = On(scene, \"render\", (renderData) => this.render(renderData));\n    this._shutdownListener = On(scene, \"shutdown\", () => this.shutdown());\n    Once(scene, \"destroy\", () => this.destroy());\n  }\n  update(delta, time) {\n    if (!this.willUpdate) {\n      return;\n    }\n    Emit(this, GameObjectEvents.UpdateEvent, delta, time, this);\n    super.update(delta, time);\n  }\n  postUpdate(delta, time) {\n    Emit(this, GameObjectEvents.PostUpdateEvent, delta, time, this);\n  }\n  render(sceneRenderData) {\n    const renderData = this.renderData;\n    ResetWorldRenderData(renderData, sceneRenderData.gameFrame);\n    if (!this.willRender || !this.visible) {\n      return;\n    }\n    BuildRenderList(this);\n    Emit(this, WorldEvents.WorldRenderEvent, renderData, this);\n    MergeRenderData(sceneRenderData, renderData);\n    this.camera.dirtyRender = false;\n  }\n  renderGL(renderPass) {\n    const currentCamera = renderPass.current2DCamera;\n    const camera = this.camera;\n    if (!currentCamera || !Mat2dEquals(camera.worldTransform, currentCamera.worldTransform)) {\n      Flush(renderPass);\n    }\n    Begin(renderPass, camera);\n    this.renderList.forEach((entry) => {\n      if (entry.children.length > 0) {\n        this.renderNode(entry, renderPass);\n      } else {\n        entry.node.renderGL(renderPass);\n      }\n    });\n  }\n  renderNode(entry, renderPass) {\n    entry.node.renderGL(renderPass);\n    entry.children.forEach((child) => {\n      if (child.children.length > 0) {\n        this.renderNode(child, renderPass);\n      } else {\n        child.node.renderGL(renderPass);\n      }\n    });\n    entry.node.postRenderGL(renderPass);\n  }\n  postRenderGL(renderPass) {\n  }\n  shutdown() {\n    const scene = this.scene;\n    Off(scene, \"update\", this._updateListener);\n    Off(scene, \"render\", this._renderListener);\n    Off(scene, \"shutdown\", this._shutdownListener);\n    RemoveChildren(this);\n    Emit(this, WorldEvents.WorldShutdownEvent, this);\n    ResetWorldRenderData(this.renderData, 0);\n    if (this.camera) {\n      this.camera.reset();\n    }\n  }\n  destroy(reparentChildren) {\n    super.destroy(reparentChildren);\n    Emit(this, GameObjectEvents.DestroyEvent, this);\n    ResetWorldRenderData(this.renderData, 0);\n    if (this.camera) {\n      this.camera.destroy();\n    }\n    this.events.clear();\n    this.camera = null;\n    this.renderData = null;\n    this.events = null;\n  }\n}\n", "export function CreateWorldRenderData(world, camera) {\n  return {\n    world,\n    camera,\n    gameFrame: 0,\n    dirtyFrame: 0,\n    numRendered: 0,\n    numRenderable: 0\n  };\n}\n", "import {BaseWorld} from \"./BaseWorld\";\nimport {CreateWorldRenderData} from \"./CreateWorldRenderData\";\nimport {StaticCamera} from \"../camera/StaticCamera\";\nexport class StaticWorld extends BaseWorld {\n  constructor(scene) {\n    super(scene);\n    this.type = \"StaticWorld\";\n    this.camera = new StaticCamera();\n    this.renderData = CreateWorldRenderData(this, this.camera);\n  }\n}\n", "import { BackgroundColor, Parent, Scenes, Size, WebGL } from '@phaserjs/phaser/config';\nimport { EffectLayer, Sprite } from '@phaserjs/phaser/gameobjects';\n\nimport { AddChildren } from '@phaserjs/phaser/display';\nimport { Game } from '@phaserjs/phaser/Game';\nimport { ImageFile } from '@phaserjs/phaser/loader/files/ImageFile';\nimport { Loader } from '@phaserjs/phaser/loader/Loader';\nimport { Scene } from '@phaserjs/phaser/scenes/Scene';\nimport { Shader } from '@phaserjs/phaser/renderer/webgl1/shaders/Shader';\nimport { StaticWorld } from '@phaserjs/phaser/world/StaticWorld';\n\nconst cloudsFragmentShader = `\n#define SHADER_NAME CLOUDS_FRAG\n\n/*\n * Original shader from: https://www.shadertoy.com/view/MtjGRK\n */\n\nprecision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uResolution;\n\n#define PI 3.14159265358979323\n\n//Random\nfloat rand(vec2 uv)\n{\n    float dt = dot(uv, vec2(12.9898, 78.233));\n\treturn fract(sin(mod(dt, PI / 2.0)) * 43758.5453);\n}\n\n//Clouds from (https://www.shadertoy.com/view/MlS3z1)\nconst int iter = 8;\n\nfloat turbulence(vec2 fragCoord, float octave, int id)\n{\n    float col = 0.0;\n    vec2 xy;\n    vec2 frac;\n    vec2 tmp1;\n    vec2 tmp2;\n    float i2;\n    float amp;\n    float maxOct = octave;\n    float time = uTime / 1000.0;\n    for (int i = 0; i < iter; i++)\n    {\n        amp = maxOct / octave;\n        i2 = float(i);\n        xy = id == 1 || id == 4? (fragCoord + 50.0 * float(id) * time / (4.0 + i2)) / octave : fragCoord / octave;\n        frac = fract(xy);\n        tmp1 = mod(floor(xy) + uResolution.xy, uResolution.xy);\n        tmp2 = mod(tmp1 + uResolution.xy - 1.0, uResolution.xy);\n        col += frac.x * frac.y * rand(tmp1) / amp;\n        col += frac.x * (1.0 - frac.y) * rand(vec2(tmp1.x, tmp2.y)) / amp;\n        col += (1.0 - frac.x) * frac.y * rand(vec2(tmp2.x, tmp1.y)) / amp;\n        col += (1.0 - frac.x) * (1.0 - frac.y) * rand(tmp2) / amp;\n        octave /= 2.0;\n    }\n    return (col);\n}\n//____________________________________________________\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / uResolution.xy;\n\n    vec3 sky = clamp(vec3(0.2, sin(uv.y), 1.0) + 0.3, 0.0, 1.0);\n\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    // vec4 skyandtexture = mix(sky, color);\n\n    float cloud1 = turbulence(fragCoord, 128.0, 1);\n    float cloud2 = turbulence(fragCoord + 2000.0, 128.0, 1);\n    float cloudss = clamp(pow(mix(cloud1, cloud2, 0.5), 30.0) / 9.0, 0.0, 1.0);\n\n\t// fragColor = sky + color + vec4(cloudss, 1.0);\n\n    fragColor = color * vec4(sky + cloudss, 1.0);\n}\n\nvoid main(void)\n{\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n`;\n\nconst verticalBarsFragmentShader = `\n#define SHADER_NAME BARS_FRAG\n\nprecision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uResolution;\n\n#define PI 0.01\n\nvoid main (void)\n{\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    vec2 p = (gl_FragCoord.xy / uResolution.xy) - 0.5;\n\n    float sx = 0.4 * sin(25.0 * p.y - (uTime * 0.001) * 2.0);\n\n    float dy = 2.0 / (5.0 * abs(p.y - sx));\n\n    gl_FragColor = color * vec4((p.x + 0.5) * dy, 0.5 * dy, dy - 1.65, 0.5);\n}`;\n\nconst vduNoiseFragmentShader = `\nprecision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uResolution;\n\nfloat noise(vec2 pos) {\n    return fract(sin(dot(pos, vec2(12.9898 - (uTime * 0.001) ,78.233 + (uTime * 0.001)))) * 43758.5453);\n}\n\nvoid main (void)\n{\n    vec2 normalPos = gl_FragCoord.xy / uResolution.xy;\n    float pos = (gl_FragCoord.y / uResolution.y);\n    //float mouse_dist = length(vec2((mouse.x - normalPos.x) * (uResolution.x / uResolution.y) , mouse.y - normalPos.y));\n    float mouse_dist = 1.0;\n    float distortion = clamp(1.0 - (mouse_dist + 0.1) * 3.0, 0.0, 1.0);\n\n    pos -= (distortion * distortion) * 0.1;\n\n    float c = sin(pos * 400.0) * 0.4 + 0.4;\n    c = pow(c, 0.2);\n    c *= 0.2;\n\n    float band_pos = fract(uTime * 0.0001) * 3.0 - 1.0;\n    c += clamp( (1.0 - abs(band_pos - pos) * 10.0), 0.0, 1.0) * 0.1;\n\n    c += distortion * 0.08;\n    // noise\n    c += (noise(gl_FragCoord.xy) - 0.5) * (0.09);\n\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    gl_FragColor = color + vec4( 0.0, c, 0.0, 1.0 );\n\n}`;\n\nconst underwaterFragmentShader = `\nprecision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uResolution;\n\n#define MAX_ITER 4\n\nvoid main (void)\n{\n    vec2 v_texCoord = gl_FragCoord.xy / uResolution;\n\n    vec2 p =  v_texCoord * 8.0 - vec2(20.0);\n    vec2 i = p;\n    float c = 1.0;\n    float inten = .05;\n\n    for (int n = 0; n < MAX_ITER; n++)\n    {\n        float t = (uTime * 0.0001) * (1.0 - (3.0 / float(n+1)));\n\n        i = p + vec2(cos(t - i.x) + sin(t + i.y),\n        sin(t - i.y) + cos(t + i.x));\n\n        c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),\n        p.y / (cos(i.y+t)/inten)));\n    }\n\n    c /= float(MAX_ITER);\n    c = 1.5 - sqrt(c);\n\n    vec4 texColor = vec4(0.0, 0.01, 0.015, 1.0);\n\n    texColor.rgb *= (1.0 / (1.0 - (c + 0.05)));\n\n    gl_FragColor = texture2D(uTexture, vTextureCoord) * texColor;\n}`;\n\nconst sineWaveFragmentShader2 = `\nprecision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uResolution;\n\nvoid main (void)\n{\n    vec2 uv = gl_FragCoord.xy / uResolution.xy;\n    uv.y += (sin((uv.x + (uTime * 0.0005)) * 10.0) * 0.1) + (sin((uv.x + (uTime * 0.0002)) * 32.0) * 0.01);\n    gl_FragColor = texture2D(uTexture, uv);\n}`;\n\nconst sineWaveFragmentShader = `\nprecision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uResolution;\n\nvoid main (void)\n{\n    vec2 uv = gl_FragCoord.xy / uResolution.xy;\n\n    // Represents the v/y coord(0 to 1) that will not sway.\n    float fixedBasePosY = 0.0;\n\n    // Configs for you to get the sway just right.\n    float speed = 3.0;\n    float verticleDensity = 6.0;\n    float swayIntensity = 0.2;\n\n    // Putting it all together.\n    float offsetX = sin(uv.y * verticleDensity + (uTime * 0.001) * speed) * swayIntensity;\n\n    // Offsettin the u/x coord.\n    uv.x += offsetX * (uv.y - fixedBasePosY);\n\n    gl_FragColor = texture2D(uTexture, uv);\n}`;\n\nconst pixelateFragmentShader = `\nprecision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uResolution;\n\nvoid main (void)\n{\n    vec2 pixelSize = vec2(4.0, 4.0);\n    vec2 size = uResolution.xy / pixelSize;\n    vec2 color = floor((vTextureCoord * size)) / size + pixelSize / uResolution.xy * 0.5;\n\n    gl_FragColor = texture2D(uTexture, color);\n}`;\n\nconst plasmaFragmentShader = `\nprecision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uResolution;\n\nconst float PI = 3.14159265;\nfloat ptime = uTime * 0.0001;\nfloat alpha = 1.0;\nfloat size = 0.03;\nfloat redShift = 0.5;\nfloat greenShift = 0.5;\nfloat blueShift = 0.9;\n\nvoid main (void)\n{\n    vec4 tcolor = texture2D(uTexture, vTextureCoord);\n\n    float color1, color2, color;\n\n    color1 = (sin(dot(gl_FragCoord.xy, vec2(sin(ptime * 3.0), cos(ptime * 3.0))) * 0.02 + ptime * 3.0) + 1.0) / 2.0;\n    vec2 center = vec2(640.0 / 2.0, 360.0 / 2.0) + vec2(640.0 / 2.0 * sin(-ptime * 3.0), 360.0 / 2.0 * cos(-ptime * 3.0));\n    color2 = (cos(length(gl_FragCoord.xy - center) * size) + 1.0) / 2.0;\n    color = (color1 + color2) / 2.0;\n\n    float red = (cos(PI * color / redShift + ptime * 3.0) + 1.0) / 2.0;\n    float green = (sin(PI * color / greenShift + ptime * 3.0) + 1.0) / 2.0;\n    float blue = (sin(PI * color / blueShift + ptime * 3.0) + 1.0) / 2.0;\n\n    gl_FragColor = tcolor * vec4(red, green, blue, alpha);\n}`;\n\nconst lazerBeamFragmentShader = `\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uResolution;\n\nvoid main (void)\n{\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    vec2 p = (gl_FragCoord.yx / uResolution.yx) - 0.5;\n\n    float sx = 0.3 * (p.x + 0.8) * sin(900.0 * p.x - 1.0 * pow(uTime / 1000.0, 0.55) * 5.0);\n    float dy = 4.0 / (500.0 * abs(p.y - sx));\n\n    dy += 1.0 / (25.0 * length(p - vec2(p.x, 0.0)));\n\n    gl_FragColor = color * vec4((p.x + 0.1) * dy, 0.3 * dy, dy, 1.1);\n}`;\n\nconst redFragmentShader = `\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\n\nvoid main (void)\n{\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    gl_FragColor = color * vec4(1.0, 0.0, 0.0, 1.0);\n}`;\n\nconst blurXFragmentShader = `\nprecision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\n\nvoid main (void)\n{\n    vec4 sum = vec4(0.0);\n    float blur = 0.001953125;\n\n    sum += texture2D(uTexture, vec2(vTextureCoord.x - 4.0 * blur, vTextureCoord.y)) * 0.05;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x - 3.0 * blur, vTextureCoord.y)) * 0.09;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x - 2.0 * blur, vTextureCoord.y)) * 0.12;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x - blur, vTextureCoord.y)) * 0.15;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x + blur, vTextureCoord.y)) * 0.15;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x + 2.0 * blur, vTextureCoord.y)) * 0.12;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x + 3.0 * blur, vTextureCoord.y)) * 0.09;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x + 4.0 * blur, vTextureCoord.y)) * 0.05;\n\n    gl_FragColor = sum;\n}`;\n\nconst blurYFragmentShader = `\nprecision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\n\nvoid main (void)\n{\n    vec4 sum = vec4(0.0);\n    float blur = 0.001953125;\n\n    sum += texture2D(uTexture, vec2(vTextureCoord.x, vTextureCoord.y - 4.0 * blur)) * 0.05;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x, vTextureCoord.y - 3.0 * blur)) * 0.09;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x, vTextureCoord.y - 2.0 * blur)) * 0.12;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x, vTextureCoord.y - blur)) * 0.15;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x, vTextureCoord.y + blur)) * 0.15;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x, vTextureCoord.y + 2.0 * blur)) * 0.12;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x, vTextureCoord.y + 3.0 * blur)) * 0.09;\n    sum += texture2D(uTexture, vec2(vTextureCoord.x, vTextureCoord.y + 4.0 * blur)) * 0.05;\n\n    gl_FragColor = sum;\n}`;\n\nclass Demo extends Scene\n{\n    constructor ()\n    {\n        super();\n\n        const loader = new Loader();\n\n        loader.setPath('assets/');\n\n        loader.add(ImageFile('background', 'farm-background.png'));\n        loader.add(ImageFile('ayu', 'ayu.png'));\n        loader.add(ImageFile('logo', 'logo.png'));\n        loader.add(ImageFile('rocket', 'rocket.png'));\n        loader.add(ImageFile('farm', 'farm-logo.png'));\n        loader.add(ImageFile('star', 'star.png'));\n        loader.add(ImageFile('bubble', 'bubble256.png'));\n\n        loader.start().then(() => this.create()).catch();\n    }\n\n    create ()\n    {\n        const red = new Shader({ fragmentShader: redFragmentShader });\n        const blurX = new Shader({ fragmentShader: blurXFragmentShader });\n        const blurY = new Shader({ fragmentShader: blurYFragmentShader });\n        const lazer = new Shader({ fragmentShader: lazerBeamFragmentShader });\n        const plasma = new Shader({ fragmentShader: plasmaFragmentShader });\n        const pixel = new Shader({ fragmentShader: pixelateFragmentShader });\n        const sine = new Shader({ fragmentShader: sineWaveFragmentShader });\n        const sine2 = new Shader({ fragmentShader: sineWaveFragmentShader2 });\n        const underwater = new Shader({ fragmentShader: underwaterFragmentShader });\n        const vdu = new Shader({ fragmentShader: vduNoiseFragmentShader });\n        const bars = new Shader({ fragmentShader: verticalBarsFragmentShader });\n        const clouds = new Shader({ fragmentShader: cloudsFragmentShader });\n        // const empty = new Shader();\n\n        const world = new StaticWorld(this);\n\n        const layer = new EffectLayer();\n        // const layer2 = new EffectLayer();\n\n        layer.shaders.push(red);\n        // layer.shaders.push(blurX, red);\n        // layer.shaders.push(lazer);\n        // layer.shaders.push(plasma);\n        // layer.shaders.push(pixel);\n        // layer.shaders.push(sine);\n        // layer.shaders.push(sine2);\n        // layer.shaders.push(underwater);\n        // layer.shaders.push(vdu);\n        // layer.shaders.push(bars);\n        // layer.shaders.push(empty);\n        // layer2.shaders.push(sine);\n        // layer.shaders.push(clouds);\n\n        const bg = new Sprite(400, 300, 'background');\n        const logo = new Sprite(200, 300, 'logo');\n        const ayu = new Sprite(600, 300, 'ayu');\n        const farm = new Sprite(200, 150, 'farm');\n        const rocket = new Sprite(150, 500, 'rocket');\n        const bubble = new Sprite(400, 450, 'bubble');\n        const star = new Sprite(650, 500, 'star');\n\n        // AddChildren(world, ayu, logo, farm, rocket, bubble, star);\n        // AddChildren(layer, ayu, logo);\n\n        AddChildren(layer, ayu, logo, farm, rocket, bubble);\n\n        // AddChildren(layer2, farm);\n\n        AddChildren(world, bg, layer, star);\n\n        // AddChild(world, bg);\n        // AddChild(world, layer);\n        // AddChild(world, layer2);\n        // AddChild(world, star);\n    }\n}\n\nnew Game(\n    WebGL(),\n    Size(800, 600),\n    Parent('gameParent'),\n    BackgroundColor(0x2d2d2d),\n    Scenes(Demo)\n);\n"],
  "mappings": "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",
  "names": []
}
