{
  "version": 3,
  "sources": ["../../../../phaser-genesis/src/config/const.ts", "../../../../phaser-genesis/src/config/ConfigStore.ts", "../../../../phaser-genesis/src/config/backgroundcolor/SetBackgroundColor.ts", "../../../../phaser-genesis/src/config/backgroundcolor/BackgroundColor.ts", "../../../../phaser-genesis/src/config/banner/SetBanner.ts", "../../../../phaser-genesis/src/config/batchsize/SetBatchSize.ts", "../../../../phaser-genesis/src/config/backgroundcolor/GetBackgroundColor.ts", "../../../../phaser-genesis/src/config/size/GetHeight.ts", "../../../../phaser-genesis/src/config/size/GetResolution.ts", "../../../../phaser-genesis/src/config/size/GetWidth.ts", "../../../../phaser-genesis/src/config/renderer/SetRenderer.ts", "../../../../phaser-genesis/src/config/defaultorigin/SetDefaultOrigin.ts", "../../../../phaser-genesis/src/config/globalvar/SetGlobalVar.ts", "../../../../phaser-genesis/src/config/globalvar/GlobalVar.ts", "../../../../phaser-genesis/src/config/maxtextures/SetMaxTextures.ts", "../../../../phaser-genesis/src/dom/GetElement.ts", "../../../../phaser-genesis/src/config/parent/SetParent.ts", "../../../../phaser-genesis/src/config/parent/Parent.ts", "../../../../phaser-genesis/src/config/scenes/SetScenes.ts", "../../../../phaser-genesis/src/config/scenes/Scenes.ts", "../../../../phaser-genesis/src/config/size/SetSize.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ShaderStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/VertexBufferStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/FramebufferStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentFramebuffer.ts", "../../../../phaser-genesis/src/geom/rectangle/RectangleContains.ts", "../../../../phaser-genesis/src/geom/rectangle/Rectangle.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ViewportStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentViewport.ts", "../../../../phaser-genesis/src/geom/rectangle/RectangleEquals.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BlendModeStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ColorMatrixStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/SetAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindShaderEntry.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetCamera.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Begin.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/SetUniform.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindWebGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/TextureStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ClearWebGLTextures.ts", "../../../../phaser-genesis/src/config/maxtextures/GetMaxTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CreateTempTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/GetVertexBufferEntry.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopColor.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopShader.ts", "../../../../phaser-genesis/src/renderer/BindingQueue.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/CreateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/DeleteFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/DeleteGLTexture.ts", "../../../../phaser-genesis/src/math/pow2/IsSizePowerOfTwo.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/SetGLTextureFilterMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/UpdateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/GLTextureBinding.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ProcessBindingQueue.ts", "../../../../phaser-genesis/src/colormatrix/const.ts", "../../../../phaser-genesis/src/config/batchsize/GetBatchSize.ts", "../../../../phaser-genesis/src/math/mat4/Mat4Ortho.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/SetUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/BindShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/MULTI_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateDepthBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/DeleteGLBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CompileShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL_CONST.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DeleteShaders.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateProgram.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniformSetter.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_VERT.ts", "../../../../phaser-genesis/node_modules/bitecs/src/Constants.js", "../../../../phaser-genesis/node_modules/bitecs/src/Storage.js", "../../../../phaser-genesis/node_modules/bitecs/src/Util.js", "../../../../phaser-genesis/node_modules/bitecs/src/Serialize.js", "../../../../phaser-genesis/node_modules/bitecs/src/Entity.js", "../../../../phaser-genesis/node_modules/bitecs/src/Query.js", "../../../../phaser-genesis/node_modules/bitecs/src/Component.js", "../../../../phaser-genesis/node_modules/bitecs/src/World.js", "../../../../phaser-genesis/node_modules/bitecs/src/System.js", "../../../../phaser-genesis/node_modules/bitecs/src/index.js", "../../../../phaser-genesis/src/textures/UpdateFrameUVs.ts", "../../../../phaser-genesis/src/textures/Frame.ts", "../../../../phaser-genesis/src/GameObjectWorld.ts", "../../../../phaser-genesis/src/textures/SetFrameSize.ts", "../../../../phaser-genesis/src/textures/Texture.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/SetShaderFromConfig.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/Shader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/MultiTextureQuadShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ResetTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultWebGLTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/SingleTextureQuadShader.ts", "../../../../phaser-genesis/src/components/transform/Transform2DComponent.ts", "../../../../phaser-genesis/src/components/transform/AddTransform2DComponent.ts", "../../../../phaser-genesis/src/utils/NOOP.ts", "../../../../phaser-genesis/src/math/mat4/Matrix4.ts", "../../../../phaser-genesis/src/components/transform/SetBounds.ts", "../../../../phaser-genesis/src/components/dirty/DirtyComponent.ts", "../../../../phaser-genesis/src/GameInstance.ts", "../../../../phaser-genesis/src/components/hierarchy/HierarchyComponent.ts", "../../../../phaser-genesis/src/components/hierarchy/GetParentID.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyChildCache.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyChildTransform.ts", "../../../../phaser-genesis/src/components/permissions/PermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/WillCacheChildren.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyParents.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyTransform.ts", "../../../../phaser-genesis/src/components/transform/UpdateExtent.ts", "../../../../phaser-genesis/src/components/transform/Size.ts", "../../../../phaser-genesis/src/camera/BaseCamera.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyTransform.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyTransform.ts", "../../../../phaser-genesis/src/camera/StaticCamera.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/VertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/RenderPass.ts", "../../../../phaser-genesis/src/components/color/CompareColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetColor.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetWebGLTexture.ts", "../../../../phaser-genesis/src/textures/WhiteTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Start.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/UnbindTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Draw.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Flush.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/End.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/GetCompressedTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/GetRGBArray.ts", "../../../../phaser-genesis/src/config/webglcontext/GetWebGLContext.ts", "../../../../phaser-genesis/src/renderer/RendererInstance.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRendererInstance.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRenderer.ts", "../../../../phaser-genesis/src/config/webgl/WebGL.ts", "../../../../phaser-genesis/src/config/webglcontext/SetWebGLContext.ts", "../../../../phaser-genesis/src/components/hierarchy/GetLastChildID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetNumChildren.ts", "../../../../phaser-genesis/src/display/IsValidParent.ts", "../../../../phaser-genesis/src/components/hierarchy/SetNextSiblingID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetPreviousSiblingID.ts", "../../../../phaser-genesis/src/components/hierarchy/LinkSiblings.ts", "../../../../phaser-genesis/src/components/hierarchy/GetFirstChildID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetNextSiblingID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetPreviousSiblingID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetLastChildID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetFirstChildID.ts", "../../../../phaser-genesis/src/components/hierarchy/AddHierarchyComponent.ts", "../../../../phaser-genesis/src/components/hierarchy/ClearSiblings.ts", "../../../../phaser-genesis/src/components/hierarchy/DecreaseNumChildren.ts", "../../../../phaser-genesis/src/gameobjects/GameObjectCache.ts", "../../../../phaser-genesis/src/components/hierarchy/GetWorldID.ts", "../../../../phaser-genesis/src/components/hierarchy/ClearWorldAndParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/MoveNext.ts", "../../../../phaser-genesis/src/components/hierarchy/DepthFirstSearchFromParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetChildIDsFromParent.ts", "../../../../phaser-genesis/src/components/hierarchy/GetChildrenFromParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetParentGameObject.ts", "../../../../phaser-genesis/src/components/hierarchy/GetWorldFromID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetWorldFromParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/HasChildren.ts", "../../../../phaser-genesis/src/components/permissions/GetVisibleChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillRenderChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillUpdateChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/MoveNextUpdatable.ts", "../../../../phaser-genesis/src/components/hierarchy/SetNumChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/RelinkChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/RemoveChildID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetWorldID.ts", "../../../../phaser-genesis/src/components/hierarchy/RemoveWorldTag.ts", "../../../../phaser-genesis/src/components/hierarchy/SetParentID.ts", "../../../../phaser-genesis/src/components/permissions/WillTransformChildren.ts", "../../../../phaser-genesis/src/components/transform/SetRootTransform.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyChildColor.ts", "../../../../phaser-genesis/src/components/hierarchy/SetWorldTag.ts", "../../../../phaser-genesis/src/components/hierarchy/SetAndUpdateParent.ts", "../../../../phaser-genesis/src/components/hierarchy/RemoveChildIDFromCurrentParent.ts", "../../../../phaser-genesis/src/display/AddChild.ts", "../../../../phaser-genesis/src/display/RemoveChildrenBetween.ts", "../../../../phaser-genesis/src/display/DestroyChildren.ts", "../../../../phaser-genesis/src/components/color/ColorComponent.ts", "../../../../phaser-genesis/src/components/color/AddColorComponent.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyColor.ts", "../../../../phaser-genesis/src/components/dirty/AddDirtyComponent.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyChildColor.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyChildTransform.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyColor.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyWorldTransform.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyChildCache.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyChildColor.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyChildTransform.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyColor.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyDisplayList.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyWorldTransform.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyWorldTransform.ts", "../../../../phaser-genesis/src/components/dirty/WillUpdateTransform.ts", "../../../../phaser-genesis/src/components/permissions/SetWillColorChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillColorChildren.ts", "../../../../phaser-genesis/src/components/color/Color.ts", "../../../../phaser-genesis/src/components/permissions/AddPermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/GetVisible.ts", "../../../../phaser-genesis/src/display/ReparentChildren.ts", "../../../../phaser-genesis/src/components/permissions/SetVisible.ts", "../../../../phaser-genesis/src/components/permissions/SetVisibleChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillRender.ts", "../../../../phaser-genesis/src/gameobjects/GameObject.ts", "../../../../phaser-genesis/src/config/defaultorigin/GetDefaultOriginX.ts", "../../../../phaser-genesis/src/config/defaultorigin/GetDefaultOriginY.ts", "../../../../phaser-genesis/src/components/transform/Origin.ts", "../../../../phaser-genesis/src/components/transform/Position.ts", "../../../../phaser-genesis/src/components/transform/Scale.ts", "../../../../phaser-genesis/src/components/transform/UpdateAxisAligned.ts", "../../../../phaser-genesis/src/components/transform/Skew.ts", "../../../../phaser-genesis/src/gameobjects/container/Container.ts", "../../../../phaser-genesis/src/textures/TextureManagerInstance.ts", "../../../../phaser-genesis/src/textures/GetTexture.ts", "../../../../phaser-genesis/src/display/RemoveChild.ts", "../../../../phaser-genesis/src/display/RemoveChildren.ts", "../../../../phaser-genesis/src/components/vertices/QuadVertexComponent.ts", "../../../../phaser-genesis/src/components/vertices/SetQuadColor.ts", "../../../../phaser-genesis/src/components/vertices/SetQuadPosition.ts", "../../../../phaser-genesis/src/components/vertices/SetUV.ts", "../../../../phaser-genesis/src/components/vertices/AddQuadVertex.ts", "../../../../phaser-genesis/src/components/vertices/SetQuadTextureIndex.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/BatchTexturedQuadBuffer.ts", "../../../../phaser-genesis/src/components/transform/SetExtent.ts", "../../../../phaser-genesis/src/textures/SetExtentFromFrame.ts", "../../../../phaser-genesis/src/textures/SetVertexUVsFromFrame.ts", "../../../../phaser-genesis/src/textures/SetFrame.ts", "../../../../phaser-genesis/src/textures/RemoveTextureFromGameObject.ts", "../../../../phaser-genesis/src/textures/ReturnTexture.ts", "../../../../phaser-genesis/src/textures/SetTexture.ts", "../../../../phaser-genesis/src/gameobjects/sprite/Sprite.ts", "../../../../phaser-genesis/src/math/Between.ts", "../../../../phaser-genesis/src/events/Emit.ts", "../../../../phaser-genesis/src/input/keyboard/Key.ts", "../../../../phaser-genesis/src/input/keyboard/keys/DownKey.ts", "../../../../phaser-genesis/src/events/EventEmitter.ts", "../../../../phaser-genesis/src/input/keyboard/Keyboard.ts", "../../../../phaser-genesis/src/input/keyboard/keys/LeftKey.ts", "../../../../phaser-genesis/src/events/EventInstance.ts", "../../../../phaser-genesis/src/events/Off.ts", "../../../../phaser-genesis/src/events/On.ts", "../../../../phaser-genesis/src/input/keyboard/keys/RightKey.ts", "../../../../phaser-genesis/src/input/keyboard/keys/UpKey.ts", "../../../../phaser-genesis/src/camera/controls/CursorKeyCameraControls.ts", "../../../../phaser-genesis/src/textures/AlphaTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/BatchTexturedQuad.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/BatchSingleQuad.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/DrawShaderQuad.ts", "../../../../phaser-genesis/src/config/banner/AddBanner.ts", "../../../../phaser-genesis/src/config/globalvar/AddGlobalVar.ts", "../../../../phaser-genesis/src/dom/AddToDOM.ts", "../../../../phaser-genesis/src/config/parent/AddToParent.ts", "../../../../phaser-genesis/src/config/renderer/CreateRenderer.ts", "../../../../phaser-genesis/src/config/scenes/GetScenes.ts", "../../../../phaser-genesis/src/events/Once.ts", "../../../../phaser-genesis/src/scenes/SceneManagerInstance.ts", "../../../../phaser-genesis/src/world/WorldList.ts", "../../../../phaser-genesis/src/scenes/SceneManager.ts", "../../../../phaser-genesis/src/scenes/CreateSceneManager.ts", "../../../../phaser-genesis/src/textures/CreateCanvas.ts", "../../../../phaser-genesis/src/textures/TextureManager.ts", "../../../../phaser-genesis/src/textures/CreateTextureManager.ts", "../../../../phaser-genesis/src/world/CreateWorldRenderData.ts", "../../../../phaser-genesis/src/dom/DOMContentLoaded.ts", "../../../../phaser-genesis/src/world/ResetWorldRenderData.ts", "../../../../phaser-genesis/src/scenes/GetConfigValue.ts", "../../../../phaser-genesis/src/scenes/Install.ts", "../../../../phaser-genesis/src/scenes/RenderStats.ts", "../../../../phaser-genesis/src/scenes/Scene.ts", "../../../../phaser-genesis/src/config/SetConfigDefaults.ts", "../../../../phaser-genesis/src/components/timer/Time.ts", "../../../../phaser-genesis/src/Game.ts", "../../../../phaser-genesis/src/loader/CreateFile.ts", "../../../../phaser-genesis/src/loader/IsAbsoluteURI.ts", "../../../../phaser-genesis/src/loader/GetURL.ts", "../../../../phaser-genesis/src/loader/RequestFile.ts", "../../../../phaser-genesis/src/loader/files/ImageFile.ts", "../../../../phaser-genesis/src/loader/files/LoadImageFile.ts", "../../../../phaser-genesis/src/components/transform/SetFixedTransform.ts", "../../../../phaser-genesis/src/components/permissions/SetWillTransformChildren.ts", "../../../../phaser-genesis/src/gameobjects/parallaxlayer/ParallaxLayer.ts", "../../../../phaser-genesis/src/components/permissions/HasCustomDisplayList.ts", "../../../../phaser-genesis/src/components/permissions/HasRenderableChildren.ts", "../../../../phaser-genesis/src/components/permissions/SetWillCacheChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillUpdate.ts", "../../../../phaser-genesis/src/components/transform/IsInView.ts", "../../../../phaser-genesis/src/components/transform/SetInViewFromBounds.ts", "../../../../phaser-genesis/src/components/transform/UpdateTransforms.ts", "../../../../phaser-genesis/src/components/transform/UpdateWorldTransform.ts", "../../../../phaser-genesis/src/textures/FlipFrameUVs.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/TextureShader.ts", "../../../../phaser-genesis/src/world/events/WorldAfterUpdateEvent.ts", "../../../../phaser-genesis/src/world/events/WorldBeforeUpdateEvent.ts", "../../../../phaser-genesis/src/world/events/WorldPostRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldPreRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldShutdownEvent.ts", "../../../../phaser-genesis/src/world/events/WorldUpdateEvent.ts", "../../../../phaser-genesis/src/scenes/events/SceneDestroyEvent.ts", "../../../../phaser-genesis/src/world/UpdateWorld.ts", "../../../../phaser-genesis/src/world/BaseWorld.ts", "../../../../phaser-genesis/src/world/RenderGLNode.ts", "../../../../phaser-genesis/src/world/ProcessNode.ts", "../../../../phaser-genesis/src/world/UpdateNode.ts", "../../../../phaser-genesis/src/world/PreRenderWorld.ts", "../../../../phaser-genesis/src/world/RenderGLWorld.ts", "../../../../phaser-genesis/src/camera/WorldCamera.ts", "../../../../phaser-genesis/src/world/World.ts", "../../src/textures/cube shader.ts"],
  "sourcesContent": ["export const CONFIG_DEFAULTS = {\n    AUTO: 'Auto',\n    BACKGROUND_COLOR: 'BackgroundColor',\n    BANNER: 'Banner',\n    BATCH_SIZE: 'BatchSize',\n    CANVAS_CONTEXT: 'CanvasContext',\n    CANVAS: 'Canvas',\n    DEFAULT_ORIGIN: 'DefaultOrigin',\n    GLOBAL_VAR: 'GlobalVar',\n    MAX_TEXTURES: 'MaxTextures',\n    PARENT: 'Parent',\n    RENDERER: 'Renderer',\n    SCENES: 'Scenes',\n    SIZE: 'Size',\n    WEBGL_CONTEXT: 'WebGLContext',\n    WEBGL: 'WebGL',\n    WORLD_SIZE: 'WorldSize',\n    WORLD_WIDTH: 'WorldWidth',\n    WORLD_HEIGHT: 'WorldHeight'\n};\n", "export const ConfigStore = new Map();\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBackgroundColor (color: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BACKGROUND_COLOR, color);\n}\n", "import { SetBackgroundColor } from './SetBackgroundColor';\n\nexport function BackgroundColor (color: number): () => void\n{\n    return (): void =>\n    {\n        SetBackgroundColor(color);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBanner (title: string = '', version: string = '', url: string = '', color: string = '#fff', background: string = 'linear-gradient(#3e0081 40%, #00bcc3)'): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BANNER, { title, version, url, color, background });\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBatchSize (size: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BATCH_SIZE, size);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBackgroundColor (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.BACKGROUND_COLOR);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetHeight (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).height;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetResolution (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).resolution;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWidth (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).width;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\n\nexport function SetRenderer (renderer: IRendererConstructor): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.RENDERER, renderer);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetDefaultOrigin (x: number = 0.5, y: number = x): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.DEFAULT_ORIGIN, { x, y });\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetGlobalVar (name: string): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.GLOBAL_VAR, name);\n}\n", "import { SetGlobalVar } from './SetGlobalVar';\n\nexport function GlobalVar (name: string): () => void\n{\n    return (): void =>\n    {\n        SetGlobalVar(name);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetMaxTextures (max: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.MAX_TEXTURES, max);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Attempts to get the target DOM element based on the given value, which can be either\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\n * can be found it will return a reference to the document.body.\n *\n * @function Phaser.DOM.GetElement\n * @since 4.0.0\n *\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\n * \n * @returns {HTMLElement} The HTML Element that was found.\n */\nexport function GetElement (target?: string | HTMLElement): HTMLElement\n{\n    let element: HTMLElement;\n\n    if (target)\n    {\n        if (typeof target === 'string')\n        {\n            //  Hopefully an element ID\n            element = document.getElementById(target);\n        }\n        else if (typeof target === 'object' && target.nodeType === 1)\n        {\n            //  Quick test for a HTMLElement\n            element = target;\n        }\n    }\n\n    if (!element)\n    {\n        element = document.body;\n    }\n\n    return element;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { GetElement } from '../../dom/GetElement';\n\nexport function SetParent (parentElement?: string | HTMLElement): void\n{\n    //  If this function was called and `null` *wasn't* given as the parent\n    //  then we try to figure it out, or fallback to the document body\n    if (parentElement)\n    {\n        ConfigStore.set(CONFIG_DEFAULTS.PARENT, GetElement(parentElement));\n    }\n}\n", "import { SetParent } from './SetParent';\n\nexport function Parent (parentElement?: string | HTMLElement): () => void\n{\n    return (): void =>\n    {\n        SetParent(parentElement);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\n\nexport function SetScenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.SCENES, [].concat(scenes));\n}\n", "import { ISceneConstructor } from '../../scenes/ISceneConstructor';\nimport { SetScenes } from './SetScenes';\n\nexport function Scenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): () => void\n{\n    return (): void =>\n    {\n        SetScenes(scenes);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetSize (width: number = 800, height: number = 600, resolution: number = 1): void\n{\n    if (resolution === 0)\n    {\n        resolution = window.devicePixelRatio;\n    }\n\n    ConfigStore.set(CONFIG_DEFAULTS.SIZE, { width, height, resolution });\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IShader } from '../shaders/IShader';\nimport { ShaderStackEntry } from './ShaderStackEntry';\n\nexport type IShaderStack =\n{\n    renderPass: IRenderPass;\n\n    stack: ShaderStackEntry[];\n    active: IShader;\n    default: ShaderStackEntry;\n    index: number;\n    init: <T extends IRenderPass> (renderPass: T) => void;\n};\n\nexport const ShaderStack: IShaderStack =\n{\n    renderPass: null,\n    stack: [],\n    active: null,\n    default: null,\n    index: 0,\n\n    init: <T extends IRenderPass> (renderPass: T): void =>\n    {\n        ShaderStack.renderPass = renderPass;\n    }\n};\n", "import { ShaderStack } from './ShaderStack';\nimport { ShaderStackEntry } from './ShaderStackEntry';\n\nexport function CurrentShader (): ShaderStackEntry\n{\n    return ShaderStack.stack[ShaderStack.index];\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\n\nexport type IVertexBufferStack =\n{\n    renderPass: IRenderPass;\n\n    stack: IVertexBuffer[];\n    active: IVertexBuffer;\n    default: IVertexBuffer;\n    index: number;\n    init: <T extends IRenderPass> (renderPass: T) => void;\n};\n\nexport const VertexBufferStack: IVertexBufferStack =\n{\n    renderPass: null,\n    stack: [],\n    active: null,\n    default: null,\n    index: 0,\n\n    init: <T extends IRenderPass> (renderPass: T): void =>\n    {\n        VertexBufferStack.renderPass = renderPass;\n    }\n};\n", "import { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { VertexBufferStack } from './VertexBufferStack';\n\nexport function CurrentVertexBuffer (): IVertexBuffer\n{\n    return VertexBufferStack.stack[VertexBufferStack.index];\n}\n", "import { FramebufferStackEntry } from './FramebufferStackEntry';\nimport { IRenderPass } from './IRenderPass';\n\nexport type IFramebufferStack =\n{\n    renderPass: IRenderPass;\n    stack: FramebufferStackEntry[];\n    active: WebGLFramebuffer;\n    default: FramebufferStackEntry;\n    index: number;\n    init: <T extends IRenderPass> (renderPass: T) => void;\n};\n\nexport const FramebufferStack: IFramebufferStack =\n{\n    renderPass: null,\n    stack: [],\n    active: null,\n    default: null,\n    index: 0,\n\n    init: <T extends IRenderPass> (renderPass: T): void =>\n    {\n        FramebufferStack.renderPass = renderPass;\n    }\n};\n", "import { FramebufferStack } from './FramebufferStack';\nimport { FramebufferStackEntry } from './FramebufferStackEntry';\n\nexport function CurrentFramebuffer (): FramebufferStackEntry\n{\n    return FramebufferStack.stack[FramebufferStack.index];\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Checks if a given point is inside a Rectangle's bounds.\n */\nexport function RectangleContains (rect: IRectangle, x: number, y: number): boolean\n{\n    if (rect.width <= 0 || rect.height <= 0)\n    {\n        return false;\n    }\n\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RectangleContains } from './RectangleContains';\n\nexport class Rectangle\n{\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    constructor (x: number = 0, y: number = 0, width: number = 0, height: number = 0)\n    {\n        this.set(x, y, width, height);\n    }\n\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n\n        return this;\n    }\n\n    contains (x: number, y: number): boolean\n    {\n        return RectangleContains(this, x, y);\n    }\n\n    set right (value: number)\n    {\n        if (value <= this.x)\n        {\n            this.width = 0;\n        }\n        else\n        {\n            this.width = value - this.x;\n        }\n    }\n\n    get right (): number\n    {\n        return this.x + this.width;\n    }\n\n    set bottom (value: number)\n    {\n        if (value <= this.y)\n        {\n            this.height = 0;\n        }\n        else\n        {\n            this.height = value - this.y;\n        }\n    }\n\n    get bottom (): number\n    {\n        return this.y + this.height;\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport type IViewportStack =\n{\n    renderPass: IRenderPass;\n\n    stack: Rectangle[];\n    active: Rectangle;\n    default: Rectangle;\n    index: number;\n    init: <T extends IRenderPass> (renderPass: T) => void;\n};\n\nexport const ViewportStack: IViewportStack =\n{\n    renderPass: null,\n    stack: [],\n    active: null,\n    default: null,\n    index: 0,\n\n    init: <T extends IRenderPass> (renderPass: T): void =>\n    {\n        ViewportStack.renderPass = renderPass;\n    }\n};\n", "import { Rectangle } from '../../../geom/rectangle/Rectangle';\nimport { ViewportStack } from './ViewportStack';\n\nexport function AddViewport (x: number = 0, y: number = 0, width: number = 0, height: number = 0): Rectangle\n{\n    const entry = new Rectangle(x, y, width, height);\n\n    ViewportStack.index++;\n\n    //  cursor already at the end of the stack, so we need to grow it\n    if (ViewportStack.index === ViewportStack.stack.length)\n    {\n        ViewportStack.stack.push(entry);\n    }\n    else\n    {\n        ViewportStack.stack[ViewportStack.index] = entry;\n    }\n\n    return entry;\n}\n", "import { Rectangle } from '../../../geom/rectangle/Rectangle';\nimport { ViewportStack } from './ViewportStack';\n\nexport function CurrentViewport (): Rectangle\n{\n    return ViewportStack.stack[ViewportStack.index];\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Compares the `x`, `y`, `width` and `height` properties of two rectangles.\n */\nexport function RectangleEquals (rect: IRectangle, toCompare: IRectangle): boolean\n{\n    return (\n        rect.x === toCompare.x &&\n        rect.y === toCompare.y &&\n        rect.width === toCompare.width &&\n        rect.height === toCompare.height\n    );\n}\n", "export let gl: WebGLRenderingContext;\n\nexport const GL =\n{\n    get: (): WebGLRenderingContext =>\n    {\n        return gl;\n    },\n\n    set: (context: WebGLRenderingContext | undefined): void =>\n    {\n        gl = context;\n    }\n};\n", "import { CurrentViewport } from './CurrentViewport';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\nimport { RectangleEquals } from '../../../geom/rectangle/RectangleEquals';\nimport { ViewportStack } from './ViewportStack';\nimport { gl } from '../GL';\n\nexport function BindViewport (viewport?: Rectangle): void\n{\n    if (!viewport)\n    {\n        viewport = CurrentViewport();\n    }\n\n    if (!ViewportStack.active || !RectangleEquals(ViewportStack.active, viewport))\n    {\n        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n\n        ViewportStack.active = viewport;\n    }\n}\n", "import { AddViewport } from './AddViewport';\nimport { BindViewport } from './BindViewport';\n\nexport function SetViewport (x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\n{\n    const entry = AddViewport(x, y, width, height);\n\n    BindViewport(entry);\n}\n", "import { CurrentFramebuffer } from './CurrentFramebuffer';\nimport { FramebufferStack } from './FramebufferStack';\nimport { FramebufferStackEntry } from './FramebufferStackEntry';\nimport { SetViewport } from './SetViewport';\nimport { gl } from '../GL';\n\nexport function BindFramebuffer (clear: boolean = true, entry?: FramebufferStackEntry): void\n{\n    if (!entry)\n    {\n        entry = CurrentFramebuffer();\n    }\n\n    const { framebuffer, viewport } = entry;\n\n    if (FramebufferStack.active !== framebuffer)\n    {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    }\n\n    if (clear)\n    {\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    if (viewport)\n    {\n        SetViewport(viewport.x, viewport.y, viewport.width, viewport.height);\n    }\n\n    FramebufferStack.active = framebuffer;\n}\n", "import { BindViewport } from './BindViewport';\nimport { ViewportStack } from './ViewportStack';\n\nexport function PopViewport (): void\n{\n    ViewportStack.index--;\n\n    BindViewport();\n}\n", "import { BindFramebuffer } from './BindFramebuffer';\nimport { CurrentFramebuffer } from './CurrentFramebuffer';\nimport { FramebufferStack } from './FramebufferStack';\nimport { PopViewport } from './PopViewport';\n\nexport function PopFramebuffer (): void\n{\n    if (CurrentFramebuffer().viewport)\n    {\n        PopViewport();\n    }\n\n    FramebufferStack.index--;\n\n    BindFramebuffer(false);\n}\n", "import { BlendModeStackEntry } from './BlendModeStackEntry';\nimport { IRenderPass } from './IRenderPass';\n\nexport type IBlendModeStack =\n{\n    renderPass: IRenderPass;\n    stack: BlendModeStackEntry[];\n    default: BlendModeStackEntry;\n    index: number;\n    init: <T extends IRenderPass> (renderPass: T) => void;\n};\n\nexport const BlendModeStack: IBlendModeStack =\n{\n    renderPass: null,\n    stack: [],\n    default: null,\n    index: 0,\n\n    init: <T extends IRenderPass> (renderPass: T): void =>\n    {\n        BlendModeStack.renderPass = renderPass;\n    }\n};\n", "import { ColorMatrixStackEntry } from './ColorMatrixStackEntry';\nimport { IRenderPass } from './IRenderPass';\n\nexport type IColorMatrixStack =\n{\n    renderPass: IRenderPass;\n\n    stack: ColorMatrixStackEntry[];\n    default: ColorMatrixStackEntry;\n    index: number;\n    init: <T extends IRenderPass> (renderPass: T) => void;\n};\n\nexport const ColorMatrixStack: IColorMatrixStack =\n{\n    renderPass: null,\n    stack: [],\n    default: null,\n    index: 0,\n\n    init: <T extends IRenderPass> (renderPass: T): void =>\n    {\n        ColorMatrixStack.renderPass = renderPass;\n    }\n};\n", "import { ColorMatrixStack } from './ColorMatrixStack';\nimport { ColorMatrixStackEntry } from './ColorMatrixStackEntry';\n\nexport function AddColorMatrix (colorMatrix: Float32Array, colorOffset: Float32Array): ColorMatrixStackEntry\n{\n    const entry = { colorMatrix, colorOffset };\n\n    ColorMatrixStack.index++;\n\n    //  cursor already at the end of the stack, so we need to grow it\n    if (ColorMatrixStack.index === ColorMatrixStack.stack.length)\n    {\n        ColorMatrixStack.stack.push(entry);\n    }\n    else\n    {\n        ColorMatrixStack.stack[ColorMatrixStack.index] = entry;\n    }\n\n    return entry;\n}\n", "import { FramebufferStack } from './FramebufferStack';\nimport { FramebufferStackEntry } from './FramebufferStackEntry';\nimport { IRectangle } from '../../../geom/rectangle/IRectangle';\n\nexport function AddFramebuffer <T extends IRectangle> (framebuffer: WebGLFramebuffer, viewport?: T): FramebufferStackEntry\n{\n    const entry = { framebuffer, viewport };\n\n    FramebufferStack.index++;\n\n    //  cursor already at the end of the stack, so we need to grow it\n    if (FramebufferStack.index === FramebufferStack.stack.length)\n    {\n        FramebufferStack.stack.push(entry);\n    }\n    else\n    {\n        FramebufferStack.stack[FramebufferStack.index] = entry;\n    }\n\n    return entry;\n}\n", "import { IShader } from '../shaders/IShader';\nimport { ShaderStack } from './ShaderStack';\nimport { ShaderStackEntry } from './ShaderStackEntry';\n\nexport function AddShader <T extends IShader> (shader: T, textureID?: number): ShaderStackEntry\n{\n    const entry = { shader, textureID };\n\n    ShaderStack.index++;\n\n    //  cursor already at the end of the stack, so we need to grow it\n    if (ShaderStack.index === ShaderStack.stack.length)\n    {\n        ShaderStack.stack.push(entry);\n    }\n    else\n    {\n        ShaderStack.stack[ShaderStack.index] = entry;\n    }\n\n    return entry;\n}\n", "import { CurrentVertexBuffer } from '../renderpass/CurrentVertexBuffer';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { gl } from '../GL';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function SetAttributes <T extends IShader> (shader: T, renderPass: IRenderPass): void\n{\n    if (shader.program)\n    {\n        //  stride = vertexByteSize\n        const stride = CurrentVertexBuffer().vertexByteSize;\n\n        shader.attributes.forEach(attrib =>\n        {\n            gl.vertexAttribPointer(attrib.index, attrib.size, attrib.type, attrib.normalized, stride, attrib.offset);\n        });\n    }\n}\n", "import { CurrentShader } from './CurrentShader';\nimport { SetAttributes } from '../shaders/SetAttributes';\nimport { ShaderStack } from './ShaderStack';\nimport { ShaderStackEntry } from './ShaderStackEntry';\n\nexport function BindShaderEntry (entry?: ShaderStackEntry): void\n{\n    if (!entry)\n    {\n        entry = CurrentShader();\n    }\n\n    if (!entry.shader.isActive)\n    {\n        const success = entry.shader.bind(ShaderStack.renderPass, entry.textureID);\n\n        if (success)\n        {\n            SetAttributes(entry.shader, ShaderStack.renderPass);\n\n            if (ShaderStack.active && ShaderStack.active !== entry.shader)\n            {\n                ShaderStack.active.isActive = false;\n            }\n\n            ShaderStack.active = entry.shader;\n        }\n    }\n}\n", "import { BindShaderEntry } from './BindShaderEntry';\nimport { ShaderStack } from './ShaderStack';\n\nexport function BindDefaultShader (): void\n{\n    ShaderStack.index = 0;\n\n    BindShaderEntry(ShaderStack.default);\n}\n", "import { CurrentShader } from './CurrentShader';\nimport { Flush } from './Flush';\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\n\nexport function SetCamera (renderPass: IRenderPass, camera: IBaseCamera): void\n{\n    if (renderPass.current2DCamera !== camera)\n    {\n        Flush(renderPass);\n\n        renderPass.current2DCamera = camera;\n        renderPass.cameraMatrix = camera.getMatrix();\n    }\n\n    if (camera.isDirty)\n    {\n        CurrentShader().shader.bind(renderPass);\n    }\n}\n", "import { BindDefaultShader } from './BindDefaultShader';\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\nimport { SetCamera } from './SetCamera';\n\n//  Call at the start of each World rendering\n\nexport function Begin (renderPass: IRenderPass, camera: IBaseCamera): void\n{\n    BindDefaultShader();\n\n    SetCamera(renderPass, camera);\n}\n", "import { BlendModeStack } from './BlendModeStack';\nimport { BlendModeStackEntry } from './BlendModeStackEntry';\n\nexport function CurrentBlendMode (): BlendModeStackEntry\n{\n    return BlendModeStack.stack[BlendModeStack.index];\n}\n", "import { BlendModeStackEntry } from './BlendModeStackEntry';\nimport { CurrentBlendMode } from './CurrentBlendMode';\nimport { gl } from '../GL';\n\nexport function BindBlendMode (entry?: BlendModeStackEntry): void\n{\n    if (!entry)\n    {\n        entry = CurrentBlendMode();\n    }\n\n    if (entry.enable)\n    {\n        if (!gl.isEnabled(gl.BLEND))\n        {\n            gl.enable(gl.BLEND);\n\n            gl.blendFuncSeparate(entry.srcRGB, entry.dstRGB, entry.srcAlpha, entry.dstAlpha);\n        }\n    }\n    else\n    {\n        gl.disable(gl.BLEND);\n    }\n}\n", "import { ColorMatrixStack } from './ColorMatrixStack';\nimport { ColorMatrixStackEntry } from './ColorMatrixStackEntry';\n\nexport function CurrentColorMatrix (): ColorMatrixStackEntry\n{\n    return ColorMatrixStack.stack[ColorMatrixStack.index];\n}\n", "import { IShader } from './IShader';\n\nexport function SetUniform <T extends IShader> (shader: T, key: string, value: unknown): void\n{\n    const uniforms = shader.uniforms;\n\n    if (uniforms.has(key))\n    {\n        uniforms.set(key, value);\n\n        if (shader.isActive)\n        {\n            const setter = shader.uniformSetters.get(key);\n\n            setter(value);\n        }\n    }\n}\n", "import { ColorMatrixStack } from './ColorMatrixStack';\nimport { ColorMatrixStackEntry } from './ColorMatrixStackEntry';\nimport { CurrentColorMatrix } from './CurrentColorMatrix';\nimport { CurrentShader } from './CurrentShader';\nimport { Flush } from './Flush';\nimport { SetUniform } from '../shaders/SetUniform';\n\nexport function BindColorMatrix (entry?: ColorMatrixStackEntry): void\n{\n    if (!entry)\n    {\n        entry = CurrentColorMatrix();\n    }\n\n    const shader = CurrentShader().shader;\n\n    Flush(ColorMatrixStack.renderPass);\n\n    SetUniform(shader, 'uColorMatrix', entry.colorMatrix);\n    SetUniform(shader, 'uColorOffset', entry.colorOffset);\n}\n", "import { BindBlendMode } from './BindBlendMode';\nimport { BlendModeStack } from './BlendModeStack';\n\nexport function BindDefaultBlendMode (): void\n{\n    BlendModeStack.index = 0;\n\n    BindBlendMode(BlendModeStack.default);\n}\n", "import { BindColorMatrix } from './BindColorMatrix';\nimport { ColorMatrixStack } from './ColorMatrixStack';\n\nexport function BindDefaultColorMatrix (): void\n{\n    ColorMatrixStack.index = 0;\n\n    BindColorMatrix(ColorMatrixStack.default);\n}\n", "import { BindFramebuffer } from './BindFramebuffer';\nimport { FramebufferStack } from './FramebufferStack';\n\nexport function BindDefaultFramebuffer (): void\n{\n    FramebufferStack.index = 0;\n\n    BindFramebuffer(false, FramebufferStack.default);\n}\n", "import { CurrentVertexBuffer } from './CurrentVertexBuffer';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { VertexBufferStack } from './VertexBufferStack';\nimport { gl } from '../GL';\n\nexport function BindVertexBuffer (buffer?: IVertexBuffer): void\n{\n    if (!buffer)\n    {\n        buffer = CurrentVertexBuffer();\n    }\n\n    if (!buffer.isBound)\n    {\n        const indexBuffer = (buffer.indexed) ? buffer.indexBuffer : null;\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer);\n\n        buffer.isBound = true;\n\n        if (VertexBufferStack.active && VertexBufferStack.active !== buffer)\n        {\n            VertexBufferStack.active.isBound = false;\n        }\n\n        VertexBufferStack.active = buffer;\n    }\n}\n", "import { BindVertexBuffer } from './BindVertexBuffer';\nimport { VertexBufferStack } from './VertexBufferStack';\n\nexport function BindDefaultVertexBuffer (): void\n{\n    VertexBufferStack.index = 0;\n\n    BindVertexBuffer(VertexBufferStack.default);\n}\n", "import { BindViewport } from './BindViewport';\nimport { ViewportStack } from './ViewportStack';\n\nexport function BindDefaultViewport (): void\n{\n    ViewportStack.index = 0;\n\n    BindViewport(ViewportStack.default);\n}\n", "import { ITexture } from '../../../textures/ITexture';\nimport { gl } from '../GL';\n\n//  Directly bind a texture to an index slot\nexport function BindWebGLTexture <T extends ITexture> (texture: T, index: number = 1): void\n{\n    const binding = texture.binding;\n\n    binding.bind(index);\n\n    gl.activeTexture(gl.TEXTURE0 + index);\n    gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\n\nexport type ITextureStack =\n{\n    renderPass: IRenderPass;\n    textures: Map<number, ITexture>;\n    tempTextures: Map<number, WebGLTexture>;\n    textureIndex: number[];\n    maxTextures: number;\n    init: <T extends IRenderPass> (renderPass: T) => void;\n};\n\nexport const TextureStack: ITextureStack =\n{\n    renderPass: null,\n    textures: null,\n    tempTextures: null,\n    textureIndex: [],\n    maxTextures: 0,\n\n    init: <T extends IRenderPass> (renderPass: T): void =>\n    {\n        TextureStack.renderPass = renderPass;\n    }\n};\n", "import { TextureStack } from './TextureStack';\n\nexport function ClearWebGLTextures (): void\n{\n    TextureStack.textures.forEach(texture =>\n    {\n        if (texture)\n        {\n            texture.binding.unbind();\n        }\n    });\n\n    TextureStack.textures.clear();\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetMaxTextures (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.MAX_TEXTURES);\n}\n", "import { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\nimport { SetMaxTextures } from '../../../config/maxtextures/SetMaxTextures';\nimport { gl } from '../GL';\n\n//  As per the WebGL spec, the browser should always support at least 8 texture units\n//  However, the user can set this to any value they like (lower than this)\n\nexport function CreateTempTextures (): Array<[ number, WebGLTexture ]>\n{\n    //  Note: This is the maximum number of TIUs that a _fragment_ shader supports\n    //  https://www.khronos.org/opengl/wiki/Common_Mistakes#Texture_Unit\n    let maxGPUTextures: number = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    let maxCombinedGPUTextures: number = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\n    console.log('MAX GPU', maxGPUTextures, 'MAX COMBINED', maxCombinedGPUTextures);\n\n    const maxConfigTextures = GetMaxTextures();\n\n    if (maxConfigTextures === 0 || maxConfigTextures > maxGPUTextures)\n    {\n        //  Insert gpu limit into config value\n        SetMaxTextures(maxGPUTextures);\n    }\n    else\n    {\n        maxGPUTextures = maxConfigTextures;\n    }\n\n    const textures: Array<[ number, WebGLTexture ]> = [];\n\n    //  Create temp textures to stop WebGL errors on mac os\n    for (let i: number = 0; i < maxGPUTextures; i++)\n    {\n        const tempTexture = gl.createTexture();\n\n        gl.activeTexture(gl.TEXTURE0 + i);\n\n        gl.bindTexture(gl.TEXTURE_2D, tempTexture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([ 0, 0, 255, 255 ]));\n\n        textures.push([ i, tempTexture ]);\n    }\n\n    return textures;\n}\n", "import { BufferEntry } from '../draw/BufferEntry';\nimport { CurrentVertexBuffer } from './CurrentVertexBuffer';\nimport { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\n\nconst bufferEntry: BufferEntry = {\n    buffer: null,\n    F32: null,\n    offset: 0\n};\n\nexport function GetVertexBufferEntry (renderPass: IRenderPass, addToCount: number = 0): BufferEntry\n{\n    const buffer = CurrentVertexBuffer();\n\n    //  If batch cannot take the size of this entry, flush it first\n    if (renderPass.count + addToCount >= buffer.batchSize)\n    {\n        Flush(renderPass);\n    }\n\n    bufferEntry.buffer = buffer;\n    bufferEntry.F32 = buffer.vertexViewF32;\n    bufferEntry.offset = renderPass.count * buffer.entryElementSize;\n\n    renderPass.count += addToCount;\n\n    return bufferEntry;\n}\n", "import { BindColorMatrix } from './BindColorMatrix';\nimport { ColorMatrixStack } from './ColorMatrixStack';\n\nexport function PopColorMatrix (): void\n{\n    ColorMatrixStack.index--;\n\n    BindColorMatrix();\n}\n", "import { Color } from '../../../components/color/Color';\nimport { IRenderPass } from './IRenderPass';\nimport { PopColorMatrix } from './PopColorMatrix';\n\nexport function PopColor <T extends IRenderPass> (renderPass: T, color: Color): void\n{\n    if (color.colorMatrixEnabled && color.willColorChildren)\n    {\n        PopColorMatrix();\n    }\n}\n", "import { BindShaderEntry } from './BindShaderEntry';\nimport { ShaderStack } from './ShaderStack';\n\nexport function PopShader (): void\n{\n    ShaderStack.index--;\n\n    BindShaderEntry();\n}\n", "import { IGLTextureBindingConfig } from './webgl1/textures/IGLTextureBindingConfig';\nimport { ITexture } from '../textures/ITexture';\n\nexport type BindingQueueEntry = {\n    texture: ITexture,\n    glConfig: IGLTextureBindingConfig\n};\n\nconst queue: BindingQueueEntry[] = [];\n\nexport const BindingQueue =\n{\n    add: (texture: ITexture, glConfig?: IGLTextureBindingConfig): void =>\n    {\n        queue.push({ texture, glConfig });\n    },\n\n    get: (): BindingQueueEntry[] =>\n    {\n        return queue;\n    },\n\n    clear: (): void =>\n    {\n        queue.length = 0;\n    }\n};\n", "import { gl } from '../GL';\n\nexport function CreateFramebuffer (texture: WebGLTexture, attachment?: GLenum): WebGLFramebuffer\n{\n    if (!attachment)\n    {\n        attachment = gl.COLOR_ATTACHMENT0;\n    }\n\n    const framebuffer = gl.createFramebuffer();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return framebuffer;\n}\n", "import { IGLMipmapType } from './IGLTextureBindingConfig';\nimport { IGLTextureBinding } from './IGLTextureBinding';\nimport { gl } from '../GL';\n\nexport function CreateGLTexture <T extends IGLTextureBinding> (binding: T, mipmaps?: IGLMipmapType[]): WebGLTexture\n{\n    const { generateMipmap, minFilter, parent, compressed, internalFormat, flipY, unpackPremultiplyAlpha, magFilter, wrapS, wrapT, isPOT } = binding;\n\n    const source = parent.image;\n\n    let width = parent.width;\n    let height = parent.height;\n\n    const glTexture: WebGLTexture = gl.createTexture();\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\n\n    if (source)\n    {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n\n        width = source.width;\n        height = source.height;\n    }\n    else if (compressed && mipmaps)\n    {\n        for (let i = 0; i < mipmaps.length; i++)\n        {\n            gl.compressedTexImage2D(gl.TEXTURE_2D, i, internalFormat, mipmaps[i].width, mipmaps[i].height, 0, mipmaps[i].data);\n        }\n    }\n    else\n    {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    }\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n\n    if (generateMipmap && isPOT)\n    {\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    binding.texture = glTexture;\n\n    return glTexture;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteFramebuffer (framebuffer: WebGLFramebuffer): void\n{\n    if (gl && gl.isFramebuffer(framebuffer))\n    {\n        gl.deleteFramebuffer(framebuffer);\n    }\n}\n", "import { gl } from '../GL';\n\nexport function DeleteGLTexture (texture: WebGLTexture): void\n{\n    if (gl.isTexture(texture))\n    {\n        gl.deleteTexture(texture);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if the given `width` and `height` are a power of two.\n * Useful for checking texture dimensions.\n *\n * @function Phaser.Math.Pow2.IsSize\n * @since 3.0.0\n *\n * @param {number} width - The width.\n * @param {number} height - The height.\n *\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\n */\nexport function IsSizePowerOfTwo (width: number, height: number): boolean\n{\n    if (width < 1 || height < 1)\n    {\n        return false;\n    }\n\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\n}\n", "import { gl } from '../GL';\n\nexport function SetGLTextureFilterMode (texture: WebGLTexture, linear: boolean = true): void\n{\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\n}\n", "import { IGLTextureBinding } from './IGLTextureBinding';\nimport { gl } from '../GL';\n\nexport function UpdateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\n{\n    const source = binding.parent.image;\n    const width = source.width;\n    const height = source.height;\n\n    if (width > 0 && height > 0)\n    {\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n    }\n\n    return binding.texture;\n}\n", "import { IGLMipmapType, IGLTextureBindingConfig } from './IGLTextureBindingConfig';\n\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\nimport { CreateGLTexture } from './CreateGLTexture';\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\nimport { DeleteGLTexture } from './DeleteGLTexture';\nimport { IGLTextureBinding } from './IGLTextureBinding';\nimport { ITexture } from '../../../textures/ITexture';\nimport { IsSizePowerOfTwo } from '../../../math/pow2/IsSizePowerOfTwo';\nimport { SetGLTextureFilterMode } from './SetGLTextureFilterMode';\nimport { UpdateGLTexture } from './UpdateGLTexture';\nimport { gl } from '../GL';\n\nexport class GLTextureBinding implements IGLTextureBinding\n{\n    parent: ITexture;\n\n    texture: WebGLTexture;\n    framebuffer: WebGLFramebuffer;\n    depthbuffer: WebGLRenderbuffer;\n\n    format: string;\n    internalFormat: GLenum;\n    compressed: boolean;\n    mipmaps: IGLMipmapType[];\n\n    isBound: boolean = false;\n    textureUnit: number = 0;\n\n    unpackPremultiplyAlpha: boolean = true;\n\n    minFilter: GLenum;\n    magFilter: GLenum;\n    wrapS: GLenum;\n    wrapT: GLenum;\n\n    flipY: boolean = false;\n    isPOT: boolean = false;\n    generateMipmap: boolean = false;\n\n    constructor (parent: ITexture, config: IGLTextureBindingConfig = {})\n    {\n        this.parent = parent;\n\n        this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\n\n        //  Add option to dump the mipmaps arrays after binding - but prevents context loss restoration\n\n        const {\n            mipmaps = null,\n            compressed = false,\n            format = 'IMG',\n            internalFormat = 0,\n            texture = null,\n            framebuffer = null,\n            createFramebuffer = false,\n            depthbuffer = null,\n            unpackPremultiplyAlpha = true,\n            minFilter = (this.isPOT) ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmap = this.isPOT,\n            flipY = false\n        } = config;\n\n        this.compressed = compressed;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.mipmaps = mipmaps;\n\n        //  If you don't set minFilter to LINEAR then the compressed textures don't work!\n        if (compressed)\n        {\n            this.minFilter = gl.LINEAR;\n        }\n        else\n        {\n            this.minFilter = minFilter;\n        }\n\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmap = generateMipmap;\n        this.flipY = flipY;\n        this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\n\n        if (texture)\n        {\n            this.texture = texture;\n        }\n        else\n        {\n            CreateGLTexture(this, mipmaps);\n        }\n\n        if (framebuffer)\n        {\n            this.framebuffer = framebuffer;\n        }\n        else if (createFramebuffer)\n        {\n            this.framebuffer = CreateFramebuffer(this.texture);\n        }\n\n        if (depthbuffer)\n        {\n            this.depthbuffer = depthbuffer;\n        }\n\n        parent.binding = this;\n    }\n\n    //  Needed?\n    setFilter (linear: boolean): void\n    {\n        if (this.texture)\n        {\n            SetGLTextureFilterMode(this.texture, linear);\n        }\n    }\n\n    create (): WebGLTexture\n    {\n        const texture = this.texture;\n\n        if (texture)\n        {\n            DeleteGLTexture(texture);\n        }\n\n        return CreateGLTexture(this);\n    }\n\n    update (): WebGLTexture\n    {\n        const texture = this.texture;\n\n        if (!texture)\n        {\n            return CreateGLTexture(this);\n        }\n        else\n        {\n            return UpdateGLTexture(this);\n        }\n    }\n\n    bind (index: number): void\n    {\n        this.isBound = true;\n        this.textureUnit = index;\n    }\n\n    unbind (): void\n    {\n        this.isBound = false;\n        this.textureUnit = 0;\n    }\n\n    destroy (): void\n    {\n        this.unbind();\n\n        DeleteGLTexture(this.texture);\n        DeleteFramebuffer(this.framebuffer);\n\n        this.parent = null;\n        this.texture = null;\n        this.framebuffer = null;\n    }\n}\n", "import { BindingQueue } from '../../BindingQueue';\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\n\nexport function ProcessBindingQueue (): void\n{\n    const queue = BindingQueue.get();\n\n    queue.forEach(entry =>\n    {\n        const { texture, glConfig } = entry;\n\n        if (!texture.binding)\n        {\n            texture.binding = new GLTextureBinding(texture, glConfig);\n        }\n    });\n\n    BindingQueue.clear();\n}\n", "export const DEFAULT_COLOR_MATRIX = new Float32Array([ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ]);\nexport const DEFAULT_COLOR_OFFSET = new Float32Array(4);\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBatchSize (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.BATCH_SIZE);\n}\n", "import { Matrix4 } from './Matrix4';\n\n// Generates an orthogonal projection matrix with the given bounds\n\nexport function Mat4Ortho (matrix: Float32Array, left: number, right: number, bottom: number, top: number, near: number, far: number): void\n{\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    matrix.set([\n        -2 * lr,\n        0,\n        0,\n        0,\n        0,\n        -2 * bt,\n        0,\n        0,\n        0,\n        0,\n        2 * nf,\n        0,\n        (left + right) * lr,\n        (top + bottom) * bt,\n        (far + near) * nf,\n        1\n    ]);\n}\n", "import { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { gl } from '../GL';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function SetUniforms <T extends IShader> (shader: T, renderPass: IRenderPass): boolean\n{\n    if (!shader.program)\n    {\n        return false;\n    }\n\n    gl.useProgram(shader.program);\n\n    shader.isActive = true;\n\n    const uniforms = shader.uniforms;\n\n    for (const [ name, setter ] of shader.uniformSetters.entries())\n    {\n        setter(uniforms.get(name));\n    }\n\n    return true;\n}\n", "import { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { SetUniforms } from './SetUniforms';\n\nexport function BindShader <T extends IShader> (shader: T, renderPass: IRenderPass): boolean\n{\n    const uniforms = shader.uniforms;\n\n    uniforms.set('uProjectionMatrix', renderPass.projectionMatrix);\n    uniforms.set('uCameraMatrix', renderPass.cameraMatrix);\n\n    shader.updateUniforms(renderPass);\n\n    return SetUniforms(shader, renderPass);\n}\n", "export const MULTI_QUAD_FRAG =\n`#define SHADER_NAME MULTI_QUAD_FRAG\n#define numTextures %count%\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture[%count%];\nuniform mat4 uColorMatrix;\nuniform vec4 uColorOffset;\n\nvec4 getSampler (int index, vec2 uv)\n{\n    for (int i = 0; i < numTextures; ++i)\n    {\n        vec4 color = texture2D(uTexture[i], uv);\n\n        if (i == index)\n        {\n            return color * vec4(vTintColor.rgb * vTintColor.a, vTintColor.a);\n        }\n    }\n\n    //  Return black\n    return vec4(0);\n}\n\nvoid main (void)\n{\n    vec4 color = getSampler(int(vTextureId), vTextureCoord);\n\n    //  Un pre-mult alpha\n    if (color.a > 0.0)\n    {\n        color.rgb /= color.a;\n    }\n\n    vec4 result = color * uColorMatrix + (uColorOffset / 255.0);\n\n    //  Pre-mult alpha\n    result.rgb *= result.a;\n\n    gl_FragColor = vec4(result.rgb, result.a);\n}`;\n", "import { gl } from '../GL';\n\nexport function CreateDepthBuffer (framebuffer: WebGLFramebuffer, textureWidth: number, textureHeight: number): WebGLRenderbuffer\n{\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    const depthBuffer = gl.createRenderbuffer();\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\n\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureWidth, textureHeight);\n\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return depthBuffer;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteGLBuffer (buffer: WebGLBuffer): void\n{\n    if (gl.isBuffer(buffer))\n    {\n        gl.deleteBuffer(buffer);\n    }\n}\n", "import { gl } from '../GL';\n\nexport function CompileShader (source: string, type: GLenum): WebGLShader | null\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, source);\n\n    gl.compileShader(shader);\n\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (!status)\n    {\n        const info = gl.getShaderInfoLog(shader);\n\n        //  Adding line numbers idea borrowed from Gregg Tavares!\n        const sourceLines = source.split('\\n').map((line, index) =>\n        {\n            return `${index}: ${line}`;\n        });\n\n        console.error(`Error compiling shader: ${info}`, sourceLines.join('\\n'));\n\n        gl.deleteShader(shader);\n\n        return null;\n    }\n\n    return shader;\n}\n", "const BYTE                   = 0x1400;\nconst UNSIGNED_BYTE          = 0x1401;\nconst SHORT                  = 0x1402;\nconst UNSIGNED_SHORT         = 0x1403;\nconst INT                    = 0x1404;\nconst UNSIGNED_INT           = 0x1405;\nconst FLOAT                  = 0x1406;\nconst REPEAT                 = 0x2901;  // eslint-disable-line\nconst CLAMP_TO_EDGE          = 0x812F;\nconst MIRRORED_REPEAT        = 0x8370;  // eslint-disable-line\nconst NEAREST                = 0x2600;  // eslint-disable-line\nconst LINEAR                 = 0x2601;\nconst NEAREST_MIPMAP_NEAREST = 0x2700;  // eslint-disable-line\nconst LINEAR_MIPMAP_NEAREST  = 0x2701;  // eslint-disable-line\nconst NEAREST_MIPMAP_LINEAR  = 0x2702;  // eslint-disable-line\nconst LINEAR_MIPMAP_LINEAR   = 0x2703;  // eslint-disable-line\n\nexport {\n    BYTE,\n    UNSIGNED_BYTE,\n    SHORT,\n    UNSIGNED_SHORT,\n    INT,\n    UNSIGNED_INT,\n    FLOAT,\n    REPEAT,\n    CLAMP_TO_EDGE,\n    MIRRORED_REPEAT,\n    NEAREST,\n    LINEAR,\n    NEAREST_MIPMAP_NEAREST,\n    LINEAR_MIPMAP_NEAREST,\n    NEAREST_MIPMAP_LINEAR,\n    LINEAR_MIPMAP_LINEAR\n};\n", "import * as GL_CONST from '../GL_CONST';\n\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\nimport { gl } from '../GL';\n\nexport type ShaderAttributeEntry = {\n    size: number;\n    type?: number;\n    normalized?: boolean;\n    stride?: number;\n};\n\nexport function CreateAttributes (program: WebGLProgram, attribs: Record<string, ShaderAttributeEntry>): Map<string, IVertexAttribPointer>\n{\n    const attributes = new Map();\n\n    const defaultSettings: ShaderAttributeEntry =\n    {\n        size: 1,\n        type: GL_CONST.FLOAT,\n        normalized: false,\n        stride: 0\n    };\n\n    let offset = 0;\n\n    for (const [ name, entry ] of Object.entries(attribs))\n    {\n        const index = gl.getAttribLocation(program, name);\n\n        if (index !== -1)\n        {\n            gl.enableVertexAttribArray(index);\n\n            const {\n\n                size = defaultSettings.size,\n                type = defaultSettings.type,\n                normalized = defaultSettings.normalized,\n                stride = defaultSettings.stride\n\n            } = entry;\n\n            attributes.set(name, { index, size, type, normalized, stride, offset });\n\n            //  Default value as used by FLOAT, UNSIGNED_INT and INT\n            let typeSize = 4;\n\n            if (type === GL_CONST.UNSIGNED_SHORT || type === GL_CONST.SHORT)\n            {\n                typeSize = 2;\n            }\n            else if (type === GL_CONST.UNSIGNED_BYTE || type === GL_CONST.BYTE)\n            {\n                typeSize = 1;\n            }\n\n            offset += size * typeSize;\n        }\n    }\n\n    return attributes;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteShaders (...shaders: WebGLShader[]): void\n{\n    shaders.forEach(shader =>\n    {\n        gl.deleteShader(shader);\n    });\n}\n", "import { DeleteShaders } from './DeleteShaders';\nimport { gl } from '../GL';\n\nexport function CreateProgram (...shaders: WebGLShader[]): WebGLProgram\n{\n    const program = gl.createProgram();\n\n    shaders.forEach(shader =>\n    {\n        gl.attachShader(program, shader);\n    });\n\n    gl.linkProgram(program);\n\n    const status = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n    if (!status)\n    {\n        const info = gl.getProgramInfoLog(program);\n\n        console.error(`Error linking program: ${info}`);\n\n        gl.deleteProgram(program);\n\n        DeleteShaders(...shaders);\n\n        return null;\n    }\n\n    return program;\n}\n", "import { gl } from '../GL';\n\nexport type FloatSetter = (v: number) => void;\nexport type F32Setter = (v: Float32List) => void;\nexport type I32Setter = (v: Int32List) => void;\n\nexport function CreateUniformSetter (uniform: WebGLActiveInfo, location: WebGLUniformLocation, isArray: boolean = false): FloatSetter | F32Setter | I32Setter\n{\n    switch (uniform.type)\n    {\n        case gl.INT:\n        case gl.BOOL:\n        {\n            if (isArray)\n            {\n                return (v: Int32List): void =>\n                {\n                    gl.uniform1iv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1i(location, v);\n                };\n            }\n        }\n\n        case gl.INT_VEC2:\n        case gl.BOOL_VEC2:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform2iv(location, v);\n            };\n        }\n\n        case gl.INT_VEC3:\n        case gl.BOOL_VEC3:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform3iv(location, v);\n            };\n        }\n\n        case gl.INT_VEC4:\n        case gl.BOOL_VEC4:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform4iv(location, v);\n            };\n        }\n\n        case gl.FLOAT:\n        {\n            if (isArray)\n            {\n                return (v: Float32List): void =>\n                {\n                    gl.uniform1fv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1f(location, v);\n                };\n            }\n        }\n\n        case gl.FLOAT_VEC2:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform2fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_VEC3:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform3fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_VEC4:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform4fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_MAT2:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix2fv(location, false, v);\n            };\n        }\n\n        case gl.FLOAT_MAT3:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix3fv(location, false, v);\n            };\n        }\n\n        case gl.FLOAT_MAT4:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix4fv(location, false, v);\n            };\n        }\n\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n        {\n            if (uniform.size > 1)\n            {\n                return (v: Int32List): void =>\n                {\n                    gl.uniform1iv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1i(location, v);\n                };\n            }\n        }\n    }\n}\n", "import { CreateUniformSetter } from './CreateUniformSetter';\nimport { gl } from '../GL';\n\nexport function CreateUniforms (program: WebGLProgram): Map<string, Function>\n{\n    const uniforms = new Map();\n\n    const total = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < total; i++)\n    {\n        const uniform = gl.getActiveUniform(program, i);\n\n        let name = uniform.name;\n\n        if (name.startsWith('gl_') || name.startsWith('webgl_'))\n        {\n            //  Skip built-in uniforms\n            continue;\n        }\n\n        const location = gl.getUniformLocation(program, name);\n\n        if (location)\n        {\n            let isArray = false;\n\n            //  If uniform name has [0] at the end, remove it\n            if (name.endsWith('[0]'))\n            {\n                name = name.slice(0, -3);\n\n                isArray = (uniform.size > 1);\n            }\n\n            uniforms.set(name, CreateUniformSetter(uniform, location, isArray));\n        }\n    }\n\n    return uniforms;\n}\n", "import { CompileShader } from './CompileShader';\nimport { CreateAttributes } from './CreateAttributes';\nimport { CreateProgram } from './CreateProgram';\nimport { CreateUniforms } from './CreateUniforms';\nimport { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\nimport { IShader } from './IShader';\nimport { gl } from '../GL';\n\nexport function CreateShader <T extends IShader> (shader: T, fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): T\n{\n    const maxTextures = GetMaxTextures();\n\n    //  Replace %count% by default, as lots of shaders will need it (and it won't hurt if it doesn't exist)\n    fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\n\n    const fragmentShader = CompileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n    const vertexShader = CompileShader(vertexShaderSource, gl.VERTEX_SHADER);\n\n    if (!fragmentShader || !vertexShader)\n    {\n        return;\n    }\n\n    const program = CreateProgram(fragmentShader, vertexShader);\n\n    if (!program)\n    {\n        return;\n    }\n\n    const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n    gl.useProgram(program);\n\n    shader.program = program;\n\n    shader.uniformSetters = CreateUniforms(program);\n\n    shader.uniforms = new Map();\n\n    //  Copy starting values from the config object to the uniforms map but only if a setter exists\n    for (const [ key, value ] of Object.entries(uniforms))\n    {\n        if (shader.uniformSetters.has(key))\n        {\n            shader.uniforms.set(key, value);\n        }\n    }\n\n    shader.attributes = CreateAttributes(program, attribs);\n\n    gl.useProgram(currentProgram);\n\n    shader.isActive = false;\n\n    return shader;\n}\n", "import * as GL_CONST from '../GL_CONST';\n\nimport { ShaderAttributeEntry } from './CreateAttributes';\n\nexport const DefaultQuadAttributes: Record<string, ShaderAttributeEntry> =\n{\n    aVertexPosition: { size: 2 },\n    aTextureCoord: { size: 2 },\n    aTextureId: { size: 1 },\n    aTintColor: { size: 4 }\n};\n", "export const DefaultQuadUniforms: Record<string, Number | Float32List> =\n{\n    uProjectionMatrix: new Float32Array(16),\n    uCameraMatrix: new Float32Array(16),\n    uTexture: 0,\n    uColorMatrix: new Float32Array([\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    ]),\n    uColorOffset: new Float32Array(4)\n};\n", "export const SINGLE_QUAD_FRAG =\n`#define SHADER_NAME SINGLE_QUAD_FRAG\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\nuniform mat4 uColorMatrix;\nuniform vec4 uColorOffset;\n\nvoid main (void)\n{\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    //  Un pre-mult alpha\n    if (color.a > 0.0)\n    {\n        color.rgb /= color.a;\n    }\n\n    vec4 result = color * uColorMatrix + (uColorOffset / 255.0);\n\n    //  Pre-mult alpha\n    result.rgb *= result.a;\n\n    gl_FragColor = vec4(result.rgb, result.a);\n}`;\n", "export const SINGLE_QUAD_VERT =\n`#define SHADER_NAME SINGLE_QUAD_VERT\n\nprecision highp float;\n\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute float aTextureId;\nattribute vec4 aTintColor;\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uCameraMatrix;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nvoid main (void)\n{\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vTintColor = aTintColor;\n\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}`;\n", "export const TYPES_ENUM = {\n  i8: 'i8',\n  ui8: 'ui8',\n  ui8c: 'ui8c',\n  i16: 'i16',\n  ui16: 'ui16',\n  i32: 'i32',\n  ui32: 'ui32',\n  f32: 'f32',\n  f64: 'f64',\n  eid: 'eid',\n}\n\nexport const TYPES_NAMES = {\n  i8: 'Int8',\n  ui8: 'Uint8',\n  ui8c: 'Uint8Clamped',\n  i16: 'Int16',\n  ui16: 'Uint16',\n  i32: 'Int32',\n  ui32: 'Uint32',\n  eid: 'Uint32',\n  f32: 'Float32',\n  f64: 'Float64'\n}\n\nexport const TYPES = {\n  i8: Int8Array,\n  ui8: Uint8Array,\n  ui8c: Uint8ClampedArray,\n  i16: Int16Array,\n  ui16: Uint16Array,\n  i32: Int32Array,\n  ui32: Uint32Array,\n  f32: Float32Array,\n  f64: Float64Array,\n  eid: Uint32Array,\n}\n\nexport const UNSIGNED_MAX = {\n  uint8: 2**8,\n  uint16: 2**16,\n  uint32: 2**32\n}\n", "import { TYPES, TYPES_ENUM, TYPES_NAMES, UNSIGNED_MAX } from './Constants.js'\n// import { createAllocator } from './Allocator.js'\n\nconst roundToMultiple = mul => x => Math.ceil(x / mul) * mul\nconst roundToMultiple4 = roundToMultiple(4)\n\nexport const $storeRef = Symbol('storeRef')\nexport const $storeSize = Symbol('storeSize')\nexport const $storeMaps = Symbol('storeMaps')\nexport const $storeFlattened = Symbol('storeFlattened')\nexport const $storeBase = Symbol('storeBase')\nexport const $storeType = Symbol('storeType')\n\nexport const $storeArrayCounts = Symbol('storeArrayCount')\nexport const $storeSubarrays = Symbol('storeSubarrays')\nexport const $subarrayCursors = Symbol('subarrayCursors')\nexport const $subarray = Symbol('subarray')\nexport const $subarrayFrom = Symbol('subarrayFrom')\nexport const $subarrayTo = Symbol('subarrayTo')\nexport const $parentArray = Symbol('subStore')\nexport const $tagStore = Symbol('tagStore')\n\nexport const $queryShadow = Symbol('queryShadow')\nexport const $serializeShadow = Symbol('serializeShadow')\n\nexport const $indexType = Symbol('indexType')\nexport const $indexBytes = Symbol('indexBytes')\n\nexport const $isEidType = Symbol('isEidType')\n\nconst stores = {}\n\n// const alloc = createAllocator()\n\nexport const resize = (ta, size) => {\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\n  const newTa = new ta.constructor(newBuffer)\n  newTa.set(ta, 0)\n  return newTa\n}\n\nexport const createShadow = (store, key) => {\n  if (!ArrayBuffer.isView(store)) {\n    const shadowStore = store[$parentArray].slice(0).fill(0)\n    store[key] = store.map((_,eid) => {\n      const from = store[eid][$subarrayFrom]\n      const to = store[eid][$subarrayTo]\n      return shadowStore.subarray(from, to)\n    })\n  } else {\n    store[key] = store.slice(0).fill(0)\n  }\n}\n\nconst resizeSubarray = (metadata, store, size) => {\n  const cursors = metadata[$subarrayCursors]\n  let type = store[$storeType]\n  const length = store[0].length\n  const indexType =\n    length <= UNSIGNED_MAX.uint8\n      ? 'ui8'\n      : length <= UNSIGNED_MAX.uint16\n        ? 'ui16'\n        : 'ui32'\n\n  const arrayCount = metadata[$storeArrayCounts][type]\n  const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\n  \n  // // for threaded impl\n  // // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n  // // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n  // // const buffer = new SharedArrayBuffer(totalBytes)\n\n  const array = new TYPES[type](roundToMultiple4(summedLength * size))\n\n  // console.log(array.length, metadata[$storeSubarrays][type].length, type)\n\n  array.set(metadata[$storeSubarrays][type])\n  \n  metadata[$storeSubarrays][type] = array\n  \n  array[$indexType] = TYPES_NAMES[indexType]\n  array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n\n  // create buffer for type if it does not already exist\n  // if (!metadata[$storeSubarrays][type]) {\n  //   const arrayCount = metadata[$storeArrayCounts][type]\n  //   const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\n\n  //   // for threaded impl\n  //   // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n  //   // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n  //   // const buffer = new SharedArrayBuffer(totalBytes)\n\n  //   const array = new TYPES[type](roundToMultiple4(summedLength * size))\n\n  //   // console.log(`array of type ${type} has size of ${array.length}`)\n\n  //   metadata[$storeSubarrays][type] = array\n\n  //   array[$indexType] = TYPES_NAMES[indexType]\n  //   array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  // }\n\n  const start = cursors[type]\n  let end = 0\n  for (let eid = 0; eid < size; eid++) {\n    const from = cursors[type] + (eid * length)\n    const to = from + length\n\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\n    \n    store[eid][$subarrayFrom] = from\n    store[eid][$subarrayTo] = to\n    store[eid][$subarray] = true\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    \n    end = to\n  }\n\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n}\n\nconst resizeRecursive = (metadata, store, size) => {\n  Object.keys(store).forEach(key => {\n    const ta = store[key]\n    if (Array.isArray(ta)) {\n      // store[$storeSubarrays] = {}\n      // store[$subarrayCursors] = Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {})\n      resizeSubarray(metadata, ta, size)\n      store[$storeFlattened].push(ta)\n    } else if (ArrayBuffer.isView(ta)) {\n      store[key] = resize(ta, size)\n      store[$storeFlattened].push(store[key])\n    } else if (typeof ta === 'object') {\n      resizeRecursive(metadata, store[key], size)\n    }\n  })\n}\n\nexport const resizeStore = (store, size) => {\n  if (store[$tagStore]) return\n  store[$storeSize] = size\n  store[$storeFlattened].length = 0\n  Object.keys(store[$subarrayCursors]).forEach(k => {\n    store[$subarrayCursors][k] = 0\n  })\n  resizeRecursive(store, store, size)\n}\n\nexport const resetStore = store => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      ta.fill(0)\n    })\n    Object.keys(store[$storeSubarrays]).forEach(key => {\n      store[$storeSubarrays][key].fill(0)\n    })\n  }\n}\n\nexport const resetStoreFor = (store, eid) => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\n      else ta[eid].fill(0)\n    })\n  }\n}\n\n// const createTypeStore = (type, length) => {\n//   const store = alloc(type, length)\n//   store[$isEidType] = type === TYPES_ENUM.eid\n//   return store\n// }\nconst createTypeStore = (type, length) => {\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\n  const buffer = new ArrayBuffer(totalBytes)\n  const store = new TYPES[type](buffer)\n  store[$isEidType] = type === TYPES_ENUM.eid\n  return store\n}\n\nexport const parentArray = store => store[$parentArray]\n\nconst createArrayStore = (metadata, type, length) => {\n  const size = metadata[$storeSize]\n  const store = Array(size).fill(0)\n  store[$storeType] = type\n  store[$isEidType] = type === TYPES_ENUM.eid\n\n  const cursors = metadata[$subarrayCursors]\n  const indexType =\n    length < UNSIGNED_MAX.uint8\n      ? 'ui8'\n      : length < UNSIGNED_MAX.uint16\n        ? 'ui16'\n        : 'ui32'\n\n  if (!length) throw new Error('bitECS - Must define component array length')\n  if (!TYPES[type]) throw new Error(`bitECS - Invalid component array property type ${type}`)\n\n  // create buffer for type if it does not already exist\n  if (!metadata[$storeSubarrays][type]) {\n    const arrayCount = metadata[$storeArrayCounts][type]\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\n    \n    // for threaded impl\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n    // const buffer = new SharedArrayBuffer(totalBytes)\n\n    const array = new TYPES[type](roundToMultiple4(summedLength * size))\n\n    // console.log(`array of type ${type} has size of ${array.length}`)\n\n    metadata[$storeSubarrays][type] = array\n    \n    array[$indexType] = TYPES_NAMES[indexType]\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  }\n\n  // pre-generate subarrays for each eid\n  const start = cursors[type]\n  let end = 0\n  for (let eid = 0; eid < size; eid++) {\n    const from = cursors[type] + (eid * length)\n    const to = from + length\n\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\n    \n    store[eid][$subarrayFrom] = from\n    store[eid][$subarrayTo] = to\n    store[eid][$subarray] = true\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    \n    end = to\n  }\n\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n\n  return store\n}\n\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\n\nexport const createStore = (schema, size) => {\n  const $store = Symbol('store')\n\n  if (!schema || !Object.keys(schema).length) {\n    // tag component\n    stores[$store] = {\n      [$storeSize]: size,\n      [$tagStore]: true,\n      [$storeBase]: () => stores[$store]\n    }\n    return stores[$store]\n  }\n\n  schema = JSON.parse(JSON.stringify(schema))\n\n  const arrayCounts = {}\n  const collectArrayCounts = s => {\n    const keys = Object.keys(s)\n    for (const k of keys) {\n      if (isArrayType(s[k])) {\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\n        arrayCounts[s[k][0]]++\n      } else if (s[k] instanceof Object) {\n        collectArrayCounts(s[k])\n      }\n    }\n  }\n  collectArrayCounts(schema)\n\n  const metadata = {\n    [$storeSize]: size,\n    [$storeMaps]: {},\n    [$storeSubarrays]: {},\n    [$storeRef]: $store,\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\n    [$storeFlattened]: [],\n    [$storeArrayCounts]: arrayCounts\n  }\n\n  if (schema instanceof Object && Object.keys(schema).length) {\n\n    const recursiveTransform = (a, k) => {\n\n      if (typeof a[k] === 'string') {\n\n        a[k] = createTypeStore(a[k], size)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n\n      } else if (isArrayType(a[k])) {\n        \n        const [type, length] = a[k]\n        a[k] = createArrayStore(metadata, type, length)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n        // Object.seal(a[k])\n\n      } else if (a[k] instanceof Object) {\n        \n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\n        // Object.seal(a[k])\n        \n      }\n\n      return a\n    }\n\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\n    stores[$store][$storeBase] = () => stores[$store]\n\n    // Object.seal(stores[$store])\n\n    return stores[$store]\n\n  }\n}\n\nexport const free = (store) => {\n  delete stores[store[$storeRef]]\n}", "export const Uint32SparseSet = (length) => {\n  const dense = new Uint32Array(length)\n  const sparse = new Uint32Array(length)\n\n  let cursor = 0\n  dense.count = () => cursor + 1\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = cursor\n    dense[cursor] = val\n\n    cursor++\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense[cursor]\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n\n    cursor--\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}\n\nexport const SparseSet = () => {\n  const dense = []\n  const sparse = []\n\n  dense.sort = function (comparator) {\n    const result = Array.prototype.sort.call(this, comparator)\n\n    for(let i = 0; i < dense.length; i++) {\n      sparse[dense[i]] = i\n    }\n    \n    return result\n  }\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = dense.push(val) - 1\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense.pop()\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}", "import { $indexBytes, $indexType, $isEidType, $serializeShadow, $storeBase, $storeFlattened, $tagStore, createShadow } from \"./Storage.js\"\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\nimport { $entityArray, $entitySparseSet, addEntity, eidToWorld } from \"./Entity.js\"\nimport { $localEntities, $localEntityLookup } from \"./World.js\"\n\nexport const DESERIALIZE_MODE = {\n  REPLACE: 0,\n  APPEND: 1,\n  MAP: 2\n}\n\nlet resized = false\n\nexport const setSerializationResized = v => { resized = v }\n\nconst canonicalize = (target) => {\n  let componentProps = []\n  let changedProps = new Map()\n  if (Array.isArray(target)) {\n    componentProps = target\n      .map(p => {\n        if (!p) throw new Error('bitECS - Cannot serialize undefined component')\n        if (typeof p === 'function') {\n          const [c, mod] = p()\n          if (mod === 'changed') {\n            c[$storeFlattened].forEach(prop => {\n              const $ = Symbol()\n              createShadow(prop, $)\n              changedProps.set(prop, $)\n            })\n            return c[$storeFlattened]\n          }\n        }\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\n          return p[$storeFlattened]\n        }\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\n          return p\n        }\n      })\n      .reduce((a,v) => a.concat(v), [])\n  }\n  return [componentProps, changedProps]\n}\n\n/**\n * Defines a new serializer which targets the given components to serialize the data of when called on a world or array of EIDs.\n *\n * @param {object|array} target\n * @param {number} [maxBytes=20000000]\n * @returns {function} serializer\n */\nexport const defineSerializer = (target, maxBytes = 20000000) => {\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\n\n  let [componentProps, changedProps] = canonicalize(target)\n\n  // TODO: calculate max bytes based on target & recalc upon resize\n\n  const buffer = new ArrayBuffer(maxBytes)\n  const view = new DataView(buffer)\n\n  return (ents) => {\n\n    if (resized) {\n      [componentProps, changedProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (isWorld) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n    \n    let world\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\n      world = ents\n      ents = ents[$entityArray]\n    } else {\n      world = eidToWorld.get(ents[0])\n    }\n\n    if (!ents.length) return\n\n    let where = 0\n\n    // iterate over component props\n    for (let pid = 0; pid < componentProps.length; pid++) {\n      const prop = componentProps[pid]\n      const $diff = changedProps.get(prop)\n      \n      // write pid\n      view.setUint8(where, pid)\n      where += 1\n\n      // save space for entity count\n      const countWhere = where\n      where += 4\n\n      let count = 0\n      // write eid,val\n      for (let i = 0; i < ents.length; i++) {\n        const eid = ents[i]\n\n        // skip if entity doesn't have this component\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\n          continue\n        }\n\n        // skip if diffing and no change\n        // TODO: optimize array diff\n        if ($diff && !prop[$tagStore]) {\n          let dirty = false\n\n          if (ArrayBuffer.isView(prop[eid])) {\n            for (let i = 0; i < prop[eid].length; i++) {\n              if(prop[eid][i] !== prop[$diff][eid][i]) {\n                dirty = true\n                break\n              }\n            }\n          } else if (prop[eid] !== prop[$diff][eid]) {\n            dirty = true\n          }\n\n          if (!dirty) continue\n        }\n\n        count++\n\n        // write eid\n        view.setUint32(where, eid)\n        where += 4\n\n        if (prop[$tagStore]) {\n          continue\n        }\n\n        // if property is an array\n        if (ArrayBuffer.isView(prop[eid])) {\n          const type = prop[eid].constructor.name.replace('Array', '')\n          const indexType = prop[eid][$indexType]\n          const indexBytes = prop[eid][$indexBytes]\n\n          // add space for count of dirty array elements\n          const countWhere2 = where\n          where += indexBytes\n\n          let count2 = 0\n\n          // write index,value\n          for (let i = 0; i < prop[eid].length; i++) {\n            const value = prop[eid][i]\n\n            if ($diff && prop[eid][i] === prop[$diff][eid][i]) {\n              continue\n            }\n\n            // write array index\n            view[`set${indexType}`](where, i)\n            where += indexBytes\n\n            // write value at that index\n            view[`set${type}`](where, value)\n            where += prop[eid].BYTES_PER_ELEMENT\n            count2++\n          }\n\n          // write total element count\n          view[`set${indexType}`](countWhere2, count2)\n\n        } else {\n          // regular property values\n          const type = prop.constructor.name.replace('Array', '')\n          // set value next [type] bytes\n          view[`set${type}`](where, prop[eid])\n          where += prop.BYTES_PER_ELEMENT\n\n          // sync shadow state\n          if (prop[$diff]) prop[$diff][eid] = prop[eid]\n        }\n      }\n\n      if (count > 0) {\n        // write how many eid/value pairs were written\n        view.setUint32(countWhere, count)\n      } else {\n        // if nothing was written (diffed with no changes) \n        // then move cursor back by 5 bytes to overwrite pid & count\n        where -= 5\n      }\n    }\n    return buffer.slice(0, where)\n  }\n}\n\nconst newEntities = new Map()\n\n/**\n * Defines a new deserializer which targets the given components to deserialize onto a given world.\n *\n * @param {object|array} target\n * @returns {function} deserializer\n */\nexport const defineDeserializer = (target) => {\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\n  let [componentProps] = canonicalize(target)\n\n\n  return (world, packet, mode=0) => {\n\n    newEntities.clear()\n    \n    if (resized) {\n      [componentProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (isWorld) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n\n    const localEntities = world[$localEntities]\n    const localEntityLookup = world[$localEntityLookup]\n\n    const view = new DataView(packet)\n    let where = 0\n\n    while (where < packet.byteLength) {\n\n      // pid\n      const pid = view.getUint8(where)\n      where += 1\n\n      // entity count\n      const entityCount = view.getUint32(where)\n      where += 4\n\n      // component property\n      const prop = componentProps[pid]\n\n      // Get the entities and set their prop values\n      for (let i = 0; i < entityCount; i++) {\n        let eid = view.getUint32(where)\n        where += 4\n\n        if (mode === DESERIALIZE_MODE.MAP) {\n          if (localEntities.has(eid)) {\n            eid = localEntities.get(eid)\n          } else if (newEntities.has(eid)) {\n            eid = newEntities.get(eid)\n          } else {\n            const newEid = addEntity(world)\n            localEntities.set(eid, newEid)\n            localEntityLookup.set(newEid, eid)\n            newEntities.set(eid, newEid)\n            eid = newEid\n          }\n        }\n\n        if (mode === DESERIALIZE_MODE.APPEND ||  \n          mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)\n        ) {\n          const newEid = newEntities.get(eid) || addEntity(world)\n          newEntities.set(eid, newEid)\n          eid = newEid\n        }\n\n        const component = prop[$storeBase]()\n        if (!hasComponent(world, component, eid)) {\n          addComponent(world, component, eid)\n        }\n\n        if (component[$tagStore]) {\n          continue\n        }\n        \n        if (ArrayBuffer.isView(prop[eid])) {\n          const array = prop[eid]\n          const count = view[`get${array[$indexType]}`](where)\n          where += array[$indexBytes]\n\n          // iterate over count\n          for (let i = 0; i < count; i++) {\n            const index = view[`get${array[$indexType]}`](where)\n            where += array[$indexBytes]\n\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\n            where += array.BYTES_PER_ELEMENT\n            if (prop[$isEidType]) {\n              let localEid = localEntities.get(value)\n              if (!world[$entitySparseSet].has(localEid)) localEid = addEntity(world)\n              prop[eid][index] = localEid\n            } else prop[eid][index] = value\n          }\n        } else {\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\n          where += prop.BYTES_PER_ELEMENT\n\n          if (prop[$isEidType]) {\n            let localEid = localEntities.get(value)\n            if (!world[$entitySparseSet].has(localEid)) localEid = addEntity(world)\n            prop[eid] = localEid\n          } else prop[eid] = value\n        }\n      }\n    }\n  }\n}", "import { resizeComponents } from './Component.js'\nimport { $notQueries, $queries, queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query.js'\nimport { $localEntities, $localEntityLookup, resizeWorlds } from './World.js'\nimport { setSerializationResized } from './Serialize.js'\n\nexport const $entityMasks = Symbol('entityMasks')\nexport const $entityComponents = Symbol('entityComponents')\nexport const $entitySparseSet = Symbol('entitySparseSet')\nexport const $entityArray = Symbol('entityArray')\nexport const $entityIndices = Symbol('entityIndices')\nexport const $removedEntities = Symbol('removedEntities')\n\nlet defaultSize = 100000\n\n// need a global EID cursor which all worlds and all components know about\n// so that world entities can posess entire rows spanning all component tables\nlet globalEntityCursor = 0\nlet globalSize = defaultSize\nlet resizeThreshold = () => globalSize - (globalSize / 5)\n\nexport const getGlobalSize = () => globalSize\n\n// removed eids should also be global to prevent memory leaks\nconst removed = []\n\nexport const resetGlobals = () => {\n  globalSize = defaultSize\n  globalEntityCursor = 0\n  removed.length = 0\n}\n\nexport const getDefaultSize = () => defaultSize\n\n/**\n * Sets the default maximum number of entities for worlds and component stores.\n *\n * @param {number} size\n */\nexport const setDefaultSize = size => { \n  defaultSize = size\n  resetGlobals()\n}\n\nexport const getEntityCursor = () => globalEntityCursor\nexport const getRemovedEntities = () => removed\n\nexport const eidToWorld = new Map()\n\n/**\n * Adds a new entity to the specified world.\n *\n * @param {World} world\n * @returns {number} eid\n */\nexport const addEntity = (world) => {\n  \n  if (globalEntityCursor + 1 >= defaultSize) {\n    console.error(`bitECS - max entities of ${defaultSize} reached, increase with setDefaultSize function.`)\n    return\n  }\n\n  // if data stores are 80% full\n  // if (globalEntityCursor >= resizeThreshold()) {\n  //   // grow by half the original size rounded up to a multiple of 4\n  //   const size = globalSize\n  //   const amount = Math.ceil((size/2) / 4) * 4\n  //   const newSize = size + amount\n  //   globalSize = newSize\n  //   resizeWorlds(newSize)\n  //   resizeComponents(newSize)\n  //   setSerializationResized(true)\n  //   console.info(`\uD83D\uDC7E bitECS - resizing all data stores from ${size} to ${size+amount}`)\n  // }\n\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\n  \n  world[$entitySparseSet].add(eid)\n  eidToWorld.set(eid, world)\n\n  world[$notQueries].forEach(q => {\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  })\n\n  world[$entityComponents].set(eid, new Set())\n\n  return eid\n}\n\n/**\n * Removes an existing entity from the specified world.\n *\n * @param {World} world\n * @param {number} eid\n */\nexport const removeEntity = (world, eid) => {\n  // Check if entity is already removed\n  if (!world[$entitySparseSet].has(eid)) return\n\n  // Remove entity from all queries\n  // TODO: archetype graph\n  world[$queries].forEach(q => {\n    queryRemoveEntity(world, q, eid)\n  })\n\n  // Free the entity\n  removed.push(eid)\n\n  // remove all eid state from world\n  world[$entitySparseSet].remove(eid)\n  world[$entityComponents].delete(eid)\n\n  // remove from deserializer mapping\n  world[$localEntities].delete(world[$localEntityLookup].get(eid))\n  world[$localEntityLookup].delete(eid)\n\n  // Clear entity bitmasks\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\n}\n\n/**\n *  Returns an array of components that an entity possesses.\n *\n * @param {*} world\n * @param {*} eid\n */\nexport const getEntityComponents = (world, eid) => Array.from(world[$entityComponents].get(eid))", "import { SparseSet } from './Util.js'\nimport { $queryShadow, $storeFlattened, $tagStore, createShadow } from './Storage.js'\nimport { $componentMap, registerComponent } from './Component.js'\nimport { $entityMasks, $entityArray, getEntityCursor, $entitySparseSet } from './Entity.js'\n\n\n\nexport function Not(c) { return () => [c, 'not'] }\nexport function Or(c) { return () => [c, 'or'] }\nexport function Changed(c) { return () => [c, 'changed'] }\n\nexport function Any(...comps) { return function QueryAny() { return comps } }\nexport function All(...comps) { return function QueryAll() { return comps } }\nexport function None(...comps) { return function QueryNone() { return comps } }\n\nexport const $queries = Symbol('queries')\nexport const $notQueries = Symbol('notQueries')\n\nexport const $queryAny = Symbol('queryAny')\nexport const $queryAll = Symbol('queryAll')\nexport const $queryNone = Symbol('queryNone')\n\nexport const $queryMap = Symbol('queryMap')\nexport const $dirtyQueries = Symbol('$dirtyQueries')\nexport const $queryComponents = Symbol('queryComponents')\nexport const $enterQuery = Symbol('enterQuery')\nexport const $exitQuery = Symbol('exitQuery')\n\n/**\n * Given an existing query, returns a new function which returns entities who have been added to the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const enterQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  return q.entered.splice(0)\n}\n\n/**\n * Given an existing query, returns a new function which returns entities who have been removed from the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const exitQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  return q.exited.splice(0)\n}\n\nexport const registerQuery = (world, query) => {\n\n  const components = []\n  const notComponents = []\n  const changedComponents = []\n\n  query[$queryComponents].forEach(c => {\n    if (typeof c === 'function') {\n      const [comp, mod] = c()\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\n      if (mod === 'not') {\n        notComponents.push(comp)\n      }\n      if (mod === 'changed') {\n        changedComponents.push(comp)\n        components.push(comp)\n      }\n      // if (mod === 'all') {\n      //   allComponents.push(comp)\n      // }\n      // if (mod === 'any') {\n      //   anyComponents.push(comp)\n      // }\n      // if (mod === 'none') {\n      //   noneComponents.push(comp)\n      // }\n    } else {\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\n      components.push(c)\n    }\n  })\n\n\n  const mapComponents = c => world[$componentMap].get(c)\n\n  const allComponents = components.concat(notComponents).map(mapComponents)\n\n  // const sparseSet = Uint32SparseSet(getGlobalSize())\n  const sparseSet = SparseSet()\n\n  const archetypes = []\n  // const changed = SparseSet()\n  const changed = []\n  const toRemove = SparseSet()\n  const entered = []\n  const exited = []\n\n  const generations = allComponents\n    .map(c => c.generationId)\n    .reduce((a,v) => {\n      if (a.includes(v)) return a\n      a.push(v)\n      return a\n    }, [])\n\n  const reduceBitflags = (a,c) => {\n    if (!a[c.generationId]) a[c.generationId] = 0\n    a[c.generationId] |= c.bitflag\n    return a\n  }\n  const masks = components\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  const notMasks = notComponents\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  // const orMasks = orComponents\n  //   .map(mapComponents)\n  //   .reduce(reduceBitmasks, {})\n\n  const hasMasks = allComponents\n    .reduce(reduceBitflags, {})\n\n  const flatProps = components\n    .filter(c => !c[$tagStore])\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\n    .reduce((a,v) => a.concat(v), [])\n\n  const shadows = flatProps.map(prop => {\n      const $ = Symbol()\n      createShadow(prop, $)\n      return prop[$]\n  }, [])\n\n  const q = Object.assign(sparseSet, {\n    archetypes,\n    changed,\n    components,\n    notComponents,\n    changedComponents,\n    allComponents,\n    masks,\n    notMasks,\n    // orMasks,\n    hasMasks,\n    generations,\n    flatProps,\n    toRemove,\n    entered,\n    exited,\n    shadows,\n  })\n  \n  world[$queryMap].set(query, q)\n  world[$queries].add(q)\n  \n  allComponents.forEach(c => {\n    c.queries.add(q)\n  })\n\n  if (notComponents.length) world[$notQueries].add(q)\n\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\n    if (!world[$entitySparseSet].has(eid)) continue\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  }\n}\n\nconst diff = (q, clearDiff) => {\n  if (clearDiff) q.changed = []\n  const { flatProps, shadows } = q\n  for (let i = 0; i < q.dense.length; i++) {\n    const eid = q.dense[i]\n    let dirty = false\n    for (let pid = 0; pid < flatProps.length; pid++) {\n      const prop = flatProps[pid]\n      const shadow = shadows[pid]\n      // console.log('hi', shadow)\n      if (ArrayBuffer.isView(prop[eid])) {\n        for (let i = 0; i < prop[eid].length; i++) {\n          if (prop[eid][i] !== shadow[eid][i]) {\n            dirty = true\n            shadow[eid][i] = prop[eid][i]\n            break\n          }\n        }\n      } else {\n        if (prop[eid] !== shadow[eid]) {\n          dirty = true\n          shadow[eid] = prop[eid]\n        }\n      }\n    }\n    if (dirty) q.changed.push(eid)\n  }\n  return q.changed\n}\n\n// const queryEntityChanged = (q, eid) => {\n//   if (q.changed.has(eid)) return\n//   q.changed.add(eid)\n// }\n\n// export const entityChanged = (world, component, eid) => {\n//   const { changedQueries } = world[$componentMap].get(component)\n//   changedQueries.forEach(q => {\n//     const match = queryCheckEntity(world, q, eid)\n//     if (match) queryEntityChanged(q, eid)\n//   })\n// }\n\nconst flatten = (a,v) => a.concat(v)\n\nconst aggregateComponentsFor = mod => x => x.filter(f => f.name === mod().constructor.name).reduce(flatten)\n\nconst getAnyComponents = aggregateComponentsFor(Any)\nconst getAllComponents = aggregateComponentsFor(All)\nconst getNoneComponents = aggregateComponentsFor(None)\n\n/**\n * Defines a query function which returns a matching set of entities when called on a world.\n *\n * @param {array} components\n * @returns {function} query\n */\n\nexport const defineQuery = (...args) => {\n  let components\n  let any, all, none\n  if (Array.isArray(args[0])) {\n    components = args[0]\n  } else {\n    any = getAnyComponents(args)\n    all = getAllComponents(args)\n    none = getNoneComponents(args)\n  }\n  \n\n  if (components === undefined || components[$componentMap] !== undefined) {\n    return world => world ? world[$entityArray] : components[$entityArray]\n  }\n\n  const query = function (world, clearDiff=true) {\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\n\n    const q = world[$queryMap].get(query)\n\n    commitRemovals(world)\n\n    if (q.changedComponents.length) return diff(q, clearDiff)\n    // if (q.changedComponents.length) return q.changed.dense\n\n    return q.dense\n  }\n\n  query[$queryComponents] = components\n  query[$queryAny] = any\n  query[$queryAll] = all\n  query[$queryNone] = none\n\n  return query\n}\n\nconst bin = value => {\n  if (!Number.isSafeInteger(value)) {\n    throw new TypeError('value must be a safe integer');\n  }\n\n  const negative = value < 0;\n  const twosComplement = negative ? Number.MAX_SAFE_INTEGER + value + 1 : value;\n  const signExtend = negative ? '1' : '0';\n\n  return twosComplement.toString(2).padStart(4, '0').padStart(0, signExtend);\n}\n\n// TODO: archetype graph\nexport const queryCheckEntity = (world, q, eid) => {\n  const { masks, notMasks, generations } = q\n  let or = 0\n  for (let i = 0; i < generations.length; i++) {\n    const generationId = generations[i]\n    const qMask = masks[generationId]\n    const qNotMask = notMasks[generationId]\n    // const qOrMask = orMasks[generationId]\n    const eMask = world[$entityMasks][generationId][eid]\n    \n    // any\n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\n    //   continue\n    // }\n    // not all \n    // if (qNotMask && (eMask & qNotMask) === qNotMask) {\n    // }\n    // not any\n    if (qNotMask && (eMask & qNotMask) !== 0) {\n      return false\n    }\n    // all\n    if (qMask && (eMask & qMask) !== qMask) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const queryCheckComponent = (q, c) => {\n  const { generationId, bitflag } = c\n  const { hasMasks } = q\n  const mask = hasMasks[generationId]\n  return (mask & bitflag) === bitflag\n}\n\nexport const queryAddEntity = (q, eid) => {\n  if (q.has(eid)) return\n  q.add(eid)\n  q.entered.push(eid)\n}\n\nconst queryCommitRemovals = (q) => {\n  for (let i = q.toRemove.dense.length-1; i >= 0; i--) {\n    const eid = q.toRemove.dense[i]\n    q.toRemove.remove(eid)\n    q.remove(eid)\n  }\n}\n\nexport const commitRemovals = (world) => {\n  if (!world[$dirtyQueries].size) return\n  world[$dirtyQueries].forEach(queryCommitRemovals)\n  world[$dirtyQueries].clear()\n}\n\nexport const queryRemoveEntity = (world, q, eid) => {\n  if (!q.has(eid) || q.toRemove.has(eid)) return\n  q.toRemove.add(eid)\n  world[$dirtyQueries].add(q)\n  q.exited.push(eid)\n}\n\n\n/**\n * Resets a Changed-based query, clearing the underlying list of changed entities.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const resetChangedQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  q.changed = []\n}\n\n/**\n * Removes a query from a world.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const removeQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  world[$queries].delete(q)\n  world[$queryMap].delete(query)\n}", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, commitRemovals } from './Query.js'\nimport { $bitflag, $size } from './World.js'\nimport { $entityMasks, getDefaultSize, eidToWorld, $entityComponents, getGlobalSize, $entitySparseSet } from './Entity.js'\n\nexport const $componentMap = Symbol('componentMap')\n\nexport const components = []\n\nexport const resizeComponents = (size) => {\n  components.forEach(component => resizeStore(component, size))\n}\n\n\n/**\n * Defines a new component store.\n *\n * @param {object} schema\n * @returns {object}\n */\nexport const defineComponent = (schema) => {\n  const component = createStore(schema, getGlobalSize())\n  if (schema && Object.keys(schema).length) components.push(component)\n  return component\n}\n\nexport const incrementBitflag = (world) => {\n  world[$bitflag] *= 2\n  if (world[$bitflag] >= 2**31) {\n    world[$bitflag] = 1\n    world[$entityMasks].push(new Uint32Array(world[$size]))\n  }\n}\n\n\n/**\n * Registers a component with a world.\n *\n * @param {World} world\n * @param {Component} component\n */\nexport const registerComponent = (world, component) => {\n  if (!component) throw new Error(`bitECS - Cannot register null or undefined component`)\n\n  const queries = new Set()\n  const notQueries = new Set()\n  const changedQueries = new Set()\n\n  world[$queries].forEach(q => {\n    if (q.allComponents.includes(component)) {\n      queries.add(q)\n    }\n  })\n\n  world[$componentMap].set(component, { \n    generationId: world[$entityMasks].length - 1,\n    bitflag: world[$bitflag],\n    store: component,\n    queries,\n    notQueries,\n    changedQueries,\n  })\n\n  if (component[$storeSize] < getGlobalSize()) {\n    resizeStore(component, getGlobalSize())\n  }\n\n  incrementBitflag(world)\n}\n\n/**\n * Registers multiple components with a world.\n *\n * @param {World} world\n * @param {Component} components\n */\nexport const registerComponents = (world, components) => {\n  components.forEach(c => registerComponent(world, c))\n}\n\n/**\n * Checks if an entity has a component.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @returns {boolean}\n */\nexport const hasComponent = (world, component, eid) => {\n  const registeredComponent = world[$componentMap].get(component)\n  if (!registeredComponent) return\n  const { generationId, bitflag } = registeredComponent\n  const mask = world[$entityMasks][generationId][eid]\n  return (mask & bitflag) === bitflag\n}\n\n/**\n * Adds a component to an entity\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=false]\n */\nexport const addComponent = (world, component, eid, reset=true) => {\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\n  if (hasComponent(world, component, eid)) return\n\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries, notQueries } = c\n    \n  // Add bitflag to entity bitmask\n  world[$entityMasks][generationId][eid] |= bitflag\n\n  // todo: archetype graph\n  queries.forEach(q => {\n    // remove this entity from toRemove if it exists in this query\n    if (q.toRemove.has(eid)) q.toRemove.remove(eid)\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n    if (!match) queryRemoveEntity(world, q, eid)\n  })\n\n  world[$entityComponents].get(eid).add(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n\n/**\n * Removes a component from an entity and resets component state unless otherwise specified.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=true]\n */\nexport const removeComponent = (world, component, eid, reset=false) => {\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries, notQueries } = c\n\n  if (!(world[$entityMasks][generationId][eid] & bitflag)) return\n\n  // Remove flag from entity bitmask\n  world[$entityMasks][generationId][eid] &= ~bitflag\n  \n  // todo: archetype graph\n  queries.forEach(q => {\n    // remove this entity from toRemove if it exists in this query\n    if (q.toRemove.has(eid)) q.toRemove.remove(eid)\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n    if (!match) queryRemoveEntity(world, q, eid)\n  })\n\n  world[$entityComponents].get(eid).delete(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n", "import { $componentMap } from './Component.js'\nimport { $queryMap, $queries, $dirtyQueries, $notQueries } from './Query.js'\nimport { $entityArray, $entityComponents, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity.js'\nimport { resize } from './Storage.js'\nimport { SparseSet } from './Util.js'\n\nexport const $size = Symbol('size')\nexport const $resizeThreshold = Symbol('resizeThreshold')\nexport const $bitflag = Symbol('bitflag')\nexport const $archetypes = Symbol('archetypes')\nexport const $localEntities = Symbol('localEntities')\nexport const $localEntityLookup = Symbol('localEntityLookp')\n\nexport const worlds = []\n\nexport const resizeWorlds = (size) => {\n  worlds.forEach(world => {\n    world[$size] = size\n\n    for (let i = 0; i < world[$entityMasks].length; i++) {\n      const masks = world[$entityMasks][i];\n      world[$entityMasks][i] = resize(masks, size)\n    }\n    \n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\n  })\n}\n\n/**\n * Creates a new world.\n *\n * @returns {object}\n */\nexport const createWorld = (obj={}) => {\n  const world = obj\n  resetWorld(world)\n  worlds.push(world)\n  return world\n}\n\n/**\n * Resets a world.\n *\n * @param {World} world\n * @returns {object}\n */\nexport const resetWorld = (world) => {\n  const size = getGlobalSize()\n  world[$size] = size\n\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\n\n  world[$entityMasks] = [new Uint32Array(size)]\n  world[$entityComponents] = new Map()\n  world[$archetypes] = []\n\n  world[$entitySparseSet] = SparseSet()\n  world[$entityArray] = world[$entitySparseSet].dense\n\n  world[$bitflag] = 1\n\n  world[$componentMap] = new Map()\n\n  world[$queryMap] = new Map()\n  world[$queries] = new Set()\n  world[$notQueries] = new Set()\n  world[$dirtyQueries] = new Set()\n\n  world[$localEntities] = new Map()\n  world[$localEntityLookup] = new Map()\n\n  return world\n}\n\n/**\n * Deletes a world.\n *\n * @param {World} world\n */\nexport const deleteWorld = (world) => {\n  Object.getOwnPropertySymbols(world).forEach($ => { delete world[$] })\n  Object.keys(world).forEach(key => { delete world[key] })\n  worlds.splice(worlds.indexOf(world), 1)\n}\n", "/**\n * Defines a new system function.\n *\n * @param {function} update\n * @returns {function}\n */\n export const defineSystem = (update) => (world, ...args) => {\n  update(world, ...args)\n  return world\n}", "import { createWorld, resetWorld, deleteWorld } from './World.js'\nimport { addEntity, removeEntity, setDefaultSize, getEntityComponents} from './Entity.js'\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\nimport { defineSystem } from './System.js'\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery } from './Query.js'\nimport { defineSerializer, defineDeserializer, DESERIALIZE_MODE } from './Serialize.js'\nimport { parentArray } from './Storage.js'\nimport { TYPES_ENUM } from './Constants.js'\n// import { defineProxy } from './Proxy.js'\n\nexport const pipe = (...fns) => (input) => {\n  let tmp = input\n  for (let i = 0; i < fns.length; i++) {\n    const fn = fns[i]\n    tmp = fn(tmp)\n  }\n  return tmp\n}\n\nexport const Types = TYPES_ENUM\n\nexport {\n\n  setDefaultSize,\n  createWorld,\n  resetWorld,\n  deleteWorld,\n  addEntity,\n  removeEntity,\n\n  registerComponent,\n  registerComponents,\n  defineComponent,\n  addComponent,\n  removeComponent,\n  hasComponent,\n  getEntityComponents,\n  // entityChanged,\n\n  // defineProxy,\n\n  defineQuery,\n  Changed,\n  Not,\n  // Or,\n  enterQuery,\n  exitQuery,\n  commitRemovals,\n  resetChangedQuery,\n  removeQuery,\n\n  defineSystem,\n  \n  defineSerializer,\n  defineDeserializer,\n  DESERIALIZE_MODE,\n\n  parentArray,\n\n}\n", "import { IFrame } from './IFrame';\n\nexport function UpdateFrameUVs <T extends IFrame> (frame: T): T\n{\n    const { x, y, width, height } = frame;\n\n    const baseTextureWidth = frame.texture.width;\n    const baseTextureHeight = frame.texture.height;\n\n    frame.u0 = x / baseTextureWidth;\n    frame.v0 = y / baseTextureHeight;\n\n    frame.u1 = (x + width) / baseTextureWidth;\n    frame.v1 = (y + height) / baseTextureHeight;\n\n    return frame;\n}\n", "import { IFrame } from './IFrame';\nimport { Texture } from './Texture';\nimport { UpdateFrameUVs } from './UpdateFrameUVs';\n\nexport class Frame implements IFrame\n{\n    texture: Texture;\n    key: string | number;\n\n    //  This is the actual area of the texture to draw to canvas / webgl, including any extruded data.\n    //  This is the same as the 'trimmed' + 'extruded' area from an atlas.\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    trimmed: boolean = false;\n\n    //  Original size of the image before being trimmed or added to an atlas (which can add extrude data to it).\n    sourceSizeWidth: number;\n    sourceSizeHeight: number;\n\n    //  The size of the image having been trimmed, before being added to the atlas (i.e. doesn't have any extrusion values in it)\n    spriteSourceSizeX: number;\n    spriteSourceSizeY: number;\n    spriteSourceSizeWidth: number;\n    spriteSourceSizeHeight: number;\n\n    pivot: { x: number; y: number };\n\n    u0: number;\n    v0: number;\n    u1: number;\n    v1: number;\n\n    constructor (texture: Texture, key: string | number, x: number, y: number, width: number, height: number)\n    {\n        this.texture = texture;\n        this.key = key;\n\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        UpdateFrameUVs(this);\n    }\n\n    destroy (): void\n    {\n        this.texture = null;\n    }\n}\n", "import { createWorld, setDefaultSize } from 'bitecs';\n\n// setDefaultSize(10000);\n// setDefaultSize(100000);\n// setDefaultSize(150000);\n// setDefaultSize(200000);\n// setDefaultSize(250000);\n// setDefaultSize(300000);\n// setDefaultSize(350000);\n// setDefaultSize(400000);\n// setDefaultSize(500000);\n// setDefaultSize(550000);\n// setDefaultSize(1000000);\n// setDefaultSize(1500000);\n// setDefaultSize(2000000);\n// setDefaultSize(2500000);\n// setDefaultSize(4000000);\n\nconst world = createWorld();\n\nexport const GameObjectWorld = world;\n", "import { IFrame } from './IFrame';\nimport { UpdateFrameUVs } from './UpdateFrameUVs';\n\nexport function SetFrameSize <T extends IFrame> (frame: T, width: number, height: number): T\n{\n    frame.width = width;\n    frame.height = height;\n    frame.sourceSizeWidth = width;\n    frame.sourceSizeHeight = height;\n\n    return UpdateFrameUVs(frame);\n}\n", "import { Query, defineComponent, defineQuery, removeQuery } from 'bitecs';\n\nimport { BindingQueue } from '../renderer/BindingQueue';\nimport { Frame } from './Frame';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { IGLTextureBinding } from '../renderer/webgl1/textures/IGLTextureBinding';\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { ITexture } from './ITexture';\nimport { SetFrameSize } from './SetFrameSize';\n\nexport class Texture implements ITexture\n{\n    tag = defineComponent();\n\n    //  Unique identifier of this Texture, if stored in the Texture Manager\n    key: string = '';\n\n    locked: boolean = true;\n\n    width: number;\n    height: number;\n\n    image: TexImageSource;\n\n    binding: IGLTextureBinding;\n\n    firstFrame: Frame;\n\n    frames: Map<string | number, Frame>;\n\n    data: unknown;\n\n    inUseQuery: Query;\n\n    constructor (image?: TexImageSource, width?: number, height?: number, glConfig?: IGLTextureBindingConfig)\n    {\n        if (image)\n        {\n            width = image.width;\n            height = image.height;\n        }\n\n        this.image = image;\n\n        this.width = width;\n        this.height = height;\n\n        this.frames = new Map();\n\n        this.data = {};\n\n        this.addFrame('__BASE', 0, 0, width, height);\n\n        this.inUseQuery = defineQuery([ this.tag ]);\n\n        BindingQueue.add(this, glConfig);\n    }\n\n    addFrame (key: string | number, x: number, y: number, width: number, height: number): Frame\n    {\n        if (this.frames.has(key))\n        {\n            return null;\n        }\n\n        const frame = new Frame(this, key, x, y, width, height);\n\n        this.frames.set(key, frame);\n\n        if (!this.firstFrame || this.firstFrame.key === '__BASE')\n        {\n            this.firstFrame = frame;\n        }\n\n        return frame;\n    }\n\n    getFrame (key?: string | number | Frame): Frame\n    {\n        //  null, undefined, empty string, zero\n        if (!key)\n        {\n            return this.firstFrame;\n        }\n\n        if (key instanceof Frame)\n        {\n            key = key.key;\n        }\n\n        let frame: Frame = this.frames.get(key);\n\n        if (!frame)\n        {\n            console.warn(`Frame missing: ${key}`);\n\n            frame = this.firstFrame;\n        }\n\n        return frame;\n    }\n\n    setSize (width: number, height: number): void\n    {\n        this.width = width;\n        this.height = height;\n\n        const frame = this.frames.get('__BASE');\n\n        SetFrameSize(frame, width, height);\n    }\n\n    update (image: TexImageSource, glConfig?: IGLTextureBindingConfig): void\n    {\n        this.image = image;\n\n        this.setSize(image.width, image.height);\n\n        BindingQueue.add(this, glConfig);\n    }\n\n    destroy (): void\n    {\n        if (this.binding)\n        {\n            this.binding.destroy();\n        }\n\n        this.frames.clear();\n\n        removeQuery(GameObjectWorld, this.inUseQuery);\n\n        this.binding = null;\n        this.data = null;\n        this.image = null;\n        this.firstFrame = null;\n    }\n}\n", "import { CreateDepthBuffer } from '../fbo/CreateDepthBuffer';\nimport { CreateFramebuffer } from '../index';\nimport { CreateShader } from './CreateShader';\nimport { DefaultQuadAttributes } from './DefaultQuadAttributes';\nimport { DefaultQuadUniforms } from './DefaultQuadUniforms';\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\nimport { GetHeight } from '../../../config/size/GetHeight';\nimport { GetResolution } from '../../../config/size/GetResolution';\nimport { GetWidth } from '../../../config/size/GetWidth';\nimport { IShader } from './IShader';\nimport { IShaderConfig } from './IShaderConfig';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\nimport { SINGLE_QUAD_VERT } from '../glsl/SINGLE_QUAD_VERT';\nimport { Texture } from '../../../textures/Texture';\n\nexport function SetShaderFromConfig <T extends IShader> (shader: T, config: IShaderConfig): T\n{\n    const {\n        attributes = DefaultQuadAttributes,\n        fragmentShader = SINGLE_QUAD_FRAG,\n        height = GetHeight(),\n        renderToFramebuffer = false,\n        renderToDepthbuffer = false,\n        resolution = GetResolution(),\n        vertexShader = SINGLE_QUAD_VERT,\n        width = GetWidth(),\n        uniforms = DefaultQuadUniforms\n    } = config;\n\n    CreateShader(shader, fragmentShader, vertexShader, uniforms, attributes);\n\n    if (renderToFramebuffer)\n    {\n        shader.renderToFramebuffer = true;\n\n        const texture = new Texture(null, width * resolution, height * resolution);\n        const binding = new GLTextureBinding(texture);\n\n        binding.framebuffer = CreateFramebuffer(binding.texture);\n\n        if (renderToDepthbuffer)\n        {\n            shader.renderToDepthbuffer = true;\n\n            binding.depthbuffer = CreateDepthBuffer(binding.framebuffer, texture.width, texture.height);\n        }\n\n        shader.texture = texture;\n        shader.framebuffer = binding.framebuffer;\n        shader.viewport = new Rectangle(0, 0, width, height);\n    }\n\n    return shader;\n}\n", "import { BindShader } from './BindShader';\nimport { IRectangle } from '../../../geom/rectangle/IRectangle';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { IShaderConfig } from './IShaderConfig';\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\nimport { SetShaderFromConfig } from './SetShaderFromConfig';\nimport { Texture } from '../../../textures/Texture';\n\nexport class Shader implements IShader\n{\n    program: WebGLProgram;\n\n    attributes: Map<string, IVertexAttribPointer>;\n\n    uniforms: Map<string, unknown>;\n\n    uniformSetters: Map<string, Function>;\n\n    texture: Texture;\n\n    framebuffer: WebGLFramebuffer;\n\n    renderToFramebuffer: boolean = false;\n\n    renderToDepthbuffer: boolean = false;\n\n    isActive: boolean = false;\n\n    viewport?: IRectangle;\n\n    constructor (config?: IShaderConfig)\n    {\n        if (config)\n        {\n            SetShaderFromConfig(this, config);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateUniforms (renderPass: IRenderPass): void\n    {\n        //  Use this to set any extra uniform values prior to the bind\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        return BindShader(this, renderPass);\n    }\n}\n", "import { BindShader } from './BindShader';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShaderConfig } from './IShaderConfig';\nimport { MULTI_QUAD_FRAG } from '../glsl/MULTI_QUAD_FRAG';\nimport { Shader } from './Shader';\nimport { TextureStack } from '../renderpass/TextureStack';\n\nexport class MultiTextureQuadShader extends Shader\n{\n    constructor (config: IShaderConfig = {})\n    {\n        config.fragmentShader = config?.fragmentShader || MULTI_QUAD_FRAG;\n\n        super(config);\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        this.uniforms.set('uTexture', TextureStack.textureIndex);\n\n        return BindShader(this, renderPass);\n    }\n}\n", "import { BlendModeStack } from './BlendModeStack';\nimport { gl } from '../GL';\n\nexport function SetDefaultBlendMode (enable: boolean, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum = gl.SRC_ALPHA, dstAlpha: GLenum = gl.ONE_MINUS_SRC_ALPHA): void\n{\n    const entry = { enable, srcRGB, dstRGB, srcAlpha, dstAlpha };\n\n    //  The default entry always goes in index zero\n    BlendModeStack.stack[0] = entry;\n\n    BlendModeStack.index = 0;\n\n    BlendModeStack.default = entry;\n}\n", "import { ColorMatrixStack } from './ColorMatrixStack';\n\nexport function SetDefaultColorMatrix (colorMatrix: Float32Array, colorOffset: Float32Array): void\n{\n    const entry = { colorMatrix, colorOffset };\n\n    //  The default entry always goes into index zero\n    ColorMatrixStack.stack[0] = entry;\n\n    ColorMatrixStack.index = 0;\n\n    ColorMatrixStack.default = entry;\n}\n", "import { IShader } from '../shaders/IShader';\nimport { ShaderStack } from './ShaderStack';\n\nexport function SetDefaultShader <T extends IShader> (shader: T, textureID?: number): void\n{\n    const entry = { shader, textureID };\n\n    //  The default entry always goes into index zero\n    ShaderStack.stack[0] = entry;\n\n    ShaderStack.index = 0;\n\n    ShaderStack.default = entry;\n}\n", "import { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { VertexBufferStack } from './VertexBufferStack';\n\nexport function SetDefaultVertexBuffer (buffer: IVertexBuffer): void\n{\n    VertexBufferStack.stack[0] = buffer;\n\n    VertexBufferStack.index = 0;\n\n    VertexBufferStack.default = buffer;\n}\n", "import { Rectangle } from '../../../geom/rectangle/Rectangle';\nimport { ViewportStack } from './ViewportStack';\n\nexport function SetDefaultViewport (x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\n{\n    const entry = new Rectangle(x, y, width, height);\n\n    //  The default entry always goes into index zero\n    ViewportStack.stack[0] = entry;\n\n    ViewportStack.index = 0;\n\n    ViewportStack.default = entry;\n}\n", "import { ClearWebGLTextures } from './ClearWebGLTextures';\nimport { TextureStack } from './TextureStack';\nimport { gl } from '../GL';\n\nexport function ResetTextures (): void\n{\n    TextureStack.tempTextures.forEach((texture, index) =>\n    {\n        gl.activeTexture(gl.TEXTURE0 + index);\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n    });\n\n    ClearWebGLTextures();\n}\n", "import { CreateTempTextures } from './CreateTempTextures';\nimport { ResetTextures } from './ResetTextures';\nimport { TextureStack } from './TextureStack';\n\nexport function SetDefaultWebGLTextures (): void\n{\n    if (TextureStack.textures)\n    {\n        ResetTextures();\n    }\n\n    const tempTextures = CreateTempTextures();\n\n    TextureStack.maxTextures = tempTextures.length;\n\n    TextureStack.tempTextures = new Map(tempTextures);\n    TextureStack.textures = new Map();\n\n    TextureStack.textureIndex = [];\n\n    TextureStack.tempTextures.forEach((texture, index) =>\n    {\n        TextureStack.textureIndex.push(index);\n    });\n}\n", "import { IShaderConfig } from './IShaderConfig';\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\nimport { Shader } from './Shader';\n\nexport class SingleTextureQuadShader extends Shader\n{\n    constructor (config: IShaderConfig = {})\n    {\n        config.fragmentShader = config?.fragmentShader || SINGLE_QUAD_FRAG;\n\n        super(config);\n    }\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nexport const TRANSFORM = {\n    IS_ROOT: 0,\n    X: 1,\n    Y: 2,\n    ROTATION: 3,\n    SCALE_X: 4,\n    SCALE_Y: 5,\n    SKEW_X: 6,\n    SKEW_Y: 7,\n    AXIS_ALIGNED: 8,\n    FRAME_X1: 9,\n    FRAME_Y1: 10,\n    FRAME_X2: 11,\n    FRAME_Y2: 12,\n    LOCAL_A: 13,\n    LOCAL_B: 14,\n    LOCAL_C: 15,\n    LOCAL_D: 16,\n    LOCAL_TX: 17,\n    LOCAL_TY: 18,\n    BOUNDS_X1: 19,\n    BOUNDS_Y1: 20,\n    BOUNDS_X2: 21,\n    BOUNDS_Y2: 22,\n    ORIGIN_X: 23,\n    ORIGIN_Y: 24,\n    WORLD_A: 25,\n    WORLD_B: 26,\n    WORLD_C: 27,\n    WORLD_D: 28,\n    WORLD_TX: 29,\n    WORLD_TY: 30,\n    FRAME_WIDTH: 31,\n    FRAME_HEIGHT: 32,\n    IN_VIEW: 33,\n    UPDATED: 34,\n    FIXED: 35\n};\n\nexport const Transform2DComponent = defineComponent({\n    data: [ Types.f32, 36 ]\n});\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { addComponent } from 'bitecs';\n\n//  The A, B, C, D, TX, TY elements are a short-form of a 3x3 Matrix, with the last column ignored:\n\n//  |----|----|----|\n//  | a  | b  | 0  |\n//  |----|----|----|\n//  | c  | d  | 0  |\n//  |----|----|----|\n//  | tx | ty | 1  |\n//  |----|----|----|\n\n//  [0] = a - X scale\n//  [1] = b - X skew\n//  [2] = c - Y skew\n//  [3] = d - Y scale\n//  [4] = tx - X translation\n//  [5] = ty - Y translation\n\nexport function AddTransform2DComponent (id: number): void\n{\n    addComponent(GameObjectWorld, Transform2DComponent, id);\n\n    //  Component defaults to zero, so we only need to set the other values\n    //  We could do this via data.set once the array structure is set in stone\n\n    const data = Transform2DComponent.data[id];\n\n    data[TRANSFORM.SCALE_X] = 1;\n    data[TRANSFORM.SCALE_Y] = 1;\n    data[TRANSFORM.AXIS_ALIGNED] = 1;\n}\n", "export function NOOP (): void\n{\n    //  No-op\n}\n", "import { NOOP } from '../../utils/NOOP';\n\n//  4x4 Matrix in column-major format\n\n/**\n * |-----|-----|-----|-----|\n * | m00 | m01 | m02 | m03 |\n * |-----|-----|-----|-----|\n * | m10 | m11 | m12 | m13 |\n * |-----|-----|-----|-----|\n * | m20 | m21 | m22 | m23 |\n * |-----|-----|-----|-----|\n * | m30 | m31 | m32 | m33 |\n * |-----|-----|-----|-----|\n *\n * [0] = m00 - 1st value of 1st row\n * [1] = m01 - 2nd value of 1st row\n * [2] = m02 - 3rd value of 1st row\n * [3] = m03 - 4th value of 1st row\n * [4] = m10 - 1st value of 2nd row\n * [5] = m11 - 2nd value of 2nd row\n * [6] = m12 - 3rd value of 2nd row\n * [7] = m13 - 4th value of 2nd row\n * [8] = m20 - 1st value of 3rd row\n * [9] = m21 - 2nd value of 3rd row\n * [10] = m22 - 3rd value of 3rd row\n * [11] = m23 - 4th value of 3rd row\n * [12] = m30 - 1st value of 4th row\n * [13] = m31 - 2nd value of 4th row\n * [14] = m32 - 3rd value of 4th row\n * [15] = m33 - 4th value of 4th row\n */\n\nexport class Matrix4\n{\n    data: Float32Array;\n\n    onChange: (mat4: Matrix4) => void;\n\n    constructor (src?: Matrix4 | Float32List)\n    {\n        const data = new Float32Array(16);\n\n        this.data = data;\n        this.onChange = NOOP;\n\n        if (src)\n        {\n            if (Array.isArray(src))\n            {\n                this.fromArray(src);\n            }\n            else\n            {\n                this.fromArray((src as Matrix4).data);\n            }\n        }\n        else\n        {\n            data[0] = 1;\n            data[5] = 1;\n            data[10] = 1;\n            data[15] = 1;\n        }\n    }\n\n    set (m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number): this\n    {\n        this.data.set([\n            m00,\n            m01,\n            m02,\n            m03,\n\n            m10,\n            m11,\n            m12,\n            m13,\n\n            m20,\n            m21,\n            m22,\n            m23,\n\n            m30,\n            m31,\n            m32,\n            m33\n        ]);\n\n        this.onChange(this);\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const data = this.data;\n\n        for (let i = 0; i < 16; i++)\n        {\n            dst[ index + i ] = data[i];\n        }\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        const data = this.data;\n\n        for (let i = 0; i < 16; i++)\n        {\n            data[i] = src[ index + i ];\n        }\n\n        this.onChange(this);\n\n        return this;\n    }\n\n    toString (): string\n    {\n        return '[ mat4=' + this.data.join(', ') + ' ]';\n    }\n\n    destroy (): void\n    {\n        this.onChange = NOOP;\n        this.data = null;\n    }\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nexport function SetBounds (id: number, x: number, y: number, right: number, bottom: number): void\n{\n    const data = Transform2DComponent.data[id];\n\n    data[TRANSFORM.BOUNDS_X1] = x;\n    data[TRANSFORM.BOUNDS_Y1] = y;\n    data[TRANSFORM.BOUNDS_X2] = right;\n    data[TRANSFORM.BOUNDS_Y2] = bottom;\n}\n", "import { Types, defineComponent } from 'bitecs';\n\n/**\n * TRANSFORM - This own entities local transform is dirty\n * CHILD_TRANSFORM - Has a child (of any depth) that has a dirty local transform\n * COLOR - This own entities color component is dirty\n * CHILD_COLOR - Has a child (of any depth) that has a dirty color component\n * CHILD_CACHE - This entity caches children (like a RenderLayer) and has a child (of any depth) that is dirty (transform or color)\n * WORLD_TRANSFORM - This own entities world transform is dirty\n * DISPLAY_LIST - If the Game Object has a custom display list (like SpatialGridLayer) this indicates if it's dirty, or not.\n * SELF - The Game Object that has this component is dirty (used by Render Layer and for your own custom objects)\n */\n\nexport const DIRTY = {\n    TRANSFORM: 0,\n    CHILD_TRANSFORM: 1,\n    COLOR: 2,\n    CHILD_COLOR: 3,\n    CHILD_CACHE: 4,\n    WORLD_TRANSFORM: 5,\n    DISPLAY_LIST: 6,\n    SELF: 7\n};\n\nexport const DirtyComponent = defineComponent({\n    data: [ Types.ui8, 8 ]\n});\n", "import { Game } from './Game';\n\nexport let instance: Game;\nexport let frame: number = 0;\nexport let elapsed: number = 0;\n\nexport const GameInstance =\n{\n    get: (): Game =>\n    {\n        return instance;\n    },\n\n    set: (game: Game | undefined): void =>\n    {\n        instance = game;\n    },\n\n    getFrame: (): number =>\n    {\n        return frame;\n    },\n\n    setFrame: (current: number): void =>\n    {\n        frame = current;\n    },\n\n    getElapsed: (): number =>\n    {\n        return elapsed;\n    },\n\n    setElapsed: (current: number): void =>\n    {\n        elapsed = current;\n    }\n\n};\n", "import { Types, defineComponent } from 'bitecs';\n\nexport const HIERARCHY = {\n    WORLD: 0,\n    PARENT: 1,\n    NEXT: 2,\n    PREV: 3,\n    FIRST: 4,\n    LAST: 5,\n    NUM_CHILDREN: 6,\n    DEPTH: 7\n};\n\n//  world = The ID of the World entity the owner of this component belongs to\n//  parent = The ID of the Parent entity. If it has no parent, will match the world ID\n//  next = The ID of the next entity in the display list (horizontally, the next sibling)\n//  prev = The ID of the previous entity in the display list (horizontally, the previous sibling)\n//  first = The ID of the left-most (first) child entity of this parent\n//  last = The ID of the right-most (last) child entity of this parent\n//  numChildren = The number of direct descendants this entity has\n//  depth = Reserved to allow for per-child depth sorting outside of the display list index\n\nexport const HierarchyComponent = defineComponent({\n    data: [ Types.ui32, 8 ]\n});\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function GetParentID (id: number): number\n{\n    return HierarchyComponent.data[id][HIERARCHY.PARENT];\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyChildCache (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.CHILD_CACHE] = 1;\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyChildTransform (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.CHILD_TRANSFORM] = 1;\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nexport const PERMISSION = {\n    VISIBLE: 0,\n    VISIBLE_CHILDREN: 1,\n    WILL_UPDATE: 2,\n    WILL_UPDATE_CHILDREN: 3,\n    WILL_RENDER: 4,\n    WILL_RENDER_CHILDREN: 5,\n    WILL_CACHE_CHILDREN: 6,\n    WILL_TRANSFORM_CHILDREN: 7,\n    WILL_COLOR_CHILDREN: 8,\n    CUSTOM_DISPLAY_LIST: 9\n};\n\nexport const PermissionsComponent = defineComponent({\n    data: [ Types.ui8, 10 ]\n});\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function WillCacheChildren (id: number): boolean\n{\n    return !!(PermissionsComponent.data[id][PERMISSION.WILL_CACHE_CHILDREN]);\n}\n", "import { GameInstance } from '../../GameInstance';\nimport { GetParentID } from '../hierarchy/GetParentID';\nimport { SetDirtyChildCache } from './SetDirtyChildCache';\nimport { SetDirtyChildTransform } from './SetDirtyChildTransform';\nimport { WillCacheChildren } from '../permissions/WillCacheChildren';\n\nlet prevParentID: number;\nlet prevFrame: number;\n\nexport function SetDirtyParents (childID: number): void\n{\n    let id = GetParentID(childID);\n\n    const frame = GameInstance.getFrame();\n\n    if (id === prevParentID && frame === prevFrame)\n    {\n        return;\n    }\n\n    prevParentID = id;\n    prevFrame = frame;\n\n    while (id)\n    {\n        SetDirtyChildTransform(id);\n\n        if (WillCacheChildren(id))\n        {\n            SetDirtyChildCache(id);\n        }\n\n        id = GetParentID(id);\n    }\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nimport { SetDirtyParents } from './SetDirtyParents';\n\nexport function SetDirtyTransform (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.TRANSFORM] = 1;\n\n    SetDirtyParents(id);\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\n\nexport function UpdateExtent (id: number, width: number, height: number): void\n{\n    const data = Transform2DComponent.data[id];\n\n    const x = -(data[TRANSFORM.ORIGIN_X]) * width;\n    const y = -(data[TRANSFORM.ORIGIN_Y]) * height;\n\n    data[TRANSFORM.FRAME_X1] = x;\n    data[TRANSFORM.FRAME_Y1] = y;\n    data[TRANSFORM.FRAME_X2] = x + width;\n    data[TRANSFORM.FRAME_Y2] = y + height;\n    data[TRANSFORM.FRAME_WIDTH] = width;\n    data[TRANSFORM.FRAME_HEIGHT] = height;\n\n    //  TODO - Do we really need to do this?\n    // data[TRANSFORM.WORLD_A] = x;\n    // data[TRANSFORM.WORLD_B] = y;\n    // data[TRANSFORM.WORLD_C] = x + width;\n    // data[TRANSFORM.WORLD_D] = y + height;\n    // data[TRANSFORM.WORLD_TX] = width;\n    // data[TRANSFORM.WORLD_TY] = height;\n\n    SetDirtyTransform(id);\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { IVec2 } from '../../math/vec2/IVec2';\nimport { UpdateExtent } from './UpdateExtent';\n\nexport class Size implements IVec2\n{\n    private id: number;\n    private _data: Float32Array;\n\n    constructor (id: number, width: number = 0, height: number = 0)\n    {\n        this.id = id;\n\n        this._data = Transform2DComponent.data[id];\n\n        this.set(width, height);\n    }\n\n    set (width: number, height: number = width): this\n    {\n        this.width = width;\n        this.height = height;\n\n        return this;\n    }\n\n    set width (value: number)\n    {\n        UpdateExtent(this.id, value, this.height);\n    }\n\n    get width (): number\n    {\n        return this._data[TRANSFORM.FRAME_WIDTH];\n    }\n\n    set height (value: number)\n    {\n        UpdateExtent(this.id, this.width, value);\n    }\n\n    get height (): number\n    {\n        return this._data[TRANSFORM.FRAME_HEIGHT];\n    }\n\n    set x (value: number)\n    {\n        this.width = value;\n    }\n\n    get x (): number\n    {\n        return this.width;\n    }\n\n    set y (value: number)\n    {\n        this.height = value;\n    }\n\n    get y (): number\n    {\n        return this.height;\n    }\n\n    destroy (): void\n    {\n        this._data = null;\n    }\n}\n", "import { TRANSFORM, Transform2DComponent } from '../components/transform/Transform2DComponent';\nimport { addEntity, removeComponent, removeEntity } from 'bitecs';\n\nimport { AddTransform2DComponent } from '../components/transform/AddTransform2DComponent';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { IBaseCamera } from './IBaseCamera';\nimport { IMatrix4 } from '../math/mat4/IMatrix4';\nimport { Matrix4 } from '../math/mat4/Matrix4';\nimport { SetBounds } from '../components/transform/SetBounds';\nimport { Size } from '../components/transform/Size';\n\nexport class BaseCamera implements IBaseCamera\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    readonly type: string = 'BaseCamera';\n\n    //  User defined name. Never used internally.\n    name: string = '';\n\n    size: Size;\n\n    //  For loading into the shaders\n    matrix: IMatrix4;\n\n    isDirty: boolean;\n\n    private _data: Float32Array;\n\n    constructor (width: number, height: number)\n    {\n        const id = this.id;\n\n        AddTransform2DComponent(id);\n\n        this.matrix = new Matrix4();\n\n        this.size = new Size(id, width, height);\n\n        this._data = Transform2DComponent.data[id];\n\n        this.reset(width, height);\n    }\n\n    preRender (): boolean\n    {\n        return this.isDirty;\n    }\n\n    postRender (): void\n    {\n        this.isDirty = false;\n    }\n\n    getBoundsX (): number\n    {\n        return this._data[TRANSFORM.BOUNDS_X1];\n    }\n\n    getBoundsY (): number\n    {\n        return this._data[TRANSFORM.BOUNDS_Y1];\n    }\n\n    getBoundsRight (): number\n    {\n        return this._data[TRANSFORM.BOUNDS_X2];\n    }\n\n    getBoundsBottom (): number\n    {\n        return this._data[TRANSFORM.BOUNDS_Y2];\n    }\n\n    getMatrix (): Float32Array\n    {\n        return this.matrix.data;\n    }\n\n    reset (width: number, height: number): void\n    {\n        this.size.set(width, height);\n\n        this.isDirty = true;\n\n        SetBounds(this.id, 0, 0, width, height);\n    }\n\n    destroy (): void\n    {\n        const id = this.id;\n\n        removeComponent(GameObjectWorld, Transform2DComponent, id);\n\n        removeEntity(GameObjectWorld, id);\n    }\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function ClearDirtyTransform (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.TRANSFORM] = 0;\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyTransform (id: number): boolean\n{\n    return !!(DirtyComponent.data[id][DIRTY.TRANSFORM]);\n}\n", "import { BaseCamera } from './BaseCamera';\nimport { ClearDirtyTransform } from '../components/dirty/ClearDirtyTransform';\nimport { HasDirtyTransform } from '../components/dirty/HasDirtyTransform';\nimport { IStaticCamera } from './IStaticCamera';\n\n//  A Static Camera just has a size. It cannot be moved or scaled.\n\nexport class StaticCamera extends BaseCamera implements IStaticCamera\n{\n    readonly type: string = 'StaticCamera';\n\n    constructor (width: number, height: number)\n    {\n        super(width, height);\n    }\n\n    preRender (): boolean\n    {\n        const id = this.id;\n\n        if (HasDirtyTransform(id))\n        {\n            this.isDirty = true;\n\n            ClearDirtyTransform(id);\n\n            return true;\n        }\n\n        return false;\n    }\n}\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\nimport { IVertexBuffer } from './IVertexBuffer';\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\nimport { gl } from '../GL';\n\nexport class VertexBuffer implements IVertexBuffer\n{\n    //  Handy for debug tracing\n    name: string;\n\n    /**\n     * Maximum number of entries per batch before a flush takes place.\n     * For a Mesh, this is the number of triangles / faces in the vertex buffer.\n     * Typically each face consists of 3 verts.\n     *\n     * @type {number}\n     */\n    batchSize: number;\n\n    /**\n     * The size, in bytes, per entry in the array buffer.\n     *\n     * @type {number}\n     */\n    dataSize: number;\n\n    /**\n     * The amount of elements / floats a single vertex consists of.\n     *\n     * The default is 9:\n     *\n     * position (x,y - 2 floats)\n     * texture coord (x,y - 2 floats)\n     * texture index (uint)\n     * red channel (float)\n     * green channel (float)\n     * blue channel (float)\n     * alpha channel (float)\n     *\n     * @type {number}\n     */\n    vertexElementSize: number;\n\n    /**\n     * The size, in bytes, of a single vertex in the array buffer.\n     *\n     * This is `vertexElementSize * dataSize`.\n     *\n     * @type {number}\n     */\n    vertexByteSize: number;\n\n    /**\n     * The size, in bytes, of a single entry in the array buffer.\n     *\n     * This is `vertexByteSize * elementsPerEntry` for a quad.\n     *\n     * @type {number}\n     */\n    entryByteSize: number;\n\n    /**\n     * The size, in bytes, of the Array Buffer.\n     *\n     * This is `batchSize * entryByteSize`\n     *\n     * @type {number}\n     */\n    bufferByteSize: number;\n\n    /**\n     * The Array Buffer.\n     *\n     * @type {ArrayBuffer}\n     */\n    data: ArrayBuffer;\n\n    /**\n     * Float32 View of the Array Buffer.\n     *\n     * @type {Float32Array}\n     */\n    vertexViewF32: Float32Array;\n\n    /**\n     * The data array buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    vertexBuffer: WebGLBuffer;\n\n    /**\n     * The size, in quantity of elements, of a single entry in the element index array.\n     *\n     * This is `vertexElementSize * elementsPerEntry`\n     *\n     * @type {number}\n     */\n    entryElementSize: number;\n\n    indexed: boolean = false;\n\n    isDynamic: boolean = false;\n\n    /**\n     * The total number of entries added to the buffer so far, or reserved to be added.\n     *\n     * This is the total number of indices / verticies, not faces.\n     * Typically there are 3 verts per face, so this value is usually batchSize x 3 for a Mesh.\n     *\n     * @type {number}\n     */\n    count: number = 0;\n\n    /**\n     * The current buffer offset.\n     *\n     * @type {number}\n     */\n    offset: number = 0;\n\n    /**\n     * The number of elements per entry in the buffer.\n     *\n     * This is 3 for a tri and 4 for a quad in an indexed buffer.\n     *\n     * @type {number}\n     */\n    elementsPerEntry: number;\n\n    isBound: boolean = false;\n\n    constructor (config: IVertexBufferConfig = {})\n    {\n        const {\n            name = 'VBO',\n            batchSize = 1,\n            dataSize = 4,\n            isDynamic = true,\n            elementsPerEntry = 3,\n            vertexElementSize = 9\n        } = config;\n\n        this.name = name;\n        this.batchSize = batchSize;\n        this.dataSize = dataSize;\n        this.vertexElementSize = vertexElementSize;\n        this.isDynamic = isDynamic;\n        this.elementsPerEntry = elementsPerEntry;\n\n        //  Derive the remaining values\n        this.vertexByteSize = vertexElementSize * dataSize;\n        this.entryByteSize = this.vertexByteSize * elementsPerEntry;\n        this.bufferByteSize = batchSize * this.entryByteSize;\n        this.entryElementSize = this.vertexElementSize * this.elementsPerEntry;\n\n        this.create();\n    }\n\n    resize (batchSize: number): void\n    {\n        this.batchSize = batchSize;\n        this.bufferByteSize = batchSize * this.entryByteSize;\n\n        if (this.vertexBuffer)\n        {\n            DeleteGLBuffer(this.vertexBuffer);\n        }\n\n        this.create();\n    }\n\n    create (): void\n    {\n        const data = new ArrayBuffer(this.bufferByteSize);\n\n        this.data = data;\n\n        this.vertexViewF32 = new Float32Array(data);\n\n        this.vertexBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\n        const type = (this.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n        gl.bufferData(gl.ARRAY_BUFFER, data, type);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        this.isBound = false;\n    }\n\n    add (count: number): void\n    {\n        this.count += count;\n        this.offset += (this.vertexElementSize * count);\n    }\n\n    reset (): void\n    {\n        this.count = 0;\n        this.offset = 0;\n    }\n\n    canContain (count: number): boolean\n    {\n        return ((this.count + count) <= this.batchSize);\n    }\n\n    free (): number\n    {\n        return Math.max(0, 1 - (this.count / this.batchSize));\n    }\n\n    bind (): void\n    {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    }\n\n    destroy (): void\n    {\n        DeleteGLBuffer(this.vertexBuffer);\n\n        this.data = null;\n        this.vertexViewF32 = null;\n        this.vertexBuffer = null;\n    }\n}\n", "import { DEFAULT_COLOR_MATRIX, DEFAULT_COLOR_OFFSET } from '../../../colormatrix/const';\n\nimport { BlendModeStack } from './BlendModeStack';\nimport { ColorMatrixStack } from './ColorMatrixStack';\nimport { FramebufferStack } from './FramebufferStack';\nimport { GetBatchSize } from '../../../config/batchsize/GetBatchSize';\nimport { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\nimport { IShader } from '../shaders/IShader';\nimport { IWebGLRenderer } from '../IWebGLRenderer';\nimport { Mat4Ortho } from '../../../math/mat4/Mat4Ortho';\nimport { MultiTextureQuadShader } from '../shaders/MultiTextureQuadShader';\nimport { SetDefaultBlendMode } from './SetDefaultBlendMode';\nimport { SetDefaultColorMatrix } from './SetDefaultColorMatrix';\nimport { SetDefaultFramebuffer } from './index';\nimport { SetDefaultShader } from './SetDefaultShader';\nimport { SetDefaultVertexBuffer } from './SetDefaultVertexBuffer';\nimport { SetDefaultViewport } from './SetDefaultViewport';\nimport { SetDefaultWebGLTextures } from './SetDefaultWebGLTextures';\nimport { ShaderStack } from './ShaderStack';\nimport { SingleTextureQuadShader } from '../shaders/SingleTextureQuadShader';\nimport { StaticCamera } from '../../../camera/StaticCamera';\nimport { TextureStack } from './TextureStack';\nimport { VertexBuffer } from '../buffers/VertexBuffer';\nimport { VertexBufferStack } from './VertexBufferStack';\nimport { ViewportStack } from './ViewportStack';\n\nexport class RenderPass implements IRenderPass\n{\n    renderer: IWebGLRenderer;\n\n    projectionMatrix: Float32Array;\n    cameraMatrix: Float32Array;\n\n    count: number = 0;\n    prevCount: number = 0;\n    flushTotal: number = 0;\n\n    //  Single Texture Quad Shader + Camera\n    quadShader: IShader;\n    quadCamera: IBaseCamera;\n\n    //  Current 2D Camera\n    current2DCamera: IBaseCamera;\n\n    constructor (renderer: IWebGLRenderer)\n    {\n        this.renderer = renderer;\n\n        this.projectionMatrix = new Float32Array(16);\n\n        FramebufferStack.init(this);\n        BlendModeStack.init(this);\n        VertexBufferStack.init(this);\n        ViewportStack.init(this);\n        ShaderStack.init(this);\n        ColorMatrixStack.init(this);\n        TextureStack.init(this);\n\n        this.reset();\n    }\n\n    flush (): void\n    {\n        this.prevCount = this.count;\n\n        this.count = 0;\n\n        this.flushTotal++;\n    }\n\n    //  TODO - Call when context is lost and restored\n    //  TODO - If already created, delete shaders / buffers first (i.e. during context loss)\n    reset (): void\n    {\n        const gl = this.renderer.gl;\n\n        //  Default QuadShader (for FBO drawing)\n\n        this.quadShader = new SingleTextureQuadShader();\n        this.quadCamera = new StaticCamera(this.renderer.width, this.renderer.height);\n\n        //  Default settings\n\n        SetDefaultWebGLTextures();\n        SetDefaultFramebuffer();\n        SetDefaultBlendMode(true, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        SetDefaultVertexBuffer(new VertexBuffer({ batchSize: GetBatchSize() }));\n        SetDefaultShader((GetMaxTextures() === 1) ? new SingleTextureQuadShader() : new MultiTextureQuadShader());\n        SetDefaultColorMatrix(DEFAULT_COLOR_MATRIX, DEFAULT_COLOR_OFFSET);\n    }\n\n    resize (width: number, height: number): void\n    {\n        //  TODO - -1 to 1?\n        Mat4Ortho(this.projectionMatrix, 0, width, height, 0, -1000, 1000);\n\n        this.quadCamera.reset(width, height);\n\n        SetDefaultViewport(0, 0, width, height);\n    }\n\n    isCameraDirty (): boolean\n    {\n        return this.current2DCamera.isDirty;\n    }\n}\n", "\nexport function CompareColorMatrix (srcMatrix: Float32Array, srcOffset: Float32Array, targetMatrix: Float32Array, targetOffset: Float32Array): boolean\n{\n    for (let i = 0; i < srcOffset.length; i++)\n    {\n        if (srcOffset[i] !== targetOffset[i])\n        {\n            return false;\n        }\n    }\n\n    for (let i = 0; i < srcMatrix.length; i++)\n    {\n        if (srcMatrix[i] !== targetMatrix[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n", "import { AddColorMatrix } from './AddColorMatrix';\nimport { BindColorMatrix } from './BindColorMatrix';\nimport { Color } from '../../../components/color/Color';\nimport { CompareColorMatrix } from '../../../components/color/CompareColorMatrix';\nimport { CurrentColorMatrix } from './CurrentColorMatrix';\n\nexport function SetColorMatrix (color: Color): void\n{\n    const current = CurrentColorMatrix();\n\n    const entry = AddColorMatrix(color.colorMatrix, color.colorOffset);\n\n    if (!CompareColorMatrix(entry.colorMatrix, entry.colorOffset, current.colorMatrix, current.colorOffset))\n    {\n        BindColorMatrix(entry);\n    }\n}\n", "import { Color } from '../../../components/color/Color';\nimport { IRenderPass } from './IRenderPass';\nimport { SetColorMatrix } from './SetColorMatrix';\n\nexport function SetColor <T extends IRenderPass> (renderPass: T, color: Color): void\n{\n    if (color.colorMatrixEnabled && color.willColorChildren)\n    {\n        SetColorMatrix(color);\n    }\n}\n", "import { FramebufferStack } from './FramebufferStack';\nimport { IRectangle } from '../../../geom/rectangle/IRectangle';\n\nexport function SetDefaultFramebuffer <T extends IRectangle> (framebuffer: WebGLFramebuffer = null, viewport?: T): void\n{\n    const entry = { framebuffer, viewport };\n\n    //  The default entry always goes into index zero\n    FramebufferStack.stack[0] = entry;\n\n    FramebufferStack.index = 0;\n\n    FramebufferStack.default = entry;\n}\n", "import { AddFramebuffer } from './AddFramebuffer';\nimport { BindFramebuffer } from './BindFramebuffer';\nimport { IRectangle } from '../../../geom/rectangle/IRectangle';\n\nexport function SetFramebuffer <T extends IRectangle> (framebuffer: WebGLFramebuffer, clear: boolean = true, viewport?: T): void\n{\n    const entry = AddFramebuffer(framebuffer, viewport);\n\n    BindFramebuffer(clear, entry);\n}\n", "import { AddShader } from './AddShader';\nimport { BindShaderEntry } from './BindShaderEntry';\nimport { IShader } from '../shaders/IShader';\n\nexport function SetShader <T extends IShader> (shader: T, textureID?: number): void\n{\n    const entry = AddShader(shader, textureID);\n\n    BindShaderEntry(entry);\n}\n", "import { ClearWebGLTextures } from './ClearWebGLTextures';\nimport { Flush } from './Flush';\nimport { ITexture } from '../../../textures/ITexture';\nimport { TextureStack } from './TextureStack';\nimport { gl } from '../GL';\n\n//  request the next available texture and bind it\n//  returns the new ID\n\nexport function SetWebGLTexture <T extends ITexture> (texture: T): number\n{\n    if (!texture.binding)\n    {\n        return -1;\n    }\n\n    const binding = texture.binding;\n    const textures = TextureStack.textures;\n\n    //  Make sure texture isn't already bound\n    if (!binding.isBound)\n    {\n        //  Is the current texture Map full? If so, flush it all\n        if (textures.size === TextureStack.maxTextures)\n        {\n            Flush(TextureStack.renderPass);\n\n            ClearWebGLTextures();\n        }\n\n        // Add texture to the map\n        const textureUnit = textures.size;\n\n        gl.activeTexture(gl.TEXTURE0 + textureUnit);\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n        textures.set(textureUnit, texture);\n\n        binding.bind(textureUnit);\n    }\n\n    return binding.textureUnit;\n}\n", "import { Texture } from './Texture';\n\nlet instance: Texture;\n\nexport const WhiteTexture =\n{\n    get: (): Texture =>\n    {\n        return instance;\n    },\n\n    set: (texture: Texture): void =>\n    {\n        instance = texture;\n    }\n};\n", "import { BindDefaultBlendMode } from './BindDefaultBlendMode';\nimport { BindDefaultColorMatrix } from './BindDefaultColorMatrix';\nimport { BindDefaultFramebuffer } from './BindDefaultFramebuffer';\nimport { BindDefaultShader } from './BindDefaultShader';\nimport { BindDefaultVertexBuffer } from './BindDefaultVertexBuffer';\nimport { BindDefaultViewport } from './BindDefaultViewport';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Start (renderPass: IRenderPass): IRenderPass\n{\n    if (!renderPass.current2DCamera)\n    {\n        renderPass.current2DCamera = renderPass.quadCamera;\n        renderPass.cameraMatrix = renderPass.quadCamera.getMatrix();\n    }\n\n    renderPass.count = 0;\n    renderPass.flushTotal = 0;\n\n    BindDefaultFramebuffer();\n    BindDefaultBlendMode();\n    BindDefaultVertexBuffer();\n    BindDefaultViewport();\n    BindDefaultShader();\n    BindDefaultColorMatrix();\n\n    return renderPass;\n}\n", "import { ITexture } from '../../../textures/ITexture';\nimport { TextureStack } from './TextureStack';\nimport { gl } from '../GL';\n\nexport function UnbindTexture <T extends ITexture> (texture: T): void\n{\n    const index = texture.binding.textureUnit;\n\n    const binding = texture.binding;\n\n    binding.unbind();\n\n    gl.activeTexture(gl.TEXTURE0 + index);\n    gl.bindTexture(gl.TEXTURE_2D, TextureStack.tempTextures.get(index));\n}\n", "import { CurrentShader } from './CurrentShader';\nimport { CurrentVertexBuffer } from './CurrentVertexBuffer';\nimport { IRenderPass } from './IRenderPass';\nimport { PopFramebuffer } from './PopFramebuffer';\nimport { SetFramebuffer } from './index';\nimport { gl } from '../GL';\n\nexport function Draw (renderPass: IRenderPass): void\n{\n    const count = renderPass.count;\n\n    if (count === 0)\n    {\n        return;\n    }\n\n    const currentBuffer = CurrentVertexBuffer();\n    const currentShader = CurrentShader();\n\n    const renderToFramebuffer = currentShader.shader.renderToFramebuffer;\n\n    if (renderToFramebuffer)\n    {\n        SetFramebuffer(currentShader.shader.framebuffer, true, currentShader.shader.viewport);\n    }\n\n    if (count === currentBuffer.batchSize)\n    {\n        const type = (currentBuffer.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n        gl.bufferData(gl.ARRAY_BUFFER, currentBuffer.data, type);\n    }\n    else\n    {\n        const subsize = count * currentBuffer.entryElementSize;\n\n        const view = currentBuffer.vertexViewF32.subarray(0, subsize);\n\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\n    }\n\n    if (currentBuffer.indexed)\n    {\n        gl.drawElements(gl.TRIANGLES, count * currentBuffer.entryIndexSize, gl.UNSIGNED_SHORT, 0);\n    }\n    else\n    {\n        gl.drawArrays(gl.TRIANGLES, 0, count * currentBuffer.elementsPerEntry);\n    }\n\n    if (renderToFramebuffer)\n    {\n        PopFramebuffer();\n    }\n}\n", "import { Draw } from './Draw';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Flush (renderPass: IRenderPass, forceCount?: number): boolean\n{\n    if (forceCount)\n    {\n        renderPass.count = forceCount;\n    }\n\n    const count = renderPass.count;\n\n    if (count === 0)\n    {\n        return false;\n    }\n\n    Draw(renderPass);\n\n    renderPass.flush();\n\n    return true;\n}\n", "import { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\n\nexport function End (renderPass: IRenderPass): void\n{\n    Flush(renderPass);\n}\n", "import { ICompressedTextures } from './ICompressedTextures';\n\nexport function GetCompressedTextures (gl: WebGLRenderingContext): ICompressedTextures\n{\n    const extString = 'WEBGL_compressed_texture_';\n    const wkExtString = 'WEBKIT_' + extString;\n\n    const hasExt = (format: string) =>\n    {\n        const results = gl.getExtension(extString + format) || gl.getExtension(wkExtString + format);\n\n        if (results)\n        {\n            const glEnums = {};\n\n            for (const key in results)\n            {\n                glEnums[results[key]] = key;\n            }\n\n            return glEnums;\n        }\n    };\n\n    return {\n        ETC: hasExt('etc'),\n        ETC1: hasExt('etc1'),\n        ATC: hasExt('atc'),\n        ASTC: hasExt('astc'),\n        BPTC: hasExt('bptc'),\n        RGTC: hasExt('rgtc'),\n        PVRTC: hasExt('pvrtc'),\n        S3TC: hasExt('s3tc'),\n        S3TCSRGB: hasExt('s3tc_srgb'),\n        IMG: true\n    };\n}\n", "export function GetRGBArray (color: number, output: number[] = []): number[]\n{\n    const r: number = color >> 16 & 0xFF;\n    const g: number = color >> 8 & 0xFF;\n    const b: number = color & 0xFF;\n    const a: number = (color > 16777215) ? color >>> 24 : 255;\n\n    output[0] = r / 255;\n    output[1] = g / 255;\n    output[2] = b / 255;\n    output[3] = a / 255;\n\n    return output;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWebGLContext (): WebGLContextAttributes\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.WEBGL_CONTEXT);\n}\n", "import { IRenderer } from './IRenderer';\n\nexport let instance: IRenderer;\n\nexport const RendererInstance =\n{\n    get: (): IRenderer =>\n    {\n        return instance;\n    },\n\n    set: (renderer: IRenderer | undefined): void =>\n    {\n        instance = renderer;\n    }\n};\n", "import { RendererInstance } from '../RendererInstance';\nimport { WebGLRenderer } from './WebGLRenderer';\n\nexport let instance: WebGLRenderer;\n\nexport const WebGLRendererInstance =\n{\n    get: (): WebGLRenderer =>\n    {\n        return instance;\n    },\n\n    set: (renderer: WebGLRenderer | undefined): void =>\n    {\n        instance = renderer;\n        RendererInstance.set(renderer);\n    }\n};\n", "import { End } from './renderpass/End';\nimport { GL } from './GL';\nimport { GetBackgroundColor } from '../../config/backgroundcolor/GetBackgroundColor';\nimport { GetCompressedTextures } from './textures/GetCompressedTextures';\nimport { GetHeight } from '../../config/size/GetHeight';\nimport { GetRGBArray } from './colors/GetRGBArray';\nimport { GetResolution } from '../../config/size/GetResolution';\nimport { GetWebGLContext } from '../../config/webglcontext/GetWebGLContext';\nimport { GetWidth } from '../../config/size/GetWidth';\nimport { ICompressedTextures } from './textures/ICompressedTextures';\nimport { IRenderPass } from './renderpass/IRenderPass';\nimport { ProcessBindingQueue } from './renderpass/ProcessBindingQueue';\nimport { RenderPass } from './renderpass/RenderPass';\nimport { Start } from './renderpass/Start';\nimport { WebGLRendererInstance } from './WebGLRendererInstance';\n\nexport class WebGLRenderer\n{\n    canvas: HTMLCanvasElement;\n    gl: WebGLRenderingContext;\n\n    renderPass: IRenderPass;\n\n    clearColor = [ 0, 0, 0, 1 ];\n\n    width: number;\n    height: number;\n    resolution: number;\n\n    clearBeforeRender: boolean = true;\n    optimizeRedraw: boolean = true;\n    autoResize: boolean = true;\n\n    contextLost: boolean = false;\n\n    compression: ICompressedTextures;\n\n    constructor ()\n    {\n        this.width = GetWidth();\n        this.height = GetHeight();\n        this.resolution = GetResolution();\n\n        this.setBackgroundColor(GetBackgroundColor());\n\n        const canvas = document.createElement('canvas');\n\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\n\n        this.canvas = canvas;\n\n        this.initContext();\n\n        //  By this stage the context is available\n        WebGLRendererInstance.set(this);\n\n        this.renderPass = new RenderPass(this);\n\n        this.resize(this.width, this.height, this.resolution);\n\n        //  Process default textures from the Texture Manager\n        ProcessBindingQueue();\n    }\n\n    initContext (): void\n    {\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\n\n        GL.set(gl);\n\n        this.gl = gl;\n\n        this.compression = GetCompressedTextures(gl);\n\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n    }\n\n    resize (width: number, height: number, resolution: number = 1): void\n    {\n        const calcWidth = width * resolution;\n        const calcHeight = height * resolution;\n\n        this.width = calcWidth;\n        this.height = calcHeight;\n        this.resolution = resolution;\n\n        const canvas = this.canvas;\n\n        canvas.width = calcWidth;\n        canvas.height = calcHeight;\n\n        if (this.autoResize)\n        {\n            canvas.style.width = width.toString() + 'px';\n            canvas.style.height = height.toString() + 'px';\n        }\n\n        this.renderPass.resize(calcWidth, calcHeight);\n    }\n\n    onContextLost (event: Event): void\n    {\n        event.preventDefault();\n\n        this.contextLost = true;\n    }\n\n    onContextRestored (): void\n    {\n        this.contextLost = false;\n\n        this.initContext();\n    }\n\n    setBackgroundColor (color: number): this\n    {\n        GetRGBArray(color, this.clearColor);\n\n        return this;\n    }\n\n    //  TODO - Remove?\n    reset (): void\n    {\n        // this.renderPass.reset();\n    }\n\n    begin (willRedraw: boolean): IRenderPass\n    {\n        if (this.contextLost)\n        {\n            return;\n        }\n\n        const gl = this.gl;\n\n        //  This is only here because if we don't do _something_ with the context,\n        //  GL Spector can't see it!\n        gl.getContextAttributes();\n\n        ProcessBindingQueue();\n\n        //  Nothing dirty? Display the previous frame\n        if (this.optimizeRedraw && !willRedraw)\n        {\n            // return;\n        }\n\n        if (this.clearBeforeRender)\n        {\n            const cls = this.clearColor;\n\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        return Start(this.renderPass);\n    }\n\n    end (): void\n    {\n        End(this.renderPass);\n\n        // eslint-disable-next-line no-debugger\n        // debugger;\n    }\n\n    destroy (): void\n    {\n        WebGLRendererInstance.set(undefined);\n    }\n}\n", "import { SetRenderer } from '../renderer/SetRenderer';\nimport { WebGLRenderer } from '../../renderer/webgl1/WebGLRenderer';\n\nexport function WebGL (): () => void\n{\n    return (): void =>\n    {\n        SetRenderer(WebGLRenderer);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetWebGLContext (contextAttributes: WebGLContextAttributes): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.WEBGL_CONTEXT, contextAttributes);\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function GetLastChildID (parentID: number): number\n{\n    return HierarchyComponent.data[parentID][HIERARCHY.LAST];\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function GetNumChildren (id: number): number\n{\n    return HierarchyComponent.data[id][HIERARCHY.NUM_CHILDREN];\n}\n", "import { GetParentID } from '../components/hierarchy/GetParentID';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function IsValidParent <P extends IGameObject, C extends IGameObject> (parent: P, child: C): boolean\n{\n    const childID = child.id;\n    const parentID = parent.id;\n\n    //  It's not a valid parent if:\n\n    //  1) The parent ID is zero (only the Game instance can be zero)\n    //  2) The Child ID matches the Parent ID\n    //  3) The parent is already the child's parent\n\n    return !(parentID === 0 || childID === parentID || parentID === GetParentID(childID));\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function SetNextSiblingID (parentID: number, childID: number): void\n{\n    HierarchyComponent.data[parentID][HIERARCHY.NEXT] = childID;\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function SetPreviousSiblingID (parentID: number, childID: number): void\n{\n    HierarchyComponent.data[parentID][HIERARCHY.PREV] = childID;\n}\n", "import { SetNextSiblingID } from './SetNextSiblingID';\nimport { SetPreviousSiblingID } from './SetPreviousSiblingID';\n\n//  A linked to B\n\n//  A.next = B\n//  B.prev = A\n\nexport function LinkSiblings (childA: number, childB: number): void\n{\n    SetNextSiblingID(childA, childB);\n    SetPreviousSiblingID(childB, childA);\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function GetFirstChildID (parentID: number): number\n{\n    return HierarchyComponent.data[parentID][HIERARCHY.FIRST];\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function GetNextSiblingID (id: number): number\n{\n    return HierarchyComponent.data[id][HIERARCHY.NEXT];\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function GetPreviousSiblingID (id: number): number\n{\n    return HierarchyComponent.data[id][HIERARCHY.PREV];\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function SetLastChildID (parentID: number, childID: number): void\n{\n    HierarchyComponent.data[parentID][HIERARCHY.LAST] = childID;\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function SetFirstChildID (parentID: number, childID: number): void\n{\n    HierarchyComponent.data[parentID][HIERARCHY.FIRST] = childID;\n}\n", "import { GameObjectWorld } from '../../GameObjectWorld';\nimport { HierarchyComponent } from './HierarchyComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddHierarchyComponent (id: number): void\n{\n    addComponent(GameObjectWorld, HierarchyComponent, id);\n}\n", "import { SetNextSiblingID } from './SetNextSiblingID';\nimport { SetPreviousSiblingID } from './SetPreviousSiblingID';\n\nexport function ClearSiblings (id: number): void\n{\n    SetNextSiblingID(id, 0);\n    SetPreviousSiblingID(id, 0);\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function DecreaseNumChildren (parentID: number, total: number = 1): void\n{\n    const data = HierarchyComponent.data[parentID];\n\n    data[HIERARCHY.NUM_CHILDREN] = Math.max(0, data[HIERARCHY.NUM_CHILDREN] - total);\n}\n", "import { IGameObject } from './IGameObject';\n\nexport const GameObjectCache = {\n\n    local: <IGameObject[]>[],\n\n    set: function (index: number, object: IGameObject): void\n    {\n        this.local[index] = object;\n    },\n\n    get: function (index: number): IGameObject\n    {\n        return this.local[index];\n    },\n\n    clear: function (): void\n    {\n        this.local.length = 0;\n    },\n\n    remove: function (index: number): void\n    {\n        this.local[index] = null;\n    }\n};\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function GetWorldID (id: number): number\n{\n    return HierarchyComponent.data[id][HIERARCHY.WORLD];\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\nimport { hasComponent, removeComponent } from 'bitecs';\n\nimport { DecreaseNumChildren } from './DecreaseNumChildren';\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { GetParentID } from './GetParentID';\nimport { GetWorldID } from './GetWorldID';\nimport { IBaseWorld } from '../../world/IBaseWorld';\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\n\nexport function ClearWorldAndParentID (id: number): void\n{\n    const worldID = GetWorldID(id);\n    const parentID = GetParentID(id);\n    const world = GameObjectCache.get(worldID) as IBaseWorld;\n\n    HierarchyComponent.data[id][HIERARCHY.WORLD] = 0;\n    HierarchyComponent.data[id][HIERARCHY.PARENT] = 0;\n\n    if (world && hasComponent(GameObjectWorld, world.tag, id))\n    {\n        removeComponent(GameObjectWorld, world.tag, id);\n    }\n\n    DecreaseNumChildren(parentID);\n\n    SetDirtyParents(id);\n}\n", "import { GetFirstChildID } from './GetFirstChildID';\nimport { GetNextSiblingID } from './GetNextSiblingID';\nimport { GetParentID } from './GetParentID';\n\nexport function MoveNext (id: number, rootID: number): number\n{\n    //  Does 'id' have any children of its own?\n    const firstChild = GetFirstChildID(id);\n\n    if (firstChild > 0)\n    {\n        return firstChild;\n    }\n    else\n    {\n        const sibling = GetNextSiblingID(id);\n\n        if (sibling === 0)\n        {\n            //  No more children, how about from the parent?\n            const parent = GetParentID(id);\n\n            if (parent === rootID)\n            {\n                //  We're at the end of the list\n                return 0;\n            }\n            else\n            {\n                return GetNextSiblingID(parent);\n            }\n        }\n        else\n        {\n            return sibling;\n        }\n    }\n}\n", "import { GetFirstChildID } from './GetFirstChildID';\nimport { MoveNext } from './MoveNext';\n\n//  Returns ALL child IDs based on the given Parent, to any depth\n\nexport function DepthFirstSearchFromParentID (parentID: number, removeParent: boolean = true): number[]\n{\n    const output: number[] = [ parentID ];\n\n    let next = GetFirstChildID(parentID);\n\n    while (next > 0)\n    {\n        output.push(next);\n\n        next = MoveNext(next, parentID);\n    }\n\n    //  Remove the parent from the results\n    if (removeParent)\n    {\n        output.shift();\n    }\n\n    return output;\n}\n", "import { GetFirstChildID } from './GetFirstChildID';\nimport { GetNextSiblingID } from './GetNextSiblingID';\nimport { IGameObject } from '../../gameobjects/IGameObject';\n\nexport function GetChildIDsFromParent <T extends IGameObject> (parent: T): number[]\n{\n    let next = GetFirstChildID(parent.id);\n\n    const output = [];\n\n    while (next > 0)\n    {\n        output.push(next);\n\n        next = GetNextSiblingID(next);\n    }\n\n    return output;\n}\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { GetFirstChildID } from './GetFirstChildID';\nimport { GetNextSiblingID } from './GetNextSiblingID';\nimport { IGameObject } from '../../gameobjects/IGameObject';\n\nexport function GetChildrenFromParentID (id: number): IGameObject[]\n{\n    const out: IGameObject[] = [];\n\n    let next = GetFirstChildID(id);\n\n    while (next > 0)\n    {\n        out.push(GameObjectCache.get(next));\n\n        next = GetNextSiblingID(next);\n    }\n\n    return out;\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { IGameObject } from '../../gameobjects/IGameObject';\n\nexport function GetParentGameObject (id: number): IGameObject\n{\n    return GameObjectCache.get(HierarchyComponent.data[id][HIERARCHY.PARENT]);\n}\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { GetWorldID } from './GetWorldID';\nimport { IBaseWorld } from '../../world/IBaseWorld';\n\nexport function GetWorldFromID (childID: number): IBaseWorld | undefined\n{\n    const worldID = GetWorldID(childID);\n\n    if (worldID)\n    {\n        return GameObjectCache.get(worldID) as IBaseWorld;\n    }\n}\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { GetWorldID } from './GetWorldID';\nimport { IBaseWorld } from '../../world/IBaseWorld';\n\nexport function GetWorldFromParentID (parentID: number): IBaseWorld | undefined\n{\n    const worldID = GetWorldID(parentID);\n\n    return GameObjectCache.get(worldID) as IBaseWorld;\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function HasChildren (id: number): boolean\n{\n    return !!(HierarchyComponent.data[id][HIERARCHY.NUM_CHILDREN] > 0);\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function GetVisibleChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.data[id][PERMISSION.VISIBLE_CHILDREN]);\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nimport { GetVisibleChildren } from './GetVisibleChildren';\n\nexport function WillRenderChildren (id: number): boolean\n{\n    return GetVisibleChildren(id) && !!(PermissionsComponent.data[id][PERMISSION.WILL_RENDER_CHILDREN]);\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function WillUpdateChildren (id: number): boolean\n{\n    return !!(PermissionsComponent.data[id][PERMISSION.WILL_UPDATE_CHILDREN]);\n}\n", "import { GetFirstChildID } from './GetFirstChildID';\nimport { GetNextSiblingID } from './GetNextSiblingID';\nimport { GetParentID } from './GetParentID';\nimport { GetWorldID } from './GetWorldID';\nimport { WillUpdateChildren } from '../permissions/WillUpdateChildren';\n\nexport function MoveNextUpdatable (id: number): number\n{\n    //  Does 'id' have any children of its own?\n    const firstChild = GetFirstChildID(id);\n\n    if (firstChild > 0 && WillUpdateChildren(id))\n    {\n        return firstChild;\n    }\n    else\n    {\n        const sibling = GetNextSiblingID(id);\n\n        if (sibling === 0)\n        {\n            //  No more children, how about from the parent?\n            const parent = GetParentID(id);\n\n            if (parent === GetWorldID(id))\n            {\n                //  We're at the end of the list\n                return 0;\n            }\n            else\n            {\n                return GetNextSiblingID(parent);\n            }\n        }\n        else\n        {\n            return sibling;\n        }\n    }\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function SetNumChildren (parentID: number, total: number): void\n{\n    HierarchyComponent.data[parentID][HIERARCHY.NUM_CHILDREN] = total;\n}\n", "import { LinkSiblings } from './LinkSiblings';\nimport { SetFirstChildID } from './SetFirstChildID';\nimport { SetLastChildID } from './SetLastChildID';\nimport { SetNumChildren } from './SetNumChildren';\n\nexport function RelinkChildren (parentID: number, children: number[]): void\n{\n    const len = children.length;\n\n    if (len === 0)\n    {\n        SetNumChildren(parentID, 0);\n        SetFirstChildID(parentID, 0);\n        SetLastChildID(parentID, 0);\n\n        return;\n    }\n\n    let total = 1;\n\n    let childA = children[0];\n\n    SetFirstChildID(parentID, childA);\n\n    if (len === 1)\n    {\n        SetLastChildID(parentID, childA);\n\n        SetNumChildren(parentID, total);\n\n        return;\n    }\n\n    for (let i = 1; i < len; i++)\n    {\n        const childB = children[i];\n\n        LinkSiblings(childA, childB);\n\n        childA = childB;\n\n        total++;\n    }\n\n    SetLastChildID(parentID, childA);\n\n    SetNumChildren(parentID, total);\n}\n", "import { ClearSiblings } from './ClearSiblings';\nimport { GetFirstChildID } from './GetFirstChildID';\nimport { GetLastChildID } from './GetLastChildID';\nimport { GetNextSiblingID } from './GetNextSiblingID';\nimport { GetParentID } from './GetParentID';\nimport { GetPreviousSiblingID } from './GetPreviousSiblingID';\nimport { LinkSiblings } from './LinkSiblings';\nimport { SetFirstChildID } from './SetFirstChildID';\nimport { SetLastChildID } from './SetLastChildID';\n\nexport function RemoveChildID (childID: number): void\n{\n    const parentID = GetParentID(childID);\n\n    const first = GetFirstChildID(parentID);\n    const last = GetLastChildID(parentID);\n\n    const prevID = GetPreviousSiblingID(childID);\n    const nextID = GetNextSiblingID(childID);\n\n    LinkSiblings(prevID, nextID);\n\n    if (first === childID)\n    {\n        SetFirstChildID(parentID, nextID);\n    }\n\n    if (last === childID)\n    {\n        SetLastChildID(parentID, prevID);\n    }\n\n    ClearSiblings(childID);\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function SetWorldID (id: number, worldID: number): void\n{\n    HierarchyComponent.data[id][HIERARCHY.WORLD] = worldID;\n}\n", "import { DepthFirstSearchFromParentID } from './DepthFirstSearchFromParentID';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { GetWorldFromParentID } from './GetWorldFromParentID';\nimport { SetWorldID } from './SetWorldID';\nimport { removeComponent } from 'bitecs';\n\nexport function RemoveWorldTag (id: number): void\n{\n    const world = GetWorldFromParentID(id);\n\n    const children = DepthFirstSearchFromParentID(id, false);\n\n    children.map(childID =>\n    {\n        removeComponent(GameObjectWorld, world.tag, childID);\n\n        SetWorldID(childID, 0);\n    });\n}\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\n\nexport function SetParentID (childID: number, parentID: number): void\n{\n    HierarchyComponent.data[childID][HIERARCHY.PARENT] = parentID;\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function WillTransformChildren (id: number): boolean\n{\n    return !!(PermissionsComponent.data[id][PERMISSION.WILL_TRANSFORM_CHILDREN]);\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { GetParentID } from '../hierarchy/GetParentID';\nimport { GetWorldID } from '../hierarchy/GetWorldID';\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\n\nexport function SetRootTransform (id: number): void\n{\n    const worldID = GetWorldID(id);\n    let currentParent = GetParentID(id);\n\n    let isRootTransform = true;\n\n    while (currentParent && currentParent !== worldID)\n    {\n        if (WillTransformChildren(currentParent))\n        {\n            isRootTransform = false;\n            break;\n        }\n\n        currentParent = GetParentID(currentParent);\n    }\n\n    Transform2DComponent.data[id][TRANSFORM.IS_ROOT] = Number(isRootTransform);\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyChildColor (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.CHILD_COLOR] = 1;\n}\n", "import { DepthFirstSearchFromParentID } from './DepthFirstSearchFromParentID';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { IBaseWorld } from '../../world/IBaseWorld';\nimport { SetDirtyChildColor } from '../dirty/SetDirtyChildColor';\nimport { SetWorldID } from './SetWorldID';\nimport { addComponent } from 'bitecs';\n\nexport function SetWorldTag <W extends IBaseWorld> (world: W, id: number): void\n{\n    const worldID = world.id;\n    const worldTag = world.tag;\n\n    const children = DepthFirstSearchFromParentID(id, false);\n\n    children.map(childID =>\n    {\n        addComponent(GameObjectWorld, worldTag, childID);\n\n        SetWorldID(childID, worldID);\n    });\n\n    world.updateDisplayList = true;\n\n    SetDirtyChildColor(worldID);\n}\n", "import { GetNumChildren } from './GetNumChildren';\nimport { GetWorldFromParentID } from './GetWorldFromParentID';\nimport { SetDirtyChildCache } from '../dirty/SetDirtyChildCache';\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\nimport { SetNumChildren } from './SetNumChildren';\nimport { SetParentID } from './SetParentID';\nimport { SetRootTransform } from '../transform/SetRootTransform';\nimport { SetWorldTag } from './SetWorldTag';\nimport { WillCacheChildren } from '../permissions/WillCacheChildren';\n\nexport function SetAndUpdateParent (parentID: number, childID: number, addChildren: number = 1): void\n{\n    SetParentID(childID, parentID);\n\n    if (!WillCacheChildren(childID))\n    {\n        SetDirtyTransform(childID);\n    }\n\n    SetDirtyParents(childID);\n\n    SetRootTransform(childID);\n\n    SetNumChildren(parentID, GetNumChildren(parentID) + addChildren);\n\n    if (WillCacheChildren(parentID))\n    {\n        SetDirtyChildCache(parentID);\n    }\n\n    const world = GetWorldFromParentID(parentID);\n\n    if (world)\n    {\n        SetWorldTag(world, childID);\n    }\n}\n", "import { GetFirstChildID } from './GetFirstChildID';\nimport { GetLastChildID } from './GetLastChildID';\nimport { GetNextSiblingID } from './GetNextSiblingID';\nimport { GetNumChildren } from './GetNumChildren';\nimport { GetParentID } from './GetParentID';\nimport { GetPreviousSiblingID } from './GetPreviousSiblingID';\nimport { GetWorldFromID } from './index';\nimport { RemoveWorldTag } from './RemoveWorldTag';\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\nimport { SetFirstChildID } from './SetFirstChildID';\nimport { SetLastChildID } from './SetLastChildID';\nimport { SetNextSiblingID } from './SetNextSiblingID';\nimport { SetNumChildren } from './SetNumChildren';\nimport { SetParentID } from './SetParentID';\nimport { SetPreviousSiblingID } from './SetPreviousSiblingID';\n\nexport function RemoveChildIDFromCurrentParent (childID: number, newParentID?: number): void\n{\n    const parentID = GetParentID(childID);\n\n    if (parentID)\n    {\n        const firstID = GetFirstChildID(parentID);\n        const lastID = GetLastChildID(parentID);\n\n        const nextID = GetNextSiblingID(childID);\n        const prevID = GetPreviousSiblingID(childID);\n\n        if (childID === firstID)\n        {\n            SetFirstChildID(parentID, nextID);\n        }\n\n        if (childID === lastID)\n        {\n            SetLastChildID(parentID, prevID);\n        }\n\n        if (nextID)\n        {\n            SetPreviousSiblingID(nextID, prevID);\n        }\n\n        if (prevID)\n        {\n            SetNextSiblingID(prevID, nextID);\n        }\n\n        SetDirtyParents(childID);\n\n        SetParentID(childID, 0);\n\n        SetNumChildren(parentID, GetNumChildren(parentID) - 1);\n    }\n\n    const oldWorld = GetWorldFromID(childID);\n    const newWorld = (newParentID) ? GetWorldFromID(newParentID) : null;\n\n    if (oldWorld && oldWorld !== newWorld)\n    {\n        RemoveWorldTag(childID);\n    }\n}\n", "import { GetLastChildID } from '../components/hierarchy/GetLastChildID';\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { IsValidParent } from './IsValidParent';\nimport { LinkSiblings } from '../components/hierarchy/LinkSiblings';\nimport { RemoveChildIDFromCurrentParent } from '../components/hierarchy/RemoveChildIDFromCurrentParent';\nimport { SetAndUpdateParent } from '../components/hierarchy/SetAndUpdateParent';\nimport { SetFirstChildID } from '../components/hierarchy/SetFirstChildID';\nimport { SetLastChildID } from '../components/hierarchy/SetLastChildID';\n\nexport function AddChild <P extends IGameObject, C extends IGameObject> (parent: P, child: C): C\n{\n    if (IsValidParent(parent, child))\n    {\n        const childID = child.id;\n        const parentID = parent.id;\n        const numChildren = GetNumChildren(parentID);\n\n        RemoveChildIDFromCurrentParent(childID, parentID);\n\n        if (numChildren === 0)\n        {\n            SetFirstChildID(parentID, childID);\n        }\n        else\n        {\n            const lastChild = GetLastChildID(parentID);\n\n            LinkSiblings(lastChild, childID);\n        }\n\n        SetLastChildID(parentID, childID);\n\n        SetAndUpdateParent(parentID, childID);\n\n        parent.onAddChild(childID);\n    }\n\n    return child;\n}\n", "import { ClearWorldAndParentID } from '../components/hierarchy/ClearWorldAndParentID';\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\nimport { GetChildIDsFromParent } from '../components/hierarchy/GetChildIDsFromParent';\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RelinkChildren } from '../components/hierarchy/RelinkChildren';\n\nexport function RemoveChildrenBetween <P extends IGameObject> (parent: P, beginIndex: number = 0, endIndex?: number): IGameObject[]\n{\n    const parentID = parent.id;\n\n    if (endIndex === undefined)\n    {\n        endIndex = GetNumChildren(parentID);\n    }\n\n    const range = endIndex - beginIndex;\n\n    if (range > 0 && range <= endIndex)\n    {\n        const children = GetChildIDsFromParent(parent);\n\n        const removed = children.splice(beginIndex, range);\n\n        removed.forEach(childID =>\n        {\n            ClearWorldAndParentID(childID);\n        });\n\n        RelinkChildren(parentID, children);\n\n        removed.forEach(id => parent.onRemoveChild(id));\n\n        return removed.map(id => GameObjectCache.get(id));\n    }\n    else\n    {\n        return [];\n    }\n}\n", "import { GetWorldFromParentID } from '../components/hierarchy/GetWorldFromParentID';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\n\nexport function DestroyChildren <T extends IGameObject> (parent: T, beginIndex: number = 0, endIndex?: number): void\n{\n    const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\n\n    removed.forEach(child =>\n    {\n        child.destroy();\n    });\n\n    const world = GetWorldFromParentID(parent.id);\n\n    if (world)\n    {\n        world.updateDisplayList = true;\n    }\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nexport const ColorComponent = defineComponent({\n    r: Types.ui8c,\n    g: Types.ui8c,\n    b: Types.ui8c,\n    a: Types.f32,\n    colorMatrix: [ Types.f32, 16 ],\n    colorOffset: [ Types.f32, 4 ]\n});\n", "import { ColorComponent } from './ColorComponent';\nimport { DEFAULT_COLOR_MATRIX } from '../../colormatrix/const';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { addComponent } from 'bitecs';\n\nexport function AddColorComponent (id: number): void\n{\n    addComponent(GameObjectWorld, ColorComponent, id);\n\n    ColorComponent.r[id] = 255;\n    ColorComponent.g[id] = 255;\n    ColorComponent.b[id] = 255;\n    ColorComponent.a[id] = 1;\n    ColorComponent.colorMatrix[id].set(DEFAULT_COLOR_MATRIX);\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nimport { GetWorldID } from '../hierarchy/GetWorldID';\n\nexport function SetDirtyColor (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.COLOR] = 1;\n\n    //  TODO - Set dirty parents color\n\n    const world = GetWorldID(id);\n\n    if (world)\n    {\n        DirtyComponent.data[world][DIRTY.CHILD_COLOR] = 1;\n    }\n}\n", "import { DirtyComponent } from './DirtyComponent';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { SetDirtyColor } from './SetDirtyColor';\nimport { addComponent } from 'bitecs';\n\nexport function AddDirtyComponent (id: number): void\n{\n    addComponent(GameObjectWorld, DirtyComponent, id);\n\n    SetDirtyColor(id);\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function ClearDirtyChildColor (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.CHILD_COLOR] = 0;\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function ClearDirtyChildTransform (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.CHILD_TRANSFORM] = 0;\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function ClearDirtyColor (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.COLOR] = 0;\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function ClearDirtyWorldTransform (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.WORLD_TRANSFORM] = 0;\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyChildCache (id: number): boolean\n{\n    return !!(DirtyComponent.data[id][DIRTY.CHILD_CACHE]);\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyChildColor (id: number): boolean\n{\n    return !!(DirtyComponent.data[id][DIRTY.CHILD_COLOR]);\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyChildTransform (id: number): boolean\n{\n    return !!(DirtyComponent.data[id][DIRTY.CHILD_TRANSFORM]);\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyColor (id: number): boolean\n{\n    return !!(DirtyComponent.data[id][DIRTY.COLOR]);\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyDisplayList (id: number): boolean\n{\n    return !!(DirtyComponent.data[id][DIRTY.DISPLAY_LIST]);\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyWorldTransform (id: number): boolean\n{\n    return !!(DirtyComponent.data[id][DIRTY.WORLD_TRANSFORM]);\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyWorldTransform (id: number): void\n{\n    DirtyComponent.data[id][DIRTY.WORLD_TRANSFORM] = 1;\n}\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\n\nexport function WillUpdateTransform (id: number): boolean\n{\n    const data = DirtyComponent.data[id];\n\n    return !!(data[DIRTY.WORLD_TRANSFORM] || data[DIRTY.CHILD_TRANSFORM]);\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function SetWillColorChildren (id: number, value: boolean): void\n{\n    PermissionsComponent.data[id][PERMISSION.WILL_COLOR_CHILDREN] = Number(value);\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function WillColorChildren (id: number): boolean\n{\n    return !!(PermissionsComponent.data[id][PERMISSION.WILL_COLOR_CHILDREN]);\n}\n", "import { AddColorComponent } from './AddColorComponent';\nimport { ColorComponent } from './ColorComponent';\nimport { SetDirtyColor } from '../dirty';\nimport { SetWillColorChildren } from '../permissions/SetWillColorChildren';\nimport { WillColorChildren } from '../permissions/WillColorChildren';\n\n//  red, green, blue in the range 0-255\n//  alpha in the range 0-1\n//  colorMatrix Float32Array of length 16, values are 0 to 1\n//  colorOffset Float32Array of length 4, values are integer\n\nexport class Color\n{\n    private id: number;\n\n    colorMatrixEnabled: boolean = false;\n\n    constructor (id: number, red: number = 255, green: number = 255, blue: number = 255, alpha: number = 1)\n    {\n        AddColorComponent(id);\n\n        this.id = id;\n\n        this.set(red, green, blue, alpha);\n    }\n\n    set (red: number, green: number, blue: number, alpha: number): void\n    {\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n        this.alpha = alpha;\n    }\n\n    //  In the range 0x000000 to 0xffffff (alpha is ignored)\n    set tint (value: number)\n    {\n        this.red = (value >> 16) & 0xff;\n        this.green = (value >> 8) & 0xff;\n        this.blue = value & 0xff;\n    }\n\n    get tint (): number\n    {\n        return this.red << 16 | this.green << 8 | this.blue;\n    }\n\n    set willColorChildren (value: boolean)\n    {\n        SetWillColorChildren(this.id, value);\n    }\n\n    get willColorChildren (): boolean\n    {\n        return WillColorChildren(this.id);\n    }\n\n    //  16 element array (4x4)\n    set colorMatrix (value: Float32List)\n    {\n        ColorComponent.colorMatrix[this.id].set(value);\n\n        SetDirtyColor(this.id);\n\n        this.colorMatrixEnabled = true;\n    }\n\n    get colorMatrix (): Float32Array\n    {\n        return ColorComponent.colorMatrix[this.id];\n    }\n\n    //  4 element array (vec4)\n    set colorOffset (value: Float32List)\n    {\n        ColorComponent.colorOffset[this.id].set(value);\n\n        SetDirtyColor(this.id);\n    }\n\n    get colorOffset (): Float32Array\n    {\n        return ColorComponent.colorOffset[this.id];\n    }\n\n    //  All in the range 0-255 or 0x00-0xFF\n    set red (value: number)\n    {\n        ColorComponent.r[this.id] = value;\n\n        SetDirtyColor(this.id);\n    }\n\n    get red (): number\n    {\n        return ColorComponent.r[this.id];\n    }\n\n    set green (value: number)\n    {\n        ColorComponent.g[this.id] = value;\n\n        SetDirtyColor(this.id);\n    }\n\n    get green (): number\n    {\n        return ColorComponent.g[this.id];\n    }\n\n    set blue (value: number)\n    {\n        ColorComponent.b[this.id] = value;\n\n        SetDirtyColor(this.id);\n    }\n\n    get blue (): number\n    {\n        return ColorComponent.b[this.id];\n    }\n\n    set alpha (value: number)\n    {\n        ColorComponent.a[this.id] = value;\n\n        SetDirtyColor(this.id);\n    }\n\n    get alpha (): number\n    {\n        return ColorComponent.a[this.id];\n    }\n}\n", "import { GameObjectWorld } from '../../GameObjectWorld';\nimport { PermissionsComponent } from './PermissionsComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddPermissionsComponent (id: number): void\n{\n    addComponent(GameObjectWorld, PermissionsComponent, id);\n\n    PermissionsComponent.data[id].set([ 1, 1, 1, 1, 1, 1, 0, 1, 1, 0 ]);\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function GetVisible (id: number): boolean\n{\n    return Boolean(PermissionsComponent.data[id][PERMISSION.VISIBLE]);\n}\n", "import { AddChild } from './AddChild';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\n\nexport function ReparentChildren <P extends IGameObject, T extends IGameObject> (parent: P, newParent: T, beginIndex: number = 0, endIndex?: number): IGameObject[]\n{\n    const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\n\n    moved.forEach(child =>\n    {\n        AddChild(newParent, child);\n    });\n\n    return moved;\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\n\nexport function SetVisible (id: number, value: boolean): void\n{\n    PermissionsComponent.data[id][PERMISSION.VISIBLE] = Number(value);\n\n    SetDirtyParents(id);\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\n\nexport function SetVisibleChildren (id: number, value: boolean): void\n{\n    PermissionsComponent.data[id][PERMISSION.VISIBLE_CHILDREN] = Number(value);\n\n    SetDirtyParents(id);\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function WillRender (id: number): boolean\n{\n    return !!(PermissionsComponent.data[id][PERMISSION.VISIBLE]) &&\n           !!(PermissionsComponent.data[id][PERMISSION.WILL_RENDER]);\n}\n", "import { HIERARCHY, HierarchyComponent } from '../components/hierarchy/HierarchyComponent';\n\nimport { AddDirtyComponent } from '../components/dirty/AddDirtyComponent';\nimport { AddHierarchyComponent } from '../components/hierarchy/AddHierarchyComponent';\nimport { AddPermissionsComponent } from '../components/permissions/AddPermissionsComponent';\nimport { DestroyChildren } from '../display/DestroyChildren';\nimport { DestroyEvent } from './events/DestroyEvent';\nimport { Emit } from '../events/Emit';\nimport { GameObjectCache } from './GameObjectCache';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { GetChildrenFromParentID } from '../components/hierarchy/GetChildrenFromParentID';\nimport { GetDepth } from '../components/hierarchy/GetDepth';\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\nimport { GetParentGameObject } from '../components/hierarchy/GetParentGameObject';\nimport { GetParentID } from '../components/hierarchy/GetParentID';\nimport { GetVisible } from '../components/permissions/GetVisible';\nimport { GetVisibleChildren } from '../components/permissions/GetVisibleChildren';\nimport { ICanvasRenderer } from '../renderer/canvas/ICanvasRenderer';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IGameObject } from './IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { ReparentChildren } from '../display/ReparentChildren';\nimport { SetDepth } from '../components/hierarchy/SetDepth';\nimport { SetVisible } from '../components/permissions/SetVisible';\nimport { SetVisibleChildren } from '../components/permissions/SetVisibleChildren';\nimport { WillRender } from '../components/permissions/WillRender';\nimport { addEntity } from 'bitecs';\n\nexport class GameObject implements IGameObject\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    readonly type: string = 'GameObject';\n\n    //  User defined name. Never used internally.\n    name: string = '';\n\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor ()\n    {\n        const id = this.id;\n\n        AddHierarchyComponent(id);\n        AddPermissionsComponent(id);\n        AddDirtyComponent(id);\n\n        GameObjectCache.set(id, this);\n\n        // this.events = new Map();\n    }\n\n    isRenderable (): boolean\n    {\n        return WillRender(this.id);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    beforeUpdate (delta: number, time: number): void\n    {\n        //  Empty for parent classes to use.\n        //  Called before this GameObject and all of its children have been updated.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    update (delta: number, time: number): void\n    {\n        //  Empty for parent classes to use.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    afterUpdate (delta: number, time: number): void\n    {\n        //  Empty for parent classes to use.\n        //  Called after this GameObject and all of its children have been updated.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    preRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        //  Called before this GameObject and all of its children have been rendered.\n        //  If this Game Object won't render, this method is never called.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        //  Called after this GameObject and all of its children have been rendered.\n        //  If this Game Object won't render, this method is never called.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n        //  Called after this GameObject and all of its children have been rendered.\n        //  If this Game Object won't render, this method is never called.\n    }\n\n    set visible (value: boolean)\n    {\n        SetVisible(this.id, value);\n    }\n\n    get visible (): boolean\n    {\n        return GetVisible(this.id);\n    }\n\n    set visibleChildren (value: boolean)\n    {\n        SetVisibleChildren(this.id, value);\n    }\n\n    get visibleChildren (): boolean\n    {\n        return GetVisibleChildren(this.id);\n    }\n\n    /*\n    set depth (value: number)\n    {\n        SetDepth(this.id, value);\n    }\n\n    get depth (): number\n    {\n        return GetDepth(this.id);\n    }\n    */\n\n    hasParent (id?: number): boolean\n    {\n        const parentID = GetParentID(this.id);\n\n        if (id)\n        {\n            return (parentID === id);\n        }\n        else\n        {\n            return (parentID > 0);\n        }\n    }\n\n    getParent (): IGameObject | undefined\n    {\n        return GetParentGameObject(this.id);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getChildren <T extends IRenderPass> (renderPass?: T): IGameObject[]\n    {\n        return GetChildrenFromParentID(this.id);\n    }\n\n    getNumChildren (): number\n    {\n        return GetNumChildren(this.id);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onAddChild (childID: number): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onUpdateChild (childID: number): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRemoveChild (childID: number): void\n    {\n    }\n\n    //#ifdef GET_DISPLAY_DATA\n    getDisplayData (): { id: number, parent: number, world: number, numChildren: number }\n    {\n        const id = this.id;\n\n        const data = HierarchyComponent.data[id];\n\n        return {\n            id,\n            parent: data[HIERARCHY.PARENT],\n            world: data[HIERARCHY.WORLD],\n            numChildren: data[HIERARCHY.NUM_CHILDREN]\n        };\n    }\n    //#endif\n\n    toString (): string\n    {\n        return `${this.type} id=\"${this.id}\" name=\"${this.name}\"`;\n    }\n\n    destroy <P extends IGameObject> (reparentChildren?: P): void\n    {\n        if (reparentChildren)\n        {\n            ReparentChildren(this, reparentChildren);\n        }\n        else\n        {\n            DestroyChildren(this);\n        }\n\n        //  TODO - Destroy process, remove from Cache, Tree, etc.\n\n        // Emit(this, DestroyEvent, this);\n        // this.events.clear();\n        // this.events = null;\n\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetDefaultOriginX (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).x;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetDefaultOriginY (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).y;\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { IVec2 } from '../../math/vec2/IVec2';\nimport { UpdateExtent } from './UpdateExtent';\n\nexport class Origin implements IVec2\n{\n    private id: number;\n    private _x: number;\n    private _y: number;\n    private _data: Float32Array;\n\n    constructor (id: number, x: number = 0, y: number = 0)\n    {\n        this.id = id;\n\n        this._data = Transform2DComponent.data[id];\n\n        this.set(x, y);\n    }\n\n    set (x: number, y: number = x): this\n    {\n        const data = this._data;\n\n        this._x = x;\n        this._y = y;\n\n        data[TRANSFORM.ORIGIN_X] = x;\n        data[TRANSFORM.ORIGIN_Y] = y;\n\n        UpdateExtent(this.id, data[TRANSFORM.FRAME_WIDTH], data[TRANSFORM.FRAME_HEIGHT]);\n\n        return this;\n    }\n\n    set x (value: number)\n    {\n        const data = this._data;\n\n        this._x = value;\n\n        data[TRANSFORM.ORIGIN_X] = value;\n\n        UpdateExtent(this.id, data[TRANSFORM.FRAME_WIDTH], data[TRANSFORM.FRAME_HEIGHT]);\n    }\n\n    get x (): number\n    {\n        return this._x;\n    }\n\n    set y (value: number)\n    {\n        const data = this._data;\n\n        this._y = value;\n\n        data[TRANSFORM.ORIGIN_Y] = value;\n\n        UpdateExtent(this.id, data[TRANSFORM.FRAME_WIDTH], data[TRANSFORM.FRAME_HEIGHT]);\n    }\n\n    get y (): number\n    {\n        return this._y;\n    }\n\n    destroy (): void\n    {\n        this._data = null;\n    }\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { IVec2 } from '../../math/vec2/IVec2';\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\n\nexport class Position implements IVec2\n{\n    private id: number;\n    private _x: number;\n    private _y: number;\n    private _data: Float32Array;\n\n    constructor (id: number, x: number = 0, y: number = 0)\n    {\n        this.id = id;\n\n        this._data = Transform2DComponent.data[id];\n\n        this.set(x, y);\n    }\n\n    set (x: number, y: number = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    set x (value: number)\n    {\n        if (value !== this._x)\n        {\n            this._x = value;\n\n            this._data[TRANSFORM.X] = value;\n\n            SetDirtyTransform(this.id);\n        }\n    }\n\n    get x (): number\n    {\n        return this._x;\n    }\n\n    set y (value: number)\n    {\n        if (value !== this._y)\n        {\n            this._y = value;\n\n            this._data[TRANSFORM.Y] = value;\n\n            SetDirtyTransform(this.id);\n        }\n    }\n\n    get y (): number\n    {\n        return this._y;\n    }\n\n    destroy (): void\n    {\n        this._data = null;\n    }\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { IVec2 } from '../../math/vec2/IVec2';\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\n\nexport class Scale implements IVec2\n{\n    private id: number;\n    private _x: number;\n    private _y: number;\n    private _data: Float32Array;\n\n    constructor (id: number, x: number = 1, y: number = 1)\n    {\n        this.id = id;\n\n        this._data = Transform2DComponent.data[id];\n\n        this.set(x, y);\n    }\n\n    set (x: number, y: number = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    set x (value: number)\n    {\n        if (value !== this._x)\n        {\n            this._x = value;\n\n            this._data[TRANSFORM.SCALE_X] = value;\n\n            SetDirtyTransform(this.id);\n        }\n    }\n\n    get x (): number\n    {\n        return this._x;\n    }\n\n    set y (value: number)\n    {\n        if (value !== this._y)\n        {\n            this._y = value;\n\n            this._data[TRANSFORM.SCALE_Y] = value;\n\n            SetDirtyTransform(this.id);\n        }\n    }\n\n    get y (): number\n    {\n        return this._y;\n    }\n\n    destroy (): void\n    {\n        this._data = null;\n    }\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nexport function UpdateAxisAligned (id: number): void\n{\n    const data = Transform2DComponent.data[id];\n\n    const rotation = data[TRANSFORM.ROTATION];\n    const skewX = data[TRANSFORM.SKEW_X];\n    const skewY = data[TRANSFORM.SKEW_Y];\n\n    data[TRANSFORM.AXIS_ALIGNED] = Number(rotation === 0 && skewX === 0 && skewY === 0);\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { IVec2 } from '../../math/vec2/IVec2';\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\nimport { UpdateAxisAligned } from './UpdateAxisAligned';\n\nexport class Skew implements IVec2\n{\n    private id: number;\n    private _x: number;\n    private _y: number;\n    private _data: Float32Array;\n\n    constructor (id: number, x: number = 0, y: number = 0)\n    {\n        this.id = id;\n\n        this._data = Transform2DComponent.data[id];\n\n        this.set(x, y);\n    }\n\n    set (x: number, y: number = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    set x (value: number)\n    {\n        if (value !== this._x)\n        {\n            this._x = value;\n\n            this._data[TRANSFORM.SKEW_X] = value;\n\n            const id = this.id;\n\n            UpdateAxisAligned(id);\n            SetDirtyTransform(id);\n        }\n    }\n\n    get x (): number\n    {\n        return this._x;\n    }\n\n    set y (value: number)\n    {\n        if (value !== this._x)\n        {\n            this._y = value;\n\n            this._data[TRANSFORM.SKEW_Y] = value;\n\n            const id = this.id;\n\n            UpdateAxisAligned(id);\n            SetDirtyTransform(id);\n        }\n    }\n\n    get y (): number\n    {\n        return this._y;\n    }\n\n    destroy (): void\n    {\n        this._data = null;\n    }\n}\n", "import { TRANSFORM, Transform2DComponent } from '../../components/transform/Transform2DComponent';\n\nimport { AddTransform2DComponent } from '../../components/transform/AddTransform2DComponent';\nimport { Color } from '../../components/color/Color';\nimport { Flush } from '../../renderer/webgl1/renderpass/Flush';\nimport { GameObject } from '../GameObject';\nimport { GetDefaultOriginX } from '../../config/defaultorigin/GetDefaultOriginX';\nimport { GetDefaultOriginY } from '../../config/defaultorigin/GetDefaultOriginY';\nimport { IContainer } from './IContainer';\nimport { IGameObject } from '../IGameObject';\nimport { IRectangle } from '../../geom/rectangle/IRectangle';\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\nimport { IShader } from '../../renderer/webgl1/shaders/IShader';\nimport { Origin } from '../../components/transform/Origin';\nimport { PopColor } from '../../renderer/webgl1/renderpass/PopColor';\nimport { PopShader } from '../../renderer/webgl1/renderpass/PopShader';\nimport { Position } from '../../components/transform/Position';\nimport { Rectangle } from '../../geom/rectangle/Rectangle';\nimport { Scale } from '../../components/transform/Scale';\nimport { SetColor } from '../../renderer/webgl1/renderpass/SetColor';\nimport { SetDirtyTransform } from '../../components/dirty/SetDirtyTransform';\nimport { SetShader } from '../../renderer/webgl1/renderpass/SetShader';\nimport { Size } from '../../components/transform/Size';\nimport { Skew } from '../../components/transform/Skew';\nimport { UpdateAxisAligned } from '../../components/transform/UpdateAxisAligned';\n\nexport class Container extends GameObject implements IContainer\n{\n    readonly type: string = 'Container';\n\n    position: Position;\n    scale: Scale;\n    skew: Skew;\n    origin: Origin;\n    size: Size;\n    color: Color;\n\n    shader: IShader;\n\n    private _rotation: number = 0;\n\n    constructor (x: number = 0, y: number = 0)\n    {\n        super();\n\n        const id = this.id;\n\n        AddTransform2DComponent(id);\n\n        this.position = new Position(id, x, y);\n        this.scale = new Scale(id);\n        this.skew = new Skew(id);\n        this.size = new Size(id);\n        this.origin = new Origin(id, GetDefaultOriginX(), GetDefaultOriginY());\n        this.color = new Color(id);\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        if (this.shader)\n        {\n            Flush(renderPass);\n\n            SetShader(this.shader, 0);\n        }\n\n        SetColor(renderPass, this.color);\n\n        this.preRenderGL(renderPass);\n    }\n\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        if (this.shader)\n        {\n            Flush(renderPass);\n\n            PopShader();\n        }\n\n        PopColor(renderPass, this.color);\n    }\n\n    set x (value: number)\n    {\n        this.position.x = value;\n    }\n\n    get x (): number\n    {\n        return this.position.x;\n    }\n\n    set y (value: number)\n    {\n        this.position.y = value;\n    }\n\n    get y (): number\n    {\n        return this.position.y;\n    }\n\n    set rotation (value: number)\n    {\n        this._rotation = value;\n\n        const id = this.id;\n\n        Transform2DComponent.data[id][TRANSFORM.ROTATION] = value;\n\n        UpdateAxisAligned(id);\n        SetDirtyTransform(id);\n    }\n\n    get rotation (): number\n    {\n        return this._rotation;\n    }\n\n    get alpha (): number\n    {\n        return this.color.alpha;\n    }\n\n    set alpha (value: number)\n    {\n        this.color.alpha = value;\n    }\n\n    setAlpha (value: number): this\n    {\n        this.alpha = value;\n\n        return this;\n    }\n\n    setPosition (x: number, y?: number): this\n    {\n        this.position.set(x, y);\n\n        return this;\n    }\n\n    setScale (x: number, y?: number): this\n    {\n        this.scale.set(x, y);\n\n        return this;\n    }\n\n    setRotation (value: number): this\n    {\n        this.rotation = value;\n\n        return this;\n    }\n\n    setSkew (x: number, y?: number): this\n    {\n        this.skew.set(x, y);\n\n        return this;\n    }\n\n    setOrigin (x: number, y?: number): this\n    {\n        this.origin.set(x, y);\n\n        return this;\n    }\n\n    getBounds (): IRectangle\n    {\n        const data = Transform2DComponent.data[this.id];\n\n        const x = data[TRANSFORM.BOUNDS_X1];\n        const y = data[TRANSFORM.BOUNDS_Y1];\n        const right = data[TRANSFORM.BOUNDS_X2];\n        const bottom = data[TRANSFORM.BOUNDS_Y2];\n\n        return new Rectangle(x, y, right - x, bottom - y);\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        this.position.destroy();\n        this.scale.destroy();\n        this.skew.destroy();\n        this.origin.destroy();\n\n        super.destroy(reparentChildren);\n    }\n}\n", "import { TextureManager } from './TextureManager';\n\nlet instance: TextureManager;\n\nexport const TextureManagerInstance =\n{\n    get: (): TextureManager =>\n    {\n        return instance;\n    },\n\n    set: (manager: TextureManager | null): void =>\n    {\n        if (instance)\n        {\n            throw new Error('Cannot instantiate TextureManager more than once');\n        }\n\n        instance = manager;\n    }\n};\n", "import { Texture } from './Texture';\nimport { TextureManagerInstance } from './TextureManagerInstance';\n\nexport function GetTexture (key: string): Texture\n{\n    return TextureManagerInstance.get().get(key);\n}\n", "import { DecreaseNumChildren } from '../components/hierarchy/DecreaseNumChildren';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildID } from '../components/hierarchy/RemoveChildID';\n\nexport function RemoveChild <P extends IGameObject, C extends IGameObject> (parent: P, child: C): C\n{\n    const childID = child.id;\n    const parentID = parent.id;\n\n    if (child.hasParent(parentID))\n    {\n        RemoveChildID(childID);\n\n        DecreaseNumChildren(parentID);\n\n        parent.onRemoveChild(childID);\n    }\n\n    return child;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChild } from './RemoveChild';\n\nexport function RemoveChildren <P extends IGameObject> (parent: P, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        RemoveChild(parent, child);\n    });\n\n    return children;\n}\n", "import { Types, defineComponent } from 'bitecs';\n\n/**\n * Buffer Structure:\n *\n * Triangle 1:\n *\n * Top Left Vert\n *\n * 0 - x position\n * 1 - y position\n * 2 - u0\n * 3 - v0\n * 4 - Texture Index\n * 5 - Red Component\n * 6 - Green Component\n * 7 - Blue Component\n * 8 - Alpha Component\n *\n * Bottom Left Vert\n *\n * 9 - x position\n * 10 - y position\n * 11 - u0\n * 12 - v1\n * 13 - Texture Index\n * 14 - Red Component\n * 15 - Green Component\n * 16 - Blue Component\n * 17 - Alpha Component\n *\n * Bottom Right Vert\n *\n * 18 - x position\n * 19 - y position\n * 20 - u1\n * 21 - v1\n * 22 - Texture Index\n * 23 - Red Component\n * 24 - Green Component\n * 25 - Blue Component\n * 26 - Alpha Component\n *\n * Triangle 2:\n *\n * Top Left Vert\n *\n * 27 - x position\n * 28 - y position\n * 29 - u0\n * 30 - v0\n * 31 - Texture Index\n * 32 - Red Component\n * 33 - Green Component\n * 34 - Blue Component\n * 35 - Alpha Component\n *\n * Bottom Right Vert\n *\n * 36 - x position\n * 37 - y position\n * 38 - u1\n * 39 - v1\n * 40 - Texture Index\n * 41 - Red Component\n * 42 - Green Component\n * 43 - Blue Component\n * 44 - Alpha Component\n *\n * Top Right Vert\n *\n * 45 - x position\n * 46 - y position\n * 47 - u1\n * 48 - v0\n * 49 - Texture Index\n * 50 - Red Component\n * 51 - Green Component\n * 52 - Blue Component\n * 53 - Alpha Component\n */\n\nexport const QuadVertexComponent = defineComponent({\n    values: [ Types.f32, 54 ]\n});\n", "import { QuadVertexComponent } from './QuadVertexComponent';\n\nexport function SetQuadColor (id: number, red: number, green: number, blue: number, alpha: number): void\n{\n    const data = QuadVertexComponent.values[id];\n\n    data[5] = red;\n    data[6] = green;\n    data[7] = blue;\n    data[8] = alpha;\n\n    data[14] = red;\n    data[15] = green;\n    data[16] = blue;\n    data[17] = alpha;\n\n    data[23] = red;\n    data[24] = green;\n    data[25] = blue;\n    data[26] = alpha;\n\n    data[32] = red;\n    data[33] = green;\n    data[34] = blue;\n    data[35] = alpha;\n\n    data[41] = red;\n    data[42] = green;\n    data[43] = blue;\n    data[44] = alpha;\n\n    data[50] = red;\n    data[51] = green;\n    data[52] = blue;\n    data[53] = alpha;\n}\n", "import { QuadVertexComponent } from './QuadVertexComponent';\n\nexport function SetQuadPosition (id: number, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): void\n{\n    const data = QuadVertexComponent.values[id];\n\n    //  top left\n    data[0] = x0;\n    data[1] = y0;\n\n    //  bottom left\n    data[9] = x1;\n    data[10] = y1;\n\n    //  bottom right\n    data[18] = x2;\n    data[19] = y2;\n\n    //  top left\n    data[27] = x0;\n    data[28] = y0;\n\n    //  bottom right\n    data[36] = x2;\n    data[37] = y2;\n\n    //  top right\n    data[45] = x3;\n    data[46] = y3;\n}\n", "import { QuadVertexComponent } from './QuadVertexComponent';\n\n//  0, 0, 1, 1 = normal\n//  0, 1, 1, 0 = flipped on Y\n\nexport function SetUV (id: number, u0: number, v0: number, u1: number, v1: number): void\n{\n    const data = QuadVertexComponent.values[id];\n\n    //  top left\n    data[2] = u0;\n    data[3] = v0;\n\n    //  bottom left\n    data[11] = u0;\n    data[12] = v1;\n\n    //  bottom right\n    data[20] = u1;\n    data[21] = v1;\n\n    //  top left\n    data[29] = u0;\n    data[30] = v0;\n\n    //  bottom right\n    data[38] = u1;\n    data[39] = v1;\n\n    //  top right\n    data[47] = u1;\n    data[48] = v0;\n}\n", "import { GameObjectWorld } from '../../GameObjectWorld';\nimport { QuadVertexComponent } from './QuadVertexComponent';\nimport { SetQuadColor } from './SetQuadColor';\nimport { SetQuadPosition } from './SetQuadPosition';\nimport { SetUV } from './SetUV';\nimport { addComponent } from 'bitecs';\n\nexport function AddQuadVertex (id: number, width: number = 0, height: number = 0): void\n{\n    addComponent(GameObjectWorld, QuadVertexComponent, id);\n\n    if (width || height)\n    {\n        SetUV(id, 0, 0, 1, 1);\n        SetQuadColor(id, 1, 1, 1, 1);\n        SetQuadPosition(id, 0, 0, 0, height, width, height, width, 0);\n    }\n}\n", "import { QuadVertexComponent } from './QuadVertexComponent';\n\nexport function SetQuadTextureIndex (id: number, textureIndex: number): void\n{\n    const data = QuadVertexComponent.values[id];\n\n    if (data[4] !== textureIndex)\n    {\n        data[4] = textureIndex;\n        data[13] = textureIndex;\n        data[22] = textureIndex;\n        data[31] = textureIndex;\n        data[40] = textureIndex;\n        data[49] = textureIndex;\n    }\n}\n", "import { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { QuadVertexComponent } from '../../../components/vertices/QuadVertexComponent';\nimport { SetQuadTextureIndex } from '../../../components/vertices/SetQuadTextureIndex';\nimport { SetWebGLTexture } from '../renderpass/SetWebGLTexture';\n\nexport function BatchTexturedQuadBuffer <T extends ITexture> (texture: T, id: number, renderPass: IRenderPass): void\n{\n    const { F32, offset } = GetVertexBufferEntry(renderPass, 2);\n\n    const textureIndex = SetWebGLTexture(texture);\n\n    SetQuadTextureIndex(id, textureIndex);\n\n    F32.set(QuadVertexComponent.values[id], offset);\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\n\n//  The area covered by this transform component + origin + size (usually from a Frame)\n\nexport function SetExtent (id: number, x: number, y: number, width: number, height: number): void\n{\n    const data = Transform2DComponent.data[id];\n\n    data[TRANSFORM.FRAME_X1] = x;\n    data[TRANSFORM.FRAME_Y1] = y;\n    data[TRANSFORM.FRAME_X2] = x + width;\n    data[TRANSFORM.FRAME_Y2] = y + height;\n    data[TRANSFORM.FRAME_WIDTH] = width;\n    data[TRANSFORM.FRAME_HEIGHT] = height;\n\n    SetDirtyTransform(id);\n}\n", "import { IContainer } from '../gameobjects/container/IContainer';\nimport { IFrame } from './IFrame';\nimport { SetExtent } from '../components/transform/SetExtent';\n\nexport function SetExtentFromFrame <C extends IContainer, F extends IFrame> (child: C, frame: F): C\n{\n    const originX = child.origin.x;\n    const originY = child.origin.y;\n\n    const sourceSizeWidth = frame.sourceSizeWidth;\n    const sourceSizeHeight = frame.sourceSizeHeight;\n\n    let x: number;\n    let y: number;\n    let width: number;\n    let height: number;\n\n    if (frame.trimmed)\n    {\n        x = frame.spriteSourceSizeX - (originX * sourceSizeWidth);\n        y = frame.spriteSourceSizeY - (originY * sourceSizeHeight);\n\n        width = frame.spriteSourceSizeWidth;\n        height = frame.spriteSourceSizeHeight;\n    }\n    else\n    {\n        x = -originX * sourceSizeWidth;\n        y = -originY * sourceSizeHeight;\n\n        width = sourceSizeWidth;\n        height = sourceSizeHeight;\n    }\n\n    SetExtent(child.id, x, y, width, height);\n\n    return child;\n}\n", "import { IFrame } from './IFrame';\nimport { SetUV } from '../components/vertices/SetUV';\n\nexport function SetVertexUVsFromFrame <T extends IFrame> (id: number, frame: T): T\n{\n    SetUV(id, frame.u0, frame.v0, frame.u1, frame.v1);\n\n    return frame;\n}\n", "import { Frame } from './Frame';\nimport { ISprite } from '../gameobjects/sprite/ISprite';\nimport { SetExtentFromFrame } from './SetExtentFromFrame';\nimport { SetVertexUVsFromFrame } from './SetVertexUVsFromFrame';\nimport { Texture } from './Texture';\n\nexport function SetFrame <T extends ISprite> (texture: Texture, key?: string | number | Frame, ...children: T[]): T[]\n{\n    const frame = texture.getFrame(key);\n\n    const pivot = frame.pivot;\n\n    children.forEach(child =>\n    {\n        if (!child || frame === child.frame)\n        {\n            return;\n        }\n\n        child.frame = frame;\n        child.hasTexture = true;\n\n        if (pivot)\n        {\n            child.origin.set(pivot.x, pivot.y);\n        }\n\n        SetExtentFromFrame(child, frame);\n\n        //  This rarely changes, so we'll set it here, rather than every game step:\n        SetVertexUVsFromFrame(child.id, frame);\n    });\n\n    return children;\n}\n", "import { GameObjectWorld } from '../GameObjectWorld';\nimport { ISprite } from '../gameobjects/sprite/ISprite';\nimport { removeComponent } from 'bitecs';\n\nexport function RemoveTextureFromGameObject <T extends ISprite> (sprite: T): void\n{\n    if (sprite.texture)\n    {\n        const currentTexture = sprite.texture;\n\n        removeComponent(GameObjectWorld, currentTexture.tag, sprite.id);\n\n        sprite.texture = null;\n        sprite.frame = null;\n        sprite.hasTexture = false;\n    }\n}\n", "import { Frame } from './Frame';\nimport { GetTexture } from './GetTexture';\nimport { IFrame } from './IFrame';\nimport { ITexture } from './ITexture';\nimport { Texture } from './Texture';\n\nexport function ReturnTexture <T extends ITexture, F extends IFrame>  (key: string | T | F, frame?: string | number | IFrame): { texture: Texture, frame: Frame }\n{\n    let texture: Texture;\n\n    if (key instanceof Frame)\n    {\n        frame = key.key;\n        texture = key.texture;\n    }\n    else if (key instanceof Texture)\n    {\n        texture = key;\n    }\n    else\n    {\n        texture = GetTexture(key as string);\n    }\n\n    if (!texture)\n    {\n        console.warn(`Invalid Texture key: ${key as string}`);\n    }\n    else\n    {\n        return { texture, frame: texture.getFrame(frame) };\n    }\n}\n", "import { GameObjectWorld } from '../GameObjectWorld';\nimport { IFrame } from './IFrame';\nimport { ISprite } from '../gameobjects/sprite/ISprite';\nimport { ITexture } from './ITexture';\nimport { RemoveTextureFromGameObject } from './RemoveTextureFromGameObject';\nimport { ReturnTexture } from './ReturnTexture';\nimport { SetFrame } from './SetFrame';\nimport { addComponent } from 'bitecs';\n\nexport function SetTexture <S extends ISprite, T extends ITexture, F extends IFrame> (texture: string | T | F, frame: string | number | F, ...children: S[]): S[]\n{\n    const { texture: srcTexture, frame: srcFrame } = ReturnTexture(texture, frame);\n\n    children.forEach(child =>\n    {\n        if (child.hasTexture)\n        {\n            RemoveTextureFromGameObject(child);\n        }\n\n        child.texture = srcTexture;\n\n        addComponent(GameObjectWorld, srcTexture.tag, child.id);\n    });\n\n    SetFrame(srcTexture, srcFrame, ...children);\n\n    return children;\n}\n", "import { AddQuadVertex } from '../../components/vertices/AddQuadVertex';\nimport { BatchTexturedQuadBuffer } from '../../renderer/webgl1/draw/BatchTexturedQuadBuffer';\nimport { Container } from '../container/Container';\nimport { Flush } from '../../renderer/webgl1/renderpass/Flush';\nimport { Frame } from '../../textures/Frame';\nimport { ICanvasRenderer } from '../../renderer/canvas/ICanvasRenderer';\nimport { IFrame } from '../../textures/IFrame';\nimport { IGameObject } from '../IGameObject';\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\nimport { ISprite } from './ISprite';\nimport { ITexture } from '../../textures/ITexture';\nimport { PopColorMatrix } from '../../renderer/webgl1/renderpass/PopColorMatrix';\nimport { SetColorMatrix } from '../../renderer/webgl1/renderpass/SetColorMatrix';\nimport { SetFrame } from '../../textures/SetFrame';\nimport { SetShader } from '../../renderer/webgl1/renderpass/SetShader';\nimport { SetTexture } from '../../textures/SetTexture';\nimport { Texture } from '../../textures/Texture';\nimport { WillRender } from '../../components/permissions/WillRender';\n\nexport class Sprite extends Container implements ISprite\n{\n    readonly type: string = 'Sprite';\n\n    texture: Texture;\n    frame: Frame;\n    hasTexture: boolean = false;\n\n    constructor (x: number, y: number, texture: string | Texture | Frame = '__BLANK', frame?: string | number | Frame)\n    {\n        super(x, y);\n\n        AddQuadVertex(this.id);\n\n        this.setTexture(texture, frame);\n    }\n\n    setTexture <T extends ITexture, F extends IFrame> (key: string | T | F, frame?: string | number | F): this\n    {\n        SetTexture(key, frame, this);\n\n        return this;\n    }\n\n    setFrame <F extends IFrame> (key?: string | number | F): this\n    {\n        SetFrame(this.texture, key, this);\n\n        return this;\n    }\n\n    isRenderable (): boolean\n    {\n        return (this.visible && this.hasTexture && WillRender(this.id) && this.alpha > 0);\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        const color = this.color;\n\n        if (this.shader)\n        {\n            Flush(renderPass);\n\n            SetShader(this.shader, 0);\n        }\n\n        if (color.colorMatrixEnabled)\n        {\n            SetColorMatrix(color);\n        }\n\n        this.preRenderGL(renderPass);\n\n        BatchTexturedQuadBuffer(this.texture, this.id, renderPass);\n\n        if (color.colorMatrixEnabled && !color.willColorChildren)\n        {\n            Flush(renderPass);\n\n            PopColorMatrix();\n        }\n    }\n\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n        // PreRenderVertices(this);\n\n        // DrawImage(this.frame, this.alpha, this.worldTransform, this.transformExtent, renderer);\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        this.texture = null;\n        this.frame = null;\n        this.hasTexture = false;\n    }\n}\n", "export function Between (min: number, max: number): number\n{\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n", "import { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function Emit (emitter: IEventEmitter, event: string, ...args: unknown[]): boolean\n{\n    if (emitter.events.size === 0 || !emitter.events.has(event))\n    {\n        return false;\n    }\n\n    const listeners: Set<IEventInstance> = emitter.events.get(event);\n\n    //  Convert to an array so the callbacks cannot impact what we're iterating\n    //  It works, but generates gc\n    const handlers = [ ...listeners ];\n\n    for (const ee of handlers)\n    {\n        ee.callback.apply(ee.context, args);\n\n        if (ee.once)\n        {\n            listeners.delete(ee);\n        }\n    }\n\n    if (listeners.size === 0)\n    {\n        emitter.events.delete(event);\n    }\n\n    return true;\n}\n", "import { Emit } from '../../events/Emit';\nimport { IEventInstance } from '../../events/IEventInstance';\nimport { IKey } from './IKey';\n\nexport class Key implements IKey\n{\n    //  The KeyEvent.key identifier\n    readonly value: string;\n\n    events: Map<string, Set<IEventInstance>>;\n\n    //  Will it invoke preventDefault?\n    capture: boolean = true;\n\n    //  Is it currently down?\n    isDown: boolean = false;\n\n    //  Process this key?\n    enabled: boolean = true;\n\n    //  rate of repeats in ms\n    repeatRate: number = 0;\n\n    //  Can this key repeat, or do you have to release it before pressing again\n    canRepeat: boolean = true;\n\n    //  The game time this key was last pressed down\n    timeDown: number = 0;\n\n    //  The game time this key was last updated (i.e. if down and repeating)\n    timeUpdated: number = 0;\n\n    //  The game time this key was last released\n    timeUp: number = 0;\n\n    shiftKey: boolean;\n    ctrlKey: boolean;\n    altKey: boolean;\n\n    downCallback: (key: IKey) => void;\n    upCallback: (key: IKey) => void;\n\n    constructor (value: string)\n    {\n        this.value = value;\n        this.events = new Map();\n    }\n\n    getValue (): string\n    {\n        return this.value;\n    }\n\n    down (event: KeyboardEvent): void\n    {\n        if (!this.enabled)\n        {\n            return;\n        }\n\n        if (this.capture)\n        {\n            event.preventDefault();\n        }\n\n        this.shiftKey = event.shiftKey;\n        this.ctrlKey = event.ctrlKey;\n        this.altKey = event.altKey;\n\n        if (this.isDown && this.canRepeat)\n        {\n            this.timeUpdated = event.timeStamp;\n\n            const delay = this.timeUpdated - this.timeDown;\n\n            //  Key is repeating\n            if (delay >= this.repeatRate)\n            {\n                Emit(this, 'keydown', this);\n\n                if (this.downCallback)\n                {\n                    this.downCallback(this);\n                }\n            }\n        }\n        else\n        {\n            //  Key is first down\n            this.isDown = true;\n\n            this.timeDown = event.timeStamp;\n            this.timeUpdated = event.timeStamp;\n\n            Emit(this, 'keydown', this);\n\n            if (this.downCallback)\n            {\n                this.downCallback(this);\n            }\n        }\n    }\n\n    up (event: KeyboardEvent): void\n    {\n        if (!this.enabled)\n        {\n            return;\n        }\n\n        if (this.capture)\n        {\n            event.preventDefault();\n        }\n\n        this.shiftKey = event.shiftKey;\n        this.ctrlKey = event.ctrlKey;\n        this.altKey = event.altKey;\n\n        if (this.isDown)\n        {\n            //  Key is up\n            this.isDown = false;\n            this.timeUp = event.timeStamp;\n            this.timeUpdated = event.timeStamp;\n\n            Emit(this, 'keyup', this);\n\n            if (this.upCallback)\n            {\n                this.upCallback(this);\n            }\n        }\n    }\n\n    reset (): void\n    {\n        this.isDown = false;\n        this.timeUpdated = this.timeDown;\n        this.timeUp = this.timeDown;\n    }\n\n    destroy (): void\n    {\n        this.downCallback = null;\n        this.upCallback = null;\n\n        this.events.clear();\n    }\n}\n", "import { Key } from '../Key';\n\nexport class DownKey extends Key\n{\n    constructor ()\n    {\n        super('ArrowDown');\n    }\n}\n", "import { IEventInstance } from './IEventInstance';\n\nexport class EventEmitter\n{\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor ()\n    {\n        this.events = new Map();\n    }\n}\n", "import { Emit } from '../../events/Emit';\nimport { EventEmitter } from '../../events/EventEmitter';\nimport { IKey } from './IKey';\n\nexport class Keyboard extends EventEmitter\n{\n    keys: Map<string, IKey>;\n\n    private keydownHandler: { (event: KeyboardEvent): void; (this: Window, ev: KeyboardEvent): void };\n    private keyupHandler: { (event: KeyboardEvent): void; (this: Window, ev: KeyboardEvent): void };\n    private blurHandler: { (): void; (this: Window, ev: FocusEvent): void };\n\n    /* eslint-disable @typescript-eslint/naming-convention */\n    keyConversion: { [ key: string ]: string } = {\n        Up: 'ArrowUp',\n        Down: 'ArrowDown',\n        Left: 'ArrowLeft',\n        Right: 'ArrowRight',\n        Spacebar: ' ',\n        Win: 'Meta',\n        Scroll: 'ScrollLock',\n        Del: 'Delete',\n        Apps: 'ContextMenu',\n        Esc: 'Escape',\n        Add: '+',\n        Subtract: '-',\n        Multiply: '*',\n        Decimal: '.',\n        Divide: '/'\n    };\n    /* eslint-enable @typescript-eslint/naming-convention */\n\n    constructor ()\n    {\n        super();\n\n        this.keydownHandler = (event: KeyboardEvent): void => this.onKeyDown(event);\n        this.keyupHandler = (event: KeyboardEvent): void => this.onKeyUp(event);\n        this.blurHandler = (): void => this.onBlur();\n\n        window.addEventListener('keydown', this.keydownHandler);\n        window.addEventListener('keyup', this.keyupHandler);\n        window.addEventListener('blur', this.blurHandler);\n\n        this.keys = new Map();\n    }\n\n    addKeys (...keys: IKey[]): void\n    {\n        keys.forEach(key =>\n        {\n            this.keys.set(key.getValue(), key);\n        });\n    }\n\n    clearKeys (): void\n    {\n        this.keys.clear();\n    }\n\n    private onBlur (): void\n    {\n        //  Iterate Keys and reset their state\n        this.keys.forEach(key =>\n        {\n            key.reset();\n        });\n    }\n\n    private getKeyValue (key: string): string\n    {\n        if (this.keyConversion.hasOwnProperty(key))\n        {\n            return this.keyConversion[key];\n        }\n        else\n        {\n            return key;\n        }\n    }\n\n    private onKeyDown (event: KeyboardEvent): void\n    {\n        const value = this.getKeyValue(event.key);\n\n        if (this.keys.has(value))\n        {\n            const key = this.keys.get(value);\n\n            key.down(event);\n        }\n\n        //  Key specific event\n        Emit(this, 'keydown-' + value, event);\n\n        //  Global keydown event\n        Emit(this, 'keydown', event);\n    }\n\n    private onKeyUp (event: KeyboardEvent): void\n    {\n        const value = this.getKeyValue(event.key);\n\n        if (this.keys.has(value))\n        {\n            const key = this.keys.get(value);\n\n            key.up(event);\n        }\n\n        //  Key specific event\n        Emit(this, 'keyup-' + value, event);\n\n        //  Global keyup event\n        Emit(this, 'keyup', event);\n    }\n\n    destroy (): void\n    {\n        this.clearKeys();\n\n        window.removeEventListener('keydown', this.keydownHandler);\n        window.removeEventListener('keyup', this.keyupHandler);\n        window.removeEventListener('blur', this.blurHandler);\n\n        Emit(this, 'destroy');\n    }\n}\n", "import { Key } from '../Key';\n\nexport class LeftKey extends Key\n{\n    constructor ()\n    {\n        super('ArrowLeft');\n    }\n}\n", "export class EventInstance\n{\n    callback: Function;\n    context: unknown;\n    once: boolean;\n\n    constructor (callback: Function, context: unknown, once: boolean = false)\n    {\n        this.callback = callback;\n        this.context = context;\n        this.once = once;\n    }\n}\n", "import { EventInstance } from './EventInstance';\nimport { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function Off (emitter: IEventEmitter, event: string, callback?: Function | IEventInstance, context?: unknown, once?: boolean): IEventEmitter\n{\n    const events = emitter.events;\n    const listeners = events.get(event);\n\n    if (!callback)\n    {\n        //  Remove all events matching the given key\n        events.delete(event);\n    }\n    else if (callback instanceof EventInstance)\n    {\n        listeners.delete(callback as IEventInstance);\n    }\n    else\n    {\n        const hasContext: boolean = !context;\n        const hasOnce: boolean = (once !== undefined);\n\n        for (const listener of listeners)\n        {\n            if (\n                (listener.callback === callback) &&\n                (hasContext && listener.context === context) &&\n                (hasOnce && listener.once === once)\n            )\n            {\n                listeners.delete(listener);\n            }\n        }\n    }\n\n    if (listeners.size === 0)\n    {\n        events.delete(event);\n    }\n\n    return emitter;\n}\n", "import { EventInstance } from './EventInstance';\nimport { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function On (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter, once: boolean = false): IEventInstance\n{\n    if (typeof callback !== 'function')\n    {\n        throw new TypeError('Listener not a function');\n    }\n\n    const listener = new EventInstance(callback, context, once);\n    const listeners = emitter.events.get(event);\n\n    if (!listeners)\n    {\n        emitter.events.set(event, new Set([ listener ]));\n    }\n    else\n    {\n        listeners.add(listener);\n    }\n\n    return listener;\n}\n", "import { Key } from '../Key';\n\nexport class RightKey extends Key\n{\n    constructor ()\n    {\n        super('ArrowRight');\n    }\n}\n", "import { Key } from '../Key';\n\nexport class UpKey extends Key\n{\n    constructor ()\n    {\n        super('ArrowUp');\n    }\n}\n", "import { DownKey } from '../../input/keyboard/keys/DownKey';\nimport { IBaseCamera } from '../IBaseCamera';\nimport { IBaseWorld } from '../../world/IBaseWorld';\nimport { IEventInstance } from '../../events/IEventInstance';\nimport { Keyboard } from '../../input/keyboard/Keyboard';\nimport { LeftKey } from '../../input/keyboard/keys/LeftKey';\nimport { Off } from '../../events/Off';\nimport { On } from '../../events/On';\nimport { RightKey } from '../../input/keyboard/keys/RightKey';\nimport { UpKey } from '../../input/keyboard/keys/UpKey';\n\nexport class CursorKeyCameraControls\n{\n    keyboard: Keyboard;\n    leftKey: LeftKey;\n    rightKey: RightKey;\n    upKey: UpKey;\n    downKey: DownKey;\n\n    camera: IBaseCamera;\n    world: IBaseWorld;\n\n    cameraSpeedX: number;\n    cameraSpeedY: number;\n\n    listener: IEventInstance;\n\n    constructor (world: IBaseWorld, speedX: number = 2, speedY: number = 2)\n    {\n        if (!world.camera)\n        {\n            throw new Error('World has no camera');\n        }\n\n        this.world = world;\n        this.camera = world.camera;\n\n        this.cameraSpeedX = speedX;\n        this.cameraSpeedY = speedY;\n\n        this.keyboard = new Keyboard();\n\n        this.leftKey = new LeftKey();\n        this.rightKey = new RightKey();\n        this.upKey = new UpKey();\n        this.downKey = new DownKey();\n\n        this.keyboard.addKeys(this.leftKey, this.rightKey, this.upKey, this.downKey);\n\n        this.listener = On(world, 'update', this.update.bind(this));\n    }\n\n    update (): void\n    {\n        if (this.leftKey.isDown)\n        {\n            this.camera.x += this.cameraSpeedX;\n        }\n        else if (this.rightKey.isDown)\n        {\n            this.camera.x -= this.cameraSpeedX;\n        }\n\n        if (this.upKey.isDown)\n        {\n            this.camera.y += this.cameraSpeedY;\n        }\n        else if (this.downKey.isDown)\n        {\n            this.camera.y -= this.cameraSpeedY;\n        }\n    }\n\n    destroy (): void\n    {\n        Off(this.world, 'update', this.listener);\n\n        this.keyboard.destroy();\n\n        this.world = null;\n        this.camera = null;\n    }\n}\n", "import { Texture } from './Texture';\n\nlet instance: Texture;\n\nexport const AlphaTexture =\n{\n    get: (): Texture =>\n    {\n        return instance;\n    },\n\n    set: (texture: Texture): void =>\n    {\n        instance = texture;\n    }\n};\n", "export function BatchTexturedQuad (\n    F32: Float32Array,\n    offset: number,\n    textureIndex: number,\n    x1: number, y1: number,\n    x2: number, y2: number,\n    x3: number, y3: number,\n    x4: number, y4: number,\n    u0: number, v0: number, u1: number, v1: number,\n    r: number, g: number, b: number, a: number): number\n{\n    //  top left\n    F32[offset + 0] = x1;\n    F32[offset + 1] = y1;\n    F32[offset + 2] = u0;\n    F32[offset + 3] = v0;\n    F32[offset + 4] = textureIndex;\n    F32[offset + 5] = r;\n    F32[offset + 6] = g;\n    F32[offset + 7] = b;\n    F32[offset + 8] = a;\n\n    //  bottom left\n    F32[offset + 9] = x2;\n    F32[offset + 10] = y2;\n    F32[offset + 11] = u0;\n    F32[offset + 12] = v1;\n    F32[offset + 13] = textureIndex;\n    F32[offset + 14] = r;\n    F32[offset + 15] = g;\n    F32[offset + 16] = b;\n    F32[offset + 17] = a;\n\n    //  bottom right\n    F32[offset + 18] = x3;\n    F32[offset + 19] = y3;\n    F32[offset + 20] = u1;\n    F32[offset + 21] = v1;\n    F32[offset + 22] = textureIndex;\n    F32[offset + 23] = r;\n    F32[offset + 24] = g;\n    F32[offset + 25] = b;\n    F32[offset + 26] = a;\n\n    //  top left\n    F32[offset + 27] = x1;\n    F32[offset + 28] = y1;\n    F32[offset + 29] = u0;\n    F32[offset + 30] = v0;\n    F32[offset + 31] = textureIndex;\n    F32[offset + 32] = r;\n    F32[offset + 33] = g;\n    F32[offset + 34] = b;\n    F32[offset + 35] = a;\n\n    //  bottom right\n    F32[offset + 36] = x3;\n    F32[offset + 37] = y3;\n    F32[offset + 38] = u1;\n    F32[offset + 39] = v1;\n    F32[offset + 40] = textureIndex;\n    F32[offset + 41] = r;\n    F32[offset + 42] = g;\n    F32[offset + 43] = b;\n    F32[offset + 44] = a;\n\n    //  top right\n    F32[offset + 45] = x4;\n    F32[offset + 46] = y4;\n    F32[offset + 47] = u1;\n    F32[offset + 48] = v0;\n    F32[offset + 49] = textureIndex;\n    F32[offset + 50] = r;\n    F32[offset + 51] = g;\n    F32[offset + 52] = b;\n    F32[offset + 53] = a;\n\n    return offset + 54;\n}\n", "import { BatchTexturedQuad } from './BatchTexturedQuad';\nimport { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IRenderPass } from '../renderpass/IRenderPass';\n\nexport function BatchSingleQuad (renderPass: IRenderPass, x: number, y: number, width: number, height: number, u0: number, v0: number, u1: number, v1: number, textureIndex: number = 0): void\n{\n    const { F32, offset } = GetVertexBufferEntry(renderPass, 2);\n\n    BatchTexturedQuad(\n        F32, offset, textureIndex,\n        x, y,\n        x, y + height,\n        x + width, y + height,\n        x + width, y,\n        u0, v0, u1, v1,\n        1, 1, 1, 1\n    );\n}\n", "import { AlphaTexture } from '../../../textures/AlphaTexture';\nimport { BatchSingleQuad } from './BatchSingleQuad';\nimport { BindWebGLTexture } from '../renderpass/BindWebGLTexture';\nimport { ClearWebGLTextures } from '../renderpass/ClearWebGLTextures';\nimport { Flush } from '../renderpass/Flush';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from '../shaders/IShader';\nimport { PopShader } from '../renderpass/PopShader';\nimport { SetShader } from '../renderpass/SetShader';\nimport { UnbindTexture } from '../renderpass/UnbindTexture';\n\nexport function DrawShaderQuad (renderPass: IRenderPass, shader: IShader): void\n{\n    //  Clear out anything already in the batch\n    Flush(renderPass);\n\n    ClearWebGLTextures();\n\n    const alpha = AlphaTexture.get();\n\n    BindWebGLTexture(alpha, 0);\n\n    SetShader(shader, 0);\n\n    const view = shader.viewport;\n\n    BatchSingleQuad(renderPass, 0, 0, view.width, view.height, 0, 0, 1, 1, 0);\n\n    //  Flush our single quad and unbind it\n    Flush(renderPass);\n\n    UnbindTexture(alpha);\n\n    PopShader();\n}\n", "/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\nimport { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function AddBanner (): void\n{\n    const { title, version, url, color, background } = ConfigStore.get(CONFIG_DEFAULTS.BANNER);\n\n    if (title !== '')\n    {\n        const str = `${title} ${version}`.trimEnd();\n\n        console.log(\n            `%c${str}%c ${url}`,\n            `padding: 4px 16px; color: ${color}; background: ${background}`,\n            ''\n        );\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { Game } from '../../Game';\n\nexport function AddGlobalVar (game: Game): void\n{\n    const globalVar = ConfigStore.get(CONFIG_DEFAULTS.GLOBAL_VAR);\n\n    if (globalVar && window)\n    {\n        (window as unknown)[globalVar] = game;\n    }\n}\n", "import { GetElement } from './GetElement';\n\nexport function AddToDOM (element: HTMLElement, parent?: string | HTMLElement): HTMLElement\n{\n    const target: HTMLElement = GetElement(parent);\n\n    target.appendChild(element);\n\n    return element;\n}\n", "import { AddToDOM } from '../../dom/AddToDOM';\nimport { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { RendererInstance } from '../../renderer/RendererInstance';\n\nexport function AddToParent (): void\n{\n    const parent = ConfigStore.get(CONFIG_DEFAULTS.PARENT);\n    const canvas = RendererInstance.get().canvas;\n\n    //  Only add to the DOM if they either didn't set a Parent, or expressly set it to be non-null\n    //  Otherwise we'll let them add the canvas to the DOM themselves\n\n    if (parent && canvas)\n    {\n        AddToDOM(canvas, parent);\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function CreateRenderer (): void\n{\n    const renderer = ConfigStore.get(CONFIG_DEFAULTS.RENDERER);\n\n    if (renderer)\n    {\n        new renderer();\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\n\nexport function GetScenes (): ISceneConstructor[]\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SCENES);\n}\n", "import { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\nimport { On } from './On';\n\nexport function Once (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter): IEventInstance\n{\n    return On(emitter, event, callback, context, true);\n}\n", "import { SceneManager } from './SceneManager';\n\nlet instance: SceneManager;\n\nexport const SceneManagerInstance =\n{\n    get: (): SceneManager =>\n    {\n        return instance;\n    },\n\n    set: (manager: SceneManager | null): void =>\n    {\n        if (instance)\n        {\n            throw new Error('Cannot instantiate SceneManager more than once');\n        }\n\n        instance = manager;\n    }\n};\n", "import { IBaseWorld } from './IBaseWorld';\nimport { IScene } from '../scenes/IScene';\n\nexport const WorldList: Map<IScene, IBaseWorld[]> = new Map();\n", "import { Game } from '../Game';\nimport { GameInstance } from '../GameInstance';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { GetScenes } from '../config/scenes/GetScenes';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { IScene } from './IScene';\nimport { Once } from '../events/Once';\nimport { ResetRenderStats } from './ResetRenderStats';\nimport { SceneManagerInstance } from './SceneManagerInstance';\nimport { WorldList } from '../world/WorldList';\nimport { addEntity } from 'bitecs';\n\nexport class SceneManager\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    game: Game;\n\n    scenes: Map<string, IScene> = new Map();\n\n    //  Used by Install to assign default scene keys when not specified\n    sceneIndex: number = 0;\n\n    //  Force the renderer to fully redraw\n    flush: boolean;\n\n    constructor ()\n    {\n        SceneManagerInstance.set(this);\n\n        this.game = GameInstance.get();\n\n        Once(this.game, 'boot', () => this.boot());\n    }\n\n    boot (): void\n    {\n        const scenes = GetScenes();\n\n        if (scenes)\n        {\n            scenes.forEach(scene => new scene());\n        }\n    }\n\n    update (): void\n    {\n        const time = this.game.time;\n\n        const delta = time.delta;\n        const now = time.lastTick;\n\n        // const gameFrame = time.frame;\n        // ResetRenderStats(gameFrame, this.scenes.size);\n\n        for (const scene of this.scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                world.beforeUpdate(delta, now);\n            }\n\n            if (scene.update)\n            {\n                scene.update(delta, now);\n            }\n\n            for (const world of worlds)\n            {\n                world.update(delta, now);\n            }\n\n            for (const world of worlds)\n            {\n                world.afterUpdate(delta, now);\n            }\n        }\n    }\n\n    //  Run through all Scenes and Worlds within them, telling them to prepare to render\n    preRender (): void\n    {\n        const gameFrame = this.game.time.frame;\n\n        for (const scene of this.scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                if (world.preRender(gameFrame))\n                {\n                    this.flush = true;\n                }\n            }\n        }\n    }\n\n    render (renderPass: IRenderPass): void\n    {\n        for (const scene of this.scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                world.renderGL(renderPass);\n            }\n        }\n\n        this.flush = false;\n    }\n\n    //  TODO - This isn't used internally - is used by debug panel - move out?\n    /*\n    getRenderList (): IGameObject[]\n    {\n        let output: IGameObject[] = [];\n\n        for (const scene of this.scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                output = output.concat(world.getRenderList());\n            }\n        }\n\n        return output;\n    }\n\n    updateWorldStats (numGameObjects: number, numRendered: number, numDisplayLists: number, numWorldTransforms: number): void\n    {\n        const id = this.id;\n\n        RenderStatsComponent.numGameObjects[id] += numGameObjects;\n        RenderStatsComponent.numGameObjectsRendered[id] += numRendered;\n        RenderStatsComponent.numDirtyWorldLists[id] += numDisplayLists;\n        RenderStatsComponent.numDirtyWorldTransforms[id] += numWorldTransforms;\n    }\n    */\n}\n", "import { SceneManager } from './SceneManager';\n\nexport function CreateSceneManager (): void\n{\n    new SceneManager();\n}\n", "export function CreateCanvas (width: number, height: number): CanvasRenderingContext2D\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = width;\n    canvas.height = height;\n\n    return canvas.getContext('2d');\n}\n", "import { AlphaTexture } from './AlphaTexture';\nimport { CreateCanvas } from './CreateCanvas';\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { Texture } from './Texture';\nimport { TextureManagerInstance } from './TextureManagerInstance';\nimport { WhiteTexture } from './WhiteTexture';\n\nexport class TextureManager\n{\n    textures: Map<string, Texture>;\n\n    constructor ()\n    {\n        TextureManagerInstance.set(this);\n\n        this.textures = new Map();\n\n        this.createDefaultTextures();\n    }\n\n    private createDefaultTextures (): void\n    {\n        const alphaTexture = this.add('__BLANK', new Texture(CreateCanvas(2, 2).canvas));\n\n        AlphaTexture.set(alphaTexture);\n\n        const missing = CreateCanvas(32, 32);\n\n        missing.strokeStyle = '#0f0';\n        missing.moveTo(0, 0);\n        missing.lineTo(32, 32);\n        missing.stroke();\n        missing.strokeRect(0.5, 0.5, 31, 31);\n\n        this.add('__MISSING', new Texture(missing.canvas));\n\n        const white = CreateCanvas(2, 2);\n\n        white.fillStyle = '#fff';\n        white.fillRect(0, 0, 2, 2);\n\n        const whiteTexture = this.add('__WHITE', new Texture(white.canvas));\n\n        //  Because this is used frequently by Graphics and Shapes\n        WhiteTexture.set(whiteTexture);\n    }\n\n    get (key: string): Texture\n    {\n        const textures = this.textures;\n\n        if (textures.has(key))\n        {\n            return textures.get(key);\n        }\n        else\n        {\n            return textures.get('__MISSING');\n        }\n    }\n\n    has (key: string): boolean\n    {\n        return this.textures.has(key);\n    }\n\n    add (key: string, source: Texture | TexImageSource, glConfig?: IGLTextureBindingConfig): Texture\n    {\n        let texture: Texture;\n\n        if (!this.textures.has(key))\n        {\n            if (source instanceof Texture)\n            {\n                texture = source;\n            }\n            else\n            {\n                texture = new Texture(source, 0, 0, glConfig);\n            }\n\n            texture.key = key;\n\n            this.textures.set(key, texture);\n        }\n\n        return texture;\n    }\n\n    update (key: string, source: TexImageSource, glConfig?: IGLTextureBindingConfig): Texture\n    {\n        const texture = this.textures.get(key);\n\n        if (texture)\n        {\n            texture.update(source, glConfig);\n        }\n\n        return texture;\n    }\n}\n", "import { TextureManager } from './TextureManager';\n\nexport function CreateTextureManager (): void\n{\n    new TextureManager();\n}\n", "import { IWorldRenderData } from './IWorldRenderData';\n\nexport function CreateWorldRenderData (): IWorldRenderData\n{\n    return {\n        gameFrame: 0,\n        dirtyLocal: 0,\n        dirtyWorld: 0,\n        dirtyQuad: 0,\n        dirtyColor: 0,\n        dirtyView: 0,\n        numChildren: 0,\n        rendered: 0,\n        renderMs: 0,\n        preRenderMs: 0,\n        updated: 0,\n        updateMs: 0,\n        fps: 0,\n        delta: 0,\n        processed: 0\n    };\n}\n", "export function DOMContentLoaded (callback: () => void): void\n{\n    const readyState = document.readyState;\n\n    if (readyState === 'complete' || readyState === 'interactive')\n    {\n        callback();\n\n        return;\n    }\n\n    const check = (): void =>\n    {\n        document.removeEventListener('deviceready', check, true);\n        document.removeEventListener('DOMContentLoaded', check, true);\n        window.removeEventListener('load', check, true);\n\n        callback();\n    };\n\n    // TODO - Swap is IsCordova call\n\n    if (!document.body)\n    {\n        window.setTimeout(check, 20);\n    }\n    else if (window.hasOwnProperty('cordova'))\n    {\n        document.addEventListener('deviceready', check, true);\n    }\n    else\n    {\n        document.addEventListener('DOMContentLoaded', check, true);\n        window.addEventListener('load', check, true);\n    }\n}\n", "import { IWorldRenderData } from './IWorldRenderData';\n\nexport function ResetWorldRenderData (renderData: IWorldRenderData): void\n{\n    renderData.rendered = 0;\n    renderData.dirtyColor = 0;\n    renderData.dirtyLocal = 0;\n    renderData.dirtyView = 0;\n    renderData.dirtyWorld = 0;\n    renderData.dirtyQuad = 0;\n    renderData.processed = 0;\n    renderData.renderMs = 0;\n    renderData.preRenderMs = 0;\n    renderData.updated = 0;\n    renderData.updateMs = 0;\n}\n", "import { ISceneConfig } from './ISceneConfig';\n\nexport function GetConfigValue<Property extends keyof ISceneConfig> (config: ISceneConfig, property: Property, defaultValue: ISceneConfig[Property]): ISceneConfig[Property]\n{\n    if (Object.prototype.hasOwnProperty.call(config, property))\n    {\n        return config[property];\n    }\n    else\n    {\n        return defaultValue;\n    }\n}\n", "import { GetConfigValue } from './GetConfigValue';\nimport { IScene } from './IScene';\nimport { ISceneConfig } from './ISceneConfig';\nimport { SceneManagerInstance } from './SceneManagerInstance';\nimport { WorldList } from '../world/WorldList';\n\nexport function Install (scene: IScene, config: string | ISceneConfig = {}): void\n{\n    const sceneManager = SceneManagerInstance.get();\n\n    const size = sceneManager.scenes.size;\n    const sceneIndex = sceneManager.sceneIndex;\n    const firstScene = (size === 0);\n\n    if (typeof config === 'string')\n    {\n        scene.key = config;\n    }\n    else if (config || (!config && firstScene))\n    {\n        scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex.toString());\n    }\n\n    if (sceneManager.scenes.has(scene.key))\n    {\n        console.warn('Scene key already in use: ' + scene.key);\n    }\n    else\n    {\n        sceneManager.scenes.set(scene.key, scene);\n\n        sceneManager.flush = true;\n\n        sceneManager.sceneIndex++;\n    }\n\n    WorldList.set(scene, []);\n}\n", "export const RenderStats =\n{\n    fps: 0,\n    delta: 0,\n\n    //  The current Game Frame number\n    gameFrame: 0,\n\n    //  Total number of Scenes rendered\n    numScenes: 0,\n\n    //  Total number of Worlds rendered\n    numWorlds: 0,\n\n    //  Total number of Game Objects (across all worlds)\n    numGameObjects: 0,\n\n    //  Total number of Game Objects to be rendered (across all worlds)\n    numGameObjectsRendered: 0,\n\n    //  Total number of Game Objects with dirty local transforms\n    numDirtyLocalTransforms: 0,\n\n    //  Total number of Game Objects with dirty world transforms\n    numDirtyWorldTransforms: 0,\n\n    //  Total number of Game Objects with dirty vertices\n    numDirtyVertices: 0,\n\n    //  Total number of Worlds that had to recalculate their display lists\n    numDirtyWorldLists: 0,\n\n    //  How many Cameras were made dirty this frame across all Scenes?\n    numDirtyCameras: 0\n};\n", "import { Game } from '../Game';\nimport { GameInstance } from '../GameInstance';\nimport { IEventEmitter } from '../events/IEventEmitter';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IScene } from './IScene';\nimport { ISceneConfig } from './ISceneConfig';\nimport { Install } from './Install';\n\nexport class Scene implements IScene, IEventEmitter\n{\n    key: string;\n    game: Game;\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor (config?: string | ISceneConfig)\n    {\n        this.game = GameInstance.get();\n        this.events = new Map();\n\n        Install(this, config);\n    }\n}\n", "import { SetBackgroundColor } from './backgroundcolor/SetBackgroundColor';\nimport { SetBanner } from './banner/SetBanner';\nimport { SetBatchSize } from './batchsize/SetBatchSize';\nimport { SetDefaultOrigin } from './defaultorigin/SetDefaultOrigin';\nimport { SetMaxTextures } from './maxtextures/SetMaxTextures';\nimport { SetSize } from './size/SetSize';\nimport { SetWebGLContext } from './webglcontext/SetWebGLContext';\n\n//  Phaser 4 defaults\n\nexport function SetConfigDefaults (): void\n{\n    SetBackgroundColor(0);\n    SetBatchSize(2048);\n    SetBanner('Phaser', '4.0.0', 'https://phaser4.io');\n    SetMaxTextures(0);\n    SetDefaultOrigin(0.5, 0.5);\n    SetSize(800, 600, 1);\n    SetWebGLContext({\n        antialias: true,\n        desynchronized: true,\n        preserveDrawingBuffer: true\n    });\n}\n", "import { GameInstance } from '../../GameInstance';\nimport { RenderStats } from '../../scenes/RenderStats';\n\nexport class Time\n{\n    lastTick: number = 0;\n    elapsed: number = 0;\n    delta: number = 0;\n    fps: number = 60;\n    fpsCount: number = 0;\n    frame: number = 0;\n    ms: number = 0;\n    prevFrame: number = 0;\n\n    constructor ()\n    {\n        const now = performance.now();\n\n        this.lastTick = now;\n        this.prevFrame = now;\n    }\n\n    update (time: number): void\n    {\n        this.ms = time - this.lastTick;\n    }\n\n    updateDelta (time: number): number\n    {\n        //  Note that privacy.resistFingerprinting can round this value to 100us or more!\n        const now = performance.now();\n\n        //  How long it took to process this frame\n        const elapsed = now - time;\n\n        this.fpsCount++;\n\n        if (now >= this.prevFrame + 1000)\n        {\n            this.fps = (this.fpsCount * 1000) / (now - this.prevFrame);\n            this.prevFrame = now;\n            this.fpsCount = 0;\n        }\n\n        this.lastTick = now;\n        this.elapsed += elapsed;\n        this.delta = 1000 / this.fps;\n        this.frame++;\n\n        GameInstance.setFrame(this.frame);\n\n        RenderStats.fps = this.fps;\n        RenderStats.delta = 1000 / this.fps;\n\n        return this.frame;\n    }\n\n    resetLastTick (): void\n    {\n        this.lastTick = performance.now();\n    }\n}\n", "import { AddBanner } from './config/banner/AddBanner';\nimport { AddGlobalVar } from './config/globalvar/AddGlobalVar';\nimport { AddToParent } from './config/parent/AddToParent';\nimport { CreateRenderer } from './config/renderer/CreateRenderer';\nimport { CreateSceneManager } from './scenes/CreateSceneManager';\nimport { CreateTextureManager } from './textures/CreateTextureManager';\nimport { CreateWorldRenderData } from './world/CreateWorldRenderData';\nimport { DOMContentLoaded } from './dom/DOMContentLoaded';\nimport { Emit } from './events/Emit';\nimport { EventEmitter } from './events/EventEmitter';\nimport { GameInstance } from './GameInstance';\nimport { GameObjectWorld } from './GameObjectWorld';\nimport { IRenderPass } from './renderer/webgl1/renderpass/IRenderPass';\nimport { IWorldRenderData } from './world/IWorldRenderData';\nimport { RendererInstance } from './renderer/RendererInstance';\nimport { ResetWorldRenderData } from './world/ResetWorldRenderData';\nimport { SceneManagerInstance } from './scenes';\nimport { SetConfigDefaults } from './config/SetConfigDefaults';\nimport { Time } from './components/timer/Time';\nimport { addEntity } from 'bitecs';\n\nexport class Game extends EventEmitter\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    time: Time;\n\n    isBooted: boolean = false;\n    isPaused: boolean = false;\n\n    //  TODO - Allow update to run on different tick to render\n    //  TODO - Allow update and render to be called directly\n    willUpdate: boolean = true;\n    willRender: boolean = true;\n\n    renderStats: IWorldRenderData;\n\n    constructor (...settings: { (): void }[])\n    {\n        super();\n\n        this.time = new Time();\n\n        GameInstance.set(this);\n\n        SetConfigDefaults();\n\n        DOMContentLoaded(() => this.boot(settings));\n    }\n\n    boot (settings: { (): void }[]): void\n    {\n        //  Activate the settings post DOM Content Loaded\n        settings.forEach(setting => setting());\n\n        CreateRenderer();\n        CreateTextureManager();\n        CreateSceneManager();\n\n        AddBanner();\n        AddGlobalVar(this);\n        AddToParent();\n\n        this.isBooted = true;\n        this.renderStats = CreateWorldRenderData();\n\n        Emit(this, 'boot');\n\n        requestAnimationFrame(now => this.step(now));\n    }\n\n    pause (): void\n    {\n        this.isPaused = true;\n    }\n\n    resume (): void\n    {\n        this.isPaused = false;\n\n        this.time.resetLastTick();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    update (delta: number, time: number): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    render (renderPass: IRenderPass, delta: number, time: number): void\n    {\n    }\n\n    step (now: number): void\n    {\n        const renderer = RendererInstance.get();\n        const sceneManager = SceneManagerInstance.get();\n\n        const time = this.time;\n\n        ResetWorldRenderData(this.renderStats);\n\n        time.update(now);\n\n        if (!this.isPaused)\n        {\n            const delta = time.delta;\n\n            if (this.willUpdate)\n            {\n                sceneManager.update();\n\n                this.update(delta, now);\n\n                Emit(this, 'update', delta, now);\n            }\n\n            if (this.willRender)\n            {\n                sceneManager.preRender();\n\n                renderer.begin(sceneManager.flush);\n\n                const renderPass = renderer.renderPass;\n\n                sceneManager.render(renderPass);\n\n                this.render(renderPass, delta, now);\n\n                Emit(this, 'render', renderPass, delta, now);\n\n                renderer.end();\n            }\n        }\n\n        time.updateDelta(now);\n\n        Emit(this, 'step');\n\n        this.renderStats.fps = time.fps;\n        this.renderStats.delta = time.delta;\n\n        requestAnimationFrame(now => this.step(now));\n    }\n\n    destroy (): void\n    {\n        //  TODO - Code destroy function\n    }\n}\n", "import { IFile } from './IFile';\n\nexport function CreateFile (key: string, url: string, skipCache: boolean = false): IFile\n{\n    return {\n        key,\n        url,\n        skipCache\n    };\n}\n", "export function IsAbsoluteURI (url: string): boolean\n{\n    return (/^(?:blob:|data:|http:\\/\\/|https:\\/\\/|\\/\\/)/).test(url);\n}\n", "import { ILoader } from './ILoader';\nimport { IsAbsoluteURI } from './IsAbsoluteURI';\n\nexport function GetURL (key: string, url: string, extension: string, loader?: ILoader): string\n{\n    if (!url)\n    {\n        url = `${key}.${extension}`;\n    }\n\n    if (IsAbsoluteURI(url))\n    {\n        return url;\n    }\n    else if (loader)\n    {\n        return `${loader.baseURL}${loader.path}${url}`;\n    }\n    else\n    {\n        return url;\n    }\n}\n", "import { IFile } from './IFile';\nimport { IFileData } from './IFileData';\n\nexport async function RequestFile (file: IFile, preload: (file: IFile) => boolean, onload: (file: IFile) => Promise<boolean>, fileData?: IFileData): Promise<IFile>\n{\n    if (!preload(file))\n    {\n        return Promise.reject(file);\n    }\n\n    try\n    {\n        const request = new Request(file.url, fileData?.requestInit);\n\n        file.response = await fetch(request);\n\n        if (file.response.ok && await onload(file))\n        {\n            return Promise.resolve(file);\n        }\n        else\n        {\n            return Promise.reject(file);\n        }\n    }\n    catch (error)\n    {\n        file.error = error;\n\n        return Promise.reject(file);\n    }\n}\n", "import { CreateFile } from '../CreateFile';\nimport { GetURL } from '../GetURL';\nimport { IFile } from '../IFile';\nimport { IFileData } from '../IFileData';\nimport { ILoader } from '../ILoader';\nimport { RequestFile } from '../RequestFile';\nimport { RequestFileType } from '../RequestFileType';\nimport { TextureManagerInstance } from '../../textures/TextureManagerInstance';\n\nexport function ImageFile (key: string, url?: string, fileData: IFileData = {}): RequestFileType\n{\n    return (loader?: ILoader): Promise<IFile> =>\n    {\n        const file = CreateFile(key, GetURL(key, url, 'png', loader), fileData?.skipCache);\n\n        const textureManager = TextureManagerInstance.get();\n\n        const preload = () =>\n        {\n            return (textureManager && (!textureManager.has(key) || !textureManager.get(key).locked));\n        };\n\n        const onload = async (file: IFile) =>\n        {\n            const blob = await file.response.blob();\n\n            let image;\n\n            if (window && 'createImageBitmap' in window && !fileData?.getImage)\n            {\n                image = await createImageBitmap(blob);\n            }\n            else\n            {\n                image = await new Promise <HTMLImageElement> ((resolve, reject)  =>\n                {\n                    const url = URL.createObjectURL(blob);\n\n                    const img = new Image();\n\n                    img.onload = (): void =>\n                    {\n                        URL.revokeObjectURL(url);\n\n                        resolve(img);\n                    };\n\n                    img.onerror = (): void =>\n                    {\n                        reject();\n                    };\n\n                    img.src = url;\n\n                    // Image is immediately-available or cached\n\n                    if (img.complete && img.width && img.height)\n                    {\n                        img.onload = null;\n                        img.onerror = null;\n\n                        resolve(img);\n                    }\n                });\n            }\n\n            if (!image)\n            {\n                return false;\n            }\n\n            if (fileData.skipCache)\n            {\n                file.data = image;\n            }\n            else if (textureManager.has(key))\n            {\n                file.data = textureManager.update(key, image, fileData?.glConfig);\n            }\n            else\n            {\n                file.data = textureManager.add(key, image, fileData?.glConfig);\n            }\n\n            return true;\n        };\n\n        return RequestFile(file, preload, onload, fileData);\n    };\n}\n", "import { IFile } from '../IFile';\nimport { IFileData } from '../IFileData';\nimport { ImageFile } from './ImageFile';\n\nexport async function LoadImageFile (key: string, url?: string, fileData: IFileData = {}): Promise<IFile>\n{\n    const load = ImageFile(key, url, fileData);\n\n    return load();\n}\n", "import { TRANSFORM, Transform2DComponent } from '../transform/Transform2DComponent';\n\nexport function SetFixedTransform (id: number, value: boolean): void\n{\n    Transform2DComponent.data[id][TRANSFORM.FIXED] = Number(value);\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function SetWillTransformChildren (id: number, value: boolean): void\n{\n    PermissionsComponent.data[id][PERMISSION.WILL_TRANSFORM_CHILDREN] = Number(value);\n}\n", "import { TRANSFORM, Transform2DComponent } from '../../components/transform/Transform2DComponent';\n\nimport { AddTransform2DComponent } from '../../components/transform/AddTransform2DComponent';\nimport { GameObject } from '../GameObject';\nimport { IBaseCamera } from '../../camera/IBaseCamera';\nimport { IGameObject } from '../IGameObject';\nimport { SetDirtyTransform } from '../../components/dirty/SetDirtyTransform';\nimport { SetFixedTransform } from '../../components/transform/SetFixedTransform';\nimport { SetWillTransformChildren } from '../../components/permissions/SetWillTransformChildren';\n\nexport class ParallaxLayer extends GameObject\n{\n    readonly type: string = 'ParallaxLayer';\n\n    camera: IBaseCamera;\n\n    scrollFactorX: number;\n    scrollFactorY: number;\n\n    private _data: Float32Array;\n\n    constructor (camera: IBaseCamera, scrollFactorX: number = 0, scrollFactorY: number = scrollFactorX)\n    {\n        super();\n\n        this.camera = camera;\n\n        this.scrollFactorX = scrollFactorX;\n        this.scrollFactorY = scrollFactorY;\n\n        const id = this.id;\n\n        AddTransform2DComponent(id);\n\n        SetFixedTransform(id, true);\n        SetWillTransformChildren(id, true);\n\n        this._data = Transform2DComponent.data[id];\n    }\n\n    update (): void\n    {\n        const camera = this.camera;\n\n        if (camera.isDirty)\n        {\n            this._data[TRANSFORM.X] = camera.getBoundsX() * this.scrollFactorX;\n            this._data[TRANSFORM.Y] = camera.getBoundsY() * this.scrollFactorY;\n\n            SetDirtyTransform(this.id);\n        }\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        this._data = null;\n    }\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function HasCustomDisplayList (id: number): boolean\n{\n    return !!(PermissionsComponent.data[id][PERMISSION.CUSTOM_DISPLAY_LIST]);\n}\n", "import { GetNumChildren } from '../hierarchy/GetNumChildren';\nimport { HasDirtyChildCache } from '../dirty/HasDirtyChildCache';\nimport { WillCacheChildren } from './WillCacheChildren';\nimport { WillRenderChildren } from './WillRenderChildren';\n\nexport function HasRenderableChildren (id: number, dirtyCamera: boolean): number\n{\n    const numChildren = GetNumChildren(id);\n\n    if (numChildren === 0 || !WillRenderChildren(id))\n    {\n        return 0;\n    }\n\n    //  By this stage we know it has some children\n\n    //  A Container won't cache children\n    //  A RenderLayer will cache children, but check if any are dirty or not\n    if (dirtyCamera || !WillCacheChildren(id) || (WillCacheChildren(id) && HasDirtyChildCache(id)))\n    {\n        return numChildren;\n    }\n\n    return 0;\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function SetWillCacheChildren (id: number, value: boolean): void\n{\n    PermissionsComponent.data[id][PERMISSION.WILL_CACHE_CHILDREN] = Number(value);\n}\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\n\nexport function WillUpdate (id: number): boolean\n{\n    return !!(PermissionsComponent.data[id][PERMISSION.WILL_UPDATE]);\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nexport function IsInView (id: number): boolean\n{\n    return !!(Transform2DComponent.data[id][TRANSFORM.IN_VIEW]);\n}\n", "import { TRANSFORM, Transform2DComponent } from '../transform/Transform2DComponent';\n\nexport function SetInViewFromBounds (id: number, cx: number, cy: number, cright: number, cbottom: number): void\n{\n    const data: Float32Array = Transform2DComponent.data[id];\n\n    const bx = data[TRANSFORM.BOUNDS_X1];\n    const by = data[TRANSFORM.BOUNDS_Y1];\n    const br = data[TRANSFORM.BOUNDS_X2];\n    const bb = data[TRANSFORM.BOUNDS_Y2];\n\n    data[TRANSFORM.IN_VIEW] = Number(!(cright < bx || cbottom < by || cx > br || cy > bb));\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { ClearDirtyTransform } from '../dirty/ClearDirtyTransform';\nimport { GetParentID } from '../hierarchy/GetParentID';\nimport { SetDirtyWorldTransform } from '../dirty/SetDirtyWorldTransform';\nimport { SetQuadPosition } from '../vertices/SetQuadPosition';\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\n\nexport function UpdateTransforms (id: number, cx: number, cy: number, cright: number, cbottom: number): void\n{\n    const data: Float32Array = Transform2DComponent.data[id];\n\n    let tx = data[TRANSFORM.X];\n    let ty = data[TRANSFORM.Y];\n    const rotation = data[TRANSFORM.ROTATION];\n    const scaleX = data[TRANSFORM.SCALE_X];\n    const scaleY = data[TRANSFORM.SCALE_Y];\n    const skewX = data[TRANSFORM.SKEW_X];\n    const skewY = data[TRANSFORM.SKEW_Y];\n    let axisAligned = Boolean(data[TRANSFORM.AXIS_ALIGNED]);\n\n    let a = scaleX;\n    let b = 0;\n    let c = 0;\n    let d = scaleY;\n\n    if (!axisAligned)\n    {\n        a = Math.cos(rotation + skewY) * scaleX;\n        b = Math.sin(rotation + skewY) * scaleX;\n        c = -Math.sin(rotation - skewX) * scaleY;\n        d = Math.cos(rotation - skewX) * scaleY;\n    }\n\n    data[TRANSFORM.LOCAL_A] = a;\n    data[TRANSFORM.LOCAL_B] = b;\n    data[TRANSFORM.LOCAL_C] = c;\n    data[TRANSFORM.LOCAL_D] = d;\n    data[TRANSFORM.LOCAL_TX] = tx;\n    data[TRANSFORM.LOCAL_TY] = ty;\n\n    //  This is a root transform, so world is the same as local\n    if (data[TRANSFORM.IS_ROOT])\n    {\n        data[TRANSFORM.WORLD_A] = a;\n        data[TRANSFORM.WORLD_B] = b;\n        data[TRANSFORM.WORLD_C] = c;\n        data[TRANSFORM.WORLD_D] = d;\n        data[TRANSFORM.WORLD_TX] = tx;\n        data[TRANSFORM.WORLD_TY] = ty;\n    }\n    else\n    {\n        //  Otherwise, multiply by the parent transform\n        const parentID = GetParentID(id);\n\n        const parentData: Float32Array = Transform2DComponent.data[parentID];\n\n        const pa = parentData[TRANSFORM.WORLD_A];\n        const pb = parentData[TRANSFORM.WORLD_B];\n        const pc = parentData[TRANSFORM.WORLD_C];\n        const pd = parentData[TRANSFORM.WORLD_D];\n        const ptx = parentData[TRANSFORM.WORLD_TX];\n        const pty = parentData[TRANSFORM.WORLD_TY];\n\n        const worldA = a * pa + b * pc;\n        const worldB = a * pb + b * pd;\n        const worldC = c * pa + d * pc;\n        const worldD = c * pb + d * pd;\n        const worldTX = tx * pa + ty * pc + ptx;\n        const worldTY = tx * pb + ty * pd + pty;\n\n        data[TRANSFORM.WORLD_A] = worldA;\n        data[TRANSFORM.WORLD_B] = worldB;\n        data[TRANSFORM.WORLD_C] = worldC;\n        data[TRANSFORM.WORLD_D] = worldD;\n        data[TRANSFORM.WORLD_TX] = worldTX;\n        data[TRANSFORM.WORLD_TY] = worldTY;\n\n        a = worldA;\n        b = worldB;\n        c = worldC;\n        d = worldD;\n        tx = worldTX;\n        ty = worldTY;\n\n        //  Recalc or just set false? Saves on the extra ops and min/maxing\n        axisAligned = false;\n    }\n\n    ClearDirtyTransform(id);\n\n    if (WillTransformChildren(id))\n    {\n        SetDirtyWorldTransform(id);\n    }\n\n    if (data[TRANSFORM.FIXED])\n    {\n        return;\n    }\n\n    //  Update Quad and InView:\n\n    const x = data[TRANSFORM.FRAME_X1];\n    const y = data[TRANSFORM.FRAME_Y1];\n    const right = data[TRANSFORM.FRAME_X2];\n    const bottom = data[TRANSFORM.FRAME_Y2];\n\n    //  top left\n    let x0 = (x * a) + tx;\n    let y0 = (y * d) + ty;\n\n    //  bottom left\n    let x1 = (x * a) + tx;\n    let y1 = (bottom * d) + ty;\n\n    //  bottom right\n    let x2 = (right * a) + tx;\n    let y2 = (bottom * d) + ty;\n\n    //  top right\n    let x3 = (right * a) + tx;\n    let y3 = (y * d) + ty;\n\n    let inView = 0;\n\n    if (axisAligned)\n    {\n        data[TRANSFORM.BOUNDS_X1] = x0;\n        data[TRANSFORM.BOUNDS_Y1] = y0;\n        data[TRANSFORM.BOUNDS_X2] = x2;\n        data[TRANSFORM.BOUNDS_Y2] = y2;\n\n        inView = Number(!(cright < x0 || cbottom < y0 || cx > x2 || cy > y2));\n    }\n    else\n    {\n        x0 += (y * c);\n        y0 += (x * b);\n        x1 += (bottom * c);\n        y1 += (x * b);\n        x2 += (bottom * c);\n        y2 += (right * b);\n        x3 += (y * c);\n        y3 += (right * b);\n\n        const bx = Math.min(x0, x1, x2, x3);\n        const by = Math.min(y0, y1, y2, y3);\n        const br = Math.max(x0, x1, x2, x3);\n        const bb = Math.max(y0, y1, y2, y3);\n\n        data[TRANSFORM.BOUNDS_X1] = bx;\n        data[TRANSFORM.BOUNDS_Y1] = by;\n        data[TRANSFORM.BOUNDS_X2] = br;\n        data[TRANSFORM.BOUNDS_Y2] = bb;\n\n        inView = Number(!(cright < bx || cbottom < by || cx > br || cy > bb));\n    }\n\n    data[TRANSFORM.IN_VIEW] = inView;\n\n    //  Always set quad position, so we can always extract the quad points at any point, in-view, or not\n    SetQuadPosition(id, x0, y0, x1, y1, x2, y2, x3, y3);\n}\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\n\nimport { SetDirtyWorldTransform } from '../dirty/SetDirtyWorldTransform';\nimport { SetQuadPosition } from '../vertices/SetQuadPosition';\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\n\nexport function UpdateWorldTransform (id: number, parentID: number, cx: number, cy: number, cright: number, cbottom: number): void\n{\n    const parentData = Transform2DComponent.data[parentID];\n    const data = Transform2DComponent.data[id];\n\n    const pa = parentData[TRANSFORM.WORLD_A];\n    const pb = parentData[TRANSFORM.WORLD_B];\n    const pc = parentData[TRANSFORM.WORLD_C];\n    const pd = parentData[TRANSFORM.WORLD_D];\n    const ptx = parentData[TRANSFORM.WORLD_TX];\n    const pty = parentData[TRANSFORM.WORLD_TY];\n\n    let a = data[TRANSFORM.LOCAL_A];\n    let b = data[TRANSFORM.LOCAL_B];\n    let c = data[TRANSFORM.LOCAL_C];\n    let d = data[TRANSFORM.LOCAL_D];\n    let tx = data[TRANSFORM.LOCAL_TX];\n    let ty = data[TRANSFORM.LOCAL_TY];\n\n    const worldA = a * pa + b * pc;\n    const worldB = a * pb + b * pd;\n    const worldC = c * pa + d * pc;\n    const worldD = c * pb + d * pd;\n    const worldTX = tx * pa + ty * pc + ptx;\n    const worldTY = tx * pb + ty * pd + pty;\n\n    data[TRANSFORM.WORLD_A] = worldA;\n    data[TRANSFORM.WORLD_B] = worldB;\n    data[TRANSFORM.WORLD_C] = worldC;\n    data[TRANSFORM.WORLD_D] = worldD;\n    data[TRANSFORM.WORLD_TX] = worldTX;\n    data[TRANSFORM.WORLD_TY] = worldTY;\n\n    if (WillTransformChildren(id))\n    {\n        SetDirtyWorldTransform(id);\n    }\n\n    if (data[TRANSFORM.FIXED])\n    {\n        return;\n    }\n\n    a = worldA;\n    b = worldB;\n    c = worldC;\n    d = worldD;\n    tx = worldTX;\n    ty = worldTY;\n\n    //  Update Quad and InView:\n\n    const x = data[TRANSFORM.FRAME_X1];\n    const y = data[TRANSFORM.FRAME_Y1];\n    const right = data[TRANSFORM.FRAME_X2];\n    const bottom = data[TRANSFORM.FRAME_Y2];\n\n    //  top left\n    let x0 = (x * a) + tx;\n    let y0 = (y * d) + ty;\n\n    //  bottom left\n    let x1 = (x * a) + tx;\n    let y1 = (bottom * d) + ty;\n\n    //  bottom right\n    let x2 = (right * a) + tx;\n    let y2 = (bottom * d) + ty;\n\n    //  top right\n    let x3 = (right * a) + tx;\n    let y3 = (y * d) + ty;\n\n    x0 += (y * c);\n    y0 += (x * b);\n    x1 += (bottom * c);\n    y1 += (x * b);\n    x2 += (bottom * c);\n    y2 += (right * b);\n    x3 += (y * c);\n    y3 += (right * b);\n\n    const bx = Math.min(x0, x1, x2, x3);\n    const by = Math.min(y0, y1, y2, y3);\n    const br = Math.max(x0, x1, x2, x3);\n    const bb = Math.max(y0, y1, y2, y3);\n\n    data[TRANSFORM.BOUNDS_X1] = bx;\n    data[TRANSFORM.BOUNDS_Y1] = by;\n    data[TRANSFORM.BOUNDS_X2] = br;\n    data[TRANSFORM.BOUNDS_Y2] = bb;\n\n    const inView = Number(!(cright < bx || cbottom < by || cx > br || cy > bb));\n\n    data[TRANSFORM.IN_VIEW] = inView;\n\n    //  Always set quad position, so we can always extract the quad points at any point, in-view, or not\n    SetQuadPosition(id, x0, y0, x1, y1, x2, y2, x3, y3);\n}\n", "import { IFrame } from './IFrame';\n\nexport function FlipFrameUVs <T extends IFrame> (frame: T): T\n{\n    frame.v0 = 1 - frame.v0;\n    frame.v1 = 1 - frame.v1;\n\n    return frame;\n}\n", "import { FlipFrameUVs } from '../../../textures/FlipFrameUVs';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShaderConfig } from './IShaderConfig';\nimport { Mat4Ortho } from '../../../math/mat4/Mat4Ortho';\nimport { SetUniforms } from './SetUniforms';\nimport { Shader } from './Shader';\n\nexport class TextureShader extends Shader\n{\n    cameraMatrix: Float32Array;\n    projectionMatrix: Float32Array;\n\n    constructor (config: IShaderConfig = {})\n    {\n        config.renderToFramebuffer = true;\n\n        super(config);\n\n        this.cameraMatrix = new Float32Array([ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ]);\n        this.projectionMatrix = new Float32Array(16);\n\n        Mat4Ortho(this.projectionMatrix, 0, this.viewport.width, this.viewport.height, 0, -1, 1);\n\n        //  Only for TextureShaders\n        FlipFrameUVs(this.texture.firstFrame);\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        const uniforms = this.uniforms;\n\n        uniforms.set('uProjectionMatrix', this.projectionMatrix);\n        uniforms.set('uCameraMatrix', this.cameraMatrix);\n\n        this.updateUniforms(renderPass);\n\n        return SetUniforms(this, renderPass);\n    }\n}\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldAfterUpdateEvent: string = 'afterupdate';\n\nexport type WorldAfterUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldBeforeUpdateEvent: string = 'beforeupdate';\n\nexport type WorldBeforeUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\n\nexport const WorldPostRenderEvent: string = 'postrender';\n\nexport type WorldPostRenderEventHandler = (renderPass: IRenderPass, world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldPreRenderEvent: string = 'prerender';\n\nexport type WorldPreRenderEventHandler = <T extends IBaseWorld> (world: T) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\nimport { IWorldRenderData } from '../IWorldRenderData';\n\nexport const WorldRenderEvent: string = 'render';\n\nexport type WorldRenderEventHandler = (renderData: IWorldRenderData, world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldShutdownEvent: string = 'shutdown';\n\nexport type WorldShutdownEventHandler = (world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldUpdateEvent: string = 'update';\n\nexport type WorldUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\n", "export const SceneDestroyEvent: string = 'destroy';\n\nexport type SceneDestroyEventHandler = () => void;\n", "import { Emit } from '../events/Emit';\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\nimport { GetFirstChildID } from '../components/hierarchy/GetFirstChildID';\nimport { IBaseWorld } from './IBaseWorld';\nimport { MoveNextUpdatable } from '../components/hierarchy/MoveNextUpdatable';\nimport { WillUpdate } from '../components/permissions/WillUpdate';\nimport { WorldUpdateEvent } from './events/WorldUpdateEvent';\n\nexport function UpdateWorld <T extends IBaseWorld> (world: T, delta: number, time: number): void\n{\n    if (!WillUpdate(world.id))\n    {\n        return;\n    }\n\n    const start = performance.now();\n\n    let next = GetFirstChildID(world.id);\n\n    let total = 0;\n\n    while (next > 0)\n    {\n        if (WillUpdate(next))\n        {\n            GameObjectCache.get(next).update(delta, time);\n\n            total++;\n        }\n\n        next = MoveNextUpdatable(next);\n    }\n\n    world.renderData.updated = total;\n    world.renderData.updateMs = performance.now() - start;\n\n    Emit(world, WorldUpdateEvent, delta, time);\n}\n", "import * as WorldEvents from './events';\n\nimport { Query, defineComponent, defineQuery } from 'bitecs';\n\nimport { Color } from '../components/color/Color';\nimport { CreateWorldRenderData } from './CreateWorldRenderData';\nimport { Emit } from '../events/Emit';\nimport { GameObject } from '../gameobjects/GameObject';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { IBaseCamera } from '../camera/IBaseCamera';\nimport { IBaseWorld } from './IBaseWorld';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { IScene } from '../scenes/IScene';\nimport { IWorldRenderData } from './IWorldRenderData';\nimport { Once } from '../events/Once';\nimport { RemoveChildren } from '../display/RemoveChildren';\nimport { ResetWorldRenderData } from './ResetWorldRenderData';\nimport { SceneDestroyEvent } from '../scenes/events/SceneDestroyEvent';\nimport { SetWillCacheChildren } from '../components/permissions/SetWillCacheChildren';\nimport { SetWillTransformChildren } from '../components/permissions/SetWillTransformChildren';\nimport { SetWorldID } from '../components/hierarchy/SetWorldID';\nimport { UpdateWorld } from './UpdateWorld';\nimport { WorldList } from './WorldList';\n\n//  The base World class. You should not create an instance of this, but instead extend it,\n//  or use a class that does, such as StaticWorld or World.\n\nexport class BaseWorld extends GameObject implements IBaseWorld\n{\n    readonly type: string = 'BaseWorld';\n\n    tag = defineComponent();\n\n    scene: IScene;\n\n    camera: IBaseCamera;\n\n    is3D: boolean = false;\n\n    updateDisplayList: boolean = true;\n\n    color: Color;\n\n    renderData: IWorldRenderData;\n\n    stack: Uint32Array;\n\n    private totalChildren: number = 0;\n    private totalChildrenQuery: Query;\n\n    constructor (scene: IScene)\n    {\n        super();\n\n        const id = this.id;\n        const tag = this.tag;\n\n        this.scene = scene;\n\n        this.totalChildrenQuery = defineQuery([ tag ]);\n\n        SetWorldID(id, id);\n\n        WorldList.get(scene).push(this);\n\n        this.color = new Color(id);\n\n        this.events = new Map();\n\n        this.renderData = CreateWorldRenderData();\n\n        //  TODO - Set from Game Config: The stack can be up to 256 layers deep\n        this.stack = new Uint32Array(256);\n\n        SetWillTransformChildren(id, false);\n        SetWillCacheChildren(id, false);\n\n        Once(scene, SceneDestroyEvent, () => this.destroy());\n    }\n\n    getNumChildren (): number\n    {\n        if (this.updateDisplayList)\n        {\n            this.totalChildren = this.totalChildrenQuery(GameObjectWorld).length;\n\n            this.updateDisplayList = false;\n        }\n\n        return this.totalChildren;\n    }\n\n    beforeUpdate (delta: number, time: number): void\n    {\n        ResetWorldRenderData(this.renderData);\n\n        Emit(this, WorldEvents.WorldBeforeUpdateEvent, delta, time, this);\n    }\n\n    //  Called after Scene.update.\n    //  Invokes 'update' on all children of the Scene.\n    update (delta: number, time: number): void\n    {\n        UpdateWorld(this, delta, time);\n    }\n\n    afterUpdate (delta: number, time: number): void\n    {\n        Emit(this, WorldEvents.WorldAfterUpdateEvent, delta, time, this);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    preRender (gameFrame: number): boolean\n    {\n        return true;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n    }\n\n    shutdown (): void\n    {\n        RemoveChildren(this);\n\n        Emit(this, WorldEvents.WorldShutdownEvent, this);\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        this.shutdown();\n\n        if (this.camera)\n        {\n            this.camera.destroy();\n        }\n\n        this.camera = null;\n    }\n}\n", "import { ClearDirtyChildTransform } from '../components/dirty/ClearDirtyChildTransform';\nimport { ClearDirtyWorldTransform } from '../components/dirty/ClearDirtyWorldTransform';\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\nimport { GetFirstChildID } from '../components/hierarchy/GetFirstChildID';\nimport { GetNextSiblingID } from '../components/hierarchy/GetNextSiblingID';\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\nimport { HasCustomDisplayList } from '../components/permissions/HasCustomDisplayList';\nimport { HasRenderableChildren } from '../components/permissions/HasRenderableChildren';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { IsInView } from '../components/transform/IsInView';\nimport { WillCacheChildren } from '../components/permissions/WillCacheChildren';\nimport { WillRender } from '../components/permissions/WillRender';\n\nconst RENDER_LIST: IGameObject[] = [];\n\nlet RENDER_CHILD_TOTAL: number = 0;\nlet PROCESS_TOTAL: number = 0;\n\nexport function GetRenderList (): IGameObject[]\n{\n    return RENDER_LIST;\n}\n\nexport function GetRenderChildTotal (): number\n{\n    return RENDER_CHILD_TOTAL;\n}\n\nexport function GetProcessTotal (): number\n{\n    return PROCESS_TOTAL;\n}\n\nexport function ResetRenderChildTotal (): void\n{\n    RENDER_CHILD_TOTAL = 0;\n    PROCESS_TOTAL = 0;\n    RENDER_LIST.length = 0;\n}\n\nexport function RenderGLNode <T extends IRenderPass> (renderPass: T, id: number): void\n{\n    const inView = IsInView(id) || WillCacheChildren(id);\n\n    let gameObject;\n\n    PROCESS_TOTAL++;\n\n    if (inView)\n    {\n        gameObject = GameObjectCache.get(id);\n\n        gameObject.renderGL(renderPass);\n\n        RENDER_CHILD_TOTAL++;\n    }\n\n    if (HasCustomDisplayList(id))\n    {\n        gameObject = GameObjectCache.get(id);\n\n        gameObject.renderGL(renderPass);\n\n        RENDER_CHILD_TOTAL++;\n\n        const children = gameObject.getChildren(renderPass);\n\n        const numChildren = children.length;\n\n        for (let i = 0; i < numChildren; i++)\n        {\n            const childGameObject = children[i];\n            const childID = childGameObject.id;\n\n            PROCESS_TOTAL++;\n\n            if (WillRender(childID))\n            {\n                if (GetNumChildren(childID))\n                {\n                    RenderGLNode(renderPass, childID);\n                }\n                else\n                {\n                    childGameObject.renderGL(renderPass);\n                    childGameObject.postRenderGL(renderPass);\n\n                    RENDER_CHILD_TOTAL++;\n                }\n            }\n        }\n\n        gameObject.postRenderGL(renderPass);\n    }\n    else\n    {\n        const numChildren = HasRenderableChildren(id, renderPass.isCameraDirty());\n\n        if (numChildren)\n        {\n            let childID = GetFirstChildID(id);\n\n            for (let i = 0; i < numChildren; i++)\n            {\n                PROCESS_TOTAL++;\n\n                if (WillRender(childID))\n                {\n                    if (GetNumChildren(childID))\n                    {\n                        RenderGLNode(renderPass, childID);\n                    }\n                    else if (IsInView(childID))\n                    {\n                        const childGameObject = GameObjectCache.get(childID);\n\n                        childGameObject.renderGL(renderPass);\n                        childGameObject.postRenderGL(renderPass);\n\n                        RENDER_CHILD_TOTAL++;\n                    }\n                }\n\n                childID = GetNextSiblingID(childID);\n            }\n        }\n    }\n\n    if (inView)\n    {\n        gameObject.postRenderGL(renderPass);\n    }\n\n    ClearDirtyChildTransform(id);\n    ClearDirtyWorldTransform(id);\n}\n", "import { HasChildren } from '../components/hierarchy/HasChildren';\nimport { HasDirtyDisplayList } from '../components/dirty/HasDirtyDisplayList';\nimport { WillUpdateTransform } from '../components/dirty/WillUpdateTransform';\n\nexport function ProcessNode (node: number, cameraUpdated: boolean, isDisplayList: boolean): boolean\n{\n    if (isDisplayList)\n    {\n        return HasDirtyDisplayList(node);\n    }\n    else if (HasChildren(node) && (cameraUpdated || WillUpdateTransform(node)))\n    {\n        return true;\n    }\n\n    return false;\n}\n", "import { ClearDirtyColor } from '../components/dirty/ClearDirtyColor';\nimport { ColorComponent } from '../components/color/ColorComponent';\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\nimport { HasDirtyColor } from '../components/dirty/HasDirtyColor';\nimport { HasDirtyTransform } from '../components/dirty/HasDirtyTransform';\nimport { HasDirtyWorldTransform } from '../components/dirty/HasDirtyWorldTransform';\nimport { IWorldRenderData } from './IWorldRenderData';\nimport { SetInViewFromBounds } from '../components/transform/SetInViewFromBounds';\nimport { SetQuadColor } from '../components/vertices/SetQuadColor';\nimport { UpdateTransforms } from '../components/transform/UpdateTransforms';\nimport { UpdateWorldTransform } from '../components/transform/UpdateWorldTransform';\n\nexport function UpdateNode (id: number, parentID: number, checkColor: boolean, checkTransform: boolean, cx: number, cy: number, cright: number, cbottom: number, forceUpdate: boolean, parentIsDisplayList: boolean, renderData?: IWorldRenderData): void\n{\n    renderData.dirtyQuad++;\n\n    if (checkColor && HasDirtyColor(id))\n    {\n        const r = ColorComponent.r[id] / 255;\n        const g = ColorComponent.g[id] / 255;\n        const b = ColorComponent.b[id] / 255;\n        const a = ColorComponent.a[id];\n\n        SetQuadColor(id, r, g, b, a);\n\n        ClearDirtyColor(id);\n\n        renderData.dirtyColor++;\n    }\n\n    if (checkTransform)\n    {\n        let hasUpdated = false;\n\n        if (HasDirtyTransform(id))\n        {\n            UpdateTransforms(id, cx, cy, cright, cbottom);\n\n            hasUpdated = true;\n\n            renderData.dirtyLocal++;\n        }\n        else if (HasDirtyWorldTransform(parentID))\n        {\n            UpdateWorldTransform(id, parentID, cx, cy, cright, cbottom);\n\n            hasUpdated = true;\n\n            renderData.dirtyWorld++;\n        }\n        else if (forceUpdate)\n        {\n            SetInViewFromBounds(id, cx, cy, cright, cbottom);\n\n            renderData.dirtyView++;\n        }\n\n        if (hasUpdated && parentIsDisplayList)\n        {\n            GameObjectCache.get(parentID).onUpdateChild(id);\n        }\n    }\n}\n", "import { ClearDirtyChildColor } from '../components/dirty/ClearDirtyChildColor';\nimport { ClearDirtyChildTransform } from '../components/dirty/ClearDirtyChildTransform';\nimport { Emit } from '../events/Emit';\nimport { GetFirstChildID } from '../components/hierarchy/GetFirstChildID';\nimport { GetNextSiblingID } from '../components/hierarchy/GetNextSiblingID';\nimport { HasCustomDisplayList } from '../components/permissions/HasCustomDisplayList';\nimport { HasDirtyChildColor } from '../components/dirty/HasDirtyChildColor';\nimport { HasDirtyChildTransform } from '../components/dirty/HasDirtyChildTransform';\nimport { IBaseWorld } from './IBaseWorld';\nimport { ProcessNode } from './ProcessNode';\nimport { UpdateNode } from './UpdateNode';\nimport { WorldPreRenderEvent } from './events/WorldPreRenderEvent';\n\nexport function PreRenderWorld <T extends IBaseWorld> (world: T, gameFrame: number): boolean\n{\n    const start = performance.now();\n\n    const id = world.id;\n\n    const renderData = world.renderData;\n\n    renderData.gameFrame = gameFrame;\n\n    const camera = world.camera;\n    const cameraUpdated = camera.isDirty;\n\n    Emit(world, WorldPreRenderEvent, world);\n\n    const checkColor = HasDirtyChildColor(id);\n    const checkTransform = HasDirtyChildTransform(id) || cameraUpdated;\n\n    if (!checkColor && !checkTransform)\n    {\n        //  Nothing needs updating, so let's get out of here\n        return false;\n    }\n\n    const cx = camera.getBoundsX();\n    const cy = camera.getBoundsY();\n    const cright = camera.getBoundsRight();\n    const cbottom = camera.getBoundsBottom();\n\n    const stack = world.stack;\n\n    stack[0] = id;\n\n    let stackIndex = 1;\n    let parentNode = id;\n    let node = GetFirstChildID(id);\n    let isDisplayList = HasCustomDisplayList(node);\n\n    stackBlock:\n    {\n        while (stackIndex > 0)\n        {\n            UpdateNode(node, parentNode, checkColor, checkTransform, cx, cy, cright, cbottom, cameraUpdated, isDisplayList, renderData);\n\n            //  Dive as deep as we can go, adding all parents to the stack for _this branch_\n            //  If the parent isn't dirty and has no dirty children, go no further down this branch\n\n            while (ProcessNode(node, cameraUpdated, isDisplayList))\n            {\n                stack[stackIndex++] = node;\n\n                parentNode = node;\n                isDisplayList = HasCustomDisplayList(node);\n\n                node = GetFirstChildID(node);\n\n                UpdateNode(node, parentNode, checkColor, checkTransform, cx, cy, cright, cbottom, cameraUpdated, isDisplayList, renderData);\n            }\n\n            //  We're at the bottom of the branch\n            //  We know 'node' doesn't have any children, but the next sibling might\n            //  Move horizontally through the siblings, until we hit one with kids, or the end.\n\n            let next = GetNextSiblingID(node);\n\n            let climb = true;\n\n            while (next && climb)\n            {\n                if (ProcessNode(next, cameraUpdated, isDisplayList))\n                {\n                    //  The 'next' sibling has a child, so we're going deeper\n                    climb = false;\n                    break;\n                }\n                else\n                {\n                    UpdateNode(next, parentNode, checkColor, checkTransform, cx, cy, cright, cbottom, cameraUpdated, isDisplayList, renderData);\n\n                    next = GetNextSiblingID(next);\n                }\n            }\n\n            //  The moment we get here, we need to treat it like a whole new branch\n            //  We have either run out of siblings, or found one with children\n\n            if (climb)\n            {\n                //  No children and no more siblings, so let's climb\n                //  Go back up the stack until we find a node with a sibling\n\n                while (next === 0)\n                {\n                    node = stack[--stackIndex];\n\n                    if (!node)\n                    {\n                        break stackBlock;\n                    }\n\n                    next = GetNextSiblingID(node);\n                }\n\n                parentNode = stack[stackIndex - 1];\n                isDisplayList = HasCustomDisplayList(parentNode);\n            }\n\n            //  'next' now contains the sibling of the stack parent, set it to 'node'\n            node = next;\n        }\n    }\n\n    ClearDirtyChildColor(id);\n    ClearDirtyChildTransform(id);\n\n    world.getNumChildren();\n\n    renderData.preRenderMs = performance.now() - start;\n\n    return true;\n}\n", "import * as WorldEvents from './events';\n\nimport { GetProcessTotal, GetRenderChildTotal, RenderGLNode, ResetRenderChildTotal } from './RenderGLNode';\n\nimport { Begin } from '../renderer/webgl1/renderpass/Begin';\nimport { Emit } from '../events/Emit';\nimport { GetFirstChildID } from '../components/hierarchy/GetFirstChildID';\nimport { GetNextSiblingID } from '../components/hierarchy/GetNextSiblingID';\nimport { IBaseWorld } from './IBaseWorld';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { PopColor } from '../renderer/webgl1/renderpass/PopColor';\nimport { SetColor } from '../renderer/webgl1/renderpass/SetColor';\nimport { WillRender } from '../components/permissions/WillRender';\n\nexport function RenderGLWorld <T extends IBaseWorld, P extends IRenderPass> (world: T, renderPass: P): void\n{\n    SetColor(renderPass, world.color);\n\n    Emit(world, WorldEvents.WorldRenderEvent, renderPass, world);\n\n    const camera = world.camera;\n    const renderData = world.renderData;\n\n    const start = performance.now();\n\n    Begin(renderPass, camera);\n\n    ResetRenderChildTotal();\n\n    let id = GetFirstChildID(world.id);\n\n    while (id > 0)\n    {\n        if (WillRender(id))\n        {\n            RenderGLNode(renderPass, id);\n        }\n\n        id = GetNextSiblingID(id);\n    }\n\n    PopColor(renderPass, world.color);\n\n    //#ifdef RENDER_STATS\n    renderData.renderMs = performance.now() - start;\n    renderData.numChildren = world.getNumChildren();\n    // renderData.fps = world.scene.game.time.fps;\n    // renderData.delta = world.scene.game.time.delta;\n    renderData.rendered = GetRenderChildTotal();\n    renderData.processed = GetProcessTotal();\n    // renderData.renderList = GetRenderList();\n\n    const gameStats = world.scene.game.renderStats;\n\n    gameStats.rendered += renderData.rendered;\n    gameStats.dirtyColor += renderData.dirtyColor;\n    gameStats.dirtyLocal += renderData.dirtyLocal;\n    gameStats.dirtyView += renderData.dirtyView;\n    gameStats.dirtyWorld += renderData.dirtyWorld;\n    gameStats.dirtyQuad += renderData.dirtyQuad;\n    gameStats.processed += renderData.processed;\n    gameStats.renderMs += renderData.renderMs;\n    gameStats.numChildren = renderData.numChildren;\n    gameStats.preRenderMs += renderData.preRenderMs;\n    gameStats.updated += renderData.updated;\n    gameStats.updateMs += renderData.updateMs;\n    //#endif\n\n    camera.postRender();\n\n    Emit(world, WorldEvents.WorldPostRenderEvent, renderPass, world);\n}\n", "import { BaseCamera } from './BaseCamera';\nimport { ClearDirtyTransform } from '../components/dirty/ClearDirtyTransform';\nimport { HasDirtyTransform } from '../components/dirty/HasDirtyTransform';\nimport { IWorldCamera } from './IWorldCamera';\nimport { Position } from '../components/transform/Position';\nimport { SetBounds } from '../components/transform/SetBounds';\n\n//  A World Camera has a size, position and scale.\n\nexport class WorldCamera extends BaseCamera implements IWorldCamera\n{\n    readonly type: string = 'WorldCamera';\n\n    position: Position;\n\n    constructor (width: number, height: number)\n    {\n        super(width, height);\n\n        this.position = new Position(this.id, 0, 0);\n    }\n\n    set x (value: number)\n    {\n        this.position.x = value;\n    }\n\n    get x (): number\n    {\n        return this.position.x;\n    }\n\n    set y (value: number)\n    {\n        this.position.y = value;\n    }\n\n    get y (): number\n    {\n        return this.position.y;\n    }\n\n    setPosition (x: number, y?: number): this\n    {\n        this.position.set(x, y);\n\n        return this;\n    }\n\n    preRender (): boolean\n    {\n        const id = this.id;\n\n        if (HasDirtyTransform(id))\n        {\n            const x = this.x;\n            const y = this.y;\n\n            const w = this.size.width;\n            const h = this.size.height;\n\n            const ox = -x + (w / 2);\n            const oy = -y + (h / 2);\n\n            const bx = ox - (w / 2);\n            const by = oy - (h / 2);\n\n            SetBounds(id, bx, by, bx + w, by + h);\n\n            const data = this.matrix.data;\n\n            data[12] = this.x;\n            data[13] = this.y;\n\n            ClearDirtyTransform(id);\n\n            this.isDirty = true;\n\n            return true;\n        }\n\n        return false;\n    }\n}\n", "import { BaseWorld } from './BaseWorld';\nimport { GetRenderList } from './RenderGLNode';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { IScene } from '../scenes/IScene';\nimport { IWorld } from './IWorld';\nimport { PreRenderWorld } from './PreRenderWorld';\nimport { RenderGLWorld } from './RenderGLWorld';\nimport { RendererInstance } from '../renderer/RendererInstance';\nimport { UpdateWorld } from './UpdateWorld';\nimport { WorldCamera } from '../camera/WorldCamera';\n\nexport class World extends BaseWorld implements IWorld\n{\n    readonly type: string = 'World';\n\n    declare camera: WorldCamera;\n\n    constructor (scene: IScene)\n    {\n        super(scene);\n\n        const renderer = RendererInstance.get();\n\n        this.camera = new WorldCamera(renderer.width, renderer.height);\n    }\n\n    //  Called after Scene.update.\n    //  Invokes 'update' on all children of the Scene.\n    update (delta: number, time: number): void\n    {\n        this.camera.preRender();\n\n        UpdateWorld(this, delta, time);\n    }\n\n    preRender (gameFrame: number): boolean\n    {\n        return PreRenderWorld(this, gameFrame);\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        RenderGLWorld(this, renderPass);\n    }\n\n    getRenderList (): IGameObject[]\n    {\n        return GetRenderList();\n    }\n}\n", "import { BackgroundColor, GlobalVar, Parent, Scenes, WebGL } from '../../../../phaser-genesis/src/config';\n\nimport { AddChild } from '../../../../phaser-genesis/src/display';\nimport { Between } from '../../../../phaser-genesis/src/math/Between';\nimport { CursorKeyCameraControls } from '../../../../phaser-genesis/src/camera/controls/CursorKeyCameraControls';\nimport { DrawShaderQuad } from '../../../../phaser-genesis/src/renderer/webgl1/draw/DrawShaderQuad';\nimport { Game } from '../../../../phaser-genesis/src/Game';\nimport { LoadImageFile } from '../../../../phaser-genesis/src/loader/files/LoadImageFile';\nimport { On } from '../../../../phaser-genesis/src/events/On';\nimport { ParallaxLayer } from '../../../../phaser-genesis/src/gameobjects/parallaxlayer/ParallaxLayer';\nimport { Scene } from '../../../../phaser-genesis/src/scenes/Scene';\nimport { SetUniform } from '../../../../phaser-genesis/src/renderer/webgl1/shaders/SetUniform';\nimport { Sprite } from '../../../../phaser-genesis/src/gameobjects';\nimport { TextureShader } from '../../../../phaser-genesis/src/renderer/webgl1/shaders/TextureShader';\nimport { World } from '../../../../phaser-genesis/src/world/World';\n\nconst fragmentShader = `\nprecision mediump float;\n\n// Plasma Cube by adelciotto\n\nuniform vec2 resolution;\nuniform float time;\n\nconst float PI = 3.1415926535; \nconst float MIN_DIST = 0.0; \nconst float MAX_DIST = 100.0; \nconst float EPSILON = 0.001;\nconst float GAMMA_CORRECTION = 0.4545; \nconst int MAX_MARCHING_STEPS = 48;\n\nfloat t = 0.0; \n\nmat2 rotate(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, s, - s, c);\n}\n\nfloat cubeSDF(vec3 p) {\n    p.xz *= rotate(t);\n    p.yx *= rotate(t * 0.6);\n    p.zx *= rotate(t * 0.4);\n    // p.y += sin(t * 0.2);\n    vec3 d = abs(p) - vec3(1.0);\n    float dist = length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n    return dist - 0.1;\n}\n\nvec4 estimateNormal(vec3 p) {\n    return normalize(\n        vec4(\n            cubeSDF(vec3(p.x + EPSILON, p.yz)) - cubeSDF(vec3(p.x - EPSILON, p.yz)),\n            cubeSDF(vec3(p.x, p.y + EPSILON, p.z)) - cubeSDF(vec3(p.x, p.y - EPSILON, p.z)),\n            cubeSDF(vec3(p.xy, p.z + EPSILON)) - cubeSDF(vec3(p.xy, p.z - EPSILON)),\n            0.0\n        )\n    );\n}\n\n// modified plasma effect from https://www.bidouille.org/prog/plasma\nvec4 plasma(vec3 p, float scale) {\n    p *= scale;\n    \n    float time = t * 0.3;\n    float v1 = sin(p.x + time);\n    float v2 = sin(p.y + time);\n    float v3 = sin(p.z + time);\n    float v4 = sin(p.x + p.y + p.z + time);\n    float v5 = sin(length(p) + 1.7 * time);\n    float v = v1 + v2 + v3 + v4 + v5;\n\n    //  uncomment for single shade cube\n    // v = time;\n    \n    v *= 2.0;\n    vec4 col = vec4(sin(v * PI), sin(v * PI + 2.0 * PI / 3.0), sin(v * PI + 4.0 * PI / 3.0), 1.0);\n    return col * 0.5 + 0.5;\n}\n\nvoid main (void)\n{\n    vec2 fragCoord = gl_FragCoord.xy;\n    vec2 uv = vec2(fragCoord - 0.5 * resolution.xy);\n    uv = 2.0 * uv.xy / resolution.y;\n    \n    // t = time;\n    t = time + 0.25 * sin(uv.x * 1.76 + uv.y + time);\n    \n    vec3 camPos = vec3(0, 0, -5.25);\n    vec3 at = vec3(0, 0, 0);\n    vec3 camForward = normalize(at - camPos);\n    vec3 camRight = normalize(cross(vec3(0.0, 1.0, 0.0), camForward));\n    vec3 camUp = normalize(cross(camForward, camRight));\n    vec3 rayDir = normalize(uv.x * camRight + uv.y * camUp + camForward * 2.0);\n    \n    float depth = MIN_DIST;\n    vec4 col = vec4(0.0);\n    for(int i = 0; i < MAX_MARCHING_STEPS; i ++ ) {\n        vec3 p = camPos + depth * rayDir;\n        float dist = cubeSDF(p);\n        if (dist < EPSILON) {\n            vec4 light = normalize(vec4(sin(t) * 1.0, cos(t * 0.5) + 0.5, - 0.5, 1.0));\n            vec4 norm = estimateNormal(p);\n            vec4 directional = vec4(1.80, 1.27, 0.99, 0.5) * max(dot(norm, light), 0.0);\n            vec4 ambient = vec4(0.02, 0.02, 0.02, 1.0);\n            vec4 diffuse = plasma(p, 1.0) * (directional + ambient);\n            col = diffuse;\n            break;\n        }\n        depth += dist;\n        if (depth >= MAX_DIST) {\n            break;\n        }\n    }\n    \n    col = pow(col, vec4(GAMMA_CORRECTION, GAMMA_CORRECTION, GAMMA_CORRECTION, 1.0));\n\n    gl_FragColor = vec4(smoothstep(0.0, 1.0, col.rgb), 1.0) * col.a;\n}`;\n\nclass Demo extends Scene\n{\n    constructor ()\n    {\n        super();\n\n        this.create();\n    }\n\n    async create ()\n    {\n        await LoadImageFile('bg', 'assets/checker.png');\n\n        const world = new World(this);\n        \n        const fx = new TextureShader({\n            fragmentShader,\n            width: 256,\n            height: 256,\n            uniforms: {\n                time: 0,\n                resolution: [ 256, 256 ]\n            }\n        });\n\n        new CursorKeyCameraControls(world, 16, 16);\n\n        let sx = 1.0;\n        let sy = 1.0;\n\n        for (let i = 0; i < 8; i++)\n        {\n            sx -= 0.1;\n            sy -= 0.1;\n\n            const layer = AddChild(world, new ParallaxLayer(world.camera, sx, sy));\n\n            for (let i = 0; i < 256; i++)\n            {\n                const x = Between(-4000, 4000);\n                const y = Between(-4000, 4000);\n    \n                AddChild(layer, new Sprite(x, y, fx.texture).setScale(1.5 - sx));\n            }\n        }\n\n        On(world, 'render', (renderPass) => {\n\n            SetUniform(fx, 'time', performance.now() * 0.001);\n\n            DrawShaderQuad(renderPass, fx);\n\n        });\n    }\n}\n\nnew Game(\n    WebGL(),\n    Parent('gameParent'),\n    GlobalVar('Phaser4'),\n    BackgroundColor(0x161616),\n    Scenes(Demo)\n);\n"],
  "mappings": "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",
  "names": []
}
