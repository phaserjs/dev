{
  "version": 3,
  "sources": ["../../../../phaser-1/src/display/DepthFirstSearch.ts", "../../../../phaser-1/src/display/GetChildIndex.ts", "../../../../phaser-1/src/display/RemoveChildAt.ts", "../../../../phaser-1/src/display/RemoveChild.ts", "../../../../phaser-1/src/gameobjects/events/AddedToWorldEvent.ts", "../../../../phaser-1/src/gameobjects/events/DestroyEvent.ts", "../../../../phaser-1/src/gameobjects/events/PostUpdateEvent.ts", "../../../../phaser-1/src/gameobjects/events/RemovedFromWorldEvent.ts", "../../../../phaser-1/src/gameobjects/events/UpdateEvent.ts", "../../../../phaser-1/src/events/Emit.ts", "../../../../phaser-1/src/display/SetWorld.ts", "../../../../phaser-1/src/display/SetParent.ts", "../../../../phaser-1/src/display/AddChild.ts", "../../../../phaser-1/src/display/AddChildren.ts", "../../../../phaser-1/src/gameobjects/DIRTY_CONST.ts", "../../../../phaser-1/src/display/RemoveChildrenBetween.ts", "../../../../phaser-1/src/display/DestroyChildren.ts", "../../../../phaser-1/src/geom/rectangle/RectangleContains.ts", "../../../../phaser-1/src/geom/rectangle/Rectangle.ts", "../../../../phaser-1/src/display/RemoveChildren.ts", "../../../../phaser-1/src/display/ReparentChildren.ts", "../../../../phaser-1/src/dom/GetElement.ts", "../../../../phaser-1/src/dom/AddToDOM.ts", "../../../../phaser-1/src/dom/DOMContentLoaded.ts", "../../../../phaser-1/src/dom/ParseXML.ts", "../../../../phaser-1/src/events/EventEmitter.ts", "../../../../phaser-1/src/events/EventInstance.ts", "../../../../phaser-1/src/events/Off.ts", "../../../../phaser-1/src/events/On.ts", "../../../../phaser-1/src/events/Once.ts", "../../../../phaser-1/src/GameInstance.ts", "../../../../phaser-1/src/config/const.ts", "../../../../phaser-1/src/config/ConfigStore.ts", "../../../../phaser-1/src/config/banner/SetBanner.ts", "../../../../phaser-1/src/config/banner/GetBanner.ts", "../../../../phaser-1/src/config/globalvar/GetGlobalVar.ts", "../../../../phaser-1/src/config/globalvar/SetGlobalVar.ts", "../../../../phaser-1/src/config/globalvar/GlobalVar.ts", "../../../../phaser-1/src/config/parent/GetParent.ts", "../../../../phaser-1/src/config/parent/SetParent.ts", "../../../../phaser-1/src/config/parent/Parent.ts", "../../../../phaser-1/src/config/renderer/GetRenderer.ts", "../../../../phaser-1/src/config/renderer/SetRenderer.ts", "../../../../phaser-1/src/scenes/CreateSceneRenderData.ts", "../../../../phaser-1/src/config/scenes/GetScenes.ts", "../../../../phaser-1/src/config/scenes/SetScenes.ts", "../../../../phaser-1/src/config/scenes/Scenes.ts", "../../../../phaser-1/src/scenes/ResetSceneRenderData.ts", "../../../../phaser-1/src/scenes/SceneManagerInstance.ts", "../../../../phaser-1/src/scenes/SceneManager.ts", "../../../../phaser-1/src/config/backgroundcolor/SetBackgroundColor.ts", "../../../../phaser-1/src/config/batchsize/SetBatchSize.ts", "../../../../phaser-1/src/config/defaultorigin/SetDefaultOrigin.ts", "../../../../phaser-1/src/config/maxtextures/SetMaxTextures.ts", "../../../../phaser-1/src/config/size/SetSize.ts", "../../../../phaser-1/src/config/SetConfigDefaults.ts", "../../../../phaser-1/src/textures/CreateCanvas.ts", "../../../../phaser-1/src/renderer/BindingQueue.ts", "../../../../phaser-1/src/textures/Frame.ts", "../../../../phaser-1/src/textures/Texture.ts", "../../../../phaser-1/src/textures/TextureManagerInstance.ts", "../../../../phaser-1/src/textures/TextureManager.ts", "../../../../phaser-1/src/Game.ts", "../../../../phaser-1/src/config/backgroundcolor/BackgroundColor.ts", "../../../../phaser-1/src/config/size/GetHeight.ts", "../../../../phaser-1/src/config/size/GetResolution.ts", "../../../../phaser-1/src/config/size/GetWidth.ts", "../../../../phaser-1/src/config/size/Size.ts", "../../../../phaser-1/src/config/backgroundcolor/GetBackgroundColor.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/AddViewport.ts", "../../../../phaser-1/src/renderer/webgl1/GL.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/BindViewport.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/SetViewport.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/BindFramebuffer.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/PopViewport.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/PopFramebuffer.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/AddFramebuffer.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/SetFramebuffer.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/Draw.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/Flush.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/End.ts", "../../../../phaser-1/src/renderer/webgl1/colors/GetRGBArray.ts", "../../../../phaser-1/src/config/webglcontext/GetWebGLContext.ts", "../../../../phaser-1/src/renderer/webgl1/textures/CreateGLTexture.ts", "../../../../phaser-1/src/renderer/webgl1/fbo/DeleteFramebuffer.ts", "../../../../phaser-1/src/renderer/webgl1/textures/DeleteGLTexture.ts", "../../../../phaser-1/src/math/pow2/IsSizePowerOfTwo.ts", "../../../../phaser-1/src/renderer/webgl1/textures/SetGLTextureFilterMode.ts", "../../../../phaser-1/src/renderer/webgl1/textures/UpdateGLTexture.ts", "../../../../phaser-1/src/renderer/webgl1/textures/GLTextureBinding.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/ProcessBindingQueue.ts", "../../../../phaser-1/src/config/maxtextures/GetMaxTextures.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/CheckShaderMaxIfStatements.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/CreateTempTextures.ts", "../../../../phaser-1/src/config/batchsize/GetBatchSize.ts", "../../../../phaser-1/src/renderer/webgl1/buffers/DeleteGLBuffer.ts", "../../../../phaser-1/src/renderer/webgl1/buffers/VertexBuffer.ts", "../../../../phaser-1/src/renderer/webgl1/buffers/IndexedVertexBuffer.ts", "../../../../phaser-1/src/utils/array/matrix/CheckMatrix.ts", "../../../../phaser-1/src/utils/array/matrix/MatrixToString.ts", "../../../../phaser-1/src/utils/array/matrix/ReverseColumns.ts", "../../../../phaser-1/src/utils/array/matrix/ReverseRows.ts", "../../../../phaser-1/src/utils/array/matrix/TransposeMatrix.ts", "../../../../phaser-1/src/utils/array/matrix/RotateMatrix.ts", "../../../../phaser-1/src/utils/array/matrix/Rotate180.ts", "../../../../phaser-1/src/utils/array/matrix/RotateLeft.ts", "../../../../phaser-1/src/utils/array/matrix/RotateRight.ts", "../../../../phaser-1/src/utils/array/NumberArray.ts", "../../../../phaser-1/src/math/RoundAwayFromZero.ts", "../../../../phaser-1/src/utils/array/NumberArrayStep.ts", "../../../../phaser-1/src/utils/base64/ArrayBufferToBase64.ts", "../../../../phaser-1/src/utils/base64/Base64ToArrayBuffer.ts", "../../../../phaser-1/src/utils/string/UppercaseFirst.ts", "../../../../phaser-1/src/utils/NOOP.ts", "../../../../phaser-1/src/math/mat4/Matrix4.ts", "../../../../phaser-1/src/math/mat4/Mat4Ortho.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/CreateAttributes.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/DeleteShaders.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/CreateProgram.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/CreateShader.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/CreateUniformSetter.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/CreateUniforms.ts", "../../../../phaser-1/src/renderer/webgl1/GL_CONST.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/DefaultQuadAttributes.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/DefaultQuadUniforms.ts", "../../../../phaser-1/src/renderer/webgl1/fbo/CreateDepthBuffer.ts", "../../../../phaser-1/src/renderer/webgl1/fbo/CreateFramebuffer.ts", "../../../../phaser-1/src/renderer/webgl1/glsl/SINGLE_QUAD_FRAG.ts", "../../../../phaser-1/src/renderer/webgl1/glsl/SINGLE_QUAD_VERT.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/Shader.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/QuadShader.ts", "../../../../phaser-1/src/renderer/webgl1/glsl/MULTI_QUAD_FRAG.ts", "../../../../phaser-1/src/renderer/webgl1/shaders/MultiTextureQuadShader.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/SetDefaultBlendMode.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/SetDefaultFramebuffer.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/SetDefaultShader.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/SetDefaultVertexBuffer.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/SetDefaultViewport.ts", "../../../../phaser-1/src/math/vec3/Vec3.ts", "../../../../phaser-1/src/math/mat4/Mat4Identity.ts", "../../../../phaser-1/src/math/mat2d/Matrix2D.ts", "../../../../phaser-1/src/math/vec2/Vec2Callback.ts", "../../../../phaser-1/src/math/angle/AngleBetween.ts", "../../../../phaser-1/src/math/angle/AngleBetweenY.ts", "../../../../phaser-1/src/math/const.ts", "../../../../phaser-1/src/math/angle/CounterClockwise.ts", "../../../../phaser-1/src/math/angle/NormalizeAngle.ts", "../../../../phaser-1/src/math/angle/ReverseAngle.ts", "../../../../phaser-1/src/math/angle/RotateAngleTo.ts", "../../../../phaser-1/src/math/angle/ShortestAngleBetween.ts", "../../../../phaser-1/src/math/Wrap.ts", "../../../../phaser-1/src/math/angle/WrapAngle.ts", "../../../../phaser-1/src/math/angle/WrapAngleDegrees.ts", "../../../../phaser-1/src/math/angle/index.ts", "../../../../phaser-1/src/camera/StaticCamera.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/RenderPass.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/BindShader.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/Begin.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/BindBlendMode.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/BindVertexBuffer.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/GetVertexBufferEntry.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/SetTexture.ts", "../../../../phaser-1/src/renderer/webgl1/renderpass/Start.ts", "../../../../phaser-1/src/renderer/webgl1/WebGLRendererInstance.ts", "../../../../phaser-1/src/renderer/webgl1/WebGLRenderer.ts", "../../../../phaser-1/src/config/webgl/WebGL.ts", "../../../../phaser-1/src/components/transform/GetVertices.ts", "../../../../phaser-1/src/components/bounds/BoundsComponent.ts", "../../../../phaser-1/src/components/input/InputComponent.ts", "../../../../phaser-1/src/renderer/webgl1/colors/PackColors.ts", "../../../../phaser-1/src/components/transform/UpdateVertices.ts", "../../../../phaser-1/src/components/transform/PreRenderVertices.ts", "../../../../phaser-1/src/config/defaultorigin/GetDefaultOriginX.ts", "../../../../phaser-1/src/config/defaultorigin/GetDefaultOriginY.ts", "../../../../phaser-1/src/math/vec2/Vec2.ts", "../../../../phaser-1/src/math/Clamp.ts", "../../../../phaser-1/src/math/fuzzy/FuzzyEqual.ts", "../../../../phaser-1/src/geom/rectangle/CeilRectangle.ts", "../../../../phaser-1/src/geom/rectangle/CeilRectanglePosition.ts", "../../../../phaser-1/src/geom/rectangle/CenterRectangleOn.ts", "../../../../phaser-1/src/geom/rectangle/CloneRectangle.ts", "../../../../phaser-1/src/geom/rectangle/CopyRectangleFrom.ts", "../../../../phaser-1/src/geom/rectangle/DecomposeRectangle.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleAspectRatio.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleCenterX.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleCenterY.ts", "../../../../phaser-1/src/geom/rectangle/FitRectangleInside.ts", "../../../../phaser-1/src/geom/rectangle/FitRectangleOutside.ts", "../../../../phaser-1/src/geom/rectangle/FitRectangleToPoint.ts", "../../../../phaser-1/src/geom/rectangle/FitRectangleToPoints.ts", "../../../../phaser-1/src/geom/rectangle/FloorRectangle.ts", "../../../../phaser-1/src/geom/rectangle/FloorRectanglePosition.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleArea.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleCenter.ts", "../../../../phaser-1/src/geom/line/Line.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleIntersection.ts", "../../../../phaser-1/src/geom/rectangle/GetRectanglePerimeter.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleMarchingAnts.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleOverlap.ts", "../../../../phaser-1/src/math/DegToRad.ts", "../../../../phaser-1/src/geom/rectangle/GetRectanglePerimeterPoint.ts", "../../../../phaser-1/src/geom/rectangle/GetRectanglePoint.ts", "../../../../phaser-1/src/geom/rectangle/GetRectanglePoints.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleRandomPoint.ts", "../../../../phaser-1/src/math/Between.ts", "../../../../phaser-1/src/geom/rectangle/RectangleContainsRectangle.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleRandomPointOutside.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleSize.ts", "../../../../phaser-1/src/geom/rectangle/GetRectangleUnion.ts", "../../../../phaser-1/src/geom/rectangle/InflateRectangle.ts", "../../../../phaser-1/src/geom/rectangle/MergeRectangle.ts", "../../../../phaser-1/src/geom/rectangle/RectangleContainsPoint.ts", "../../../../phaser-1/src/geom/rectangle/RectangleEquals.ts", "../../../../phaser-1/src/geom/rectangle/RectangleFromPoints.ts", "../../../../phaser-1/src/geom/rectangle/RectangleSizeEquals.ts", "../../../../phaser-1/src/geom/rectangle/ScaleRectangle.ts", "../../../../phaser-1/src/geom/rectangle/TranslateRectangle.ts", "../../../../phaser-1/src/geom/rectangle/TranslateRectanglePoint.ts", "../../../../phaser-1/src/geom/rectangle/index.ts", "../../../../phaser-1/src/components/transform/UpdateLocalTransform.ts", "../../../../phaser-1/src/math/mat2d/Mat2dCopyFrom.ts", "../../../../phaser-1/src/components/transform/UpdateWorldTransform.ts", "../../../../phaser-1/src/components/transform/TransformComponent.ts", "../../../../phaser-1/src/renderer/webgl1/colors/PackColor.ts", "../../../../phaser-1/src/components/Vertex.ts", "../../../../phaser-1/src/renderer/webgl1/draw/BatchTexturedQuad.ts", "../../../../phaser-1/src/gameobjects/GameObject.ts", "../../../../phaser-1/src/gameobjects/container/Container.ts", "../../../../phaser-1/src/renderer/canvas/draw/DrawTexturedQuad.ts", "../../../../phaser-1/src/gameobjects/sprite/SetFrame.ts", "../../../../phaser-1/src/textures/GetTexture.ts", "../../../../phaser-1/src/gameobjects/sprite/SetTexture.ts", "../../../../phaser-1/src/gameobjects/sprite/Sprite.ts", "../../../../phaser-1/src/gameobjects/rectangle/Rectangle.ts", "../../../../phaser-1/src/textures/types/CanvasTexture.ts", "../../../../phaser-1/src/gameobjects/text/Text.ts", "../../../../phaser-1/src/scenes/GetConfigValue.ts", "../../../../phaser-1/src/scenes/Install.ts", "../../../../phaser-1/src/scenes/Scene.ts", "../../../../phaser-1/src/world/events/WorldRenderEvent.ts", "../../../../phaser-1/src/world/events/WorldShutdownEvent.ts", "../../../../phaser-1/src/world/CalculateTotalRenderable.ts", "../../../../phaser-1/src/world/HasDirtyChildren.ts", "../../../../phaser-1/src/world/UpdateCachedLayers.ts", "../../../../phaser-1/src/world/WorldDepthFirstSearch.ts", "../../../../phaser-1/src/world/BuildRenderList.ts", "../../../../phaser-1/src/math/mat2d/Mat2dEquals.ts", "../../../../phaser-1/src/world/MergeRenderData.ts", "../../../../phaser-1/src/world/ResetWorldRenderData.ts", "../../../../phaser-1/src/world/BaseWorld.ts", "../../../../phaser-1/src/world/CreateWorldRenderData.ts", "../../../../phaser-1/src/world/StaticWorld.ts", "../../../../phaser-1/src/math/easing/back/In.ts", "../../../../phaser-1/src/math/easing/back/InOut.ts", "../../../../phaser-1/src/math/easing/back/Out.ts", "../../../../phaser-1/src/math/easing/bounce/In.ts", "../../../../phaser-1/src/math/easing/bounce/InOut.ts", "../../../../phaser-1/src/math/easing/bounce/Out.ts", "../../../../phaser-1/src/math/easing/circular/In.ts", "../../../../phaser-1/src/math/easing/circular/InOut.ts", "../../../../phaser-1/src/math/easing/circular/Out.ts", "../../../../phaser-1/src/math/easing/cubic/In.ts", "../../../../phaser-1/src/math/easing/cubic/InOut.ts", "../../../../phaser-1/src/math/easing/cubic/Out.ts", "../../../../phaser-1/src/math/easing/elastic/In.ts", "../../../../phaser-1/src/math/easing/elastic/InOut.ts", "../../../../phaser-1/src/math/easing/elastic/Out.ts", "../../../../phaser-1/src/math/easing/expo/In.ts", "../../../../phaser-1/src/math/easing/expo/InOut.ts", "../../../../phaser-1/src/math/easing/expo/Out.ts", "../../../../phaser-1/src/math/easing/quadratic/In.ts", "../../../../phaser-1/src/math/easing/quadratic/InOut.ts", "../../../../phaser-1/src/math/easing/quadratic/Out.ts", "../../../../phaser-1/src/math/easing/quartic/In.ts", "../../../../phaser-1/src/math/easing/quartic/InOut.ts", "../../../../phaser-1/src/math/easing/quartic/Out.ts", "../../../../phaser-1/src/math/easing/quintic/In.ts", "../../../../phaser-1/src/math/easing/quintic/InOut.ts", "../../../../phaser-1/src/math/easing/quintic/Out.ts", "../../../../phaser-1/src/math/easing/sine/In.ts", "../../../../phaser-1/src/math/easing/sine/InOut.ts", "../../../../phaser-1/src/math/easing/sine/Out.ts", "../../../../phaser-1/src/math/easing/Linear.ts", "../../../../phaser-1/src/math/easing/Stepped.ts", "../../../../phaser-1/src/math/easing/GetEase.ts", "../../../../phaser-1/src/math/fuzzy/FuzzyCeil.ts", "../../../../phaser-1/src/math/fuzzy/FuzzyFloor.ts", "../../../../phaser-1/src/math/fuzzy/FuzzyGreaterThan.ts", "../../../../phaser-1/src/math/fuzzy/FuzzyLessThan.ts", "../../../../phaser-1/src/math/fuzzy/index.ts", "../../../../phaser-1/src/math/Factorial.ts", "../../../../phaser-1/src/math/Bernstein.ts", "../../../../phaser-1/src/math/interpolation/BezierInterpolation.ts", "../../../../phaser-1/src/math/interpolation/CatmullRomInterpolation.ts", "../../../../phaser-1/src/math/interpolation/CubicBezierInterpolation.ts", "../../../../phaser-1/src/math/Linear.ts", "../../../../phaser-1/src/math/interpolation/LinearInterpolation.ts", "../../../../phaser-1/src/math/interpolation/QuadraticBezierInterpolation.ts", "../../../../phaser-1/src/math/SmoothStep.ts", "../../../../phaser-1/src/math/interpolation/SmoothStepInterpolation.ts", "../../../../phaser-1/src/math/SmootherStep.ts", "../../../../phaser-1/src/math/interpolation/SmootherStepInterpolation.ts", "../../../../phaser-1/src/math/interpolation/index.ts", "../../../../phaser-1/src/math/pow2/GetPowerOfTwo.ts", "../../../../phaser-1/src/math/pow2/IsValuePowerOfTwo.ts", "../../../../phaser-1/src/math/vec3/Vec3Backward.ts", "../../../../phaser-1/src/math/vec3/Vec3Down.ts", "../../../../phaser-1/src/math/vec3/Vec3Forward.ts", "../../../../phaser-1/src/math/vec3/Vec3Left.ts", "../../../../phaser-1/src/math/vec3/Vec3Right.ts", "../../../../phaser-1/src/math/vec3/Vec3Up.ts", "../../../../phaser-1/src/math/vec3/Vec3Zero.ts", "../../../../phaser-1/src/math/vec3/const.ts", "../../../../phaser-1/src/math/vec3/Vec3Project.ts", "../../../../phaser-1/src/math/vec3/Vec3Unproject.ts", "../../../../phaser-1/src/math/snap/SnapCeil.ts", "../../../../phaser-1/src/math/snap/SnapFloor.ts", "../../../../phaser-1/src/math/snap/SnapTo.ts", "../../../../phaser-1/src/math/snap/index.ts", "../../../../phaser-1/src/math/Average.ts", "../../../../phaser-1/src/math/CeilTo.ts", "../../../../phaser-1/src/math/Difference.ts", "../../../../phaser-1/src/math/FloorTo.ts", "../../../../phaser-1/src/math/FromPercent.ts", "../../../../phaser-1/src/math/GetSpeed.ts", "../../../../phaser-1/src/math/MaxAdd.ts", "../../../../phaser-1/src/math/MinSub.ts", "../../../../phaser-1/src/math/Percent.ts", "../../../../phaser-1/src/math/RadToDeg.ts", "../../../../phaser-1/src/math/RoundTo.ts", "../../../../phaser-1/src/math/SinCosTableGenerator.ts", "../../../../phaser-1/src/math/Within.ts", "../../src/container/crashstack.ts"],
  "sourcesContent": ["import { IGameObject } from '../gameobjects/IGameObject';\n\n//  Returns all children of the parent, no matter what depth they go to, using an iterative search.\n//  Does NOT include the parent in the results.\n\nexport function DepthFirstSearch (parent: IGameObject): IGameObject[]\n{\n    const stack: IGameObject[] = [ parent ];\n    const output: IGameObject[] = [];\n\n    while (stack.length > 0)\n    {\n        const node = stack.shift();\n\n        output.push(node);\n\n        const numChildren = node.numChildren;\n\n        if (numChildren > 0)\n        {\n            for (let i = numChildren - 1; i >= 0; i--)\n            {\n                stack.unshift(node.children[i]);\n            }\n        }\n    }\n\n    //  Remove the parent from the results\n    output.shift();\n\n    return output;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\n\nexport function GetChildIndex (parent: IGameObject, child: IGameObject): number\n{\n    return parent.children.indexOf(child);\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\n\nexport function RemoveChildAt (parent: IGameObject, index: number): IGameObject | undefined\n{\n    const children = parent.children;\n    let child: IGameObject;\n\n    if (index >= 0 && index < children.length)\n    {\n        const removed = children.splice(index, 1);\n\n        if (removed[0])\n        {\n            child = removed[0];\n            child.parent = null;\n        }\n    }\n\n    return child;\n}\n", "import { GetChildIndex } from './GetChildIndex';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildAt } from './RemoveChildAt';\n\nexport function RemoveChild <T extends IGameObject> (parent: IGameObject, child: T): T\n{\n    const currentIndex = GetChildIndex(parent, child);\n\n    if (currentIndex > -1)\n    {\n        RemoveChildAt(parent, currentIndex);\n    }\n\n    return child;\n}\n", "import { IBaseWorld } from '../../world/IBaseWorld';\nimport { IGameObject } from '../IGameObject';\n\nexport const AddedToWorldEvent: string = 'addedtoworld';\n\nexport type AddedToWorldEventHandler = <T extends IGameObject, U extends IBaseWorld> (child: T, world: U) => void;\n", "import { IGameObject } from '../IGameObject';\n\nexport const DestroyEvent: string = 'destroy';\n\nexport type DestroyEventHandler = <T extends IGameObject> (child: T) => void;\n", "import { IGameObject } from '../IGameObject';\n\nexport const PostUpdateEvent: string = 'postupdate';\n\nexport type PostUpdateEventHandler = <T extends IGameObject> (delta: number, time: number, child: T) => void;\n", "import { IBaseWorld } from '../../world/IBaseWorld';\nimport { IGameObject } from '../IGameObject';\n\nexport const RemovedFromWorldEvent: string = 'removedfromworld';\n\nexport type RemovedFromWorldEventHandler = <T extends IGameObject, U extends IBaseWorld> (child: T, world: U) => void;\n", "import { IGameObject } from '../IGameObject';\n\nexport const UpdateEvent: string = 'update';\n\nexport type UpdateEventHandler = <T extends IGameObject> (delta: number, time: number, child: T) => void;\n", "import { IEventEmitter } from './IEventEmitter';\n\nexport function Emit (emitter: IEventEmitter, event: string, ...args: unknown[]): boolean\n{\n    if (emitter.events.size === 0 || !emitter.events.has(event))\n    {\n        return false;\n    }\n\n    const listeners = emitter.events.get(event);\n\n    for (const ee of listeners)\n    {\n        ee.callback.apply(ee.context, args);\n\n        if (ee.once)\n        {\n            listeners.delete(ee);\n        }\n    }\n\n    if (listeners.size === 0)\n    {\n        emitter.events.delete(event);\n    }\n\n    return true;\n}\n", "import { AddedToWorldEvent, RemovedFromWorldEvent } from '../gameobjects/events';\n\nimport { Emit } from '../events/Emit';\nimport { IBaseWorld } from '../world/IBaseWorld';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function SetWorld (world: IBaseWorld, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        if (child.world)\n        {\n            Emit(child.world, RemovedFromWorldEvent, child, child.world);\n            Emit(child, RemovedFromWorldEvent, child, child.world);\n        }\n\n        child.world = world;\n\n        Emit(world, AddedToWorldEvent, child, world);\n        Emit(child, AddedToWorldEvent, child, world);\n    });\n\n    return children;\n}\n", "import { DepthFirstSearch } from './DepthFirstSearch';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChild } from './RemoveChild';\nimport { SetWorld } from './SetWorld';\n\nexport function SetParent (parent: IGameObject, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        if (child.parent)\n        {\n            RemoveChild(child.parent, child);\n        }\n\n        child.parent = parent;\n    });\n\n    const parentWorld = parent.world;\n\n    if (parentWorld)\n    {\n        //  Full list of all children, including sub-children\n        SetWorld(parentWorld, ...DepthFirstSearch(parent));\n    }\n\n    return children;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { SetParent } from './SetParent';\n\nexport function AddChild <T extends IGameObject> (parent: IGameObject, child: T): T\n{\n    parent.children.push(child);\n\n    SetParent(parent, child);\n\n    child.transform.updateWorld();\n\n    return child;\n}\n", "import { AddChild } from './AddChild';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function AddChildren (parent: IGameObject, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        AddChild(parent, child);\n    });\n\n    return children;\n}\n", "export const DIRTY_CONST = {\n\n    CLEAR: 0,\n    TRANSFORM: 1,\n    UPDATE: 2,\n    CHILD_CACHE: 4,\n    POST_RENDER: 8,\n    COLORS: 16,\n    BOUNDS: 32,\n    TEXTURE: 64,\n    FRAME: 128,\n    ALPHA: 256,\n    CHILD: 512,\n\n    //  Special combinations\n    DEFAULT: 1 + 2 + 16 + 32,\n\n    //  Reserved for future use:\n    //  1024\n    //  2048\n    //  4096\n    //  8192\n    //  16384\n    //  32768\n    //  65536\n    //  131072\n    //  262144\n    //  524288\n    //  1048576\n    //  2097152\n    //  4194304\n    //  8388608\n    //  16777216\n    //  33554432\n    //  67108864\n    //  134217728\n    //  268435456\n\n    //  Reserved for user use\n    USER1: 536870912,\n    USER2: 1073741824,\n    USER3: 2147483648,\n    USER4: 4294967296\n\n};\n", "import { IGameObject } from '../gameobjects/IGameObject';\n\nexport function RemoveChildrenBetween (parent: IGameObject, beginIndex: number = 0, endIndex?: number): IGameObject[]\n{\n    const children = parent.children;\n\n    if (endIndex === undefined)\n    {\n        endIndex = children.length;\n    }\n\n    const range = endIndex - beginIndex;\n\n    if (range > 0 && range <= endIndex)\n    {\n        const removed = children.splice(beginIndex, range);\n\n        removed.forEach(child =>\n        {\n            child.parent = null;\n        });\n\n        return removed;\n    }\n    else\n    {\n        return [];\n    }\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\n\nexport function DestroyChildren (parent: IGameObject, beginIndex: number = 0, endIndex?: number): void\n{\n    const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\n\n    removed.forEach(child =>\n    {\n        child.destroy();\n    });\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Checks if a given point is inside a Rectangle's bounds.\n */\nexport function RectangleContains (rect: IRectangle, x: number, y: number): boolean\n{\n    if (rect.width <= 0 || rect.height <= 0)\n    {\n        return false;\n    }\n\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RectangleContains } from './RectangleContains';\n\nexport class Rectangle\n{\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    constructor (x: number = 0, y: number = 0, width: number = 0, height: number = 0)\n    {\n        this.set(x, y, width, height);\n    }\n\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n\n        return this;\n    }\n\n    contains (x: number, y: number): boolean\n    {\n        return RectangleContains(this, x, y);\n    }\n\n    set right (value: number)\n    {\n        if (value <= this.x)\n        {\n            this.width = 0;\n        }\n        else\n        {\n            this.width = value - this.x;\n        }\n    }\n\n    get right (): number\n    {\n        return this.x + this.width;\n    }\n\n    set bottom (value: number)\n    {\n        if (value <= this.y)\n        {\n            this.height = 0;\n        }\n        else\n        {\n            this.height = value - this.y;\n        }\n    }\n\n    get bottom (): number\n    {\n        return this.y + this.height;\n    }\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChild } from './RemoveChild';\n\nexport function RemoveChildren (parent: IGameObject, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        RemoveChild(parent, child);\n    });\n\n    return children;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\nimport { SetParent } from './SetParent';\n\nexport function ReparentChildren (parent: IGameObject, newParent: IGameObject, beginIndex: number = 0, endIndex?: number): IGameObject[]\n{\n    const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\n\n    SetParent(newParent, ...moved);\n\n    moved.forEach(child =>\n    {\n        child.transform.updateWorld();\n    });\n\n    return moved;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Attempts to get the target DOM element based on the given value, which can be either\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\n * can be found it will return a reference to the document.body.\n *\n * @function Phaser.DOM.GetElement\n * @since 4.0.0\n *\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\n * \n * @returns {HTMLElement} The HTML Element that was found.\n */\nexport function GetElement (target?: string | HTMLElement): HTMLElement\n{\n    let element: HTMLElement;\n\n    if (target)\n    {\n        if (typeof target === 'string')\n        {\n            //  Hopefully an element ID\n            element = document.getElementById(target);\n        }\n        else if (typeof target === 'object' && target.nodeType === 1)\n        {\n            //  Quick test for a HTMLElement\n            element = target;\n        }\n    }\n\n    if (!element)\n    {\n        element = document.body;\n    }\n\n    return element;\n}\n", "import { GetElement } from './GetElement';\n\nexport function AddToDOM (element: HTMLElement, parent?: string | HTMLElement): HTMLElement\n{\n    const target: HTMLElement = GetElement(parent);\n\n    target.appendChild(element);\n\n    return element;\n}\n", "export function DOMContentLoaded (callback: () => void): void\n{\n    const readyState = document.readyState;\n\n    if (readyState === 'complete' || readyState === 'interactive')\n    {\n        callback();\n\n        return;\n    }\n\n    const check = (): void =>\n    {\n        document.removeEventListener('deviceready', check, true);\n        document.removeEventListener('DOMContentLoaded', check, true);\n        window.removeEventListener('load', check, true);\n\n        callback();\n    };\n\n    // TODO - Swap is IsCordova call\n\n    if (!document.body)\n    {\n        window.setTimeout(check, 20);\n    }\n    else if (window.hasOwnProperty('cordova'))\n    {\n        document.addEventListener('deviceready', check, true);\n    }\n    else\n    {\n        document.addEventListener('DOMContentLoaded', check, true);\n        window.addEventListener('load', check, true);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Takes the given data string and parses it as XML using the native DOMParser interface.\n * The parsed XML object is returned, or `null` if there was an error while parsing the data.\n *\n * @function Phaser.DOM.ParseXML\n * @since 3.0.0\n *\n * @param {string} data - The XML source stored in a string.\n *\n * @return {?XMLDocument} The parsed XML data, or `null` if the data could not be parsed.\n */\nexport function ParseXML (data: string): XMLDocument | null\n{\n    let xml: XMLDocument;\n\n    try\n    {\n        const parser = new DOMParser();\n\n        xml = parser.parseFromString(data, 'text/xml');\n\n        if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length)\n        {\n            return null;\n        }\n        else\n        {\n            return xml;\n        }\n    }\n    catch (error)\n    {\n        return null;\n    }\n}\n", "import { IEventInstance } from './IEventInstance';\n\nexport class EventEmitter\n{\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor ()\n    {\n        this.events = new Map();\n    }\n}\n", "export class EventInstance\n{\n    callback: Function;\n    context: unknown;\n    once: boolean;\n\n    constructor (callback: Function, context: unknown, once: boolean = false)\n    {\n        this.callback = callback;\n        this.context = context;\n        this.once = once;\n    }\n}\n", "import { EventInstance } from './EventInstance';\nimport { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function Off (emitter: IEventEmitter, event: string, callback?: Function | IEventInstance, context?: unknown, once?: boolean): IEventEmitter\n{\n    const events = emitter.events;\n    const listeners = events.get(event);\n\n    if (!callback)\n    {\n        //  Remove all events matching the given key\n        events.delete(event);\n    }\n    else if (callback instanceof EventInstance)\n    {\n        listeners.delete(callback as IEventInstance);\n    }\n    else\n    {\n        const hasContext: boolean = !context;\n        const hasOnce: boolean = (once !== undefined);\n\n        for (const listener of listeners)\n        {\n            if (\n                (listener.callback === callback) &&\n                (hasContext && listener.context === context) &&\n                (hasOnce && listener.once === once)\n            )\n            {\n                listeners.delete(listener);\n            }\n        }\n    }\n\n    if (listeners.size === 0)\n    {\n        events.delete(event);\n    }\n\n    return emitter;\n}\n", "import { EventInstance } from './EventInstance';\nimport { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function On (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter, once: boolean = false): IEventInstance\n{\n    if (typeof callback !== 'function')\n    {\n        throw new TypeError('Listener not a function');\n    }\n\n    const listener = new EventInstance(callback, context, once);\n    const listeners = emitter.events.get(event);\n\n    if (!listeners)\n    {\n        emitter.events.set(event, new Set([ listener ]));\n    }\n    else\n    {\n        listeners.add(listener);\n    }\n\n    return listener;\n}\n", "import { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\nimport { On } from './On';\n\nexport function Once (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter): IEventInstance\n{\n    return On(emitter, event, callback, context, true);\n}\n", "import { Game } from './Game';\n\nexport let instance: Game;\nexport let frame: number = 0;\nexport let elapsed: number = 0;\n\nexport const GameInstance =\n{\n    get: (): Game =>\n    {\n        return instance;\n    },\n\n    set: (game: Game | undefined): void =>\n    {\n        instance = game;\n    },\n\n    getFrame: (): number =>\n    {\n        return frame;\n    },\n\n    setFrame: (current: number): void =>\n    {\n        frame = current;\n    },\n\n    getElapsed: (): number =>\n    {\n        return elapsed;\n    },\n\n    setElapsed: (current: number): void =>\n    {\n        elapsed = current;\n    }\n\n};\n", "export const CONFIG_DEFAULTS = {\n    AUTO: 'Auto',\n    BACKGROUND_COLOR: 'BackgroundColor',\n    BANNER: 'Banner',\n    BATCH_SIZE: 'BatchSize',\n    CANVAS_CONTEXT: 'CanvasContext',\n    CANVAS: 'Canvas',\n    DEFAULT_ORIGIN: 'DefaultOrigin',\n    GLOBAL_VAR: 'GlobalVar',\n    MAX_TEXTURES: 'MaxTextures',\n    PARENT: 'Parent',\n    RENDERER: 'Renderer',\n    SCENES: 'Scenes',\n    SIZE: 'Size',\n    WEBGL_CONTEXT: 'WebGLContext',\n    WEBGL: 'WebGL'\n};\n", "export const ConfigStore = new Map();\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBanner (title: string = '', version: string = '', url: string = '', color: string = '#fff', background: string = 'linear-gradient(#3e0081 40%, #00bcc3)'): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BANNER, { title, version, url, color, background });\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBanner (): void\n{\n    const { title, version, url, color, background } = ConfigStore.get(CONFIG_DEFAULTS.BANNER);\n\n    if (title !== '')\n    {\n        const str = (version !== '') ? title + ' ' + version : title;\n\n        console.log(\n            `%c${str}%c ${url}`,\n            `padding: 4px 16px; color: ${color}; background: ${background}`,\n            ''\n        );\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetGlobalVar (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.GLOBAL_VAR);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetGlobalVar (name: string): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.GLOBAL_VAR, name);\n}\n", "import { SetGlobalVar } from './SetGlobalVar';\n\nexport function GlobalVar (name: string): () => void\n{\n    return (): void =>\n    {\n        SetGlobalVar(name);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetParent (): string | HTMLElement | undefined\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.PARENT);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { GetElement } from '../../dom/GetElement';\n\nexport function SetParent (parentElement?: string | HTMLElement): void\n{\n    //  If this function was called and `null` *wasn't* given as the parent\n    //  then we try to figure it out, or fallback to the document body\n    if (parentElement)\n    {\n        ConfigStore.set(CONFIG_DEFAULTS.PARENT, GetElement(parentElement));\n    }\n}\n", "import { SetParent } from './SetParent';\n\nexport function Parent (parentElement?: string | HTMLElement): () => void\n{\n    return (): void =>\n    {\n        SetParent(parentElement);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\n\nexport function GetRenderer (): IRendererConstructor\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.RENDERER);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\n\nexport function SetRenderer (renderer: IRendererConstructor): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.RENDERER, renderer);\n}\n", "import { ISceneRenderData } from './ISceneRenderData';\n\nexport function CreateSceneRenderData (): ISceneRenderData\n{\n    return {\n        gameFrame: 0,\n        numTotalFrames: 0,\n        numDirtyFrames: 0,\n        numDirtyCameras: 0,\n        worldData: []\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\n\nexport function GetScenes (): ISceneConstructor[]\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SCENES);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\n\nexport function SetScenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.SCENES, [].concat(scenes));\n}\n", "import { ISceneConstructor } from '../../scenes/ISceneConstructor';\nimport { SetScenes } from './SetScenes';\n\nexport function Scenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): () => void\n{\n    return (): void =>\n    {\n        SetScenes(scenes);\n    };\n}\n", "import { ISceneRenderData } from './ISceneRenderData';\n\nexport function ResetSceneRenderData (renderData: ISceneRenderData, gameFrame: number = 0): void\n{\n    renderData.gameFrame = gameFrame;\n    renderData.numTotalFrames = 0;\n    renderData.numDirtyFrames = 0;\n    renderData.numDirtyCameras = 0;\n    renderData.worldData.length = 0;\n}\n", "import { SceneManager } from './SceneManager';\n\nlet instance: SceneManager;\n\nexport const SceneManagerInstance =\n{\n    get: (): SceneManager =>\n    {\n        return instance;\n    },\n\n    set: (manager: SceneManager | null): void =>\n    {\n        instance = manager;\n    }\n};\n", "import { Emit, Once } from '../events';\n\nimport { CreateSceneRenderData } from './CreateSceneRenderData';\nimport { Game } from '../Game';\nimport { GameInstance } from '../GameInstance';\nimport { GetScenes } from '../config/scenes';\nimport { IScene } from './IScene';\nimport { ISceneRenderData } from './ISceneRenderData';\nimport { ResetSceneRenderData } from './ResetSceneRenderData';\nimport { SceneManagerInstance } from './SceneManagerInstance';\n\nexport class SceneManager\n{\n    game: Game;\n\n    scenes: Map<string, IScene>  = new Map();\n\n    //  Used by Install to assign default scene keys when not specified\n    sceneIndex: number = 0;\n\n    //  Flush the cache\n    flush: boolean = false;\n\n    renderResult: ISceneRenderData = CreateSceneRenderData();\n\n    constructor ()\n    {\n        this.game = GameInstance.get();\n\n        SceneManagerInstance.set(this);\n\n        Once(this.game, 'boot', () => this.boot());\n    }\n\n    boot (): void\n    {\n        GetScenes().forEach(scene => new scene());\n    }\n\n    update (delta: number, time: number): void\n    {\n        for (const scene of this.scenes.values())\n        {\n            Emit(scene, 'update', delta, time);\n        }\n    }\n\n    render (gameFrame: number): ISceneRenderData\n    {\n        const results = this.renderResult;\n\n        ResetSceneRenderData(results, gameFrame);\n\n        for (const scene of this.scenes.values())\n        {\n            Emit(scene, 'render', results);\n        }\n\n        if (this.flush)\n        {\n            //  Invalidate the renderer cache\n            results.numDirtyFrames++;\n\n            //  And reset\n            this.flush = false;\n        }\n\n        return results;\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBackgroundColor (color: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BACKGROUND_COLOR, color);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBatchSize (size: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BATCH_SIZE, size);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetDefaultOrigin (x: number = 0.5, y: number = x): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.DEFAULT_ORIGIN, { x, y });\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetMaxTextures (max: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.MAX_TEXTURES, max);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetSize (width: number = 800, height: number = 600, resolution: number = 1): void\n{\n    if (resolution === 0)\n    {\n        resolution = window.devicePixelRatio;\n    }\n\n    ConfigStore.set(CONFIG_DEFAULTS.SIZE, { width, height, resolution });\n}\n", "import { SetBackgroundColor } from './backgroundcolor/SetBackgroundColor';\nimport { SetBanner } from './banner/SetBanner';\nimport { SetBatchSize } from './batchsize/SetBatchSize';\nimport { SetDefaultOrigin } from './defaultorigin/SetDefaultOrigin';\nimport { SetMaxTextures } from './maxtextures/SetMaxTextures';\nimport { SetSize } from './size/SetSize';\n\n//  Phaser 4 defaults\n\nexport function SetConfigDefaults ()\n{\n    SetBackgroundColor(0);\n    SetBatchSize(4096);\n    SetBanner('Phaser', '4.0.0', 'https://phaser4.io');\n    SetMaxTextures(0);\n    SetDefaultOrigin(0.5, 0.5);\n    SetSize(800, 600, 1);\n}\n", "export function CreateCanvas (width: number, height: number): CanvasRenderingContext2D\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = width;\n    canvas.height = height;\n\n    return canvas.getContext('2d');\n}\n", "import { IGLTextureBindingConfig } from './webgl1/textures/IGLTextureBindingConfig';\nimport { ITexture } from '../textures/ITexture';\n\nexport type BindingQueueEntry = {\n    texture: ITexture,\n    glConfig: IGLTextureBindingConfig\n};\n\nconst queue: BindingQueueEntry[] = [];\n\nexport const BindingQueue =\n{\n    add: (texture: ITexture, glConfig?: IGLTextureBindingConfig): void =>\n    {\n        queue.push({ texture, glConfig });\n    },\n\n    get: (): BindingQueueEntry[] =>\n    {\n        return queue;\n    },\n\n    clear: (): void =>\n    {\n        queue.length = 0;\n    }\n};\n", "import { IFrame } from './IFrame';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { Texture } from './Texture';\nimport { Vertex } from '../components';\n\nexport class Frame implements IFrame\n{\n    texture: Texture;\n    key: string | number;\n\n    //  This is the actual area of the texture to draw to canvas / webgl, including any extruded data.\n    //  This is the same as the 'trimmed' + 'extruded' area from an atlas.\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    trimmed: boolean = false;\n\n    //  Original size of the image before being trimmed or added to an atlas (which can add extrude data to it).\n    sourceSizeWidth: number;\n    sourceSizeHeight: number;\n\n    //  The size of the image having been trimmed, before being added to the atlas (i.e. doesn't have any extrusion values in it)\n    spriteSourceSizeX: number;\n    spriteSourceSizeY: number;\n    spriteSourceSizeWidth: number;\n    spriteSourceSizeHeight: number;\n\n    pivot: { x: number; y: number };\n\n    u0: number;\n    v0: number;\n    u1: number;\n    v1: number;\n\n    constructor (texture: Texture, key: string | number, x: number, y: number, width: number, height: number)\n    {\n        this.texture = texture;\n        this.key = key;\n\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.updateUVs();\n    }\n\n    setPivot (x: number, y: number): void\n    {\n        this.pivot = { x, y };\n    }\n\n    setSize (width: number, height: number): void\n    {\n        this.width = width;\n        this.height = height;\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.updateUVs();\n    }\n\n    setSourceSize (width: number, height: number): void\n    {\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n    }\n\n    setTrim (width: number, height: number, x: number, y: number, w: number, h: number): void\n    {\n        this.trimmed = true;\n\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.spriteSourceSizeX = x;\n        this.spriteSourceSizeY = y;\n        this.spriteSourceSizeWidth = w;\n        this.spriteSourceSizeHeight = h;\n    }\n\n    getExtent (originX: number, originY: number): { left: number; right: number; top: number; bottom: number }\n    {\n        const sourceSizeWidth = this.sourceSizeWidth;\n        const sourceSizeHeight = this.sourceSizeHeight;\n\n        let left: number;\n        let right: number;\n        let top: number;\n        let bottom: number;\n\n        if (this.trimmed)\n        {\n            left = this.spriteSourceSizeX - (originX * sourceSizeWidth);\n            right = left + this.spriteSourceSizeWidth;\n\n            top = this.spriteSourceSizeY - (originY * sourceSizeHeight);\n            bottom = top + this.spriteSourceSizeHeight;\n        }\n        else\n        {\n            left = -originX * sourceSizeWidth;\n            right = left + sourceSizeWidth;\n\n            top = -originY * sourceSizeHeight;\n            bottom = top + sourceSizeHeight;\n        }\n\n        return { left, right, top, bottom };\n    }\n\n    copyToExtent (child: IGameObject): this\n    {\n        const transform = child.transform;\n\n        const originX = transform.origin.x;\n        const originY = transform.origin.y;\n\n        const sourceSizeWidth = this.sourceSizeWidth;\n        const sourceSizeHeight = this.sourceSizeHeight;\n\n        let x: number;\n        let y: number;\n        let width: number;\n        let height: number;\n\n        if (this.trimmed)\n        {\n            x = this.spriteSourceSizeX - (originX * sourceSizeWidth);\n            y = this.spriteSourceSizeY - (originY * sourceSizeHeight);\n\n            width = this.spriteSourceSizeWidth;\n            height = this.spriteSourceSizeHeight;\n        }\n        else\n        {\n            x = -originX * sourceSizeWidth;\n            y = -originY * sourceSizeHeight;\n\n            width = sourceSizeWidth;\n            height = sourceSizeHeight;\n        }\n\n        transform.setExtent(x, y, width, height);\n\n        return this;\n    }\n\n    copyToVertices (vertices: Vertex[], offset: number = 0): this\n    {\n        const { u0, u1, v0, v1 } = this;\n\n        vertices[offset + 0].setUV(u0, v0);\n        vertices[offset + 1].setUV(u0, v1);\n        vertices[offset + 2].setUV(u1, v1);\n        vertices[offset + 3].setUV(u1, v0);\n\n        return this;\n    }\n\n    updateUVs (): void\n    {\n        const { x, y, width, height } = this;\n\n        const baseTextureWidth = this.texture.width;\n        const baseTextureHeight = this.texture.height;\n\n        this.u0 = x / baseTextureWidth;\n        this.v0 = y / baseTextureHeight;\n\n        this.u1 = (x + width) / baseTextureWidth;\n        this.v1 = (y + height) / baseTextureHeight;\n    }\n\n    destroy (): void\n    {\n        this.texture = null;\n    }\n}\n", "import { BindingQueue } from '../renderer/BindingQueue';\nimport { Frame } from './Frame';\nimport { IGLTextureBinding } from '../renderer/webgl1/textures/IGLTextureBinding';\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { ITexture } from './ITexture';\n\nexport class Texture implements ITexture\n{\n    //  Unique identifier of this Texture, if stored in the Texture Manager\n    key: string = '';\n\n    width: number;\n    height: number;\n\n    image: TexImageSource;\n\n    binding: IGLTextureBinding;\n\n    firstFrame: Frame;\n\n    frames: Map<string | number, Frame>;\n\n    data: unknown;\n\n    constructor (image?: TexImageSource, width?: number, height?: number, glConfig?: IGLTextureBindingConfig)\n    {\n        if (image)\n        {\n            width = image.width;\n            height = image.height;\n        }\n\n        this.image = image;\n\n        this.width = width;\n        this.height = height;\n\n        this.frames = new Map();\n\n        this.data = {};\n\n        this.addFrame('__BASE', 0, 0, width, height);\n\n        BindingQueue.add(this, glConfig);\n    }\n\n    addFrame (key: string | number, x: number, y: number, width: number, height: number): Frame\n    {\n        if (this.frames.has(key))\n        {\n            return null;\n        }\n\n        const frame = new Frame(this, key, x, y, width, height);\n\n        this.frames.set(key, frame);\n\n        if (!this.firstFrame || this.firstFrame.key === '__BASE')\n        {\n            this.firstFrame = frame;\n        }\n\n        return frame;\n    }\n\n    getFrame (key?: string | number | Frame): Frame\n    {\n        //  null, undefined, empty string, zero\n        if (!key)\n        {\n            return this.firstFrame;\n        }\n\n        if (key instanceof Frame)\n        {\n            key = key.key;\n        }\n\n        let frame: Frame = this.frames.get(key);\n\n        if (!frame)\n        {\n            console.warn(`Frame missing: ${key}`);\n\n            frame = this.firstFrame;\n        }\n\n        return frame;\n    }\n\n    setSize (width: number, height: number): void\n    {\n        this.width = width;\n        this.height = height;\n\n        const frame = this.frames.get('__BASE');\n\n        frame.setSize(width, height);\n    }\n\n    destroy (): void\n    {\n        if (this.binding)\n        {\n            this.binding.destroy();\n        }\n\n        this.frames.clear();\n\n        this.data = null;\n        this.image = null;\n        this.firstFrame = null;\n    }\n}\n", "import { TextureManager } from './TextureManager';\n\nlet instance: TextureManager;\n\nexport const TextureManagerInstance =\n{\n    get: (): TextureManager =>\n    {\n        return instance;\n    },\n\n    set: (manager: TextureManager | null): void =>\n    {\n        instance = manager;\n    }\n};\n", "import { CreateCanvas } from './CreateCanvas';\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { Texture } from './Texture';\nimport { TextureManagerInstance } from './TextureManagerInstance';\n\nexport class TextureManager\n{\n    textures: Map<string, Texture>;\n\n    constructor ()\n    {\n        this.textures = new Map();\n\n        this.createDefaultTextures();\n\n        TextureManagerInstance.set(this);\n    }\n\n    private createDefaultTextures (): void\n    {\n        this.add('__BLANK', new Texture(CreateCanvas(32, 32).canvas));\n\n        const missing = CreateCanvas(32, 32);\n\n        missing.strokeStyle = '#0f0';\n        missing.moveTo(0, 0);\n        missing.lineTo(32, 32);\n        missing.stroke();\n        missing.strokeRect(0.5, 0.5, 31, 31);\n\n        this.add('__MISSING', new Texture(missing.canvas));\n\n        const white = CreateCanvas(32, 32);\n\n        white.fillStyle = '#fff';\n        white.fillRect(0, 0, 32, 32);\n\n        this.add('__WHITE', new Texture(white.canvas));\n    }\n\n    get (key: string): Texture\n    {\n        const textures = this.textures;\n\n        if (textures.has(key))\n        {\n            return textures.get(key);\n        }\n        else\n        {\n            return textures.get('__MISSING');\n        }\n    }\n\n    has (key: string): boolean\n    {\n        return this.textures.has(key);\n    }\n\n    add (key: string, source: Texture | HTMLImageElement, glConfig?: IGLTextureBindingConfig): Texture\n    {\n        let texture: Texture;\n        const textures = this.textures;\n\n        if (!textures.has(key))\n        {\n            if (source instanceof Texture)\n            {\n                texture = source;\n            }\n            else\n            {\n                texture = new Texture(source, 0, 0, glConfig);\n            }\n\n            texture.key = key;\n\n            textures.set(key, texture);\n        }\n\n        return texture;\n    }\n}\n", "import { AddToDOM, DOMContentLoaded } from './dom';\nimport { Emit, EventEmitter } from './events';\n\nimport { GameInstance } from './GameInstance';\nimport { GetBanner } from './config/banner';\nimport { GetGlobalVar } from './config/globalvar';\nimport { GetParent } from './config/parent';\nimport { GetRenderer } from './config/renderer';\nimport { IRenderer } from './renderer/IRenderer';\nimport { SceneManager } from './scenes/SceneManager';\nimport { SetConfigDefaults } from './config/SetConfigDefaults';\nimport { TextureManager } from './textures/TextureManager';\n\nexport class Game extends EventEmitter\n{\n    readonly VERSION: string = '4.0.0-beta1';\n\n    isBooted: boolean = false;\n    isPaused: boolean = false;\n\n    willUpdate: boolean = true;\n    willRender: boolean = true;\n\n    lastTick: number = 0;\n    elapsed: number = 0;\n\n    //  The current game frame\n    frame: number = 0;\n\n    renderer: IRenderer;\n    textureManager: TextureManager;\n    sceneManager: SceneManager;\n\n    constructor (...settings: { (): void }[])\n    {\n        super();\n\n        GameInstance.set(this);\n\n        SetConfigDefaults();\n\n        DOMContentLoaded(() => this.boot(settings));\n    }\n\n    boot (settings: { (): void }[]): void\n    {\n        //  Activate the settings post DOM Content Loaded\n        settings.forEach(setting => setting());\n\n        const renderer = GetRenderer();\n\n        this.renderer = new renderer();\n        this.textureManager = new TextureManager();\n        this.sceneManager = new SceneManager();\n\n        //  Only add to the DOM if they either didn't set a Parent, or expressly set it to be non-null\n        //  Otherwise we'll let them add the canvas to the DOM themselves\n        const parent = GetParent();\n\n        if (parent)\n        {\n            AddToDOM(this.renderer.canvas, parent);\n        }\n\n        const globalVar = GetGlobalVar();\n\n        if (globalVar && window)\n        {\n            (window as unknown)[globalVar] = this;\n        }\n\n        this.isBooted = true;\n\n        GetBanner();\n\n        Emit(this, 'boot');\n\n        this.lastTick = performance.now();\n\n        this.step(this.lastTick);\n    }\n\n    pause (): void\n    {\n        this.isPaused = true;\n    }\n\n    resume (): void\n    {\n        this.isPaused = false;\n\n        this.lastTick = performance.now();\n    }\n\n    step (time: number): void\n    {\n        //  Note that privacy.resistFingerprinting can round this value to 100ms or more!\n        const delta = time - this.lastTick;\n\n        this.lastTick = time;\n        this.elapsed += delta;\n\n        if (!this.isPaused)\n        {\n            if (this.willUpdate)\n            {\n                this.sceneManager.update(delta, time);\n\n                Emit(this, 'update', delta, time);\n            }\n\n            if (this.willRender)\n            {\n                this.renderer.render(this.sceneManager.render(this.frame));\n            }\n        }\n\n        //  The frame always advances by 1 each step (even when paused)\n        this.frame++;\n\n        GameInstance.setFrame(this.frame);\n        GameInstance.setElapsed(this.elapsed);\n\n        requestAnimationFrame(now => this.step(now));\n    }\n\n    destroy (): void\n    {\n        //  TODO - Code destroy function\n    }\n}\n", "import { SetBackgroundColor } from './SetBackgroundColor';\n\nexport function BackgroundColor (color: number): () => void\n{\n    return (): void =>\n    {\n        SetBackgroundColor(color);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetHeight (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).height;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetResolution (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).resolution;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWidth (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).width;\n}\n", "import { SetSize } from './SetSize';\n\nexport function Size (width: number = 800, height: number = 600, resolution: number = 1): () => void\n{\n    return (): void =>\n    {\n        SetSize(width, height, resolution);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBackgroundColor (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.BACKGROUND_COLOR);\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function AddViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): Rectangle\n{\n    const viewport = new Rectangle(x, y, width, height);\n\n    renderPass.viewportStack.push(viewport);\n\n    return viewport;\n}\n", "export let gl: WebGLRenderingContext;\n\nexport const GL =\n{\n    get: (): WebGLRenderingContext =>\n    {\n        return gl;\n    },\n\n    set: (context: WebGLRenderingContext | undefined): void =>\n    {\n        gl = context;\n    }\n};\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle';\nimport { gl } from '../GL';\n\nexport function BindViewport (renderPass: IRenderPass, viewport?: Rectangle): void\n{\n    if (!viewport)\n    {\n        viewport = renderPass.currentViewport;\n\n        if (!viewport)\n        {\n            return;\n        }\n    }\n\n    const glv = gl.getParameter(gl.VIEWPORT);\n\n    if (glv[0] !== viewport.x || glv[1] !== viewport.y || glv[2] !== viewport.width || glv[3] !== viewport.height)\n    {\n        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n    }\n}\n", "import { AddViewport } from './AddViewport';\nimport { BindViewport } from './BindViewport';\nimport { IRenderPass } from './IRenderPass';\n\nexport function SetViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\n{\n    const entry = AddViewport(renderPass, x, y, width, height);\n\n    BindViewport(renderPass, entry);\n\n    renderPass.currentViewport = entry;\n}\n", "import { FramebufferStackEntry } from './RenderPass';\nimport { IRenderPass } from './IRenderPass';\nimport { SetViewport } from './SetViewport';\nimport { gl } from '../GL';\n\nexport function BindFramebuffer (renderPass: IRenderPass, clear: boolean = true, entry?: FramebufferStackEntry): void\n{\n    if (!entry)\n    {\n        entry = renderPass.currentFramebuffer;\n    }\n\n    const { framebuffer, viewport } = entry;\n\n    //  TODO - Only bind if different\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    if (clear)\n    {\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    if (viewport)\n    {\n        SetViewport(renderPass, viewport.x, viewport.y, viewport.width, viewport.height);\n    }\n}\n", "import { BindViewport } from './BindViewport';\nimport { IRenderPass } from './IRenderPass';\n\nexport function PopViewport (renderPass: IRenderPass): void\n{\n    const stack = renderPass.viewportStack;\n\n    //  > 1 because index 0 contains the default, which we don't want to remove\n    if (stack.length > 1)\n    {\n        stack.pop();\n    }\n\n    renderPass.currentViewport = stack[ stack.length - 1 ];\n\n    BindViewport(renderPass);\n}\n", "import { BindFramebuffer } from './BindFramebuffer';\nimport { IRenderPass } from './IRenderPass';\nimport { PopViewport } from './PopViewport';\n\nexport function PopFramebuffer (renderPass: IRenderPass): void\n{\n    const stack = renderPass.framebufferStack;\n\n    //  > 1 because index 0 contains the default, which we don't want to remove\n    if (stack.length > 1)\n    {\n        if (renderPass.currentFramebuffer.viewport)\n        {\n            PopViewport(renderPass);\n        }\n\n        stack.pop();\n    }\n\n    renderPass.currentFramebuffer = stack[ stack.length - 1 ];\n\n    BindFramebuffer(renderPass, false);\n}\n", "import { FramebufferStackEntry } from './RenderPass';\nimport { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function AddFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer, viewport?: Rectangle): FramebufferStackEntry\n{\n    const entry = { framebuffer, viewport };\n\n    renderPass.framebufferStack.push(entry);\n\n    return entry;\n}\n", "import { AddFramebuffer } from './AddFramebuffer';\nimport { BindFramebuffer } from './BindFramebuffer';\nimport { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle';\n\nexport function SetFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer, clear: boolean = true, viewport?: Rectangle): void\n{\n    const entry = AddFramebuffer(renderPass, framebuffer, viewport);\n\n    BindFramebuffer(renderPass, clear, entry);\n\n    renderPass.currentFramebuffer = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { PopFramebuffer } from './PopFramebuffer';\nimport { SetFramebuffer } from './SetFramebuffer';\nimport { gl } from '../GL';\n\nexport function Draw (renderPass: IRenderPass): void\n{\n    const count = renderPass.count;\n\n    if (count === 0)\n    {\n        return;\n    }\n\n    const currentBuffer = renderPass.currentVertexBuffer;\n    const currentShader = renderPass.currentShader;\n\n    const renderToFramebuffer = currentShader.shader.renderToFramebuffer;\n\n    if (renderToFramebuffer)\n    {\n        SetFramebuffer(renderPass, currentShader.shader.framebuffer, true);\n    }\n\n    if (count === currentBuffer.batchSize)\n    {\n        const type = (currentBuffer.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n        gl.bufferData(gl.ARRAY_BUFFER, currentBuffer.data, type);\n    }\n    else\n    {\n        const subsize = (currentBuffer.indexed) ? count * currentBuffer.entryElementSize : count * currentBuffer.vertexElementSize;\n\n        const view = currentBuffer.vertexViewF32.subarray(0, subsize);\n\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\n    }\n\n    if (currentBuffer.indexed)\n    {\n        gl.drawElements(gl.TRIANGLES, count * currentBuffer.entryIndexSize, gl.UNSIGNED_SHORT, 0);\n    }\n    else\n    {\n        gl.drawArrays(gl.TRIANGLES, 0, count);\n    }\n\n    if (renderToFramebuffer)\n    {\n        PopFramebuffer(renderPass);\n    }\n}\n", "import { Draw } from './Draw';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Flush (renderPass: IRenderPass, forceCount?: number): boolean\n{\n    if (forceCount)\n    {\n        renderPass.count = forceCount;\n    }\n\n    const count = renderPass.count;\n\n    if (count === 0)\n    {\n        return false;\n    }\n\n    Draw(renderPass);\n\n    renderPass.prevCount = count;\n\n    renderPass.count = 0;\n\n    renderPass.flushTotal++;\n\n    return true;\n}\n", "import { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\n\nexport function End (renderPass: IRenderPass): void\n{\n    Flush(renderPass);\n}\n", "export function GetRGBArray (color: number, output: number[] = []): number[]\n{\n    const r: number = color >> 16 & 0xFF;\n    const g: number = color >> 8 & 0xFF;\n    const b: number = color & 0xFF;\n    const a: number = (color > 16777215) ? color >>> 24 : 255;\n\n    output[0] = r / 255;\n    output[1] = g / 255;\n    output[2] = b / 255;\n    output[3] = a / 255;\n\n    return output;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWebGLContext (): WebGLContextAttributes\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.WEBGL_CONTEXT);\n}\n", "import { IGLTextureBinding } from './IGLTextureBinding';\nimport { gl } from '../GL';\n\nexport function CreateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\n{\n    const { parent, flipY, unpackPremultiplyAlpha, minFilter, magFilter, wrapS, wrapT, generateMipmap, isPOT } = binding;\n\n    const source = parent.image;\n\n    let width = parent.width;\n    let height = parent.height;\n\n    const glTexture: WebGLTexture = gl.createTexture();\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\n\n    if (source)\n    {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n\n        width = source.width;\n        height = source.height;\n    }\n    else\n    {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    }\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n\n    if (generateMipmap && isPOT)\n    {\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    binding.texture = glTexture;\n\n    return glTexture;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteFramebuffer (framebuffer: WebGLFramebuffer): void\n{\n    if (gl && gl.isFramebuffer(framebuffer))\n    {\n        gl.deleteFramebuffer(framebuffer);\n    }\n}\n", "import { gl } from '../GL';\n\nexport function DeleteGLTexture (texture: WebGLTexture): void\n{\n    if (gl.isTexture(texture))\n    {\n        gl.deleteTexture(texture);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if the given `width` and `height` are a power of two.\n * Useful for checking texture dimensions.\n *\n * @function Phaser.Math.Pow2.IsSize\n * @since 3.0.0\n *\n * @param {number} width - The width.\n * @param {number} height - The height.\n *\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\n */\nexport function IsSizePowerOfTwo (width: number, height: number): boolean\n{\n    if (width < 1 || height < 1)\n    {\n        return false;\n    }\n\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\n}\n", "import { gl } from '../GL';\n\nexport function SetGLTextureFilterMode (texture: WebGLTexture, linear: boolean = true): void\n{\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\n}\n", "import { IGLTextureBinding } from './IGLTextureBinding';\nimport { gl } from '../GL';\n\nexport function UpdateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\n{\n    const source = binding.parent.image;\n    const width = source.width;\n    const height = source.height;\n\n    if (width > 0 && height > 0)\n    {\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n    }\n\n    return binding.texture;\n}\n", "import { CreateGLTexture } from './CreateGLTexture';\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\nimport { DeleteGLTexture } from './DeleteGLTexture';\nimport { IGLTextureBinding } from './IGLTextureBinding';\nimport { IGLTextureBindingConfig } from './IGLTextureBindingConfig';\nimport { ITexture } from '../../../textures/ITexture';\nimport { IsSizePowerOfTwo } from '../../../math/pow2/IsSizePowerOfTwo';\nimport { SetGLTextureFilterMode } from './SetGLTextureFilterMode';\nimport { UpdateGLTexture } from './UpdateGLTexture';\nimport { gl } from '../GL';\n\nexport class GLTextureBinding implements IGLTextureBinding\n{\n    parent: ITexture;\n\n    texture: WebGLTexture;\n    framebuffer: WebGLFramebuffer;\n    depthbuffer: WebGLRenderbuffer;\n\n    index: number = 0;\n    indexCounter: number = -1;\n\n    dirtyIndex: boolean = true;\n    unpackPremultiplyAlpha: boolean = true;\n\n    minFilter: GLenum;\n    magFilter: GLenum;\n    wrapS: GLenum;\n    wrapT: GLenum;\n\n    flipY: boolean = false;\n    isPOT: boolean = false;\n    generateMipmap: boolean = false;\n\n    constructor (parent: ITexture, config: IGLTextureBindingConfig = {})\n    {\n        this.parent = parent;\n\n        this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\n\n        const {\n            texture = null,\n            framebuffer = null,\n            depthbuffer = null,\n            unpackPremultiplyAlpha = true,\n            minFilter = (this.isPOT) ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmap = this.isPOT,\n            flipY = false\n        } = config;\n\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmap = generateMipmap;\n        this.flipY = flipY;\n        this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\n\n        if (framebuffer)\n        {\n            this.framebuffer = framebuffer;\n        }\n\n        if (depthbuffer)\n        {\n            this.depthbuffer = depthbuffer;\n        }\n\n        if (texture)\n        {\n            this.texture = texture;\n        }\n        else\n        {\n            CreateGLTexture(this);\n        }\n    }\n\n    //  Needed?\n    setFilter (linear: boolean): void\n    {\n        if (this.texture)\n        {\n            SetGLTextureFilterMode(this.texture, linear);\n        }\n    }\n\n    create (): WebGLTexture\n    {\n        const texture = this.texture;\n\n        if (texture)\n        {\n            DeleteGLTexture(texture);\n        }\n\n        return CreateGLTexture(this);\n    }\n\n    update (): WebGLTexture\n    {\n        const texture = this.texture;\n\n        if (!texture)\n        {\n            return CreateGLTexture(this);\n        }\n        else\n        {\n            return UpdateGLTexture(this);\n        }\n    }\n\n    setIndex (index: number): void\n    {\n        this.dirtyIndex = (index !== this.index);\n        this.index = index;\n    }\n\n    destroy (): void\n    {\n        DeleteGLTexture(this.texture);\n        DeleteFramebuffer(this.framebuffer);\n\n        this.parent = null;\n        this.texture = null;\n        this.framebuffer = null;\n    }\n}\n", "import { BindingQueue } from '../../BindingQueue';\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\n\nexport function ProcessBindingQueue (): void\n{\n    const queue = BindingQueue.get();\n\n    queue.forEach(entry =>\n    {\n        const { texture, glConfig } = entry;\n\n        if (!texture.binding)\n        {\n            texture.binding = new GLTextureBinding(texture, glConfig);\n        }\n    });\n\n    BindingQueue.clear();\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetMaxTextures (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.MAX_TEXTURES);\n}\n", "import { gl } from '../GL';\n\n//  From Pixi v5\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}'\n].join('\\n');\n\nfunction GenerateSrc (maxIfs: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n\nexport function CheckShaderMaxIfStatements (maxIfs: number): number\n{\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true)\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, GenerateSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n", "import { GetMaxTextures, SetMaxTextures } from '../../../config/maxtextures/';\n\nimport { CheckShaderMaxIfStatements } from '../shaders/CheckShaderMaxIfStatements';\nimport { IRenderPass } from './IRenderPass';\nimport { gl } from '../GL';\n\n//  As per the WebGL spec, the browser should always support at least 8 texture units\n\nexport function CreateTempTextures (renderPass: IRenderPass): void\n{\n    let maxGPUTextures: number = CheckShaderMaxIfStatements(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));\n\n    const maxConfigTextures = GetMaxTextures();\n\n    if (maxConfigTextures === 0 || (maxConfigTextures > 0 && maxConfigTextures > maxGPUTextures))\n    {\n        //  Insert gpu limit into config value\n        SetMaxTextures(maxGPUTextures);\n    }\n    else if (maxConfigTextures > 0 && maxConfigTextures < maxGPUTextures)\n    {\n        //  Limit to config setting, or 8, whichever is higher\n        maxGPUTextures = Math.max(8, maxConfigTextures);\n    }\n\n    const tempTextures = renderPass.tempTextures;\n\n    if (tempTextures.length)\n    {\n        tempTextures.forEach(texture =>\n        {\n            gl.deleteTexture(texture);\n        });\n    }\n\n    const index = [];\n\n    //  Create temp textures to stop WebGL errors on mac os\n    for (let texturesIndex: number = 0; texturesIndex < maxGPUTextures; texturesIndex++)\n    {\n        const tempTexture = gl.createTexture();\n\n        gl.activeTexture(gl.TEXTURE0 + texturesIndex);\n\n        gl.bindTexture(gl.TEXTURE_2D, tempTexture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([ 0, 0, 255, 255 ]));\n\n        tempTextures[texturesIndex] = tempTexture;\n\n        index.push(texturesIndex);\n    }\n\n    renderPass.maxTextures = maxGPUTextures;\n\n    renderPass.textureIndex = index;\n\n    //  ID Zero is reserved for FBO Textures\n    renderPass.currentActiveTexture = 1;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBatchSize (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.BATCH_SIZE);\n}\n", "import { gl } from '../GL';\n\nexport function DeleteGLBuffer (buffer: WebGLBuffer): void\n{\n    if (gl.isBuffer(buffer))\n    {\n        gl.deleteBuffer(buffer);\n    }\n}\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\nimport { IVertexBuffer } from './IVertexBuffer';\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\nimport { gl } from '../GL';\n\nexport class VertexBuffer implements IVertexBuffer\n{\n    /**\n     * Maximum number of entries per batch before a flush takes place.\n     * For a Mesh, this is the number of triangles / faces in the vertex buffer.\n     * Typically each face consists of 3 verticies.\n     *\n     * @type {number}\n     */\n    batchSize: number;\n\n    /**\n     * The size, in bytes, per entry in the array buffer.\n     *\n     * @type {number}\n     */\n    dataSize: number;\n\n    /**\n     * The amount of elements / floats a single vertex consists of.\n     *\n     * The default is 6:\n     *\n     * position (x,y - 2 floats)\n     * texture coord (x,y - 2 floats)\n     * texture index (uint)\n     * packed color (uint)\n     *\n     * @type {number}\n     */\n    vertexElementSize: number;\n\n    /**\n     * The size, in bytes, of a single vertex in the array buffer.\n     *\n     * This is `vertexElementSize * dataSize`.\n     *\n     * @type {number}\n     */\n    vertexByteSize: number;\n\n    /**\n     * The size, in bytes, of a single entry in the array buffer.\n     *\n     * This is `vertexByteSize * 4` for a quad.\n     *\n     * @type {number}\n     */\n    entryByteSize: number;\n\n    /**\n     * The size, in bytes, of the Array Buffer.\n     *\n     * This is `batchSize * entryByteSize`\n     *\n     * @type {number}\n     */\n    bufferByteSize: number;\n\n    /**\n     * The Array Buffer.\n     *\n     * @type {ArrayBuffer}\n     */\n    data: ArrayBuffer;\n\n    /**\n     * Float32 View of the Array Buffer.\n     *\n     * @type {Float32Array}\n     */\n    vertexViewF32: Float32Array;\n\n    /**\n     * Uint32 View of the Array Buffer.\n     *\n     * @type {Uint32Array}\n     */\n    vertexViewU32: Uint32Array;\n\n    /**\n     * The data array buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    vertexBuffer: WebGLBuffer;\n\n    indexed: boolean = false;\n\n    isDynamic: boolean = false;\n\n    /**\n     * The total number of entries added to the buffer so far, or reserved to be added.\n     *\n     * This is the total number of indices / verticies, not faces.\n     * Typically there are 3 verts per face, so this value is usually batchSize x 3 for a Mesh.\n     *\n     * @type {number}\n     */\n    count: number = 0;\n\n    /**\n     * The current buffer offset.\n     *\n     * @type {number}\n     */\n    offset: number = 0;\n\n    elementsPerEntry: number;\n\n    constructor (config: IVertexBufferConfig = {})\n    {\n        const {\n            batchSize = 1,\n            dataSize = 4,\n            isDynamic = true,\n            elementsPerEntry = 4,\n            vertexElementSize = 6\n        } = config;\n\n        this.batchSize = batchSize;\n        this.dataSize = dataSize;\n        this.vertexElementSize = vertexElementSize;\n        this.isDynamic = isDynamic;\n        this.elementsPerEntry = elementsPerEntry;\n\n        //  Derive the remaining values\n        this.vertexByteSize = vertexElementSize * dataSize;\n        this.entryByteSize = this.vertexByteSize * elementsPerEntry;\n        this.bufferByteSize = batchSize * this.entryByteSize;\n\n        this.create();\n    }\n\n    resize (batchSize: number): void\n    {\n        this.batchSize = batchSize;\n        this.bufferByteSize = batchSize * this.entryByteSize;\n\n        if (this.vertexBuffer)\n        {\n            DeleteGLBuffer(this.vertexBuffer);\n        }\n\n        this.create();\n    }\n\n    create (): void\n    {\n        const data = new ArrayBuffer(this.bufferByteSize);\n\n        this.data = data;\n\n        this.vertexViewF32 = new Float32Array(data);\n        this.vertexViewU32 = new Uint32Array(data);\n\n        this.vertexBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\n        const type = (this.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n        gl.bufferData(gl.ARRAY_BUFFER, data, type);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n\n    add (count: number): void\n    {\n        this.count += count;\n        this.offset += (this.vertexElementSize * count);\n    }\n\n    reset (): void\n    {\n        this.count = 0;\n        this.offset = 0;\n    }\n\n    canContain (count: number): boolean\n    {\n        return ((this.count + count) <= this.batchSize);\n    }\n\n    free (): number\n    {\n        return Math.max(0, 1 - (this.count / this.batchSize));\n    }\n\n    bind (): void\n    {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    }\n\n    destroy (): void\n    {\n        DeleteGLBuffer(this.vertexBuffer);\n\n        this.data = null;\n        this.vertexViewF32 = null;\n        this.vertexViewU32 = null;\n        this.vertexBuffer = null;\n    }\n}\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\nimport { IIndexedVertexBuffer } from './IIndexedVertexBuffer';\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\nimport { VertexBuffer } from './VertexBuffer';\nimport { gl } from '../GL';\n\nexport class IndexedVertexBuffer extends VertexBuffer implements IIndexedVertexBuffer\n{\n    /**\n     * The size, in bytes, per entry in the element index array.\n     *\n     * @type {number}\n     */\n    indexSize: number;\n\n    /**\n     * The size, in quantity of elements, of a single entry in the element index array.\n     *\n     * This is `vertexElementSize * 4` for a quad.\n     *\n     * @type {number}\n     */\n    entryElementSize: number;\n\n    /**\n     * The total number of entries per entry in the element index array.\n     *\n     * For a quad, the IBO contains 6 entries per entry:\n     *\n     * 0, 1, 2\n     * 2, 3, 0\n     *\n     * @type {number}\n     */\n    entryIndexSize: number;\n\n    /**\n     * The Element Array Buffer.\n     *\n     * @type {Uint16Array}\n     */\n    index: Uint16Array;\n\n    /**\n     * The element array buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    indexBuffer: WebGLBuffer;\n\n    indexLayout: number[];\n\n    constructor (config: IVertexBufferConfig = {})\n    {\n        super(config);\n\n        const {\n            indexSize = 4,\n            entryIndexSize = 6,\n            indexLayout = null\n        } = config;\n\n        this.indexed = true;\n\n        this.indexSize = indexSize;\n        this.entryIndexSize = entryIndexSize;\n\n        //  Derive the remaining values\n        this.entryElementSize = this.vertexElementSize * this.elementsPerEntry;\n\n        const seededIndexBuffer = [];\n\n        if (indexLayout)\n        {\n            this.indexLayout = indexLayout;\n\n            //  Seed the index buffer\n            for (let i = 0; i < (this.batchSize * indexSize); i += indexSize)\n            {\n                for (let c = 0; c < indexLayout.length; c++)\n                {\n                    seededIndexBuffer.push(i + indexLayout[c]);\n                }\n            }\n        }\n\n        this.create();\n        this.createIndexBuffer(seededIndexBuffer);\n    }\n\n    createIndexBuffer (seededIndex: number[]): void\n    {\n        this.index = new Uint16Array(seededIndex);\n\n        this.indexBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.index, gl.STATIC_DRAW);\n\n        //  Free memory\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        seededIndex = [];\n    }\n\n    bind (): void\n    {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    }\n\n    destroy (): void\n    {\n        super.destroy();\n\n        DeleteGLBuffer(this.indexBuffer);\n\n        this.index = null;\n        this.indexLayout = null;\n        this.indexBuffer = null;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if an array can be used as a matrix.\n *\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows) have the same length. There must be at least two rows:\n *\n * ```\n *    [\n *        [ 1, 1, 1, 1, 1, 1 ],\n *        [ 2, 0, 0, 0, 0, 4 ],\n *        [ 2, 0, 1, 2, 0, 4 ],\n *        [ 2, 0, 3, 4, 0, 4 ],\n *        [ 2, 0, 0, 0, 0, 4 ],\n *        [ 3, 3, 3, 3, 3, 3 ]\n *    ]\n * ```\n */\nexport function CheckMatrix (matrix: unknown[][]): boolean\n{\n    if (!Array.isArray(matrix) || matrix.length < 2 || !Array.isArray(matrix[0]))\n    {\n        return false;\n    }\n\n    //  How long is the first row?\n    const size = matrix[0].length;\n\n    //  Validate the rest of the rows are the same length\n    for (let i = 1; i < matrix.length; i++)\n    {\n        if (matrix[i].length !== size)\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CheckMatrix } from './CheckMatrix';\n\n/**\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\n */\nexport function MatrixToString (matrix: unknown[][]): string\n{\n    let str = '';\n\n    if (!CheckMatrix(matrix))\n    {\n        return str;\n    }\n\n    for (let r = 0; r < matrix.length; r++)\n    {\n        for (let c = 0; c < matrix[r].length; c++)\n        {\n            const cell = matrix[r][c].toString();\n\n            if (cell !== 'undefined')\n            {\n                str = str.padEnd(2, cell);\n            }\n            else\n            {\n                str += '?';\n            }\n\n            if (c < matrix[r].length - 1)\n            {\n                str += ' |';\n            }\n        }\n\n        if (r < matrix.length - 1)\n        {\n            str += '\\n';\n\n            for (let i = 0; i < matrix[r].length; i++)\n            {\n                str += '---';\n\n                if (i < matrix[r].length - 1)\n                {\n                    str += '+';\n                }\n            }\n\n            str += '\\n';\n        }\n\n    }\n\n    return str;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Reverses the columns in the given Array Matrix.\n */\nexport function ReverseColumns (matrix: unknown[][]): unknown[][]\n{\n    return matrix.reverse();\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Reverses the rows in the given Array Matrix.\n */\nexport function ReverseRows (matrix: unknown[][]): unknown[][]\n{\n    for (let i = 0; i < matrix.length; i++)\n    {\n        matrix[i].reverse();\n    }\n\n    return matrix;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Transposes the elements of the given matrix (array of arrays).\n *\n * The transpose of a matrix is a new matrix whose rows are the columns of the original.\n */\nexport function TransposeMatrix (matrix: unknown[][]): unknown[][]\n{\n    const sourceRowCount = matrix.length;\n    const sourceColCount = matrix[0].length;\n\n    const result = new Array(sourceColCount);\n\n    for (let i = 0; i < sourceColCount; i++)\n    {\n        result[i] = new Array(sourceRowCount);\n\n        for (let j = sourceRowCount - 1; j > -1; j--)\n        {\n            result[i][j] = matrix[j][i];\n        }\n    }\n\n    return result;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CheckMatrix } from './CheckMatrix';\nimport { TransposeMatrix } from './TransposeMatrix';\n\n/**\n * Rotates the array matrix based on the given rotation value.\n *\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\n *\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\n */\nexport function RotateMatrix (matrix: unknown[][], direction: number | string = 90): unknown[][]\n{\n    if (!CheckMatrix(matrix))\n    {\n        return matrix;\n    }\n\n    if (typeof direction !== 'string')\n    {\n        direction = ((direction % 360) + 360) % 360;\n    }\n\n    if (direction === 90 || direction === -270 || direction === 'rotateLeft')\n    {\n        matrix = TransposeMatrix(matrix);\n        matrix.reverse();\n    }\n    else if (direction === -90 || direction === 270 || direction === 'rotateRight')\n    {\n        matrix.reverse();\n        matrix = TransposeMatrix(matrix);\n    }\n    else if (Math.abs(direction as number) === 180 || direction === 'rotate180')\n    {\n        for (let i = 0; i < matrix.length; i++)\n        {\n            matrix[i].reverse();\n        }\n\n        matrix.reverse();\n    }\n\n    return matrix;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix 180 degrees.\n *\n * @function Phaser.Utils.Array.Matrix.Rotate180\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function Rotate180 (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, 180);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix to the left (or 90 degrees)\n *\n * @function Phaser.Utils.Array.Matrix.RotateLeft\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function RotateLeft (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, 90);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix to the left (or -90 degrees)\n *\n * @function Phaser.Utils.Array.Matrix.RotateRight\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function RotateRight (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, -90);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Create an array representing the range of numbers (usually integers), between, and inclusive of,\n * the given `start` and `end` arguments. For example:\n *\n * `var array = numberArray(2, 4); // array = [2, 3, 4]`\n * `var array = numberArray(0, 9); // array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n *\n * This is equivalent to `numberArrayStep(start, end, 1)`.\n *\n * You can optionally provide a prefix and / or suffix string. If given the array will contain\n * strings, not integers. For example:\n *\n * `var array = numberArray(1, 4, 'Level '); // array = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]`\n * `var array = numberArray(5, 7, 'HD-', '.png'); // array = [\"HD-5.png\", \"HD-6.png\", \"HD-7.png\"]`\n *\n * @param {number} start - The minimum value the array starts with.\n * @param {number} end - The maximum value the array contains.\n * @param {string} [prefix] - Optional prefix to place before the number. If provided the array will contain strings, not integers.\n * @param {string} [suffix] - Optional suffix to place after the number. If provided the array will contain strings, not integers.\n *\n * @return {(number[]|string[])} The array of number values, or strings if a prefix or suffix was provided.\n */\nexport function NumberArray (start: number, end: number, prefix?: string, suffix?: string): (string | number)[]\n{\n    const result: (string | number)[] = [];\n\n    for (let i = start; i <= end; i++)\n    {\n        if (prefix || suffix)\n        {\n            let key = (prefix) ? prefix + i.toString() : i.toString();\n\n            if (suffix)\n            {\n                key = key.concat(suffix);\n            }\n\n            result.push(key);\n        }\n        else\n        {\n            result.push(i);\n        }\n    }\n\n    return result;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Round a given number so it is further away from zero. That is, positive numbers are rounded up, and negative numbers are rounded down.\n *\n * @function Phaser.Math.RoundAwayFromZero\n * @since 3.0.0\n *\n * @param {number} value - The number to round.\n *\n * @return {number} The rounded number, rounded away from zero.\n */\nexport function RoundAwayFromZero (value: number): number\n{\n    // \"Opposite\" of truncate.\n    return (value > 0) ? Math.ceil(value) : Math.floor(value);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RoundAwayFromZero } from '../../math/RoundAwayFromZero';\n\n/**\n * Create an array of numbers (positive and/or negative) progressing from `start`\n * up to but not including `end` by advancing by `step`.\n *\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\n *\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\n * for forward compatibility make sure to pass in actual numbers.\n *\n * @example\n * NumberArrayStep(4);\n * // => [0, 1, 2, 3]\n *\n * NumberArrayStep(1, 5);\n * // => [1, 2, 3, 4]\n *\n * NumberArrayStep(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * NumberArrayStep(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * NumberArrayStep(1, 4, 0);\n * // => [1, 1, 1]\n *\n * NumberArrayStep(0);\n * // => []\n *\n * @param {number} [start=0] - The start of the range.\n * @param {number} [end=null] - The end of the range.\n * @param {number} [step=1] - The value to increment or decrement by.\n *\n * @return {number[]} The array of number values.\n */\nexport function NumberArrayStep (start: number, end: number, step: number): number[]\n{\n    const result: number[] = [];\n\n    const total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\n\n    for (let i = 0; i < total; i++)\n    {\n        result.push(start);\n\n        start += step;\n    }\n\n    return result;\n}\n", "/**\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n/**\n * Converts an ArrayBuffer into a base64 string.\n *\n * The resulting string can optionally be a data uri if the `mediaType` argument is provided.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs for more details.\n *\n * @function Phaser.Utils.Base64.ArrayBufferToBase64\n * @since 3.18.0\n *\n * @param {ArrayBuffer} arrayBuffer - The Array Buffer to encode.\n * @param {string} [mediaType] - An optional media type, i.e. `audio/ogg` or `image/jpeg`. If included the resulting string will be a data URI.\n *\n * @return {string} The base64 encoded Array Buffer.\n */\nexport function ArrayBufferToBase64 (arrayBuffer: ArrayBuffer, mediaType: string): string\n{\n    const bytes = new Uint8Array(arrayBuffer);\n    const len = bytes.length;\n\n    let base64 = (mediaType) ? 'data:' + mediaType + ';base64,' : '';\n\n    for (let i = 0; i < len; i += 3)\n    {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2)\n    {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1)\n    {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n\n    return base64;\n}\n", "/**\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n//  Use a lookup table to find the index.\nconst lookup = new Uint8Array(256);\n\nfor (let i = 0; i < chars.length; i++)\n{\n    lookup[chars.charCodeAt(i)] = i;\n}\n\n/**\n * Converts a base64 string, either with or without a data uri, into an Array Buffer.\n *\n * @function Phaser.Utils.Base64.Base64ToArrayBuffer\n * @since 3.18.0\n *\n * @param {string} base64 - The base64 string to be decoded. Can optionally contain a data URI header, which will be stripped out prior to decoding.\n *\n * @return {ArrayBuffer} An ArrayBuffer decoded from the base64 data.\n */\nexport function Base64ToArrayBuffer (base64: string): ArrayBuffer\n{\n    //  Is it a data uri? if so, strip the header away\n    base64 = base64.substr(base64.indexOf(',') + 1);\n\n    const len = base64.length;\n    let bufferLength = len * 0.75;\n    let p = 0;\n    let encoded1;\n    let encoded2;\n    let encoded3;\n    let encoded4;\n\n    if (base64[len - 1] === '=')\n    {\n        bufferLength--;\n\n        if (base64[len - 2] === '=')\n        {\n            bufferLength--;\n        }\n    }\n\n    const arrayBuffer = new ArrayBuffer(bufferLength);\n    const bytes = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < len; i += 4)\n    {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arrayBuffer;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Capitalizes the first letter of a string if there is one.\n * @example\n * UppercaseFirst('abc');\n * // returns 'Abc'\n * @example\n * UppercaseFirst('the happy family');\n * // returns 'The happy family'\n * @example\n * UppercaseFirst('');\n * // returns ''\n *\n * @function Phaser.Utils.String.UppercaseFirst\n * @since 3.0.0\n *\n * @param {string} str - The string to capitalize.\n *\n * @return {string} A new string, same as the first, but with the first letter capitalized.\n */\nexport function UppercaseFirst (str: string): string\n{\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n", "export function NOOP (): void\n{\n    //  No-op\n}\n", "import { NOOP } from '../../utils';\n\n//  4x4 Matrix in column-major format\n\n/**\n * data[0] = m00\n * data[1] = m01\n * data[2] = m02\n * data[3] = m03\n * data[4] = m10\n * data[5] = m11\n * data[6] = m12\n * data[7] = m13\n * data[8] = m20\n * data[9] = m21\n * data[10] = m22\n * data[11] = m23\n * data[12] = m30\n * data[13] = m31\n * data[14] = m32\n * data[15] = m33\n */\n\nexport class Matrix4\n{\n    data: Float32Array;\n\n    onChange: (mat4: Matrix4) => void;\n\n    constructor (src?: Matrix4 | Float32List)\n    {\n        const data = new Float32Array(16);\n\n        this.data = data;\n        this.onChange = NOOP;\n\n        if (src)\n        {\n            if (Array.isArray(src))\n            {\n                this.fromArray(src);\n            }\n            else\n            {\n                this.fromArray((src as Matrix4).data);\n            }\n        }\n        else\n        {\n            data[0] = 1;\n            data[5] = 1;\n            data[10] = 1;\n            data[15] = 1;\n        }\n    }\n\n    /**\n     * @param m00 - 1st value of 1st row\n     * @param m01 - 2nd value of 1st row\n     * @param m02 - 3rd value of 1st row\n     * @param m03 - 4th value of 1st row\n     * @param m10 - 1st value of 2nd row\n     * @param m11 - 2nd value of 2nd row\n     * @param m12 - 3rd value of 2nd row\n     * @param m13 - 4th value of 2nd row\n     * @param m20 - 1st value of 3rd row\n     * @param m21 - 2nd value of 3rd row\n     * @param m22 - 3rd value of 3rd row\n     * @param m23 - 4th value of 3rd row\n     * @param m30 - 1st value of 4th row\n     * @param m31 - 2nd value of 4th row\n     * @param m32 - 3rd value of 4th row\n     * @param m33 - 4th value of 4th row\n     */\n    set (m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number): this\n    {\n        const data = this.data;\n\n        data[ 0 ] = m00;\n        data[ 1 ] = m01;\n        data[ 2 ] = m02;\n        data[ 3 ] = m03;\n\n        data[ 4 ] = m10;\n        data[ 5 ] = m11;\n        data[ 6 ] = m12;\n        data[ 7 ] = m13;\n\n        data[ 8 ] = m20;\n        data[ 9 ] = m21;\n        data[ 10 ] = m22;\n        data[ 11 ] = m23;\n\n        data[ 12 ] = m30;\n        data[ 13 ] = m31;\n        data[ 14 ] = m32;\n        data[ 15 ] = m33;\n\n        this.onChange(this);\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const data = this.data;\n\n        for (let i = 0; i < 16; i++)\n        {\n            dst[ index + i ] = data[i];\n        }\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        const data = this.data;\n\n        for (let i = 0; i < 16; i++)\n        {\n            data[i] = src[ index + i ];\n        }\n\n        this.onChange(this);\n\n        return this;\n    }\n\n    toString (): string\n    {\n        return '[ mat4=' + this.data.join(', ') + ' ]';\n    }\n\n    destroy (): void\n    {\n        this.onChange = NOOP;\n        this.data = null;\n    }\n}\n", "import { Matrix4 } from './Matrix4';\n\n// Generates a orthogonal projection matrix with the given bounds\n\nexport function Mat4Ortho (left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix4 = new Matrix4()): Matrix4\n{\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    return out.set(\n        -2 * lr,\n        0,\n        0,\n        0,\n        0,\n        -2 * bt,\n        0,\n        0,\n        0,\n        0,\n        2 * nf,\n        0,\n        (left + right) * lr,\n        (top + bottom) * bt,\n        (far + near) * nf,\n        1\n    );\n}\n", "import { IVertexAttribPointer } from './IVertexAttribPointer';\nimport { gl } from '../GL';\n\nexport function CreateAttributes (program: WebGLProgram, config: Object): Map<string, IVertexAttribPointer>\n{\n    const attributes = new Map();\n\n    const defaultSettings =\n    {\n        size: 1,\n        type: gl.FLOAT,\n        normalized: false,\n        stride: 0,\n        offset: 0\n    };\n\n    const total = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < total; i++)\n    {\n        const attrib = gl.getActiveAttrib(program, i);\n\n        if (!attrib)\n        {\n            break;\n        }\n\n        const name = attrib.name;\n\n        const index = gl.getAttribLocation(program, name);\n\n        gl.enableVertexAttribArray(index);\n\n        const setting = config.hasOwnProperty(name) ? config[name] : {};\n\n        const {\n\n            size = defaultSettings.size,\n            type = defaultSettings.type,\n            normalized = defaultSettings.normalized,\n            stride = defaultSettings.stride,\n            offset = defaultSettings.offset\n\n        } = setting;\n\n        attributes.set(name, { index, size, type, normalized, stride, offset });\n    }\n\n    return attributes;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteShaders (...shaders: WebGLShader[]): void\n{\n    shaders.forEach(shader =>\n    {\n        gl.deleteShader(shader);\n    });\n}\n", "import { DeleteShaders } from './DeleteShaders';\nimport { gl } from '../GL';\n\nexport function CreateProgram (...shaders: WebGLShader[]): WebGLProgram\n{\n    const program = gl.createProgram();\n\n    shaders.forEach(shader =>\n    {\n        gl.attachShader(program, shader);\n    });\n\n    gl.linkProgram(program);\n\n    const status = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n    if (!status)\n    {\n        const info = gl.getProgramInfoLog(program);\n\n        console.error(`Error linking program: ${info}`);\n\n        gl.deleteProgram(program);\n\n        DeleteShaders(...shaders);\n\n        return null;\n    }\n\n    return program;\n}\n", "import { gl } from '../GL';\n\nexport function CreateShader (source: string, type: GLenum): WebGLShader | null\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, source);\n\n    gl.compileShader(shader);\n\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (!status)\n    {\n        const info = gl.getShaderInfoLog(shader);\n\n        //  Adding line numbers idea borrowed from Gregg Tavares!\n        const sourceLines = source.split('\\n').map((line, index) =>\n        {\n            return `${index}: ${line}`;\n        });\n\n        console.error(`Error compiling shader: ${info}`, sourceLines.join('\\n'));\n\n        gl.deleteShader(shader);\n\n        return null;\n    }\n\n    return shader;\n}\n", "import { gl } from '../GL';\n\nexport type FloatSetter = (v: number) => void;\nexport type F32Setter = (v: Float32List) => void;\nexport type I32Setter = (v: Int32List) => void;\n\nexport function CreateUniformSetter (uniform: WebGLActiveInfo, location: WebGLUniformLocation, isArray: boolean = false): FloatSetter | F32Setter | I32Setter\n{\n    switch (uniform.type)\n    {\n        case gl.INT:\n        case gl.BOOL:\n        {\n            if (isArray)\n            {\n                return (v: Int32List): void =>\n                {\n                    gl.uniform1iv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1i(location, v);\n                };\n            }\n        }\n\n        case gl.INT_VEC2:\n        case gl.BOOL_VEC2:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform2iv(location, v);\n            };\n        }\n\n        case gl.INT_VEC3:\n        case gl.BOOL_VEC3:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform3iv(location, v);\n            };\n        }\n\n        case gl.INT_VEC4:\n        case gl.BOOL_VEC4:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform4iv(location, v);\n            };\n        }\n\n        case gl.FLOAT:\n        {\n            if (isArray)\n            {\n                return (v: Float32List): void =>\n                {\n                    gl.uniform1fv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1f(location, v);\n                };\n            }\n        }\n\n        case gl.FLOAT_VEC2:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform2fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_VEC3:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform3fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_VEC4:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform4fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_MAT2:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix2fv(location, false, v);\n            };\n        }\n\n        case gl.FLOAT_MAT3:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix3fv(location, false, v);\n            };\n        }\n\n        case gl.FLOAT_MAT4:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix4fv(location, false, v);\n            };\n        }\n\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n        {\n            if (uniform.size > 1)\n            {\n                return (v: Int32List): void =>\n                {\n                    gl.uniform1iv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1i(location, v);\n                };\n            }\n        }\n    }\n}\n", "import { CreateUniformSetter } from './CreateUniformSetter';\nimport { gl } from '../GL';\n\nexport function CreateUniforms (program: WebGLProgram): Map<string, Function>\n{\n    const uniforms = new Map();\n\n    const total = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < total; i++)\n    {\n        const uniform = gl.getActiveUniform(program, i);\n\n        let name = uniform.name;\n\n        if (name.startsWith('gl_') || name.startsWith('webgl_'))\n        {\n            //  Skip built-in uniforms\n            continue;\n        }\n\n        const location = gl.getUniformLocation(program, uniform.name);\n\n        if (location)\n        {\n            let isArray = false;\n\n            //  If uniform name has [0] at the end, remove it\n            if (name.substr(-3) === '[0]')\n            {\n                name = name.substr(0, name.length - 3);\n\n                isArray = (uniform.size > 1);\n            }\n\n            uniforms.set(name, CreateUniformSetter(uniform, location, isArray));\n        }\n    }\n\n    return uniforms;\n}\n", "const BYTE                   = 0x1400;\nconst UNSIGNED_BYTE          = 0x1401;\nconst SHORT                  = 0x1402;\nconst UNSIGNED_SHORT         = 0x1403;\nconst INT                    = 0x1404;\nconst UNSIGNED_INT           = 0x1405;\nconst FLOAT                  = 0x1406;\nconst REPEAT                 = 0x2901;  // eslint-disable-line\nconst CLAMP_TO_EDGE          = 0x812F;\nconst MIRRORED_REPEAT        = 0x8370;  // eslint-disable-line\nconst NEAREST                = 0x2600;  // eslint-disable-line\nconst LINEAR                 = 0x2601;\nconst NEAREST_MIPMAP_NEAREST = 0x2700;  // eslint-disable-line\nconst LINEAR_MIPMAP_NEAREST  = 0x2701;  // eslint-disable-line\nconst NEAREST_MIPMAP_LINEAR  = 0x2702;  // eslint-disable-line\nconst LINEAR_MIPMAP_LINEAR   = 0x2703;  // eslint-disable-line\n\nexport {\n    BYTE,\n    UNSIGNED_BYTE,\n    SHORT,\n    UNSIGNED_SHORT,\n    INT,\n    UNSIGNED_INT,\n    FLOAT,\n    REPEAT,\n    CLAMP_TO_EDGE,\n    MIRRORED_REPEAT,\n    NEAREST,\n    LINEAR,\n    NEAREST_MIPMAP_NEAREST,\n    LINEAR_MIPMAP_NEAREST,\n    NEAREST_MIPMAP_LINEAR,\n    LINEAR_MIPMAP_LINEAR\n};\n", "import * as GL_CONST from '../GL_CONST';\n\n// size = 8\n// size = 8, offset = position\n// size = 4, offset = position + tex coord\n// size = 4, offset = position + tex coord + index\n\nexport const DefaultQuadAttributes =\n{\n    aVertexPosition: { size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 0 },\n    aTextureCoord: { size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 8 },\n    aTextureId: { size: 1, type: GL_CONST.FLOAT, normalized: false, offset: 16 },\n    aTintColor: { size: 4, type: GL_CONST.UNSIGNED_BYTE, normalized: true, offset: 20 }\n};\n", "export const DefaultQuadUniforms =\n{\n    uProjectionMatrix: new Float32Array(),\n    uCameraMatrix: new Float32Array(),\n    uTexture: 0\n};\n", "import { gl } from '../GL';\n\nexport function CreateDepthBuffer (framebuffer: WebGLFramebuffer, textureWidth: number, textureHeight: number): WebGLRenderbuffer\n{\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    const depthBuffer = gl.createRenderbuffer();\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\n\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureWidth, textureHeight);\n\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return depthBuffer;\n}\n", "import { gl } from '../GL';\n\nexport function CreateFramebuffer (texture: WebGLTexture, attachment?: GLenum): WebGLFramebuffer\n{\n    if (!attachment)\n    {\n        attachment = gl.COLOR_ATTACHMENT0;\n    }\n\n    const framebuffer = gl.createFramebuffer();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return framebuffer;\n}\n", "export const SINGLE_QUAD_FRAG =\n`#define SHADER_NAME SINGLE_QUAD_FRAG\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\n\nvoid main (void)\n{\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\n}`;\n", "export const SINGLE_QUAD_VERT =\n`#define SHADER_NAME SINGLE_QUAD_VERT\n\nprecision highp float;\n\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute float aTextureId;\nattribute vec4 aTintColor;\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uCameraMatrix;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nvoid main (void)\n{\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vTintColor = aTintColor;\n\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}`;\n", "import { GetHeight, GetResolution, GetWidth } from '../../../config/size/';\n\nimport { CreateAttributes } from './CreateAttributes';\nimport { CreateDepthBuffer } from '../fbo/CreateDepthBuffer';\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\nimport { CreateProgram } from './CreateProgram';\nimport { CreateShader } from './CreateShader';\nimport { CreateUniforms } from './CreateUniforms';\nimport { DefaultQuadAttributes } from './DefaultQuadAttributes';\nimport { DefaultQuadUniforms } from './DefaultQuadUniforms';\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\nimport { DeleteGLTexture } from '../textures/DeleteGLTexture';\nimport { DeleteShaders } from './DeleteShaders';\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { IShaderConfig } from './IShaderConfig';\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\nimport { SINGLE_QUAD_VERT } from '../glsl/SINGLE_QUAD_VERT';\nimport { Texture } from '../../../textures/Texture';\nimport { gl } from '../GL';\n\nexport class Shader implements IShader\n{\n    program: WebGLProgram;\n\n    attributes: Map<string, IVertexAttribPointer>;\n\n    uniforms: Map<string, unknown>;\n\n    uniformSetters: Map<string, Function>;\n\n    texture: Texture;\n\n    framebuffer: WebGLFramebuffer;\n\n    renderToFramebuffer: boolean = false;\n\n    renderToDepthbuffer: boolean = false;\n\n    constructor (config?: IShaderConfig)\n    {\n        if (config)\n        {\n            this.fromConfig(config);\n        }\n    }\n\n    fromConfig (config: IShaderConfig): void\n    {\n        const {\n            attributes = DefaultQuadAttributes,\n            fragmentShader = SINGLE_QUAD_FRAG,\n            height = GetHeight(),\n            renderToFramebuffer = false,\n            renderToDepthbuffer = false,\n            resolution = GetResolution(),\n            vertexShader = SINGLE_QUAD_VERT,\n            width = GetWidth(),\n            uniforms = DefaultQuadUniforms\n        } = config;\n\n        this.create(fragmentShader, vertexShader, uniforms, attributes);\n\n        if (renderToFramebuffer)\n        {\n            this.renderToFramebuffer = true;\n\n            const texture = new Texture(null, width * resolution, height * resolution);\n            const binding = new GLTextureBinding(texture);\n\n            texture.binding = binding;\n\n            binding.framebuffer = CreateFramebuffer(binding.texture);\n\n            if (renderToDepthbuffer)\n            {\n                this.renderToDepthbuffer = true;\n\n                binding.depthbuffer = CreateDepthBuffer(binding.framebuffer, texture.width, texture.height);\n            }\n\n            this.texture = texture;\n            this.framebuffer = binding.framebuffer;\n        }\n    }\n\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\n    {\n        const fragmentShader = CreateShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n        const vertexShader = CreateShader(vertexShaderSource, gl.VERTEX_SHADER);\n\n        if (!fragmentShader || !vertexShader)\n        {\n            return;\n        }\n\n        const program = CreateProgram(fragmentShader, vertexShader);\n\n        if (!program)\n        {\n            return;\n        }\n\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n        gl.useProgram(program);\n\n        this.program = program;\n\n        this.uniformSetters = CreateUniforms(program);\n\n        this.uniforms = new Map();\n\n        //  Copy starting values from the config object to the uniforms map\n        for (const [ key, value ] of Object.entries(uniforms))\n        {\n            this.uniforms.set(key, value);\n        }\n\n        this.attributes = CreateAttributes(program, attribs);\n\n        gl.useProgram(currentProgram);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateUniforms (renderPass: IRenderPass): void\n    {\n        //  Use this to set any extra uniform values prior to the bind\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        this.updateUniforms(renderPass);\n\n        return this.setUniforms(renderPass);\n    }\n\n    setUniform (key: string, value: unknown): void\n    {\n        const uniforms = this.uniforms;\n\n        if (uniforms.has(key))\n        {\n            uniforms.set(key, value);\n\n            const setter = this.uniformSetters.get(key);\n\n            setter(value);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setUniforms (renderPass: IRenderPass): boolean\n    {\n        if (!this.program)\n        {\n            return false;\n        }\n\n        gl.useProgram(this.program);\n\n        const uniforms = this.uniforms;\n\n        for (const [ name, setter ] of this.uniformSetters.entries())\n        {\n            setter(uniforms.get(name));\n        }\n\n        return true;\n    }\n\n    //  stride = vertexByteSize\n    setAttributes (renderPass: IRenderPass): void\n    {\n        if (this.program)\n        {\n            const stride = renderPass.currentVertexBuffer.vertexByteSize;\n\n            this.attributes.forEach(attrib =>\n            {\n                gl.vertexAttribPointer(attrib.index, attrib.size, attrib.type, attrib.normalized, stride, attrib.offset);\n            });\n        }\n    }\n\n    destroy (): void\n    {\n        DeleteShaders(this.program);\n        DeleteGLTexture(this.texture);\n        DeleteFramebuffer(this.framebuffer);\n\n        this.uniforms.clear();\n        this.uniformSetters.clear();\n        this.attributes.clear();\n\n        this.program = null;\n        this.texture = null;\n        this.framebuffer = null;\n    }\n}\n", "import { DefaultQuadAttributes } from './DefaultQuadAttributes';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { IShaderConfig } from './IShaderConfig';\nimport { Shader } from './Shader';\n\nexport class QuadShader extends Shader implements IShader\n{\n    constructor (config: IShaderConfig = {})\n    {\n        const shaderConfig = config;\n\n        shaderConfig.attributes = (!shaderConfig.attributes) ? DefaultQuadAttributes : shaderConfig.attributes;\n\n        super(shaderConfig);\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        const uniforms = this.uniforms;\n\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\n\n        return super.bind(renderPass);\n    }\n}\n", "export const MULTI_QUAD_FRAG =\n`#define SHADER_NAME MULTI_QUAD_FRAG\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture[%count%];\n\nvoid main (void)\n{\n    vec4 color;\n\n    %forloop%\n\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\n}`;\n", "import { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShaderConfig } from './IShaderConfig';\nimport { MULTI_QUAD_FRAG } from '../glsl/MULTI_QUAD_FRAG';\nimport { QuadShader } from './QuadShader';\n\nexport class MultiTextureQuadShader extends QuadShader\n{\n    constructor (config: IShaderConfig = {})\n    {\n        if (!config.fragmentShader)\n        {\n            config.fragmentShader = MULTI_QUAD_FRAG;\n        }\n\n        super(config);\n    }\n\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\n    {\n        const maxTextures = GetMaxTextures();\n\n        let src = '';\n\n        for (let i = 1; i < maxTextures; i++)\n        {\n            if (i > 1)\n            {\n                src += '\\n\\telse ';\n            }\n\n            if (i < maxTextures - 1)\n            {\n                src += `if (vTextureId < ${i}.5)`;\n            }\n\n            src += '\\n\\t{';\n            src += `\\n\\t\\tcolor = texture2D(uTexture[${i}], vTextureCoord);`;\n            src += '\\n\\t}';\n        }\n\n        fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\n        fragmentShaderSource = fragmentShaderSource.replace(/%forloop%/gi, src);\n\n        super.create(fragmentShaderSource, vertexShaderSource, uniforms, attribs);\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        this.uniforms.set('uTexture', renderPass.textureIndex);\n\n        return super.bind(renderPass);\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\n\nexport function SetDefaultBlendMode (renderPass: IRenderPass, enable: boolean, sfactor?: number, dfactor?: number): void\n{\n    const entry = { enable, sfactor, dfactor };\n\n    //  The default entry always goes into index zero\n    renderPass.blendModeStack[0] = entry;\n\n    renderPass.currentBlendMode = entry;\n    renderPass.defaultBlendMode = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function SetDefaultFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer = null, viewport?: Rectangle): void\n{\n    const entry = { framebuffer, viewport };\n\n    //  The default entry always goes into index zero\n    renderPass.framebufferStack[0] = entry;\n\n    renderPass.currentFramebuffer = entry;\n    renderPass.defaultFramebuffer = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IShader } from '../shaders/IShader';\n\nexport function SetDefaultShader (renderPass: IRenderPass, shader: IShader, textureID?: number): void\n{\n    const entry = { shader, textureID };\n\n    //  The default entry always goes into index zero\n    renderPass.shaderStack[0] = entry;\n\n    renderPass.currentShader = entry;\n    renderPass.defaultShader = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\n\nexport function SetDefaultVertexBuffer (renderPass: IRenderPass, buffer: IVertexBuffer): void\n{\n    //  The default entry always goes into index zero\n    renderPass.vertexBufferStack[0] = buffer;\n\n    renderPass.currentVertexBuffer = buffer;\n    renderPass.defaultVertexBuffer = buffer;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function SetDefaultViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\n{\n    const entry = new Rectangle(x, y, width, height);\n\n    //  The default entry always goes into index zero\n    renderPass.viewportStack[0] = entry;\n\n    renderPass.currentViewport = entry;\n    renderPass.defaultViewport = entry;\n}\n", "export class Vec3\n{\n    x: number;\n    y: number;\n    z: number;\n\n    constructor (x: number = 0, y: number = 0, z: number = 0)\n    {\n        this.set(x, y, z);\n    }\n\n    set (x: number = 0, y: number = 0, z: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const { x, y, z } = this;\n\n        dst[ index ] = x;\n        dst[ index + 1 ] = y;\n        dst[ index + 2 ] = z;\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        return this.set(\n            src[ index ],\n            src[ index + 1 ],\n            src[ index + 2 ]\n        );\n    }\n\n    toString (): string\n    {\n        const { x, y, z } = this;\n\n        return `{ x=${x}, y=${y}, z=${z} }`;\n    }\n}\n", "import { Matrix4 } from './Matrix4';\n\nexport function Mat4Identity (matrix: Matrix4 = new Matrix4()): Matrix4\n{\n    return matrix.set(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    );\n}\n", "//  A Matrix2D contains six elements in a short-form of the 3x3 Matrix, with the last column ignored.\n\n//  |----|----|----|\n//  | a  | b  | 0  |\n//  |----|----|----|\n//  | c  | d  | 0  |\n//  |----|----|----|\n//  | tx | ty | 1  |\n//  |----|----|----|\n\nexport class Matrix2D\n{\n    a: number; // element 0\n    b: number; // element 1\n    c: number; // element 2\n    d: number; // element 3\n    tx: number; // element 4\n    ty: number; // element 5\n\n    /**\n     * Creates an instance of Matrix2D.\n     *\n     * @param {number} [a=1] - X scale.\n     * @param {number} [b=0] - X skew.\n     * @param {number} [c=0] - Y skew.\n     * @param {number} [d=1] - Y scale.\n     * @param {number} [tx=0] - X translation\n     * @param {number} [ty=0] - Y translation\n     * @memberof Matrix2D\n     */\n    constructor (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0)\n    {\n        this.set(a, b, c, d, tx, ty);\n    }\n\n    set (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    identity (): this\n    {\n        return this.set();\n    }\n\n    toArray (): number[]\n    {\n        const  { a, b, c, d, tx, ty } = this;\n\n        return [ a, b, c, d, tx, ty ];\n    }\n\n    fromArray (src: number[]): Matrix2D\n    {\n        return this.set(src[0], src[1], src[2], src[3], src[4], src[5]);\n    }\n}\n", "import { IVec2Like } from './IVec2Like';\nimport { NOOP } from '../../utils/NOOP';\n\nexport type Vec2CallbackType = (vec2: Vec2Callback) => void;\n\nexport class Vec2Callback implements IVec2Like\n{\n    private _x: number;\n    private _y: number;\n\n    onChange: Vec2CallbackType;\n\n    constructor (onChange: Vec2CallbackType, x: number = 0, y: number = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.onChange = onChange;\n    }\n\n    destroy (): void\n    {\n        this.onChange = NOOP;\n    }\n\n    set (x: number = 0, y: number = 0): this\n    {\n        this._x = x;\n        this._y = y;\n\n        if (this.onChange)\n        {\n            this.onChange(this);\n        }\n\n        return this;\n    }\n\n    get x (): number\n    {\n        return this._x;\n    }\n\n    set x (value: number)\n    {\n        const prev = this._x;\n\n        this._x = value;\n\n        if (prev !== value)\n        {\n            this.onChange(this);\n        }\n    }\n\n    get y (): number\n    {\n        return this._y;\n    }\n\n    set y (value: number)\n    {\n        const prev = this._y;\n\n        this._y = value;\n\n        if (prev !== value)\n        {\n            this.onChange(this);\n        }\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const { x, y } = this;\n\n        dst[ index ] = x;\n        dst[ index + 1 ] = y;\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        return this.set(\n            src[ index ],\n            src[ index + 1 ]\n        );\n    }\n\n    toString (): string\n    {\n        const { x, y } = this;\n\n        return `{ x=${x}, y=${y} }`;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\n *\n * @function Phaser.Math.Angle.Between\n * @since 3.0.0\n *\n * @param {number} x1 - The x coordinate of the first point.\n * @param {number} y1 - The y coordinate of the first point.\n * @param {number} x2 - The x coordinate of the second point.\n * @param {number} y2 - The y coordinate of the second point.\n *\n * @return {number} The angle in radians.\n */\nexport function AngleBetween (x1: number, y1: number, x2: number, y2: number): number\n{\n    return Math.atan2(y2 - y1, x2 - x1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\n *\n * The difference between this method and {@link Phaser.Math.Angle.Between} is that this assumes the y coordinate\n * travels down the screen.\n *\n * @function Phaser.Math.Angle.BetweenY\n * @since 3.0.0\n *\n * @param {number} x1 - The x coordinate of the first point.\n * @param {number} y1 - The y coordinate of the first point.\n * @param {number} x2 - The x coordinate of the second point.\n * @param {number} y2 - The y coordinate of the second point.\n *\n * @return {number} The angle in radians.\n */\nexport function AngleBetweenY (x1: number, y1: number, x2: number, y2: number): number\n{\n    return Math.atan2(x2 - x1, y2 - y1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nexport const MATH_CONST = {\n\n    /**\n     * The value of PI * 2.\n     *\n     * @name Phaser.Math.PI2\n     * @type {number}\n     * @since 3.0.0\n     */\n    PI2: Math.PI * 2,\n\n    /**\n     * The value of PI * 2.\n     *\n     * @name Phaser.Math.HALF_PI\n     * @type {number}\n     * @since 3.0.0\n     */\n    HALF_PI: Math.PI * 0.5,\n\n    /**\n     * An epsilon value (1.0e-6)\n     *\n     * @name Phaser.Math.EPSILON\n     * @type {number}\n     * @since 3.0.0\n     */\n    EPSILON: 1.0e-6,\n\n    /**\n     * For converting degrees to radians (PI / 180)\n     *\n     * @name Phaser.Math.DEG_TO_RAD\n     * @type {number}\n     * @since 3.0.0\n     */\n    DEG_TO_RAD: Math.PI / 180,\n\n    /**\n     * For converting radians to degrees (180 / PI)\n     *\n     * @name Phaser.Math.RAD_TO_DEG\n     * @type {number}\n     * @since 3.0.0\n     */\n    RAD_TO_DEG: 180 / Math.PI,\n\n    /**\n     * The minimum safe integer this browser supports.\n     * We use a const for backward compatibility with Internet Explorer.\n     *\n     * @name Phaser.Math.MIN_SAFE_INTEGER\n     * @type {number}\n     * @since 3.21.0\n     */\n    MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -9007199254740991,\n\n    /**\n     * The maximum safe integer this browser supports.\n     * We use a const for backward compatibility with Internet Explorer.\n     *\n     * @name Phaser.Math.MAX_SAFE_INTEGER\n     * @type {number}\n     * @since 3.21.0\n     */\n    MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991\n\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST as CONST } from '../const';\n\n/**\n * Takes an angle in Phasers default clockwise format and converts it so that\n * 0 is North, 90 is West, 180 is South and 270 is East,\n * therefore running counter-clockwise instead of clockwise.\n * \n * You can pass in the angle from a Game Object using:\n * \n * ```javascript\n * var converted = CounterClockwise(gameobject.rotation);\n * ```\n * \n * All values for this function are in radians.\n *\n * @function Phaser.Math.Angle.CounterClockwise\n * @since 3.16.0\n *\n * @param {number} angle - The angle to convert, in radians.\n *\n * @return {number} The converted angle, in radians.\n */\nexport function CounterClockwise (angle: number): number\n{\n    if (angle > Math.PI)\n    {\n        angle -= CONST.PI2;\n    }\n\n    return Math.abs((((angle + CONST.HALF_PI) % CONST.PI2) - CONST.PI2) % CONST.PI2);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from '../const';\n\n/**\n * Normalize an angle to the [0, 2pi] range.\n *\n * @function Phaser.Math.Angle.Normalize\n * @since 3.0.0\n *\n * @param {number} angle - The angle to normalize, in radians.\n *\n * @return {number} The normalized angle, in radians.\n */\nexport function NormalizeAngle (angle: number): number\n{\n    angle = angle % MATH_CONST.PI2;\n\n    if (angle >= 0)\n    {\n        return angle;\n    }\n    else\n    {\n        return angle + MATH_CONST.PI2;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { NormalizeAngle } from './NormalizeAngle';\n\n/**\n * Reverse the given angle.\n *\n * @function Phaser.Math.Angle.Reverse\n * @since 3.0.0\n *\n * @param {number} angle - The angle to reverse, in radians.\n *\n * @return {number} The reversed angle, in radians.\n */\nexport function ReverseAngle (angle: number): number\n{\n    return NormalizeAngle(angle + Math.PI);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from '../const';\n\n/**\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\n *\n * @function Phaser.Math.Angle.RotateTo\n * @since 3.0.0\n *\n * @param {number} currentAngle - The current angle, in radians.\n * @param {number} targetAngle - The target angle to rotate to, in radians.\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\n *\n * @return {number} The adjusted angle.\n */\nexport function RotateAngleTo (currentAngle: number, targetAngle: number, lerp: number = 0.05): number\n{\n    if (currentAngle === targetAngle)\n    {\n        return currentAngle;\n    }\n\n    if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= (MATH_CONST.PI2 - lerp))\n    {\n        currentAngle = targetAngle;\n    }\n    else\n    {\n        if (Math.abs(targetAngle - currentAngle) > Math.PI)\n        {\n            if (targetAngle < currentAngle)\n            {\n                targetAngle += MATH_CONST.PI2;\n            }\n            else\n            {\n                targetAngle -= MATH_CONST.PI2;\n            }\n        }\n\n        if (targetAngle > currentAngle)\n        {\n            currentAngle += lerp;\n        }\n        else if (targetAngle < currentAngle)\n        {\n            currentAngle -= lerp;\n        }\n    }\n\n    return currentAngle;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Gets the shortest angle between `angle1` and `angle2`.\n *\n * Both angles must be in the range -180 to 180, which is the same clamped\n * range that `sprite.angle` uses, so you can pass in two sprite angles to\n * this method and get the shortest angle back between the two of them.\n *\n * The angle returned will be in the same range. If the returned angle is\n * greater than 0 then it's a counter-clockwise rotation, if < 0 then it's\n * a clockwise rotation.\n *\n * TODO: Wrap the angles in this function?\n *\n * @function Phaser.Math.Angle.ShortestBetween\n * @since 3.0.0\n *\n * @param {number} angle1 - The first angle in the range -180 to 180.\n * @param {number} angle2 - The second angle in the range -180 to 180.\n *\n * @return {number} The shortest angle, in degrees. If greater than zero it's a counter-clockwise rotation.\n */\nexport function ShortestAngleBetween (angle1: number, angle2: number): number\n{\n    const difference = angle2 - angle1;\n\n    if (difference === 0)\n    {\n        return 0;\n    }\n\n    const times = Math.floor((difference - (-180)) / 360);\n\n    return difference - (times * 360);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Wrap the given `value` between `min` and `max.\n *\n * @function Phaser.Math.Wrap\n * @since 3.0.0\n *\n * @param {number} value - The value to wrap.\n * @param {number} min - The minimum value.\n * @param {number} max - The maximum value.\n *\n * @return {number} The wrapped value.\n */\nexport function Wrap (value: number, min: number, max: number): number\n{\n    const range = max - min;\n\n    return (min + ((((value - min) % range) + range) % range));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Wrap } from '../Wrap';\n\n/**\n * Wrap an angle.\n *\n * Wraps the angle to a value in the range of -PI to PI.\n *\n * @function Phaser.Math.Angle.Wrap\n * @since 3.0.0\n *\n * @param {number} angle - The angle to wrap, in radians.\n *\n * @return {number} The wrapped angle, in radians.\n */\nexport function WrapAngle (angle: number): number\n{\n    return Wrap(angle, -Math.PI, Math.PI);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Wrap } from '../Wrap';\n\n/**\n * Wrap an angle in degrees.\n *\n * Wraps the angle to a value in the range of -180 to 180.\n *\n * @function Phaser.Math.Angle.WrapDegrees\n * @since 3.0.0\n *\n * @param {number} angle - The angle to wrap, in degrees.\n *\n * @return {number} The wrapped angle, in degrees.\n */\nexport function WrapAngleDegrees (angle: number): number\n{\n    return Wrap(angle, -180, 180);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { AngleBetween } from './AngleBetween';\nimport { AngleBetweenY } from './AngleBetweenY';\nimport { CounterClockwise } from './CounterClockwise';\nimport { NormalizeAngle } from './NormalizeAngle';\nimport { ReverseAngle } from './ReverseAngle';\nimport { RotateAngleTo } from './RotateAngleTo';\nimport { ShortestAngleBetween } from './ShortestAngleBetween';\nimport { WrapAngle } from './WrapAngle';\nimport { WrapAngleDegrees } from './WrapAngleDegrees';\n\n/**\n * @namespace Phaser.Math.Angle\n */\n\nexport {\n    AngleBetween,\n    AngleBetweenY,\n    CounterClockwise,\n    NormalizeAngle,\n    ReverseAngle,\n    RotateAngleTo,\n    ShortestAngleBetween,\n    WrapAngle,\n    WrapAngleDegrees\n};\n", "import { GameInstance } from '../GameInstance';\nimport { IRenderer } from '../renderer/IRenderer';\nimport { IStaticCamera } from './IStaticCamera';\nimport { IStaticWorld } from '../world/IStaticWorld';\nimport { Mat4Identity } from '../math/mat4';\nimport { Matrix2D } from '../math/mat2d/Matrix2D';\nimport { Matrix4 } from '../math/mat4/Matrix4';\nimport { Rectangle } from '../geom/rectangle/Rectangle';\n\nexport class StaticCamera implements IStaticCamera\n{\n    world: IStaticWorld;\n    matrix: Matrix4;\n    renderer: IRenderer;\n    type: string;\n\n    width: number;\n    height: number;\n    bounds: Rectangle;\n\n    dirtyRender: boolean;\n    worldTransform: Matrix2D;\n\n    constructor ()\n    {\n        this.type = 'StaticCamera';\n\n        this.dirtyRender = true;\n\n        const game = GameInstance.get();\n\n        this.renderer = game.renderer;\n\n        this.matrix = Mat4Identity();\n\n        this.bounds = new Rectangle();\n\n        this.worldTransform = new Matrix2D();\n\n        this.reset();\n    }\n\n    reset (): void\n    {\n        const renderer = this.renderer;\n\n        if (renderer)\n        {\n            const width = renderer.width;\n            const height = renderer.height;\n\n            this.width = width;\n            this.height = height;\n        }\n\n        this.bounds.set(0, 0, this.width, this.height);\n    }\n\n    destroy (): void\n    {\n        this.world = null;\n        this.worldTransform = null;\n        this.renderer = null;\n        this.matrix = null;\n        this.bounds = null;\n    }\n}\n", "import { CreateTempTextures } from './CreateTempTextures';\nimport { GetBatchSize } from '../../../config/batchsize/GetBatchSize';\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\nimport { IShader } from '../shaders/IShader';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { IWebGLRenderer } from '../IWebGLRenderer';\nimport { IndexedVertexBuffer } from '../buffers/IndexedVertexBuffer';\nimport { Mat4Ortho } from '../../../math/mat4/Mat4Ortho';\nimport { Matrix4 } from '../../../math/mat4/Matrix4';\nimport { MultiTextureQuadShader } from '../shaders';\nimport { QuadShader } from '../shaders/QuadShader';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\nimport { SetDefaultBlendMode } from './SetDefaultBlendMode';\nimport { SetDefaultFramebuffer } from './SetDefaultFramebuffer';\nimport { SetDefaultShader } from './SetDefaultShader';\nimport { SetDefaultVertexBuffer } from './SetDefaultVertexBuffer';\nimport { SetDefaultViewport } from './SetDefaultViewport';\nimport { StaticCamera } from '../../../camera';\n\nexport type FramebufferStackEntry = {\n    framebuffer: WebGLFramebuffer;\n    viewport?: Rectangle;\n};\n\nexport type ShaderStackEntry = {\n    shader: IShader;\n    textureID?: number;\n};\n\nexport type BlendModeStackEntry = {\n    enable: boolean;\n    sfactor?: number;\n    dfactor?: number;\n};\n\nexport class RenderPass implements IRenderPass\n{\n    renderer: IWebGLRenderer;\n\n    projectionMatrix: Matrix4;\n    cameraMatrix: Matrix4;\n\n    count: number = 0;\n    prevCount: number = 0;\n    flushTotal: number = 0;\n\n    //  The maximum number of combined image units the GPU supports\n    //  According to the WebGL spec the minimum is 8\n    maxTextures: number = 0;\n    currentActiveTexture: number = 0;\n    startActiveTexture: number = 0;\n    tempTextures: WebGLTexture[] = [];\n    textureIndex: number[] = [];\n\n    //  FBO\n    framebufferStack: FramebufferStackEntry[] = [];\n    currentFramebuffer: FramebufferStackEntry = null;\n    defaultFramebuffer: FramebufferStackEntry = null;\n\n    //  VBO\n    vertexBufferStack: IVertexBuffer[] = [];\n    currentVertexBuffer: IVertexBuffer = null;\n    defaultVertexBuffer: IVertexBuffer = null;\n\n    //  Shader\n    shaderStack: ShaderStackEntry[] = [];\n    currentShader: ShaderStackEntry = null;\n    defaultShader: ShaderStackEntry = null;\n\n    //  Viewport\n    viewportStack: Rectangle[] = [];\n    currentViewport: Rectangle = null;\n    defaultViewport: Rectangle = null;\n\n    //  Blend Mode\n    blendModeStack: BlendModeStackEntry[] = [];\n    currentBlendMode: BlendModeStackEntry = null;\n    defaultBlendMode: BlendModeStackEntry = null;\n\n    //  Single Texture Quad Shader + Camera\n    quadShader: IShader;\n    quadBuffer: IVertexBuffer;\n    quadCamera: IBaseCamera;\n\n    //  Current 2D Camera\n    current2DCamera: IBaseCamera;\n\n    constructor (renderer: IWebGLRenderer)\n    {\n        this.renderer = renderer;\n\n        this.projectionMatrix = new Matrix4();\n\n        this.reset();\n    }\n\n    //  TODO - Call when context is lost and restored\n    reset (): void\n    {\n        const gl = this.renderer.gl;\n\n        const indexLayout = [ 0, 1, 2, 2, 3, 0 ];\n\n        //  TODO - If already created, delete shaders / buffers first (i.e. during context loss)\n\n        //  Default QuadShader (for FBO drawing)\n\n        this.quadShader = new QuadShader();\n        this.quadBuffer = new IndexedVertexBuffer({ isDynamic: false, indexLayout });\n        this.quadCamera = new StaticCamera();\n\n        //  Default settings\n\n        CreateTempTextures(this);\n\n        SetDefaultFramebuffer(this);\n        SetDefaultBlendMode(this, true, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        SetDefaultVertexBuffer(this, new IndexedVertexBuffer({ batchSize: GetBatchSize(), indexLayout }));\n        SetDefaultShader(this, new MultiTextureQuadShader());\n    }\n\n    resize (width: number, height: number): void\n    {\n        //  TODO - -1 to 1?\n        Mat4Ortho(0, width, height, 0, -1000, 1000, this.projectionMatrix);\n\n        this.quadCamera.reset();\n\n        SetDefaultViewport(this, 0, 0, width, height);\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { ShaderStackEntry } from '../shaders/ShaderStackEntry';\n\nexport function BindShader (renderPass: IRenderPass, entry?: ShaderStackEntry): void\n{\n    if (!entry)\n    {\n        entry = renderPass.currentShader;\n    }\n\n    const success = entry.shader.bind(renderPass, entry.textureID);\n\n    if (success)\n    {\n        entry.shader.setAttributes(renderPass);\n    }\n}\n", "import { BindShader } from './BindShader';\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Begin (renderPass: IRenderPass, camera2D: IBaseCamera): void\n{\n    renderPass.current2DCamera = camera2D;\n    renderPass.cameraMatrix = camera2D.matrix;\n\n    BindShader(renderPass);\n}\n", "import { BlendModeStackEntry } from './RenderPass';\nimport { IRenderPass } from './IRenderPass';\nimport { gl } from '../GL';\n\nexport function BindBlendMode (renderPass: IRenderPass, entry?: BlendModeStackEntry): void\n{\n    if (!entry)\n    {\n        entry = renderPass.currentBlendMode;\n    }\n\n    //  TODO - Only set if different\n    if (entry.enable)\n    {\n        gl.enable(gl.BLEND);\n        gl.blendFunc(entry.sfactor, entry.dfactor);\n    }\n    else\n    {\n        gl.disable(gl.BLEND);\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { gl } from '../GL';\n\nexport function BindVertexBuffer (renderPass: IRenderPass, buffer?: IVertexBuffer): void\n{\n    if (!buffer)\n    {\n        buffer = renderPass.currentVertexBuffer;\n    }\n\n    //  TODO - Only bind if different\n    const indexBuffer = (buffer.indexed) ? buffer.indexBuffer : null;\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer);\n}\n", "import { BufferEntry } from '../draw/BufferEntry';\nimport { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\n\nexport function GetVertexBufferEntry (renderPass: IRenderPass, addToCount: number = 0): BufferEntry\n{\n    const buffer = renderPass.currentVertexBuffer;\n\n    //  If batch cannot take the size of this entry, flush it first\n    if (renderPass.count + addToCount >= buffer.batchSize)\n    {\n        Flush(renderPass);\n    }\n\n    const offset = (buffer.indexed) ? renderPass.count * buffer.entryElementSize : renderPass.count * buffer.vertexElementSize;\n\n    renderPass.count += addToCount;\n\n    return {\n        buffer,\n        F32: buffer.vertexViewF32,\n        U32: buffer.vertexViewU32,\n        offset\n    };\n}\n", "import { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { gl } from '../GL';\n\n//  request the next available texture and bind it\n//  returns the new ID\nexport function SetTexture (renderPass: IRenderPass, texture: ITexture): number\n{\n    const binding = texture.binding;\n    const currentActiveTexture = renderPass.currentActiveTexture;\n\n    if (binding.indexCounter < renderPass.startActiveTexture)\n    {\n        binding.indexCounter = renderPass.startActiveTexture;\n\n        if (currentActiveTexture < renderPass.maxTextures)\n        {\n            binding.setIndex(currentActiveTexture);\n\n            gl.activeTexture(gl.TEXTURE0 + currentActiveTexture);\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n            renderPass.currentActiveTexture++;\n        }\n        else\n        {\n            //  We're out of textures, so flush the batch and reset back to 1\n            Flush(renderPass);\n\n            renderPass.startActiveTexture++;\n\n            binding.indexCounter = renderPass.startActiveTexture;\n\n            binding.setIndex(1);\n\n            gl.activeTexture(gl.TEXTURE1);\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n            renderPass.currentActiveTexture = 2;\n        }\n    }\n\n    return binding.index;\n}\n", "import { BindBlendMode } from './BindBlendMode';\nimport { BindFramebuffer } from './BindFramebuffer';\nimport { BindVertexBuffer } from './BindVertexBuffer';\nimport { BindViewport } from './BindViewport';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Start (renderPass: IRenderPass): void\n{\n    renderPass.current2DCamera = renderPass.quadCamera;\n    renderPass.cameraMatrix = renderPass.quadCamera.matrix;\n\n    renderPass.count = 0;\n    renderPass.flushTotal = 0;\n\n    BindFramebuffer(renderPass, false, renderPass.defaultFramebuffer);\n    BindBlendMode(renderPass, renderPass.defaultBlendMode);\n    BindViewport(renderPass, renderPass.defaultViewport);\n    BindVertexBuffer(renderPass, renderPass.defaultVertexBuffer);\n}\n", "import { WebGLRenderer } from './WebGLRenderer';\n\nexport let instance: WebGLRenderer;\n\nexport const WebGLRendererInstance =\n{\n    get: (): WebGLRenderer =>\n    {\n        return instance;\n    },\n\n    set: (renderer: WebGLRenderer | undefined): void =>\n    {\n        instance = renderer;\n    }\n};\n", "import { GetHeight, GetResolution, GetWidth } from '../../config/size/';\n\nimport { End } from './renderpass/End';\nimport { GL } from './GL';\nimport { GetBackgroundColor } from '../../config/backgroundcolor/GetBackgroundColor';\nimport { GetRGBArray } from './colors/GetRGBArray';\nimport { GetWebGLContext } from '../../config/webglcontext/GetWebGLContext';\nimport { IRenderPass } from './renderpass/IRenderPass';\nimport { ISceneRenderData } from '../../scenes/ISceneRenderData';\nimport { ProcessBindingQueue } from './renderpass/ProcessBindingQueue';\nimport { RenderPass } from './renderpass/RenderPass';\nimport { Start } from './renderpass';\nimport { WebGLRendererInstance } from './WebGLRendererInstance';\n\nexport class WebGLRenderer\n{\n    canvas: HTMLCanvasElement;\n    gl: WebGLRenderingContext;\n\n    renderPass: IRenderPass;\n\n    clearColor = [ 0, 0, 0, 1 ];\n\n    width: number;\n    height: number;\n    resolution: number;\n\n    clearBeforeRender: boolean = true;\n    optimizeRedraw: boolean = false;\n    autoResize: boolean = true;\n\n    contextLost: boolean = false;\n\n    constructor ()\n    {\n        this.width = GetWidth();\n        this.height = GetHeight();\n        this.resolution = GetResolution();\n\n        this.setBackgroundColor(GetBackgroundColor());\n\n        const canvas = document.createElement('canvas');\n\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\n\n        this.canvas = canvas;\n\n        this.initContext();\n\n        //  By this stage the context is available\n        WebGLRendererInstance.set(this);\n\n        this.renderPass = new RenderPass(this);\n\n        this.resize(this.width, this.height, this.resolution);\n    }\n\n    initContext (): void\n    {\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\n\n        GL.set(gl);\n\n        this.gl = gl;\n\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n    }\n\n    resize (width: number, height: number, resolution: number = 1): void\n    {\n        const calcWidth = width * resolution;\n        const calcHeight = height * resolution;\n\n        this.width = calcWidth;\n        this.height = calcHeight;\n        this.resolution = resolution;\n\n        const canvas = this.canvas;\n\n        canvas.width = calcWidth;\n        canvas.height = calcHeight;\n\n        if (this.autoResize)\n        {\n            canvas.style.width = width.toString() + 'px';\n            canvas.style.height = height.toString() + 'px';\n        }\n\n        this.renderPass.resize(calcWidth, calcHeight);\n    }\n\n    onContextLost (event: Event): void\n    {\n        event.preventDefault();\n\n        this.contextLost = true;\n    }\n\n    onContextRestored (): void\n    {\n        this.contextLost = false;\n\n        this.initContext();\n    }\n\n    setBackgroundColor (color: number): this\n    {\n        GetRGBArray(color, this.clearColor);\n\n        return this;\n    }\n\n    //  TODO - Remove?\n    reset (): void\n    {\n        // this.renderPass.reset();\n    }\n\n    render (renderData: ISceneRenderData): void\n    {\n        if (this.contextLost)\n        {\n            return;\n        }\n\n        const gl = this.gl;\n        const renderPass = this.renderPass;\n\n        //  This is only here because if we don't do _something_ with the context, GL Spector can't see it.\n        //  Technically, we could move it below the dirty bail-out below.\n        // this.reset();\n\n        ProcessBindingQueue();\n\n        //  Cache 1 - Nothing dirty? Display the previous frame\n        if (this.optimizeRedraw && renderData.numDirtyFrames === 0 && renderData.numDirtyCameras === 0)\n        {\n            return;\n        }\n\n        if (this.clearBeforeRender)\n        {\n            const cls = this.clearColor;\n\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        const worlds = renderData.worldData;\n\n        Start(renderPass);\n\n        for (let i: number = 0; i < worlds.length; i++)\n        {\n            const { world } = worlds[i];\n\n            world.renderGL(renderPass);\n\n            //  Stats sweep\n\n            world.postRenderGL(renderPass);\n        }\n\n        End(renderPass);\n\n        // eslint-disable-next-line no-debugger\n        // debugger;\n    }\n\n    destroy (): void\n    {\n        WebGLRendererInstance.set(undefined);\n    }\n}\n", "import { SetRenderer } from '../renderer/SetRenderer';\nimport { WebGLRenderer } from '../../renderer/webgl1/WebGLRenderer';\n\nexport function WebGL (): () => void\n{\n    return (): void =>\n    {\n        SetRenderer(WebGLRenderer);\n    };\n}\n", "import { ITransformComponent } from './ITransformComponent';\nimport { Vertices } from './Vertices';\n\nexport function GetVertices (transform: ITransformComponent): Vertices\n{\n    const { a, b, c, d, tx, ty } = transform.world;\n    const { x, y, right, bottom } = transform.extent;\n\n    const x0 = (x * a) + (y * c) + tx;\n    const y0 = (x * b) + (y * d) + ty;\n\n    const x1 = (x * a) + (bottom * c) + tx;\n    const y1 = (x * b) + (bottom * d) + ty;\n\n    const x2 = (right * a) + (bottom * c) + tx;\n    const y2 = (right * b) + (bottom * d) + ty;\n\n    const x3 = (right * a) + (y * c) + tx;\n    const y3 = (right * b) + (y * d) + ty;\n\n    return { x0, y0, x1, y1, x2, y2, x3, y3 };\n}\n", "import { DIRTY_CONST } from '../../gameobjects/DIRTY_CONST';\nimport { GetVertices } from '../transform/GetVertices';\nimport { IBoundsComponent } from './IBoundsComponent';\nimport { IGameObject } from '../../gameobjects/IGameObject';\nimport { Rectangle } from '../../geom/rectangle/Rectangle';\n\nexport class BoundsComponent implements IBoundsComponent\n{\n    entity: IGameObject;\n\n    //  The bounds of the entity calculated in world space\n    private area: Rectangle;\n\n    fixed: boolean = false;\n\n    includeChildren: boolean = true;\n\n    visibleOnly: boolean = true;\n\n    constructor (entity: IGameObject)\n    {\n        this.entity = entity;\n\n        this.area = new Rectangle();\n    }\n\n    set (x: number, y: number, width: number, height: number): void\n    {\n        this.area.set(x, y, width, height);\n    }\n\n    get (): Rectangle\n    {\n        if (this.entity.isDirty(DIRTY_CONST.BOUNDS) && !this.fixed)\n        {\n            this.update();\n        }\n\n        return this.area;\n    }\n\n    updateLocal (): Rectangle\n    {\n        const { x0, y0, x1, y1, x2, y2, x3, y3 } = GetVertices(this.entity.transform);\n\n        const x = Math.min(x0, x1, x2, x3);\n        const y = Math.min(y0, y1, y2, y3);\n        const right = Math.max(x0, x1, x2, x3);\n        const bottom = Math.max(y0, y1, y2, y3);\n\n        return this.area.set(\n            x,\n            y,\n            right - x,\n            bottom - y\n        );\n    }\n\n    update (): Rectangle\n    {\n        //  First we get the bounds for this Game Object\n        const bounds = this.updateLocal();\n\n        this.entity.clearDirty(DIRTY_CONST.BOUNDS);\n\n        if (!this.includeChildren || !this.entity.numChildren)\n        {\n            return bounds;\n        }\n\n        const visibleOnly = this.visibleOnly;\n        const children = this.entity.children;\n\n        let x = bounds.x;\n        let y = bounds.y;\n        let right = bounds.right;\n        let bottom = bounds.bottom;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            if (!child || (visibleOnly && !child.visible))\n            {\n                continue;\n            }\n\n            const childBounds = child.bounds.get();\n\n            if (childBounds.x < x)\n            {\n                x = childBounds.x;\n            }\n\n            if (childBounds.y < y)\n            {\n                y = childBounds.y;\n            }\n\n            if (childBounds.right > right)\n            {\n                right = childBounds.right;\n            }\n\n            if (childBounds.bottom > bottom)\n            {\n                bottom = childBounds.bottom;\n            }\n        }\n\n        return bounds.set(\n            x,\n            y,\n            right - x,\n            bottom - y\n        );\n    }\n\n    destroy (): void\n    {\n        this.entity = null;\n        this.area = null;\n    }\n}\n", "import { IGameObject } from '../../gameobjects/IGameObject';\nimport { IInputComponent } from './IInputComponent';\nimport { IInteractiveArea } from '../../input/IInteractiveArea';\n\nexport class InputComponent implements IInputComponent\n{\n    entity: IGameObject;\n    enabled: boolean = false;\n    enabledChildren: boolean = true;\n    hitArea: IInteractiveArea;\n\n    constructor (entity: IGameObject)\n    {\n        this.entity = entity;\n    }\n\n    destroy (): void\n    {\n        this.entity = null;\n        this.hitArea = null;\n    }\n}\n", "import { Vertex } from '../../../components/Vertex';\n\nexport function PackColors (vertices: Vertex[]): void\n{\n    vertices.forEach(vertex =>\n    {\n        vertex.packColor();\n    });\n}\n", "import { GetVertices } from './GetVertices';\nimport { IGameObject } from '../../gameobjects/IGameObject';\n\nexport function UpdateVertices <T extends IGameObject> (gameObject: T): T\n{\n    const vertices = gameObject.vertices;\n\n    const { x0, y0, x1, y1, x2, y2, x3, y3 } = GetVertices(gameObject.transform);\n\n    vertices[0].setPosition(x0, y0);\n    vertices[1].setPosition(x1, y1);\n    vertices[2].setPosition(x2, y2);\n    vertices[3].setPosition(x3, y3);\n\n    return gameObject;\n}\n", "import { DIRTY_CONST } from '../../gameobjects/DIRTY_CONST';\nimport { IGameObject } from '../../gameobjects/IGameObject';\nimport { PackColors } from '../../renderer/webgl1/colors/PackColors';\nimport { UpdateVertices } from './UpdateVertices';\n\nexport function PreRenderVertices <T extends IGameObject> (gameObject: T): T\n{\n    if (gameObject.isDirty(DIRTY_CONST.COLORS))\n    {\n        PackColors(gameObject.vertices);\n\n        gameObject.clearDirty(DIRTY_CONST.COLORS);\n    }\n\n    if (gameObject.isDirty(DIRTY_CONST.TRANSFORM))\n    {\n        UpdateVertices(gameObject);\n\n        gameObject.clearDirty(DIRTY_CONST.TRANSFORM);\n    }\n\n    return gameObject;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetDefaultOriginX (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).x;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetDefaultOriginY (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).y;\n}\n", "export class Vec2\n{\n    x: number;\n    y: number;\n\n    constructor (x: number = 0, y: number = 0)\n    {\n        this.set(x, y);\n    }\n\n    set (x: number = 0, y: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const { x, y } = this;\n\n        dst[ index ] = x;\n        dst[ index + 1 ] = y;\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        return this.set(\n            src[ index ],\n            src[ index + 1 ]\n        );\n    }\n\n    toString (): string\n    {\n        const { x, y } = this;\n\n        return `{ x=${x}, y=${y} }`;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\n *\n * @function Phaser.Math.Clamp\n * @since 3.0.0\n *\n * @param {number} value - The value to be clamped.\n * @param {number} min - The minimum bounds.\n * @param {number} max - The maximum bounds.\n *\n * @return {number} The clamped value.\n */\nexport function Clamp (value: number, min: number, max: number): number\n{\n    return Math.max(min, Math.min(max, value));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Check whether the given values are fuzzily equal.\n *\n * Two numbers are fuzzily equal if their difference is less than `epsilon`.\n *\n * @function Phaser.Math.Fuzzy.Equal\n * @since 3.0.0\n *\n * @param {number} a - The first value.\n * @param {number} b - The second value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {boolean} `true` if the values are fuzzily equal, otherwise `false`.\n */\nexport function FuzzyEqual (a: number, b: number, epsilon: number = 0.0001): boolean\n{\n    return Math.abs(a - b) < epsilon;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Rounds a Rectangle's position and size up to the smallest integer greater than or equal to each respective value.\n */\nexport function CeilRectangle (rect: IRectangle): IRectangle\n{\n    rect.x = Math.ceil(rect.x);\n    rect.y = Math.ceil(rect.y);\n    rect.width = Math.ceil(rect.width);\n    rect.height = Math.ceil(rect.height);\n\n    return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Rounds a Rectangle's position up to the smallest integer greater than or equal to each current coordinate.\n */\nexport function CeilRectanglePosition (rect: IRectangle): IRectangle\n{\n    rect.x = Math.ceil(rect.x);\n    rect.y = Math.ceil(rect.y);\n\n    return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Moves the top-left corner of a Rectangle so that its center is at the given coordinates.\n */\nexport function CenterRectangleOn (rect: IRectangle, x: number, y: number): IRectangle\n{\n    rect.x = x - (rect.width / 2);\n    rect.y = y - (rect.height / 2);\n\n    return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\nimport { Rectangle } from './Rectangle';\n\n/**\n * Creates a new Rectangle which is identical to the given one.\n */\nexport function CloneRectangle (source: IRectangle): Rectangle\n{\n    return new Rectangle(source.x, source.y, source.width, source.height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Copy the values of one Rectangle to a destination Rectangle.\n */\nexport function CopyRectangleFrom (source: IRectangle, dest: IRectangle): IRectangle\n{\n    return dest.set(source.x, source.y, source.width, source.height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Create an array of points for each corner of a Rectangle\n * If an array is specified, each point object will be added to the end of the array, otherwise a new array will be created.\n */\nexport function DecomposeRectangle (rect: IRectangle, out: Vec2[] = []): Vec2[]\n{\n    out.push(\n        new Vec2(rect.x, rect.y),\n        new Vec2(rect.right, rect.y),\n        new Vec2(rect.right, rect.bottom),\n        new Vec2(rect.x, rect.bottom)\n    );\n\n    return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Calculates the width/height ratio of a rectangle.\n */\nexport function GetRectangleAspectRatio (rect: IRectangle): number\n{\n    return (rect.height === 0) ? NaN : rect.width / rect.height;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\nexport function GetRectangleCenterX (rect: IRectangle): number\n{\n    return rect.x + (rect.width / 2);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\nexport function GetRectangleCenterY (rect: IRectangle): number\n{\n    return rect.y + (rect.height / 2);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { GetRectangleAspectRatio } from './GetRectangleAspectRatio';\nimport { GetRectangleCenterX } from './GetRectangleCenterX';\nimport { GetRectangleCenterY } from './GetRectangleCenterY';\nimport { IRectangle } from './IRectangle';\n\n/**\n * Adjusts the target rectangle, changing its width, height and position,\n * so that it fits inside the area of the source rectangle, while maintaining its original\n * aspect ratio.\n *\n * Unlike the `FitRectangleOutside` function, there may be some space inside the source area not covered.\n */\nexport function FitRectangleInside (target: IRectangle, source: IRectangle): IRectangle\n{\n    const ratio = GetRectangleAspectRatio(target);\n\n    let width: number = source.width;\n    let height: number = source.height;\n\n    if (ratio < GetRectangleAspectRatio(source))\n    {\n        //  Taller than Wide\n        width = source.height * ratio;\n    }\n    else\n    {\n        //  Wider than Tall\n        height = source.width / ratio;\n    }\n\n    return target.set(\n        GetRectangleCenterX(source) - (target.width / 2),\n        GetRectangleCenterY(source) - (target.height / 2),\n        width,\n        height\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { GetRectangleAspectRatio } from './GetRectangleAspectRatio';\nimport { GetRectangleCenterX } from './GetRectangleCenterX';\nimport { GetRectangleCenterY } from './GetRectangleCenterY';\nimport { IRectangle } from './IRectangle';\n\n/**\n * Adjusts the target rectangle, changing its width, height and position,\n * so that it fully covers the area of the source rectangle, while maintaining its original\n * aspect ratio.\n *\n * Unlike the `FitRectangleInside` function, the target rectangle may extend further out than the source.\n */\nexport function FitRectangleOutside (target: IRectangle, source: IRectangle): IRectangle\n{\n    const ratio = GetRectangleAspectRatio(target);\n    let width = source.width;\n    let height = source.height;\n\n    if (ratio > GetRectangleAspectRatio(source))\n    {\n        //  Wider than Tall\n        width = source.height * ratio;\n    }\n    else\n    {\n        //  Taller than Wide\n        height = source.width / ratio;\n    }\n\n    return target.set(\n        GetRectangleCenterX(source) - target.width / 2,\n        GetRectangleCenterY(source) - target.height / 2,\n        width,\n        height\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Merges a Rectangle with a point by repositioning and/or resizing it so that the point is on or within its bounds.\n */\nexport function FitRectangleToPoint (target: IRectangle, x: number, y: number): IRectangle\n{\n    const minX = Math.min(target.x, x);\n    const maxX = Math.max(target.right, x);\n    const minY = Math.min(target.y, y);\n    const maxY = Math.max(target.bottom, y);\n\n    return target.set(\n        minX,\n        minY,\n        maxX - minX,\n        maxY - minY\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Merges a Rectangle with a list of points by repositioning and/or resizing it such that all points are located on or within its bounds.\n */\nexport function FitRectangleToPoints (target: IRectangle, points: Vec2[]): IRectangle\n{\n    let minX = target.x;\n    let maxX = target.right;\n    let minY = target.y;\n    let maxY = target.bottom;\n\n    for (let i = 0; i < points.length; i++)\n    {\n        minX = Math.min(minX, points[i].x);\n        maxX = Math.max(maxX, points[i].x);\n        minY = Math.min(minY, points[i].y);\n        maxY = Math.max(maxY, points[i].y);\n    }\n\n    return target.set(\n        minX,\n        minY,\n        maxX - minX,\n        maxY - minY\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Rounds a Rectangle's position and size down to the largest integer less than or equal to each current coordinate or dimension.\n */\nexport function FloorRectangle (rect: IRectangle): IRectangle\n{\n    rect.x = Math.floor(rect.x);\n    rect.y = Math.floor(rect.y);\n    rect.width = Math.floor(rect.width);\n    rect.height = Math.floor(rect.height);\n\n    return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Rounds down (floors) the top left X and Y coordinates of the given Rectangle to the largest integer less than or equal to them\n */\nexport function FloorRectanglePosition (rect: IRectangle): IRectangle\n{\n    rect.x = Math.floor(rect.x);\n    rect.y = Math.floor(rect.y);\n\n    return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Calculates the area of the given Rectangle object.\n */\nexport function GetRectangleArea (rect: IRectangle): number\n{\n    return rect.width * rect.height;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { GetRectangleCenterX } from './GetRectangleCenterX';\nimport { GetRectangleCenterY } from './GetRectangleCenterY';\nimport { IRectangle } from './IRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Returns the center of a Rectangle as a Point.\n */\nexport function GetRectangleCenter (rect: IRectangle, out: Vec2 = new Vec2()): Vec2\n{\n    return out.set(GetRectangleCenterX(rect), GetRectangleCenterY(rect));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @classdesc\n * Defines a Line segment, a part of a line between two endpoints.\n *\n * @class Line\n * @memberof Phaser.Geom\n * @constructor\n * @since 3.0.0\n *\n * @param {number} [x1=0] - The x coordinate of the lines starting point.\n * @param {number} [y1=0] - The y coordinate of the lines starting point.\n * @param {number} [x2=0] - The x coordinate of the lines ending point.\n * @param {number} [y2=0] - The y coordinate of the lines ending point.\n */\nexport class Line\n{\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n\n    constructor (x1: number = 0, y1: number = 0, x2: number = 0, y2: number = 0)\n    {\n        this.set(x1, y1, x2, y2);\n    }\n\n    set (x1: number = 0, y1: number = 0, x2: number = 0, y2: number = 0): this\n    {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n\n        return this;\n    }\n\n    get left (): number\n    {\n        return Math.min(this.x1, this.x2);\n    }\n\n    set left (value: number)\n    {\n        if (this.x1 <= this.x2)\n        {\n            this.x1 = value;\n        }\n        else\n        {\n            this.x2 = value;\n        }\n    }\n\n    get right (): number\n    {\n        return Math.max(this.x1, this.x2);\n    }\n\n    set right (value: number)\n    {\n        if (this.x1 > this.x2)\n        {\n            this.x1 = value;\n        }\n        else\n        {\n            this.x2 = value;\n        }\n    }\n\n    get top (): number\n    {\n        return Math.min(this.y1, this.y2);\n    }\n\n    set top (value: number)\n    {\n        if (this.y1 <= this.y2)\n        {\n            this.y1 = value;\n        }\n        else\n        {\n            this.y2 = value;\n        }\n    }\n\n    get bottom (): number\n    {\n        return Math.max(this.y1, this.y2);\n    }\n\n    set bottom (value: number)\n    {\n        if (this.y1 > this.y2)\n        {\n            this.y1 = value;\n        }\n        else\n        {\n            this.y2 = value;\n        }\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\nimport { Rectangle } from './Rectangle';\nimport { RectangleToRectangle } from '../intersects/RectangleToRectangle';\n\n/**\n * Takes two Rectangles and first checks to see if they intersect.\n * If they intersect it will return the area of intersection in the `out` Rectangle.\n * If they do not intersect, the `out` Rectangle will have a width and height of zero.\n */\nexport function GetRectangleIntersection (rectA: IRectangle, rectB: IRectangle, out: Rectangle = new Rectangle()): Rectangle\n{\n    if (RectangleToRectangle(rectA, rectB))\n    {\n        out.set(\n            Math.max(rectA.x, rectB.x),\n            Math.max(rectA.y, rectB.y),\n            Math.min(rectA.right, rectB.right) - out.x,\n            Math.min(rectA.bottom, rectB.bottom) - out.y\n        );\n    }\n    else\n    {\n        out.set();\n    }\n\n    return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Calculates the perimeter of a Rectangle.\n */\nexport function GetRectanglePerimeter (rect: IRectangle): number\n{\n    return 2 * (rect.width + rect.height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { GetRectanglePerimeter } from './GetRectanglePerimeter';\nimport { IRectangle } from './IRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Returns an array of points from the perimeter of the Rectangle, where each point is spaced out based\n * on either the `step` value, or the `quantity`.\n */\nexport function GetRectangleMarchingAnts (rect: IRectangle, step?: number, quantity?: number, out: Vec2[] = []): Vec2[]\n{\n    if (!step && !quantity)\n    {\n        //  Bail out\n        return out;\n    }\n\n    //  If step is a falsey value (false, null, 0, undefined, etc) then we calculate\n    //  it based on the quantity instead, otherwise we always use the step value\n    if (!step)\n    {\n        step = GetRectanglePerimeter(rect) / quantity;\n    }\n    else\n    {\n        quantity = Math.round(GetRectanglePerimeter(rect) / step);\n    }\n\n    let x = rect.x;\n    let y = rect.y;\n    let face = 0;\n\n    //  Loop across each face of the rectangle\n\n    for (let i = 0; i < quantity; i++)\n    {\n        out.push(new Vec2(x, y));\n\n        switch (face)\n        {\n            //  Top face\n            case 0:\n                x += step;\n\n                if (x >= rect.right)\n                {\n                    face = 1;\n                    y += (x - rect.right);\n                    x = rect.right;\n                }\n                break;\n\n            //  Right face\n            case 1:\n                y += step;\n\n                if (y >= rect.bottom)\n                {\n                    face = 2;\n                    x -= (y - rect.bottom);\n                    y = rect.bottom;\n                }\n                break;\n\n            //  Bottom face\n            case 2:\n                x -= step;\n\n                if (x <= rect.x)\n                {\n                    face = 3;\n                    y -= (rect.x - x);\n                    x = rect.x;\n                }\n                break;\n\n            //  Left face\n            case 3:\n                y -= step;\n\n                if (y <= rect.y)\n                {\n                    face = 0;\n                    y = rect.y;\n                }\n                break;\n        }\n    }\n\n    return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Checks if two Rectangles overlap. If a Rectangle is within another Rectangle, the two will be considered overlapping. Thus, the Rectangles are treated as \"solid\".\n */\nexport function GetRectangleOverlap (rectA: IRectangle, rectB: IRectangle): boolean\n{\n    return (\n        rectA.x < rectB.right &&\n        rectA.right > rectB.x &&\n        rectA.y < rectB.bottom &&\n        rectA.bottom > rectB.y\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from './const';\n\n/**\n * Convert the given angle from degrees, to the equivalent angle in radians.\n *\n * @function Phaser.Math.DegToRad\n * @since 3.0.0\n *\n * @param {number} degrees - The angle (in degrees) to convert to radians.\n *\n * @return {number} The given angle converted to radians.\n */\nexport function DegToRad (degrees: number): number\n{\n    return degrees * MATH_CONST.DEG_TO_RAD;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { DegToRad } from '../../math/DegToRad';\nimport { GetRectangleCenterX } from './GetRectangleCenterX';\nimport { GetRectangleCenterY } from './GetRectangleCenterY';\nimport { IRectangle } from './IRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Returns a Point from the perimeter of a Rectangle based on the given angle.\n */\nexport function GetRectanglePerimeterPoint (rectangle: IRectangle, angle: number, out: Vec2 = new Vec2()): Vec2\n{\n    angle = DegToRad(angle);\n\n    const s = Math.sin(angle);\n    const c = Math.cos(angle);\n\n    let dx = (c > 0) ? rectangle.width / 2 : rectangle.width / -2;\n    let dy = (s > 0) ? rectangle.height / 2 : rectangle.height / -2;\n\n    if (Math.abs(dx * s) < Math.abs(dy * c))\n    {\n        dy = (dx * s) / c;\n    }\n    else\n    {\n        dx = (dy * c) / s;\n    }\n\n    return out.set(\n        dx + GetRectangleCenterX(rectangle),\n        dy + GetRectangleCenterY(rectangle)\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { GetRectanglePerimeter } from './GetRectanglePerimeter';\nimport { IRectangle } from './IRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Calculates the coordinates of a point at a certain `position` on the Rectangle's perimeter.\n *\n * The `position` is a fraction between 0 and 1 which defines how far into the perimeter the point is.\n *\n * A value of 0 or 1 returns the point at the top left corner of the rectangle, while a value of 0.5 returns the point at the bottom right corner of the rectangle. Values between 0 and 0.5 are on the top or the right side and values between 0.5 and 1 are on the bottom or the left side.\n */\nexport function GetRectanglePoint (rectangle: IRectangle, position: number, out: Vec2 = new Vec2()): Vec2\n{\n    if (position <= 0 || position >= 1)\n    {\n        return out.set(rectangle.x, rectangle.y);\n    }\n\n    let p = GetRectanglePerimeter(rectangle) * position;\n\n    if (position > 0.5)\n    {\n        p -= (rectangle.width + rectangle.height);\n\n        if (p <= rectangle.width)\n        {\n            //  Face 3\n            return out.set(rectangle.right - p, rectangle.bottom);\n        }\n        else\n        {\n            //  Face 4\n            return out.set(rectangle.x, rectangle.bottom - (p - rectangle.width));\n        }\n    }\n    else if (p <= rectangle.width)\n    {\n        //  Face 1\n        return out.set(rectangle.x + p, rectangle.y);\n    }\n    else\n    {\n        //  Face 2\n        return out.set(rectangle.right, rectangle.y + (p - rectangle.width));\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { GetRectanglePerimeter } from './GetRectanglePerimeter';\nimport { GetRectanglePoint } from './GetRectanglePoint';\nimport { IRectangle } from './IRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Return an array of points from the perimeter of the rectangle, each spaced out based on the quantity or step required.\n */\nexport function GetRectanglePoints (rectangle: IRectangle, step: number, quantity: number = 0, out: Vec2[] = []): Vec2[]\n{\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\n    if (!quantity)\n    {\n        quantity = GetRectanglePerimeter(rectangle) / step;\n    }\n\n    for (let i = 0; i < quantity; i++)\n    {\n        out.push(GetRectanglePoint(rectangle, i / quantity));\n    }\n\n    return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Returns a random point within a Rectangle.\n */\nexport function GetRectangleRandomPoint (rect: IRectangle, out: Vec2 = new Vec2()): Vec2\n{\n    return out.set(\n        rect.x + (Math.random() * rect.width),\n        rect.y + (Math.random() * rect.height)\n    );\n}\n", "export function Between (min: number, max: number): number\n{\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Tests if one rectangle fully contains another.\n */\nexport function RectangleContainsRectangle (rectA: IRectangle, rectB: IRectangle): boolean\n{\n    //  Volume check (if rectB volume > rectA then rectA cannot contain it)\n    if ((rectB.width * rectB.height) > (rectA.width * rectA.height))\n    {\n        return false;\n    }\n\n    return (\n        (rectB.x > rectA.x && rectB.x < rectA.right) &&\n        (rectB.right > rectA.x && rectB.right < rectA.right) &&\n        (rectB.y > rectA.y && rectB.y < rectA.bottom) &&\n        (rectB.bottom > rectA.y && rectB.bottom < rectA.bottom)\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Between } from '../../math/Between';\nimport { IRectangle } from './IRectangle';\nimport { RectangleContainsRectangle } from './RectangleContainsRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Calculates a random point that lies within the `outer` Rectangle, but outside of the `inner` Rectangle.\n * The inner Rectangle must be fully contained within the outer rectangle.\n */\nexport function GetRectangleRandomPointOutside (outer: IRectangle, inner: IRectangle, out: Vec2 = new Vec2()): Vec2\n{\n    if (RectangleContainsRectangle(outer, inner))\n    {\n        //  Pick a random quadrant\n        //\n        //  The quadrants don't extend the full widths / heights of the outer rect to give\n        //  us a better uniformed distribution, otherwise you get clumping in the corners where\n        //  the 4 quads would overlap\n\n        switch (Between(0, 3))\n        {\n            case 0: // Top\n                out.x = outer.x + (Math.random() * (inner.right - outer.x));\n                out.y = outer.y + (Math.random() * (inner.y - outer.y));\n                break;\n\n            case 1: // Bottom\n                out.x = inner.x + (Math.random() * (outer.right - inner.x));\n                out.y = inner.bottom + (Math.random() * (outer.bottom - inner.bottom));\n                break;\n\n            case 2: // Left\n                out.x = outer.x + (Math.random() * (inner.x - outer.x));\n                out.y = inner.y + (Math.random() * (outer.bottom - inner.y));\n                break;\n\n            case 3: // Right\n                out.x = inner.right + (Math.random() * (outer.right - inner.right));\n                out.y = outer.y + (Math.random() * (inner.bottom - outer.y));\n                break;\n        }\n    }\n\n    return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Returns the size of the Rectangle, expressed as a Point object.\n * With the value of the `width` as the `x` property and the `height` as the `y` property.\n */\nexport function GetRectangleSize (rect: IRectangle, out: Vec2 = new Vec2()): Vec2\n{\n    return out.set(rect.width, rect.height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\nimport { Rectangle } from './Rectangle';\n\n/**\n * Creates a new Rectangle or repositions and/or resizes an existing Rectangle so that it encompasses the two given Rectangles, i.e. calculates their union.\n */\nexport function GetRectangleUnion (rectA: IRectangle, rectB: IRectangle, out: Rectangle = new Rectangle()): Rectangle\n{\n    //  Cache vars so we can use one of the input rects as the output rect\n    const x = Math.min(rectA.x, rectB.x);\n    const y = Math.min(rectA.y, rectB.y);\n    const w = Math.max(rectA.right, rectB.right) - x;\n    const h = Math.max(rectA.bottom, rectB.bottom) - y;\n\n    return out.set(x, y, w, h);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CenterRectangleOn } from './CenterRectangleOn';\nimport { GetRectangleCenterX } from './GetRectangleCenterX';\nimport { GetRectangleCenterY } from './GetRectangleCenterY';\nimport { IRectangle } from './IRectangle';\n\n/**\n * Increases the size of a Rectangle by a specified amount.\n *\n * The center of the Rectangle stays the same. The amounts are added to each side, so the actual increase in width or height is two times bigger than the respective argument.\n */\nexport function InflateRectangle (rect: IRectangle, x: number, y: number): IRectangle\n{\n    const cx = GetRectangleCenterX(rect);\n    const cy = GetRectangleCenterY(rect);\n\n    rect.width = rect.width + (x * 2);\n    rect.height = rect.height + (y * 2);\n\n    return CenterRectangleOn(rect, cx, cy);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Merges the source rectangle into the target rectangle and returns the target.\n * Neither rectangle should have a negative width or height.\n */\nexport function MergeRectangle (target: IRectangle, source: IRectangle): IRectangle\n{\n    const minX = Math.min(target.x, source.x);\n    const maxX = Math.max(target.right, source.right);\n    const minY = Math.min(target.y, source.y);\n    const maxY = Math.max(target.bottom, source.bottom);\n\n    return target.set(\n        minX,\n        minY,\n        maxX - minX,\n        maxY - minY\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\nimport { RectangleContains } from './RectangleContains';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Determines whether the specified point is contained within the rectangular region defined by this Rectangle object.\n */\nexport function RectangleContainsPoint (rect: IRectangle, point: Vec2): boolean\n{\n    return RectangleContains(rect, point.x, point.y);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Compares the `x`, `y`, `width` and `height` properties of two rectangles.\n */\nexport function RectangleEquals (rect: IRectangle, toCompare: IRectangle): boolean\n{\n    return (\n        rect.x === toCompare.x &&\n        rect.y === toCompare.y &&\n        rect.width === toCompare.width &&\n        rect.height === toCompare.height\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from '../../math/const';\nimport { Rectangle } from './Rectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Constructs new Rectangle or repositions and resizes an existing Rectangle so that all of the given points are on or within its bounds.\n */\nexport function RectangleFromPoints (points: Vec2[], out: Rectangle = new Rectangle()): Rectangle\n{\n    if (points.length === 0)\n    {\n        return out;\n    }\n\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n\n    let maxX = MATH_CONST.MIN_SAFE_INTEGER;\n    let maxY = MATH_CONST.MIN_SAFE_INTEGER;\n\n    for (let i = 0; i < points.length; i++)\n    {\n        const px = points[i].x;\n        const py = points[i].y;\n\n        minX = Math.min(minX, px);\n        minY = Math.min(minY, py);\n\n        maxX = Math.max(maxX, px);\n        maxY = Math.max(maxY, py);\n    }\n\n    return out.set(\n        minX,\n        minY,\n        maxX - minX,\n        maxY - minY\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Determines if the two objects (either Rectangles or Rectangle-like) have the same width and height values under strict equality.\n */\nexport function RectangleSizeEquals (rect: IRectangle, toCompare: IRectangle): boolean\n{\n    return (rect.width === toCompare.width && rect.height === toCompare.height);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Scales the width and height of this Rectangle by the given amounts.\n */\nexport function ScaleRectangle (rect: IRectangle, x: number, y: number = x): IRectangle\n{\n    rect.width *= x;\n    rect.height *= y;\n\n    return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Translates the position of a Rectangle by a given offset.\n */\nexport function TranslateRectangle (rect: IRectangle, x: number, y: number): IRectangle\n{\n    rect.x += x;\n    rect.y += y;\n\n    return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Translates the position of a Rectangle by the coordinates of a point (translation vector).\n */\nexport function TranslateRectanglePoint (rect: IRectangle, point: Vec2): IRectangle\n{\n    rect.x += point.x;\n    rect.y += point.y;\n\n    return rect;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CeilRectangle } from './CeilRectangle';\nimport { CeilRectanglePosition } from './CeilRectanglePosition';\nimport { CenterRectangleOn } from './CenterRectangleOn';\nimport { CloneRectangle } from './CloneRectangle';\nimport { CopyRectangleFrom } from './CopyRectangleFrom';\nimport { DecomposeRectangle } from './DecomposeRectangle';\nimport { FitRectangleInside } from './FitRectangleInside';\nimport { FitRectangleOutside } from './FitRectangleOutside';\nimport { FitRectangleToPoint } from './FitRectangleToPoint';\nimport { FitRectangleToPoints } from './FitRectangleToPoints';\nimport { FloorRectangle } from './FloorRectangle';\nimport { FloorRectanglePosition } from './FloorRectanglePosition';\nimport { GetRectangleArea } from './GetRectangleArea';\nimport { GetRectangleAspectRatio } from './GetRectangleAspectRatio';\nimport { GetRectangleCenter } from './GetRectangleCenter';\nimport { GetRectangleCenterX } from './GetRectangleCenterX';\nimport { GetRectangleCenterY } from './GetRectangleCenterY';\nimport { GetRectangleEdges } from './GetRectangleEdges';\nimport { GetRectangleIntersection } from './GetRectangleIntersection';\nimport { GetRectangleMarchingAnts } from './GetRectangleMarchingAnts';\nimport { GetRectangleOverlap } from './GetRectangleOverlap';\nimport { GetRectanglePerimeter } from './GetRectanglePerimeter';\nimport { GetRectanglePerimeterPoint } from './GetRectanglePerimeterPoint';\nimport { GetRectanglePoint } from './GetRectanglePoint';\nimport { GetRectanglePoints } from './GetRectanglePoints';\nimport { GetRectangleRandomPoint } from './GetRectangleRandomPoint';\nimport { GetRectangleRandomPointOutside } from './GetRectangleRandomPointOutside';\nimport { GetRectangleSize } from './GetRectangleSize';\nimport { GetRectangleUnion } from './GetRectangleUnion';\nimport { InflateRectangle } from './InflateRectangle';\nimport { MergeRectangle } from './MergeRectangle';\nimport { Rectangle } from './Rectangle';\nimport { RectangleContains } from './RectangleContains';\nimport { RectangleContainsPoint } from './RectangleContainsPoint';\nimport { RectangleContainsRectangle } from './RectangleContainsRectangle';\nimport { RectangleEquals } from './RectangleEquals';\nimport { RectangleFromPoints } from './RectangleFromPoints';\nimport { RectangleSizeEquals } from './RectangleSizeEquals';\nimport { ScaleRectangle } from './ScaleRectangle';\nimport { TranslateRectangle } from './TranslateRectangle';\nimport { TranslateRectanglePoint } from './TranslateRectanglePoint';\n\nexport {\n    CeilRectangle,\n    CeilRectanglePosition,\n    CenterRectangleOn,\n    CloneRectangle,\n    CopyRectangleFrom,\n    DecomposeRectangle,\n    FitRectangleInside,\n    FitRectangleOutside,\n    FitRectangleToPoint,\n    FitRectangleToPoints,\n    FloorRectangle,\n    FloorRectanglePosition,\n    GetRectangleArea,\n    GetRectangleAspectRatio,\n    GetRectangleCenter,\n    GetRectangleCenterX,\n    GetRectangleCenterY,\n    GetRectangleEdges,\n    GetRectangleIntersection,\n    GetRectangleMarchingAnts,\n    GetRectangleOverlap,\n    GetRectanglePerimeter,\n    GetRectanglePerimeterPoint,\n    GetRectanglePoint,\n    GetRectanglePoints,\n    GetRectangleRandomPoint,\n    GetRectangleRandomPointOutside,\n    GetRectangleSize,\n    GetRectangleUnion,\n    InflateRectangle,\n    MergeRectangle,\n    Rectangle,\n    RectangleContains,\n    RectangleContainsPoint,\n    RectangleContainsRectangle,\n    RectangleEquals,\n    RectangleFromPoints,\n    RectangleSizeEquals,\n    ScaleRectangle,\n    TranslateRectangle,\n    TranslateRectanglePoint\n};\n", "import { ITransformComponent } from './ITransformComponent';\n\nexport function UpdateLocalTransform (transform: ITransformComponent): void\n{\n    const local = transform.local;\n\n    const x = transform.position.x;\n    const y = transform.position.y;\n    const rotation = transform.rotation;\n    const scaleX = transform.scale.x;\n    const scaleY = transform.scale.y;\n    const skewX = transform.skew.x;\n    const skewY = transform.skew.y;\n\n    local.set(\n        Math.cos(rotation + skewY) * scaleX,\n        Math.sin(rotation + skewY) * scaleX,\n        -Math.sin(rotation - skewX) * scaleY,\n        Math.cos(rotation - skewX) * scaleY,\n        x,\n        y\n    );\n}\n", "import { IMatrix2D } from './IMatrix2D';\nimport { Matrix2D } from './Matrix2D';\n\n//  Copy the values from the src Matrix to the target Matrix and return the target Matrix.\n\nexport function Mat2dCopyFrom (src: IMatrix2D, target: Matrix2D): Matrix2D\n{\n    const { a, b, c, d, tx, ty } = src;\n\n    return target.set(a, b, c, d, tx, ty);\n}\n", "import { IGameObject } from '../../gameobjects/IGameObject';\nimport { Mat2dCopyFrom } from '../../math/mat2d/Mat2dCopyFrom';\n\nexport function UpdateWorldTransform (gameObject: IGameObject): void\n{\n    const parent = gameObject.parent;\n    const transform = gameObject.transform;\n\n    const lt = transform.local;\n    const wt = transform.world;\n\n    if (!parent)\n    {\n        Mat2dCopyFrom(lt, wt);\n    }\n    else if (transform.passthru)\n    {\n        Mat2dCopyFrom(parent.transform.world, wt);\n    }\n    else\n    {\n        const { a, b, c, d, tx, ty } = lt;\n        const { a: pa, b: pb, c: pc, d: pd, tx: ptx, ty: pty } = parent.transform.world;\n\n        wt.set(\n            a  * pa + b  * pc,\n            a  * pb + b  * pd,\n            c  * pa + d  * pc,\n            c  * pb + d  * pd,\n            tx * pa + ty * pc + ptx,\n            tx * pb + ty * pd + pty\n        );\n    }\n}\n", "import { GetDefaultOriginX, GetDefaultOriginY } from '../../config/defaultorigin/';\nimport { Vec2, Vec2Callback } from '../../math/vec2';\n\nimport { DIRTY_CONST } from '../../gameobjects/DIRTY_CONST';\nimport { IGameObject } from '../../gameobjects/IGameObject';\nimport { ITransformComponent } from './ITransformComponent';\nimport { Matrix2D } from '../../math/mat2d/Matrix2D';\nimport { Rectangle } from '../../geom/rectangle';\nimport { UpdateLocalTransform } from './UpdateLocalTransform';\nimport { UpdateWorldTransform } from './UpdateWorldTransform';\n\nexport class TransformComponent implements ITransformComponent\n{\n    entity: IGameObject;\n\n    //  This should be treated as read-only, it is always perfectly in sync with the properties in this class\n    local: Matrix2D;\n\n    world: Matrix2D;\n\n    position: Vec2Callback;\n    scale: Vec2Callback;\n    skew: Vec2Callback;\n    origin: Vec2Callback;\n    extent: Rectangle;\n\n    passthru: boolean = false;\n\n    private _rotation: number = 0;\n\n    constructor (entity: IGameObject, x: number = 0, y: number = 0)\n    {\n        this.entity = entity;\n\n        this.local = new Matrix2D();\n        this.world = new Matrix2D();\n\n        const update = () => this.update();\n        const updateExtent = () => this.updateExtent();\n\n        this.position = new Vec2Callback(update, x, y);\n        this.scale = new Vec2Callback(update, 1, 1);\n        this.skew = new Vec2Callback(update);\n        this.origin = new Vec2Callback(updateExtent, GetDefaultOriginX(), GetDefaultOriginY());\n\n        this.extent = new Rectangle();\n    }\n\n    update (): void\n    {\n        this.updateLocal();\n        this.updateWorld();\n    }\n\n    updateLocal (): void\n    {\n        this.entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n\n        UpdateLocalTransform(this);\n    }\n\n    updateWorld (): void\n    {\n        const entity = this.entity;\n\n        entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n\n        UpdateWorldTransform(entity);\n\n        if (entity.numChildren)\n        {\n            this.updateChildren();\n        }\n    }\n\n    updateChildren (): void\n    {\n        //  Sweep all children - by this point our local and world transforms are correct\n        const children = this.entity.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            child.transform.updateWorld();\n        }\n    }\n\n    globalToLocal (x: number, y: number, out: Vec2 = new Vec2()): Vec2\n    {\n        const { a, b, c, d, tx, ty } = this.world;\n\n        const id: number = 1 / ((a * d) + (c * -b));\n\n        out.x = (d * id * x) + (-c * id * y) + (((ty * c) - (tx * d)) * id);\n        out.y = (a * id * y) + (-b * id * x) + (((-ty * a) + (tx * b)) * id);\n\n        return out;\n    }\n\n    localToGlobal (x: number, y: number, out: Vec2 = new Vec2()): Vec2\n    {\n        const { a, b, c, d, tx, ty } = this.world;\n\n        out.x = (a * x) + (c * y) + tx;\n        out.y = (b * x) + (d * y) + ty;\n\n        return out;\n    }\n\n    //  The area covered by this transform component + origin + size (usually from a Frame)\n    setExtent (x: number, y: number, width: number, height: number): void\n    {\n        this.extent.set(x, y, width, height);\n\n        this.entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n    }\n\n    updateExtent (width?: number, height?: number): void\n    {\n        const extent = this.extent;\n        const entity = this.entity;\n\n        if (width !== undefined)\n        {\n            extent.width = width;\n        }\n\n        if (height !== undefined)\n        {\n            extent.height = height;\n        }\n\n        extent.x = -(this.origin.x) * extent.width;\n        extent.y = -(this.origin.y) * extent.height;\n\n        entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n    }\n\n    set rotation (value: number)\n    {\n        if (value !== this._rotation)\n        {\n            this._rotation = value;\n\n            this.update();\n        }\n    }\n\n    get rotation (): number\n    {\n        return this._rotation;\n    }\n\n    destroy (): void\n    {\n        this.position.destroy();\n        this.scale.destroy();\n        this.skew.destroy();\n        this.origin.destroy();\n\n        this.entity = null;\n        this.local = null;\n        this.world = null;\n        this.position = null;\n        this.scale = null;\n        this.skew = null;\n        this.origin = null;\n        this.extent = null;\n    }\n}\n", "export function PackColor (rgb: number, alpha: number): number\n{\n    const ua = ((alpha * 255) | 0) & 0xFF;\n\n    return ((ua << 24) | rgb) >>> 0;\n}\n", "import { PackColor } from '../renderer/webgl1/colors/PackColor';\n\nexport class Vertex\n{\n    x: number = 0;\n    y: number = 0;\n    z: number = 0;\n\n    u: number = 0;\n    v: number = 0;\n\n    texture: number = 0;\n\n    tint: number = 0xffffff;\n    alpha: number = 1;\n    color: number = 4294967295;\n\n    constructor (x: number = 0, y: number = 0, z: number = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    setPosition (x: number, y: number, z: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n\n        return this;\n    }\n\n    setUV (u: number, v: number): this\n    {\n        this.u = u;\n        this.v = v;\n\n        return this;\n    }\n\n    setColor (color: number, alpha: number = 1): this\n    {\n        this.tint = color;\n        this.alpha = alpha;\n\n        this.packColor();\n\n        return this;\n    }\n\n    setAlpha (value: number): this\n    {\n        this.alpha = value;\n\n        return this;\n    }\n\n    setTint (value: number): this\n    {\n        this.tint = value;\n\n        return this;\n    }\n\n    packColor (): void\n    {\n        this.color = PackColor(this.tint, this.alpha);\n    }\n}\n", "import { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { SetTexture } from '../renderpass/SetTexture';\nimport { Vertex } from '../../../components';\n\nexport function BatchTexturedQuad <T extends ITexture> (texture: T, vertices: Vertex[], renderPass: IRenderPass): void\n{\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\n\n    const textureIndex = SetTexture(renderPass, texture);\n\n    let vertOffset = offset;\n\n    vertices.forEach(vertex =>\n    {\n        F32[vertOffset + 0] = vertex.x;\n        F32[vertOffset + 1] = vertex.y;\n        F32[vertOffset + 2] = vertex.u;\n        F32[vertOffset + 3] = vertex.v;\n        F32[vertOffset + 4] = textureIndex;\n        U32[vertOffset + 5] = vertex.color;\n\n        vertOffset += 6;\n    });\n}\n\n/*\n    vertexData array structure:\n\n    0 = topLeft.x\n    1 = topLeft.y\n    2 = frame.u0\n    3 = frame.v0\n    4 = textureIndex\n    5 = topLeft.packedColor\n\n    6 = bottomLeft.x\n    7 = bottomLeft.y\n    8 = frame.u0\n    9 = frame.v1\n    10 = textureIndex\n    11 = bottomLeft.packedColor\n\n    12 = bottomRight.x\n    13 = bottomRight.y\n    14 = frame.u1\n    15 = frame.v1\n    16 = textureIndex\n    17 = bottomRight.packedColor\n\n    18 = topRight.x\n    19 = topRight.y\n    20 = frame.u1\n    21 = frame.v0\n    22 = textureIndex\n    23 = topRight.packedColor\n*/\n", "import { BoundsComponent } from '../components/bounds/BoundsComponent';\nimport { DIRTY_CONST } from './DIRTY_CONST';\nimport { DestroyChildren } from '../display/DestroyChildren';\nimport { DestroyEvent } from './events/DestroyEvent';\nimport { Emit } from '../events/Emit';\nimport { GameInstance } from '../GameInstance';\nimport { IBaseWorld } from '../world/IBaseWorld';\nimport { IBoundsComponent } from '../components/bounds/IBoundsComponent';\nimport { ICanvasRenderer } from '../renderer/canvas/ICanvasRenderer';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IGameObject } from './IGameObject';\nimport { IInputComponent } from '../components/input/IInputComponent';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { ITransformComponent } from '../components/transform/ITransformComponent';\nimport { InputComponent } from '../components/input/InputComponent';\nimport { Rectangle } from '../geom/rectangle/Rectangle';\nimport { ReparentChildren } from '../display/ReparentChildren';\nimport { TransformComponent } from '../components/transform/TransformComponent';\nimport { Vertex } from '../components/Vertex';\n\nexport class GameObject implements IGameObject\n{\n    type: string = 'GameObject';\n    name: string = '';\n\n    //  The World this Game Object belongs to. A Game Object can only belong to one World instance at any one time.\n    world: IBaseWorld;\n\n    //  The direct parent of this Game Object in the scene graph (if any)\n    parent: IGameObject;\n\n    children: IGameObject[];\n\n    events: Map<string, Set<IEventInstance>>;\n\n    willUpdate: boolean = true;\n    willUpdateChildren: boolean = true;\n\n    willRender: boolean = true;\n    willRenderChildren: boolean = true;\n    willCacheChildren: boolean = false;\n\n    dirty: number = 0;\n    dirtyFrame: number = 0;\n\n    transform: ITransformComponent;\n    bounds: IBoundsComponent;\n    input: IInputComponent;\n    vertices: Vertex[];\n\n    visible: boolean = true;\n\n    constructor (x: number = 0, y: number = 0)\n    {\n        this.children = [];\n        this.vertices = [];\n\n        this.events = new Map();\n\n        this.transform = new TransformComponent(this, x, y);\n        this.bounds = new BoundsComponent(this);\n        this.input = new InputComponent(this);\n\n        this.dirty = DIRTY_CONST.DEFAULT;\n\n        this.transform.update();\n    }\n\n    isRenderable (): boolean\n    {\n        return (this.visible && this.willRender);\n    }\n\n    isDirty (flag: number): boolean\n    {\n        return (this.dirty & flag) !== 0;\n    }\n\n    clearDirty (flag: number): this\n    {\n        if (this.isDirty(flag))\n        {\n            this.dirty ^= flag;\n        }\n\n        return this;\n    }\n\n    setDirty (flag: number, flag2?: number): this\n    {\n        if (!this.isDirty(flag))\n        {\n            this.dirty ^= flag;\n            this.dirtyFrame = GameInstance.getFrame();\n        }\n\n        if (!this.isDirty(flag2))\n        {\n            this.dirty ^= flag2;\n        }\n\n        return this;\n    }\n\n    update (delta: number, time: number): void\n    {\n        if (this.willUpdateChildren)\n        {\n            const children = this.children;\n\n            for (let i = 0; i < children.length; i++)\n            {\n                const child = children[i];\n\n                if (child && child.willUpdate)\n                {\n                    child.update(delta, time);\n                }\n            }\n        }\n\n        this.postUpdate(delta, time);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postUpdate (delta: number, time: number): void\n    {\n        //  Empty for parent classes to use.\n        //  Called after this GameObject and all of its children have been updated.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        //  Called after this GameObject and all of its children have been rendered.\n        //  If it doesn't have any children, this method is never called.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n        //  Called after this GameObject and all of its children have been rendered.\n        //  If it doesn't have any children, this method is never called.\n    }\n\n    get numChildren (): number\n    {\n        return this.children.length;\n    }\n\n    getBounds (): Rectangle\n    {\n        return this.bounds.get();\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        if (reparentChildren)\n        {\n            ReparentChildren(this, reparentChildren);\n        }\n        else\n        {\n            DestroyChildren(this);\n        }\n\n        Emit(this, DestroyEvent, this);\n\n        this.transform.destroy();\n        this.bounds.destroy();\n        this.input.destroy();\n\n        this.events.clear();\n\n        this.world = null;\n        this.parent = null;\n        this.children = null;\n\n        this.vertices = [];\n    }\n}\n", "import { DIRTY_CONST } from '../DIRTY_CONST';\nimport { GameObject } from '../GameObject';\nimport { GetRectangleSize } from '../../geom/rectangle/GetRectangleSize';\nimport { IContainer } from './IContainer';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\nexport class Container extends GameObject implements IContainer\n{\n    protected _alpha: number = 1;\n\n    constructor (x: number = 0, y: number = 0, width: number = undefined, height: number = undefined)\n    {\n        super(x, y);\n        if (width !== undefined)\n        {\n            this.setSize(width, height);\n        }\n\n        this.type = 'Container';\n    }\n\n    setSize (width: number, height: number = width): this\n    {\n        this.transform.updateExtent(width, height);\n\n        return this;\n    }\n\n    getSize (out: Vec2 = new Vec2()): Vec2\n    {\n        return GetRectangleSize(this.transform.extent, out);\n    }\n\n    setPosition (x: number, y: number): this\n    {\n        this.transform.position.set(x, y);\n\n        return this;\n    }\n\n    getPosition (out: Vec2 = new Vec2()): Vec2\n    {\n        const position = this.transform.position;\n\n        return out.set(position.x, position.y);\n    }\n\n    setOrigin (x: number, y: number = x): this\n    {\n        this.transform.origin.set(x, y);\n\n        return this;\n    }\n\n    getOrigin (out: Vec2 = new Vec2()): Vec2\n    {\n        const origin = this.transform.origin;\n\n        return out.set(origin.x, origin.y);\n    }\n\n    setSkew (x: number, y: number = x): this\n    {\n        this.transform.skew.set(x, y);\n\n        return this;\n    }\n\n    getSkew (out: Vec2 = new Vec2()): Vec2\n    {\n        const skew = this.transform.skew;\n\n        return out.set(skew.x, skew.y);\n    }\n\n    setScale (x: number, y: number = x): this\n    {\n        this.transform.scale.set(x, y);\n\n        return this;\n    }\n\n    getScale (out: Vec2 = new Vec2()): Vec2\n    {\n        const scale = this.transform.scale;\n\n        return out.set(scale.x, scale.y);\n    }\n\n    setRotation (value: number): this\n    {\n        this.transform.rotation = value;\n\n        return this;\n    }\n\n    getRotation (): number\n    {\n        return this.transform.rotation;\n    }\n\n    set width (value: number)\n    {\n        this.transform.updateExtent(value);\n    }\n\n    get width (): number\n    {\n        return this.transform.extent.width;\n    }\n\n    set height (value: number)\n    {\n        this.transform.updateExtent(undefined, value);\n    }\n\n    get height (): number\n    {\n        return this.transform.extent.height;\n    }\n\n    set x (value: number)\n    {\n        this.transform.position.x = value;\n    }\n\n    get x (): number\n    {\n        return this.transform.position.x;\n    }\n\n    set y (value: number)\n    {\n        this.transform.position.y = value;\n    }\n\n    get y (): number\n    {\n        return this.transform.position.y;\n    }\n\n    set originX (value: number)\n    {\n        this.transform.origin.x = value;\n    }\n\n    get originX (): number\n    {\n        return this.transform.origin.x;\n    }\n\n    set originY (value: number)\n    {\n        this.transform.origin.y = value;\n    }\n\n    get originY (): number\n    {\n        return this.transform.origin.y;\n    }\n\n    set skewX (value: number)\n    {\n        this.transform.skew.x = value;\n    }\n\n    get skewX (): number\n    {\n        return this.transform.skew.x;\n    }\n\n    set skewY (value: number)\n    {\n        this.transform.skew.y = value;\n    }\n\n    get skewY (): number\n    {\n        return this.transform.skew.y;\n    }\n\n    set scaleX (value: number)\n    {\n        this.transform.scale.x = value;\n    }\n\n    get scaleX (): number\n    {\n        return this.transform.scale.x;\n    }\n\n    set scaleY (value: number)\n    {\n        this.transform.scale.y = value;\n    }\n\n    get scaleY (): number\n    {\n        return this.transform.scale.y;\n    }\n\n    set rotation (value: number)\n    {\n        this.transform.rotation = value;\n    }\n\n    get rotation (): number\n    {\n        return this.transform.rotation;\n    }\n\n    get alpha (): number\n    {\n        return this._alpha;\n    }\n\n    set alpha (value: number)\n    {\n        if (value !== this._alpha)\n        {\n            this._alpha = value;\n\n            this.vertices.forEach(vertex =>\n            {\n                vertex.setAlpha(value);\n            });\n\n            this.setDirty(DIRTY_CONST.COLORS);\n        }\n    }\n}\n", "import { Frame } from '../../../textures';\nimport { ICanvasRenderer } from '../ICanvasRenderer';\nimport { ITransformComponent } from '../../../components/transform/ITransformComponent';\n\nexport function DrawTexturedQuad (frame: Frame, alpha: number, transform: ITransformComponent, renderer: ICanvasRenderer): void\n{\n    if (!frame)\n    {\n        return;\n    }\n\n    const ctx = renderer.ctx;\n\n    const { a, b, c, d, tx, ty } = transform.world;\n    const { x, y } = transform.extent;\n\n    ctx.save();\n\n    ctx.setTransform(a, b, c, d, tx, ty);\n\n    ctx.globalAlpha = alpha;\n\n    ctx.drawImage(frame.texture.image as HTMLImageElement, frame.x, frame.y, frame.width, frame.height, x, y, frame.width, frame.height);\n\n    ctx.restore();\n}\n", "import { Frame } from '../../textures/Frame';\nimport { ISprite } from './ISprite';\nimport { Texture } from '../../textures';\n\nexport function SetFrame <T extends ISprite> (texture: Texture, key?: string | number | Frame, ...children: T[]): T[]\n{\n    const frame = texture.getFrame(key);\n\n    const pivot = frame.pivot;\n\n    children.forEach(child =>\n    {\n        //  TODO - If frame is dirty, reset it anyway\n        if (!child || frame === child.frame)\n        {\n            return;\n        }\n\n        child.frame = frame;\n        child.hasTexture = true;\n\n        if (pivot)\n        {\n            child.setOrigin(pivot.x, pivot.y);\n        }\n\n        frame.copyToExtent(child);\n\n        //  This rarely changes, so we'll set it here, rather than every game step:\n        frame.copyToVertices(child.vertices);\n    });\n\n    return children;\n}\n", "import { Texture } from './Texture';\nimport { TextureManagerInstance } from './TextureManagerInstance';\n\nexport function GetTexture (key: string): Texture\n{\n    return TextureManagerInstance.get().get(key);\n}\n", "import { Frame } from '../../textures/Frame';\nimport { GetTexture } from '../../textures/GetTexture';\nimport { IFrame } from '../../textures/IFrame';\nimport { ISprite } from './ISprite';\nimport { ITexture } from '../../textures/ITexture';\nimport { SetFrame } from './SetFrame';\nimport { Texture } from '../../textures/Texture';\n\nexport function SetTexture <T extends ISprite> (key: string | ITexture | IFrame, frame: string | number | IFrame, ...children: T[]): T[]\n{\n    if (!key)\n    {\n        //  Remove texture from all children\n        children.forEach(child =>\n        {\n            child.texture = null;\n            child.frame = null;\n            child.hasTexture = false;\n        });\n    }\n    else\n    {\n        let texture: Texture;\n\n        if (key instanceof Frame)\n        {\n            frame = key;\n            texture = key.texture;\n        }\n        else if (key instanceof Texture)\n        {\n            texture = key;\n        }\n        else\n        {\n            texture = GetTexture(key as string);\n        }\n\n        if (!texture)\n        {\n            console.warn(`Invalid Texture key: ${key as string}`);\n        }\n        else\n        {\n            children.forEach(child =>\n            {\n                child.texture = texture;\n            });\n\n            SetFrame(texture, frame, ...children);\n        }\n    }\n\n    return children;\n}\n", "import { BatchTexturedQuad } from '../../renderer/webgl1/draw/BatchTexturedQuad';\nimport { Container } from '../container/Container';\nimport { DIRTY_CONST } from '../DIRTY_CONST';\nimport { DrawTexturedQuad } from '../../renderer/canvas/draw/DrawTexturedQuad';\nimport { Frame } from '../../textures/Frame';\nimport { ICanvasRenderer } from '../../renderer/canvas/ICanvasRenderer';\nimport { IFrame } from '../../textures/IFrame';\nimport { IGameObject } from '../IGameObject';\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\nimport { ISprite } from './ISprite';\nimport { ITexture } from '../../textures/ITexture';\nimport { PreRenderVertices } from '../../components/transform/PreRenderVertices';\nimport { SetFrame } from './SetFrame';\nimport { SetTexture } from './SetTexture';\nimport { Texture } from '../../textures/Texture';\nimport { Vertex } from '../../components/Vertex';\n\nexport class Sprite extends Container implements ISprite\n{\n    texture: Texture;\n    frame: Frame;\n    hasTexture: boolean = false;\n\n    protected _tint: number = 0xffffff;\n\n    constructor (x: number, y: number, texture: string | Texture | Frame, frame?: string | number | Frame)\n    {\n        super(x, y);\n\n        this.type = 'Sprite';\n\n        this.vertices = [ new Vertex(), new Vertex(), new Vertex(), new Vertex() ];\n\n        this.setTexture(texture, frame);\n    }\n\n    setTexture (key: string | ITexture | IFrame, frame?: string | number | IFrame): this\n    {\n        SetTexture(key, frame, this);\n\n        return this;\n    }\n\n    setFrame (key?: string | number | IFrame): this\n    {\n        SetFrame(this.texture, key, this);\n\n        return this;\n    }\n\n    isRenderable (): boolean\n    {\n        return (this.visible && this.willRender && this.hasTexture && this.alpha > 0);\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        PreRenderVertices(this);\n\n        BatchTexturedQuad(this.texture, this.vertices, renderPass);\n    }\n\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n        PreRenderVertices(this);\n\n        DrawTexturedQuad(this.frame, this.alpha, this.transform, renderer);\n    }\n\n    get tint (): number\n    {\n        return this._tint;\n    }\n\n    set tint (value: number)\n    {\n        if (value !== this._tint)\n        {\n            this._tint = value;\n\n            this.vertices.forEach(vertex =>\n            {\n                vertex.setTint(value);\n            });\n\n            this.setDirty(DIRTY_CONST.COLORS);\n        }\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        this.texture = null;\n        this.frame = null;\n        this.hasTexture = false;\n    }\n}\n", "import { BatchTexturedQuad } from '../../renderer/webgl1/draw/BatchTexturedQuad';\nimport { Container } from '../container/Container';\nimport { DIRTY_CONST } from '../DIRTY_CONST';\nimport { DrawTexturedQuad } from '../../renderer/canvas/draw/DrawTexturedQuad';\nimport { Frame } from '../../textures/Frame';\nimport { ICanvasRenderer } from '../../renderer/canvas/ICanvasRenderer';\nimport { IGameObject } from '../IGameObject';\nimport { IRectangle } from './IRectangle';\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\nimport { PreRenderVertices } from '../../components/transform/PreRenderVertices';\nimport { Texture } from '../../textures/Texture';\nimport { TextureManagerInstance } from '../../textures/TextureManagerInstance';\nimport { Vertex } from '../../components/Vertex';\n\nexport class Rectangle extends Container implements IRectangle\n{\n    private texture: Texture;\n    private frame: Frame;\n\n    protected _color: number = 0xffffff;\n\n    constructor (x: number, y: number, width: number = 64, height: number = 64, color: number = 0xffffff)\n    {\n        super(x, y);\n\n        this.type = 'Rectangle';\n\n        this.vertices = [ new Vertex(), new Vertex(), new Vertex(), new Vertex() ];\n\n        this.color = color;\n\n        this.setWhiteTexture();\n        this.setSize(width, height);\n    }\n\n    private setWhiteTexture (): void\n    {\n        this.texture = TextureManagerInstance.get().get('__WHITE');\n        this.frame = this.texture.getFrame();\n\n        this.frame.copyToExtent(this);\n        this.frame.copyToVertices(this.vertices);\n    }\n\n    setColor (color: number): this\n    {\n        this.color = color;\n\n        return this;\n    }\n\n    isRenderable (): boolean\n    {\n        return (this.visible && this.willRender && this.alpha > 0);\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        PreRenderVertices(this);\n\n        BatchTexturedQuad(this.texture, this.vertices, renderPass);\n    }\n\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n        PreRenderVertices(this);\n\n        DrawTexturedQuad(this.frame, this.alpha, this.transform, renderer);\n    }\n\n    get color (): number\n    {\n        return this._color;\n    }\n\n    set color (value: number)\n    {\n        if (value !== this._color)\n        {\n            this._color = value;\n\n            this.vertices.forEach(vertex =>\n            {\n                vertex.setTint(value);\n            });\n\n            this.setDirty(DIRTY_CONST.COLORS);\n        }\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        this.texture = null;\n        this.frame = null;\n    }\n}\n", "import { CreateCanvas } from '../CreateCanvas';\nimport { Texture } from '../Texture';\n\nexport function CanvasTexture (width: number = 32, height: number = 32): Texture\n{\n    const ctx = CreateCanvas(width, height);\n\n    return new Texture(ctx.canvas);\n}\n", "import { CanvasTexture } from '../../textures/types/CanvasTexture';\nimport { DIRTY_CONST } from '../DIRTY_CONST';\nimport { GameInstance } from '../../GameInstance';\nimport { IContainer } from '../container/IContainer';\nimport { Sprite } from '../sprite/Sprite';\n\nexport type VerticalTextAlignment = 'ascent' | 'lineheight';\n\nexport class Text extends Sprite\n{\n    private _text: string;\n\n    preRenderCallback: (canvas: HTMLCanvasElement, context: CanvasRenderingContext2D) => void;\n    wordWrapCallback: (text: string) => string;\n\n    canvas: HTMLCanvasElement;\n    context: CanvasRenderingContext2D;\n    splitRegExp: RegExp = /(?:\\r\\n|\\r|\\n)/;\n    padding = { left: 0, right: 0, top: 0, bottom: 0 };\n    verticalAlign: VerticalTextAlignment = 'ascent';\n    lineSpacing: number = 0;\n    resolution: number;\n    font: string = '16px monospace';\n    fillStyle: string | CanvasGradient | CanvasPattern = '#fff';\n    strokeStyle: string | CanvasGradient | CanvasPattern = '';\n    backgroundStyle: string | CanvasGradient | CanvasPattern = '';\n    cornerRadius: number = 0;\n    textAlign: CanvasTextAlign = 'left';\n    textBaseline: CanvasTextBaseline = 'alphabetic';\n    lineWidth: number = 0;\n    lineDash: number[] = [];\n    fixedWidth: number;\n    fixedHeight: number;\n    antialias: boolean = false;\n\n    constructor (x: number, y: number, text: string | string[] = '', font?: string, fillStyle?: string | CanvasGradient | CanvasPattern)\n    {\n        super(x, y, CanvasTexture());\n\n        this.type = 'Text';\n\n        const game = GameInstance.get();\n\n        this.resolution = game.renderer.resolution;\n\n        this.canvas = this.texture.image as HTMLCanvasElement;\n        this.context = this.canvas.getContext('2d');\n\n        // this.texture.glTexture = CreateGLTexture(this.canvas, 32, 32, false, this.antialias);\n\n        if (font)\n        {\n            this.font = font;\n        }\n\n        if (fillStyle)\n        {\n            this.fillStyle = fillStyle;\n        }\n\n        this.setText(text);\n    }\n\n    private syncContext (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D): void\n    {\n        if (this.preRenderCallback)\n        {\n            this.preRenderCallback(canvas, ctx);\n        }\n\n        ctx.font = this.font;\n        ctx.textBaseline = this.textBaseline;\n        ctx.textAlign = this.textAlign;\n        ctx.fillStyle = this.fillStyle;\n        ctx.strokeStyle = this.strokeStyle;\n        ctx.lineWidth = this.lineWidth;\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        ctx.setLineDash(this.lineDash);\n        ctx.imageSmoothingEnabled = this.antialias;\n\n        //  TODO Shadows\n    }\n\n    updateText (): this\n    {\n        const canvas = this.canvas;\n        const ctx = this.context;\n        const resolution = this.resolution;\n\n        const lines = this._text.split(this.splitRegExp);\n\n        const padding = this.padding;\n        const fillStyle = this.fillStyle;\n        const strokeStyle = this.strokeStyle;\n        const strokeWidth = this.lineWidth;\n        const lineSpacing = this.lineSpacing;\n        const strokeWidthHalf = (strokeWidth > 0) ? strokeWidth / 2 : 0;\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        this.syncContext(canvas, ctx);\n\n        //  Use specifically for measureText\n        ctx.textAlign = 'start';\n\n        //  Measure each line and add them together (note: measure text excludes stroke style!)\n\n        let maxWidth = 0;\n        let maxHeight = 0;\n        let y = 0;\n\n        const lineMetrics = [];\n\n        const vAlignAscent: boolean = (this.verticalAlign === 'ascent');\n\n        //  Work out an average line height for this font\n        const metrics = ctx.measureText('|M\u00C9q');\n\n        const averageLineHeight: number = Math.ceil(Math.abs(metrics.actualBoundingBoxAscent) + Math.abs(metrics.actualBoundingBoxDescent)) + strokeWidth;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const metrics = ctx.measureText(lines[i]);\n\n            const left = metrics.actualBoundingBoxLeft;\n            const right = metrics.actualBoundingBoxRight;\n            let ascent = metrics.actualBoundingBoxAscent;\n            let descent = metrics.actualBoundingBoxDescent;\n\n            //  Zero for a carriage-return, but we still need to add in the space\n            if ((!ascent && !descent) || lines[i] === '')\n            {\n                ascent = averageLineHeight;\n                descent = 0;\n            }\n\n            const lineWidth = Math.ceil(Math.abs(left) + Math.abs(right)) + strokeWidth;\n            const lineHeight = Math.ceil(Math.abs(ascent) + Math.abs(descent)) + strokeWidth;\n\n            if (vAlignAscent)\n            {\n                y += ascent + strokeWidthHalf;\n\n                if (i > 0)\n                {\n                    y += lineSpacing + strokeWidthHalf;\n                }\n\n                maxHeight = y + descent + strokeWidthHalf;\n            }\n            else\n            {\n                y = maxHeight + ((lineHeight - descent) - strokeWidthHalf);\n\n                maxHeight += lineHeight;\n\n                if (i < lines.length - 1)\n                {\n                    maxHeight += lineSpacing;\n                }\n            }\n\n            maxWidth = Math.max(maxWidth, lineWidth);\n\n            lineMetrics.push({ lineWidth, lineHeight, ascent, descent, left, right, y });\n        }\n\n        //  Account for lineSpacing + padding\n        maxWidth += padding.left + padding.right;\n        maxHeight += padding.top + padding.bottom;\n\n        const displayWidth = (this.fixedWidth) ? this.fixedWidth : maxWidth;\n        const displayHeight = (this.fixedHeight) ? this.fixedHeight : maxHeight;\n\n        const canvasWidth = Math.ceil(displayWidth * resolution);\n        const canvasHeight = Math.ceil(displayHeight * resolution);\n\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight)\n        {\n            canvas.width = canvasWidth;\n            canvas.height = canvasHeight;\n\n            this.texture.setSize(displayWidth, displayHeight);\n            this.setSize(displayWidth, displayHeight);\n        }\n\n        ctx.save();\n        ctx.scale(resolution, resolution);\n\n        this.syncContext(canvas, ctx);\n\n        const backgroundStyle = this.backgroundStyle;\n\n        if (backgroundStyle)\n        {\n            ctx.save();\n\n            ctx.fillStyle = backgroundStyle;\n            ctx.strokeStyle = backgroundStyle;\n\n            const cornerRadius = this.cornerRadius;\n            const halfRadius = (cornerRadius > 0) ? cornerRadius / 2 : 0;\n\n            if (cornerRadius)\n            {\n                ctx.lineWidth = cornerRadius;\n\n                ctx.strokeRect(halfRadius, halfRadius, displayWidth - cornerRadius, displayHeight - cornerRadius);\n            }\n\n            ctx.fillRect(halfRadius, halfRadius, displayWidth - cornerRadius, displayHeight - cornerRadius);\n\n            ctx.restore();\n        }\n\n        //  Text Alignment\n        const textAlign = this.textAlign;\n        const isCenter: boolean = (textAlign === 'center');\n        const isRight: boolean = (textAlign === 'right' || textAlign === 'end');\n\n        const yOffset = ((displayHeight - maxHeight) / 2) + padding.top;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const line = lines[i];\n            const metrics = lineMetrics[i];\n\n            let tx = padding.left + metrics.left + strokeWidthHalf;\n            const ty = yOffset + metrics.y;\n\n            if (isCenter)\n            {\n                tx = displayWidth / 2;\n            }\n            else if (isRight)\n            {\n                tx = displayWidth - strokeWidthHalf;\n            }\n\n            if (strokeStyle)\n            {\n                ctx.strokeText(line, tx, ty);\n            }\n\n            if (fillStyle)\n            {\n                ctx.fillText(line, tx, ty);\n            }\n        }\n\n        ctx.restore();\n\n        if (this.texture.binding)\n        {\n            this.texture.binding.update();\n        }\n\n        this.setDirty(DIRTY_CONST.TEXTURE);\n\n        return this;\n    }\n\n    get text (): string | string[]\n    {\n        return this._text;\n    }\n\n    set text (value: string | string[])\n    {\n        this.setText(value);\n    }\n\n    setText (value: string | string[] = ''): this\n    {\n        if (Array.isArray(value))\n        {\n            value = value.join('\\n');\n        }\n\n        if (value !== this._text)\n        {\n            this._text = value.toString();\n\n            this.updateText();\n        }\n\n        return this;\n    }\n\n    destroy (reparentChildren?: IContainer): void\n    {\n        this.texture.destroy();\n\n        this.fillStyle = null;\n        this.strokeStyle = null;\n        this.backgroundStyle = null;\n\n        this.canvas = null;\n        this.context = null;\n\n        super.destroy(reparentChildren);\n    }\n}\n", "import { ISceneConfig } from './ISceneConfig';\n\nexport function GetConfigValue<Property extends keyof ISceneConfig> (config: ISceneConfig, property: Property, defaultValue: ISceneConfig[Property]): ISceneConfig[Property]\n{\n    if (Object.prototype.hasOwnProperty.call(config, property))\n    {\n        return config[property];\n    }\n    else\n    {\n        return defaultValue;\n    }\n}\n", "import { GetConfigValue } from './GetConfigValue';\nimport { IScene } from './IScene';\nimport { ISceneConfig } from './ISceneConfig';\nimport { SceneManagerInstance } from './SceneManagerInstance';\n\nexport function Install (scene: IScene, config: string | ISceneConfig = {}): void\n{\n    const sceneManager = SceneManagerInstance.get();\n\n    const size = sceneManager.scenes.size;\n    const sceneIndex = sceneManager.sceneIndex;\n    const firstScene = (size === 0);\n\n    if (typeof config === 'string')\n    {\n        scene.key = config;\n    }\n    else if (config || (!config && firstScene))\n    {\n        scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex.toString());\n    }\n\n    if (sceneManager.scenes.has(scene.key))\n    {\n        console.warn('Scene key already in use: ' + scene.key);\n    }\n    else\n    {\n        sceneManager.scenes.set(scene.key, scene);\n\n        sceneManager.flush = true;\n\n        sceneManager.sceneIndex++;\n    }\n}\n", "// import { Emit } from '../events/Emit';\n\nimport { Game } from '../Game';\nimport { GameInstance } from '../GameInstance';\nimport { IEventEmitter } from '../events/IEventEmitter';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IScene } from './IScene';\nimport { ISceneConfig } from './ISceneConfig';\nimport { Install } from './Install';\n\nexport class Scene implements IScene, IEventEmitter\n{\n    key: string;\n    game: Game;\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor (config?: string | ISceneConfig)\n    {\n        this.game = GameInstance.get();\n        this.events = new Map();\n\n        Install(this, config);\n    }\n\n    // shutdown (): void\n    // {\n    //     Emit(this, 'shutdown');\n    // }\n\n    // destroy (): void\n    // {\n    //     Emit(this, 'destroy');\n\n    //     this.events.clear();\n\n    //     this.game = null;\n    //     this.events = null;\n    // }\n}\n", "import { IBaseWorld } from '../IBaseWorld';\nimport { IWorldRenderData } from '../IWorldRenderData';\n\nexport const WorldRenderEvent: string = 'worldrender';\n\nexport type WorldRenderEventHandler = (renderData: IWorldRenderData, world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldShutdownEvent: string = 'worldshutdown';\n\nexport type WorldShutdownEventHandler = (world: IBaseWorld) => void;\n", "import { IWorldRenderData } from './IWorldRenderData';\nimport { SearchEntry } from '../display/SearchEntryType';\n\nexport function CalculateTotalRenderable (entry: SearchEntry, renderData: IWorldRenderData): void\n{\n    renderData.numRendered++;\n    renderData.numRenderable++;\n\n    if (entry.node.dirtyFrame >= renderData.gameFrame)\n    {\n        renderData.dirtyFrame++;\n    }\n\n    entry.children.forEach(child =>\n    {\n        if (child.children.length > 0)\n        {\n            CalculateTotalRenderable(child, renderData);\n        }\n    });\n}\n", "import { DIRTY_CONST } from '../gameobjects/DIRTY_CONST';\nimport { SearchEntry } from '../display/SearchEntryType';\n\nexport function HasDirtyChildren (parent: SearchEntry): boolean\n{\n    if (parent.node.isDirty(DIRTY_CONST.CHILD_CACHE))\n    {\n        return true;\n    }\n\n    const stack = [ parent ];\n\n    while (stack.length > 0)\n    {\n        const entry = stack.pop();\n\n        if (entry.node.isDirty(DIRTY_CONST.TRANSFORM))\n        {\n            return true;\n        }\n\n        const numChildren = entry.children.length;\n\n        if (numChildren > 0)\n        {\n            for (let i = 0; i < numChildren; i++)\n            {\n                stack.push(entry.children[i]);\n            }\n        }\n    }\n\n    stack.length = 0;\n\n    return false;\n}\n", "import { DIRTY_CONST } from '../gameobjects/DIRTY_CONST';\nimport { HasDirtyChildren } from './HasDirtyChildren';\nimport { SearchEntry } from '../display/SearchEntryType';\n\nexport function UpdateCachedLayers (cachedLayers: SearchEntry[], dirtyCamera: boolean): void\n{\n    cachedLayers.forEach(layer =>\n    {\n        if (dirtyCamera || HasDirtyChildren(layer))\n        {\n            //  Camera is dirty, or layer has at least one dirty child\n            layer.node.setDirty(DIRTY_CONST.CHILD_CACHE);\n        }\n        else\n        {\n            //  Camera is clean and no dirty children, so we can re-use layer cache\n            //  So let's remove the children for this layer\n            layer.children.length = 0;\n        }\n    });\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { SearchEntry } from '../display/SearchEntryType';\n\nexport function WorldDepthFirstSearch (cachedLayers: SearchEntry[], parent: IGameObject, output: SearchEntry[] = []): SearchEntry[]\n{\n    for (let i = 0; i < parent.numChildren; i++)\n    {\n        const node = parent.children[i];\n\n        if (node.isRenderable())\n        {\n            const children: SearchEntry[] = [];\n\n            const entry = { node, children };\n\n            output.push(entry);\n\n            if (node.willRenderChildren && node.numChildren > 0)\n            {\n                if (node.willCacheChildren)\n                {\n                    cachedLayers.push(entry);\n                }\n\n                WorldDepthFirstSearch(cachedLayers, node, children);\n            }\n        }\n    }\n\n    return output;\n}\n", "import { CalculateTotalRenderable } from './CalculateTotalRenderable';\nimport { IBaseWorld } from './IBaseWorld';\nimport { SearchEntry } from '../display/SearchEntryType';\nimport { UpdateCachedLayers } from './UpdateCachedLayers';\nimport { WorldDepthFirstSearch } from './WorldDepthFirstSearch';\n\nexport function BuildRenderList (world: IBaseWorld): void\n{\n    const cachedLayers: SearchEntry[] = [];\n    const stack: SearchEntry[] = [];\n\n    //  entries is now populated with the n-tree search results, only containing nodes that will actually render\n    const entries = WorldDepthFirstSearch(cachedLayers, world, stack);\n\n    const renderData = world.renderData;\n\n    //  We can now sweep through the entries and purge non-dirty children of cached layers,\n    //  before finally building the render list. We can only do this if the camera is clean.\n\n    if (cachedLayers.length > 0)\n    {\n        UpdateCachedLayers(cachedLayers, world.camera.dirtyRender);\n    }\n\n    //  TODO: numRenderable probably needs to move to the search function\n    entries.forEach(entry =>\n    {\n        if (entry.children.length > 0)\n        {\n            CalculateTotalRenderable(entry, renderData);\n        }\n        else\n        {\n            renderData.numRendered++;\n            renderData.numRenderable++;\n\n            if (entry.node.dirtyFrame >= renderData.gameFrame)\n            {\n                renderData.dirtyFrame++;\n            }\n        }\n    });\n\n    world.renderList = entries;\n\n    if (world.forceRefresh)\n    {\n        renderData.dirtyFrame++;\n\n        world.forceRefresh = false;\n    }\n\n    // console.log(entries);\n    // console.log(renderData);\n    // eslint-disable-next-line no-debugger\n    // debugger;\n}\n", "import { IMatrix2D } from './IMatrix2D';\n\n//  Compares the a and b matrix and returns if they are equal.\n\nexport function Mat2dEquals (a: IMatrix2D, b: IMatrix2D): boolean\n{\n    return (\n        a.a === b.a &&\n        a.b === b.b &&\n        a.c === b.c &&\n        a.d === b.d &&\n        a.tx === b.tx &&\n        a.ty === b.ty\n    );\n}\n", "import { ISceneRenderData } from '../scenes/ISceneRenderData';\nimport { IWorldRenderData } from './IWorldRenderData';\n\nexport function MergeRenderData (sceneRenderData: ISceneRenderData, worldRenderData: IWorldRenderData): void\n{\n    sceneRenderData.numDirtyFrames += worldRenderData.dirtyFrame;\n    sceneRenderData.numTotalFrames += worldRenderData.numRendered;\n\n    if (worldRenderData.camera.dirtyRender)\n    {\n        sceneRenderData.numDirtyCameras++;\n    }\n\n    sceneRenderData.worldData.push(worldRenderData);\n}\n", "import { IWorldRenderData } from './IWorldRenderData';\n\nexport function ResetWorldRenderData (renderData: IWorldRenderData, gameFrame: number): void\n{\n    renderData.gameFrame = gameFrame;\n    renderData.dirtyFrame = 0;\n    renderData.numRendered = 0;\n    renderData.numRenderable = 0;\n}\n", "import * as GameObjectEvents from '../gameobjects/events';\nimport * as WorldEvents from './events';\n\nimport { Begin, Flush } from '../renderer/webgl1/renderpass';\nimport { Emit, Off, On, Once } from '../events';\n\nimport { BuildRenderList } from './BuildRenderList';\nimport { GameObject } from '../gameobjects';\nimport { IBaseCamera } from '../camera/IBaseCamera';\nimport { IBaseWorld } from './IBaseWorld';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { IScene } from '../scenes/IScene';\nimport { ISceneRenderData } from '../scenes/ISceneRenderData';\nimport { IWorldRenderData } from './IWorldRenderData';\nimport { Mat2dEquals } from '../math/mat2d/Mat2dEquals';\nimport { MergeRenderData } from './MergeRenderData';\nimport { RemoveChildren } from '../display';\nimport { ResetWorldRenderData } from './ResetWorldRenderData';\nimport { SearchEntry } from '../display/SearchEntryType';\n\nexport class BaseWorld extends GameObject implements IBaseWorld\n{\n    scene: IScene;\n\n    camera: IBaseCamera;\n    renderData: IWorldRenderData;\n    forceRefresh: boolean = false;\n    events: Map<string, Set<IEventInstance>>;\n    is3D: boolean = false;\n\n    renderList: SearchEntry[];\n\n    private _updateListener: IEventInstance;\n    private _renderListener: IEventInstance;\n    private _shutdownListener: IEventInstance;\n\n    constructor (scene: IScene)\n    {\n        super();\n\n        this.type = 'BaseWorld';\n        this.scene = scene;\n        this.world = this;\n\n        this.events = new Map();\n\n        this.renderList = [];\n\n        this._updateListener = On(scene, 'update', (delta: number, time: number) => this.update(delta, time));\n        this._renderListener = On(scene, 'render', (renderData: ISceneRenderData) => this.render(renderData));\n        this._shutdownListener = On(scene, 'shutdown', () => this.shutdown());\n        Once(scene, 'destroy', () => this.destroy());\n    }\n\n    update (delta: number, time: number): void\n    {\n        if (!this.willUpdate)\n        {\n            return;\n        }\n\n        Emit(this, GameObjectEvents.UpdateEvent, delta, time, this);\n\n        super.update(delta, time);\n    }\n\n    postUpdate (delta: number, time: number): void\n    {\n        Emit(this, GameObjectEvents.PostUpdateEvent, delta, time, this);\n    }\n\n    render (sceneRenderData: ISceneRenderData): void\n    {\n        const renderData = this.renderData;\n\n        ResetWorldRenderData(renderData, sceneRenderData.gameFrame);\n\n        if (!this.willRender || !this.visible)\n        {\n            return;\n        }\n\n        BuildRenderList(this);\n\n        Emit(this, WorldEvents.WorldRenderEvent, renderData, this);\n\n        MergeRenderData(sceneRenderData, renderData);\n\n        this.camera.dirtyRender = false;\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        const currentCamera = renderPass.current2DCamera;\n        const camera = this.camera;\n\n        if (!currentCamera || !Mat2dEquals(camera.worldTransform, currentCamera.worldTransform))\n        {\n            Flush(renderPass);\n        }\n\n        Begin(renderPass, camera);\n\n        this.renderList.forEach(entry =>\n        {\n            if (entry.children.length > 0)\n            {\n                this.renderNode(entry, renderPass);\n            }\n            else\n            {\n                entry.node.renderGL(renderPass);\n            }\n        });\n    }\n\n    renderNode (entry: SearchEntry, renderPass: IRenderPass): void\n    {\n        entry.node.renderGL(renderPass);\n\n        entry.children.forEach(child =>\n        {\n            if (child.children.length > 0)\n            {\n                this.renderNode(child, renderPass);\n            }\n            else\n            {\n                child.node.renderGL(renderPass);\n            }\n        });\n\n        entry.node.postRenderGL(renderPass);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        //  Emit event?\n    }\n\n    shutdown (): void\n    {\n        const scene = this.scene;\n\n        Off(scene, 'update', this._updateListener);\n        Off(scene, 'render', this._renderListener);\n        Off(scene, 'shutdown', this._shutdownListener);\n\n        //  Clear the display list and reset the camera, but leave\n        //  everything in place so we can return to this World again\n        //  at a later stage\n\n        RemoveChildren(this);\n\n        Emit(this, WorldEvents.WorldShutdownEvent, this);\n\n        ResetWorldRenderData(this.renderData, 0);\n\n        if (this.camera)\n        {\n            this.camera.reset();\n        }\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        Emit(this, GameObjectEvents.DestroyEvent, this);\n\n        ResetWorldRenderData(this.renderData, 0);\n\n        if (this.camera)\n        {\n            this.camera.destroy();\n        }\n\n        this.events.clear();\n\n        this.camera = null;\n        this.renderData = null;\n        this.events = null;\n    }\n}\n", "import { IBaseCamera } from '../camera/IBaseCamera';\nimport { IBaseWorld } from './IBaseWorld';\nimport { IWorldRenderData } from './IWorldRenderData';\n\nexport function CreateWorldRenderData (world: IBaseWorld, camera: IBaseCamera): IWorldRenderData\n{\n    return {\n        world,\n        camera,\n        gameFrame: 0,\n        dirtyFrame: 0,\n        numRendered: 0,\n        numRenderable: 0\n    };\n}\n", "import { BaseWorld } from './BaseWorld';\nimport { CreateWorldRenderData } from './CreateWorldRenderData';\nimport { IScene } from '../scenes/IScene';\nimport { IStaticCamera } from '../camera/IStaticCamera';\nimport { IStaticWorld } from './IStaticWorld';\nimport { StaticCamera } from '../camera/StaticCamera';\n\n//  A Static World is designed specifically to have a bounds of a fixed size\n//  and a camera that doesn't move at all (no scrolling, rotation, etc)\n//  Because it has a fixed size, there is no camera culling enabled.\n//  Games that use this kind of world include Pacman, Bejeweled and 2048.\n\nexport class StaticWorld extends BaseWorld implements IStaticWorld\n{\n    camera: IStaticCamera;\n\n    constructor (scene: IScene)\n    {\n        super(scene);\n\n        this.type = 'StaticWorld';\n\n        this.camera = new StaticCamera();\n\n        this.renderData = CreateWorldRenderData(this, this.camera);\n    }\n}\n", "export function In (v: number, overshoot: number = 1.70158): number\n{\n    return v * v * ((overshoot + 1) * v - overshoot);\n}\n", "export function InOut (v: number, overshoot: number = 1.70158): number\n{\n    const s = overshoot * 1.525;\n\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * (v * v * ((s + 1) * v - s));\n    }\n    else\n    {\n        return 0.5 * ((v -= 2) * v * ((s + 1) * v + s) + 2);\n    }\n}\n", "export function Out (v: number, overshoot: number = 1.70158): number\n{\n    return --v * v * ((overshoot + 1) * v + overshoot) + 1;\n}\n", "export function In (v: number): number\n{\n    v = 1 - v;\n\n    if (v < 1 / 2.75)\n    {\n        return 1 - (7.5625 * v * v);\n    }\n    else if (v < 2 / 2.75)\n    {\n        return 1 - (7.5625 * (v -= 1.5 / 2.75) * v + 0.75);\n    }\n    else if (v < 2.5 / 2.75)\n    {\n        return 1 - (7.5625 * (v -= 2.25 / 2.75) * v + 0.9375);\n    }\n    else\n    {\n        return 1 - (7.5625 * (v -= 2.625 / 2.75) * v + 0.984375);\n    }\n}\n", "export function InOut (v: number): number\n{\n    let reverse = false;\n\n    if (v < 0.5)\n    {\n        v = 1 - (v * 2);\n        reverse = true;\n    }\n    else\n    {\n        v = (v * 2) - 1;\n    }\n\n    if (v < 1 / 2.75)\n    {\n        v = 7.5625 * v * v;\n    }\n    else if (v < 2 / 2.75)\n    {\n        v = 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;\n    }\n    else if (v < 2.5 / 2.75)\n    {\n        v = 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;\n    }\n    else\n    {\n        v = 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;\n    }\n\n    if (reverse)\n    {\n        return (1 - v) * 0.5;\n    }\n    else\n    {\n        return v * 0.5 + 0.5;\n    }\n}\n", "export function Out (v: number): number\n{\n    if (v < 1 / 2.75)\n    {\n        return 7.5625 * v * v;\n    }\n    else if (v < 2 / 2.75)\n    {\n        return 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;\n    }\n    else if (v < 2.5 / 2.75)\n    {\n        return 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;\n    }\n    else\n    {\n        return 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;\n    }\n}\n", "export function In (v: number): number\n{\n    return 1 - Math.sqrt(1 - v * v);\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return -0.5 * (Math.sqrt(1 - v * v) - 1);\n    }\n    else\n    {\n        return 0.5 * (Math.sqrt(1 - (v -= 2) * v) + 1);\n    }\n}\n", "export function Out (v: number): number\n{\n    return Math.sqrt(1 - (--v * v));\n}\n", "export function In (v: number): number\n{\n    return v * v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v * v;\n    }\n    else\n    {\n        return 0.5 * ((v -= 2) * v * v + 2);\n    }\n}\n", "export function Out (v: number): number\n{\n    return --v * v * v + 1;\n}\n", "export function In (v: number, amplitude: number = 0.1, period: number = 0.1): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        let s = period / 4;\n\n        if (amplitude < 1)\n        {\n            amplitude = 1;\n        }\n        else\n        {\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n        }\n\n        return -(amplitude * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period));\n    }\n}\n", "export function InOut (v: number, amplitude: number = 0.1, period: number = 0.1): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        let s = period / 4;\n\n        if (amplitude < 1)\n        {\n            amplitude = 1;\n        }\n        else\n        {\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n        }\n\n        if ((v *= 2) < 1)\n        {\n            return -0.5 * (amplitude * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period));\n        }\n        else\n        {\n            return amplitude * Math.pow(2, -10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period) * 0.5 + 1;\n        }\n    }\n}\n", "export function Out (v: number, amplitude: number = 0.1, period: number = 0.1): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        let s = period / 4;\n\n        if (amplitude < 1)\n        {\n            amplitude = 1;\n        }\n        else\n        {\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n        }\n\n        return (amplitude * Math.pow(2, -10 * v) * Math.sin((v - s) * (2 * Math.PI) / period) + 1);\n    }\n}\n", "export function In (v: number): number\n{\n    return Math.pow(2, 10 * (v - 1)) - 0.001;\n}\n", "export function InOut (v: number): number\n{\n    if (v == 0)\n    {\n        return 0;\n    }\n\n    if (v == 1)\n    {\n        return 1;\n    }\n\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * Math.pow(2, 10 * (v - 1));\n    }\n    else\n    {\n        return 0.5 * (2 - Math.pow(2, -10 * (v - 1)));\n    }\n}\n", "export function Out (v: number): number\n{\n    return 1 - Math.pow(2, -10 * v);\n}\n", "export function In (v: number): number\n{\n    return v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v;\n    }\n    else\n    {\n        return -0.5 * (--v * (v - 2) - 1);\n    }\n}\n", "export function Out (v: number): number\n{\n    return v * (2 - v);\n}\n", "export function In (v: number): number\n{\n    return v * v * v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v * v * v;\n    }\n    else\n    {\n        return -0.5 * ((v -= 2) * v * v * v - 2);\n    }\n}\n", "export function Out (v: number): number\n{\n    return -(--v * v * v * v - 1);\n}\n", "export function In (v: number): number\n{\n    return v * v * v * v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v * v * v * v;\n    }\n    else\n    {\n        return 0.5 * ((v -= 2) * v * v * v * v + 2);\n    }\n}\n", "export function Out (v: number): number\n{\n    return (v = v - 1) * v * v * v * v + 1;\n}\n", "export function In (v: number): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return 1 - Math.cos(v * Math.PI / 2);\n    }\n}\n", "export function InOut (v: number): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0.5 * (1 - Math.cos(Math.PI * v));\n    }\n}\n", "export function Out (v: number): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return Math.sin(v * Math.PI / 2);\n    }\n}\n", "export function Linear (v: number): number\n{\n    return v;\n}\n", "export function Stepped (v: number, steps: number = 1): number\n{\n    if (v <= 0)\n    {\n        return 0;\n    }\n    else if (v >= 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return (((steps * v) | 0) + 1) * (1 / steps);\n    }\n}\n", "import * as Back from './back';\nimport * as Bounce from './bounce';\nimport * as Circular from './circular';\nimport * as Cubic from './cubic';\nimport * as Elastic from './elastic';\nimport * as Expo from './expo';\nimport * as Quadratic from './quadratic';\nimport * as Quartic from './quartic';\nimport * as Quintic from './quintic';\nimport * as Sine from './sine';\n\nimport { Linear } from './Linear';\nimport { Stepped } from './Stepped';\n\nconst EaseMap: Map<string, Function> = new Map([\n    [ 'power0', Linear ],\n    [ 'power1', Quadratic.Out ],\n    [ 'power2', Cubic.Out ],\n    [ 'power3', Quartic.Out ],\n    [ 'power4', Quintic.Out ],\n    [ 'linear', Linear ],\n    [ 'quad', Quadratic.Out ],\n    [ 'cubic', Cubic.Out ],\n    [ 'quart', Quartic.Out ],\n    [ 'quint', Quintic.Out ],\n    [ 'sine', Sine.Out ],\n    [ 'expo', Expo.Out ],\n    [ 'circ', Circular.Out ],\n    [ 'elastic', Elastic.Out ],\n    [ 'back', Back.Out ],\n    [ 'bounce', Bounce.Out ],\n    [ 'stepped', Stepped ],\n    [ 'quad.in', Quadratic.In ],\n    [ 'cubic.in', Cubic.In ],\n    [ 'quart.in', Quartic.In ],\n    [ 'quint.in', Quintic.In ],\n    [ 'sine.in', Sine.In ],\n    [ 'expo.in', Expo.In ],\n    [ 'circ.in', Circular.In ],\n    [ 'elastic.in', Elastic.In ],\n    [ 'back.in', Back.In ],\n    [ 'bounce.in', Bounce.In ],\n    [ 'quad.out', Quadratic.Out ],\n    [ 'cubic.out', Cubic.Out ],\n    [ 'quart.out', Quartic.Out ],\n    [ 'quint.out', Quintic.Out ],\n    [ 'sine.out', Sine.Out ],\n    [ 'expo.out', Expo.Out ],\n    [ 'circ.out', Circular.Out ],\n    [ 'elastic.out', Elastic.Out ],\n    [ 'back.out', Back.Out ],\n    [ 'bounce.out', Bounce.Out ],\n    [ 'quad.inout', Quadratic.InOut ],\n    [ 'cubic.inout', Cubic.InOut ],\n    [ 'quart.inout', Quartic.InOut ],\n    [ 'quint.inout', Quintic.InOut ],\n    [ 'sine.inout', Sine.InOut ],\n    [ 'expo.inout', Expo.InOut ],\n    [ 'circ.inout', Circular.InOut ],\n    [ 'elastic.inout', Elastic.InOut ],\n    [ 'back.inout', Back.InOut ],\n    [ 'bounce.inout', Bounce.InOut ]\n]);\n\n//  Allows GetEase('Back'), GetEase('Expo.InOut'), GetEase('Export.easeOut') or lower-case\n\nexport function GetEase (name: string): Function\n{\n    name = name.toLowerCase();\n    name = name.replace('ease', '');\n\n    if (EaseMap.has(name))\n    {\n        return EaseMap.get(name);\n    }\n    else\n    {\n        return Linear;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate the fuzzy ceiling of the given value.\n *\n * @function Phaser.Math.Fuzzy.Ceil\n * @since 3.0.0\n *\n * @param {number} value - The value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {number} The fuzzy ceiling of the value.\n */\nexport function FuzzyCeil (value: number, epsilon: number = 0.0001): number\n{\n    return Math.ceil(value - epsilon);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate the fuzzy floor of the given value.\n *\n * @function Phaser.Math.Fuzzy.Floor\n * @since 3.0.0\n *\n * @param {number} value - The value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {number} The floor of the value.\n */\nexport function FuzzyFloor (value: number, epsilon: number = 0.0001): number\n{\n    return Math.floor(value + epsilon);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Check whether `a` is fuzzily greater than `b`.\n *\n * `a` is fuzzily greater than `b` if it is more than `b - epsilon`.\n *\n * @function Phaser.Math.Fuzzy.GreaterThan\n * @since 3.0.0\n *\n * @param {number} a - The first value.\n * @param {number} b - The second value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {boolean} `true` if `a` is fuzzily greater than than `b`, otherwise `false`.\n */\nexport function FuzzyGreaterThan (a: number, b: number, epsilon: number = 0.0001): boolean\n{\n    return a > b - epsilon;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Check whether `a` is fuzzily less than `b`.\n *\n * `a` is fuzzily less than `b` if it is less than `b + epsilon`.\n *\n * @function Phaser.Math.Fuzzy.LessThan\n * @since 3.0.0\n *\n * @param {number} a - The first value.\n * @param {number} b - The second value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {boolean} `true` if `a` is fuzzily less than `b`, otherwise `false`.\n */\nexport function FuzzyLessThan (a: number, b: number, epsilon: number = 0.0001): boolean\n{\n    return a < b + epsilon;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { FuzzyCeil } from './FuzzyCeil';\nimport { FuzzyEqual } from './FuzzyEqual';\nimport { FuzzyFloor } from './FuzzyFloor';\nimport { FuzzyGreaterThan } from './FuzzyGreaterThan';\nimport { FuzzyLessThan } from './FuzzyLessThan';\n\n// TODO - The Epsilon values can move to a Config setter\n\nexport {\n    FuzzyCeil,\n    FuzzyEqual,\n    FuzzyFloor,\n    FuzzyGreaterThan,\n    FuzzyLessThan\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculates the factorial of a given number for integer values greater than 0.\n *\n * @function Phaser.Math.Factorial\n * @since 3.0.0\n *\n * @param {number} value - A positive integer to calculate the factorial of.\n *\n * @return {number} The factorial of the given number.\n */\nexport function Factorial (value: number): number\n{\n    if (value === 0)\n    {\n        return 1;\n    }\n\n    let res = value;\n\n    while (--value)\n    {\n        res *= value;\n    }\n\n    return res;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Factorial } from './Factorial';\n\n/**\n * Calculates the Bernstein basis from the three factorial coefficients.\n *\n * @function Phaser.Math.Bernstein\n * @since 3.0.0\n *\n * @param {number} n - The first value.\n * @param {number} i - The second value.\n *\n * @return {number} The Bernstein basis of Factorial(n) / Factorial(i) / Factorial(n - i)\n */\nexport function Bernstein (n: number, i: number): number\n{\n    return Factorial(n) / Factorial(i) / Factorial(n - i);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Bernstein } from '../Bernstein';\n\n/**\n * A bezier interpolation method.\n *\n * @function Phaser.Math.Interpolation.Bezier\n * @since 3.0.0\n *\n * @param {number[]} v - The input array of values to interpolate between.\n * @param {number} k - The percentage of interpolation, between 0 and 1.\n *\n * @return {number} The interpolated value.\n */\nexport function BezierInterpolation (v: number[], k: number): number\n{\n    let b = 0;\n    const n = v.length - 1;\n\n    for (let i = 0; i <= n; i++)\n    {\n        b += Math.pow(1 - k, n - i) * Math.pow(k, i) * v[i] * Bernstein(n, i);\n    }\n\n    return b;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CatmullRom } from '../CatmullRom';\n\n/**\n * A Catmull-Rom interpolation method.\n *\n * @function Phaser.Math.Interpolation.CatmullRom\n * @since 3.0.0\n *\n * @param {number[]} v - The input array of values to interpolate between.\n * @param {number} k - The percentage of interpolation, between 0 and 1.\n *\n * @return {number} The interpolated value.\n */\nexport function CatmullRomInterpolation (v: number[], k: number): number\n{\n    const m = v.length - 1;\n    let f = m * k;\n    let i = Math.floor(f);\n\n    if (v[0] === v[m])\n    {\n        if (k < 0)\n        {\n            i = Math.floor(f = m * (1 + k));\n        }\n\n        return CatmullRom(f - i, v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m]);\n    }\n    else\n    {\n        if (k < 0)\n        {\n            return v[0] - (CatmullRom(-f, v[0], v[0], v[1], v[1]) - v[0]);\n        }\n\n        if (k > 1)\n        {\n            return v[m] - (CatmullRom(f - m, v[m], v[m], v[m - 1], v[m - 1]) - v[m]);\n        }\n\n        return CatmullRom(f - i, v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2]);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @ignore\n */\nfunction P0 (t: number, p: number): number\n{\n    const k = 1 - t;\n\n    return k * k * k * p;\n}\n\n/**\n * @ignore\n */\nfunction P1 (t: number, p: number): number\n{\n    const k = 1 - t;\n\n    return 3 * k * k * t * p;\n}\n\n/**\n * @ignore\n */\nfunction P2 (t: number, p: number): number\n{\n    return 3 * (1 - t) * t * t * p;\n}\n\n/**\n * @ignore\n */\nfunction P3 (t: number, p: number): number\n{\n    return t * t * t * p;\n}\n\n/**\n * A cubic bezier interpolation method.\n *\n * https://medium.com/@adrian_cooney/bezier-interpolation-13b68563313a\n *\n * @function Phaser.Math.Interpolation.CubicBezier\n * @since 3.0.0\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} p0 - The start point.\n * @param {number} p1 - The first control point.\n * @param {number} p2 - The second control point.\n * @param {number} p3 - The end point.\n *\n * @return {number} The interpolated value.\n */\nexport function CubicBezierInterpolation (t: number, p0: number, p1: number, p2: number, p3: number): number\n{\n    return P0(t, p0) + P1(t, p1) + P2(t, p2) + P3(t, p3);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculates a linear (interpolation) value over t.\n *\n * @function Phaser.Math.Linear\n * @since 3.0.0\n *\n * @param {number} p0 - The first point.\n * @param {number} p1 - The second point.\n * @param {number} t - The percentage between p0 and p1 to return, represented as a number between 0 and 1.\n *\n * @return {number} The step t% of the way between p0 and p1.\n */\nexport function Linear (p0: number, p1: number, t: number): number\n{\n    return (p1 - p0) * t + p0;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Linear } from '../Linear';\n\n/**\n * A linear interpolation method.\n *\n * @function Phaser.Math.Interpolation.Linear\n * @since 3.0.0\n * @see {@link https://en.wikipedia.org/wiki/Linear_interpolation}\n *\n * @param {number[]} v - The input array of values to interpolate between.\n * @param {!number} k - The percentage of interpolation, between 0 and 1.\n *\n * @return {!number} The interpolated value.\n */\nexport function LinearInterpolation (v: number[], k: number): number\n{\n    const m = v.length - 1;\n    const f = m * k;\n    const i = Math.floor(f);\n\n    if (k < 0)\n    {\n        return Linear(v[0], v[1], f);\n    }\n    else if (k > 1)\n    {\n        return Linear(v[m], v[m - 1], m - f);\n    }\n    else\n    {\n        return Linear(v[i], v[(i + 1 > m) ? m : i + 1], f - i);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @ignore\n */\nfunction P0 (t: number, p: number): number\n{\n    const k = 1 - t;\n\n    return k * k * p;\n}\n\n/**\n * @ignore\n */\nfunction P1 (t: number, p: number): number\n{\n    return 2 * (1 - t) * t * p;\n}\n\n/**\n * @ignore\n */\nfunction P2 (t: number, p: number): number\n{\n    return t * t * p;\n}\n\n// https://github.com/mrdoob/three.js/blob/master/src/extras/core/Interpolations.js\n\n/**\n * A quadratic bezier interpolation method.\n *\n * @function Phaser.Math.Interpolation.QuadraticBezier\n * @since 3.2.0\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} p0 - The start point.\n * @param {number} p1 - The control point.\n * @param {number} p2 - The end point.\n *\n * @return {number} The interpolated value.\n */\nexport function QuadraticBezierInterpolation (t: number, p0: number, p1: number, p2: number): number\n{\n    return P0(t, p0) + P1(t, p1) + P2(t, p2);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate a smooth interpolation percentage of `x` between `min` and `max`.\n *\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\n * between 0 and 1 otherwise.\n *\n * @function Phaser.Math.SmoothStep\n * @since 3.0.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\n *\n * @param {number} x - The input value.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The percentage of interpolation, between 0 and 1.\n */\nexport function SmoothStep (x: number, min: number, max: number): number\n{\n    if (x <= min)\n    {\n        return 0;\n    }\n\n    if (x >= max)\n    {\n        return 1;\n    }\n\n    x = (x - min) / (max - min);\n\n    return x * x * (3 - 2 * x);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { SmoothStep } from '../SmoothStep';\n\n/**\n * A Smooth Step interpolation method.\n *\n * @function Phaser.Math.Interpolation.SmoothStep\n * @since 3.9.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The interpolated value.\n */\nexport function SmoothStepInterpolation (t: number, min: number, max: number): number\n{\n    return min + (max - min) * SmoothStep(t, 0, 1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate a smoother interpolation percentage of `x` between `min` and `max`.\n *\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\n * between 0 and 1 otherwise.\n *\n * Produces an even smoother interpolation than {@link Phaser.Math.SmoothStep}.\n *\n * @function Phaser.Math.SmootherStep\n * @since 3.0.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n *\n * @param {number} x - The input value.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The percentage of interpolation, between 0 and 1.\n */\nexport function SmootherStep (x: number, min: number, max: number): number\n{\n    x = Math.max(0, Math.min(1, (x - min) / (max - min)));\n\n    return x * x * x * (x * (x * 6 - 15) + 10);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { SmootherStep } from '../SmootherStep';\n\n/**\n * A Smoother Step interpolation method.\n *\n * @function Phaser.Math.Interpolation.SmootherStep\n * @since 3.9.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The interpolated value.\n */\nexport function SmootherStepInterpolation (t: number, min: number, max: number): number\n{\n    return min + (max - min) * SmootherStep(t, 0, 1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { BezierInterpolation } from './BezierInterpolation';\nimport { CatmullRomInterpolation } from './CatmullRomInterpolation';\nimport { CubicBezierInterpolation } from './CubicBezierInterpolation';\nimport { LinearInterpolation } from './LinearInterpolation';\nimport { QuadraticBezierInterpolation } from './QuadraticBezierInterpolation';\nimport { SmoothStepInterpolation } from './SmoothStepInterpolation';\nimport { SmootherStepInterpolation } from './SmootherStepInterpolation';\n\nexport {\n    BezierInterpolation,\n    CatmullRomInterpolation,\n    CubicBezierInterpolation,\n    LinearInterpolation,\n    QuadraticBezierInterpolation,\n    SmoothStepInterpolation,\n    SmootherStepInterpolation\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Returns the nearest power of 2 to the given `value`.\n *\n * @function Phaser.Math.Pow2.GetNext\n * @since 3.0.0\n *\n * @param {number} value - The value.\n *\n * @return {number} The nearest power of 2 to `value`.\n */\nexport function GetPowerOfTwo (value: number): number\n{\n    const index = Math.log(value) / 0.6931471805599453;\n\n    return (1 << Math.ceil(index));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Tests the value and returns `true` if it is a power of two.\n *\n * @function Phaser.Math.Pow2.IsValue\n * @since 3.0.0\n *\n * @param {number} value - The value to check if it's a power of two.\n *\n * @return {boolean} Returns `true` if `value` is a power of two, otherwise `false`.\n */\nexport function IsValuePowerOfTwo (value: number): boolean\n{\n    return (value > 0 && (value & (value - 1)) === 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Backward (): Vec3\n{\n    return new Vec3(0, 0, -1);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Down (): Vec3\n{\n    return new Vec3(0, -1, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Forward (): Vec3\n{\n    return new Vec3(0, 0, 1);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Left (): Vec3\n{\n    return new Vec3(-1, 0, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Right (): Vec3\n{\n    return new Vec3(1, 0, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Up (): Vec3\n{\n    return new Vec3(0, 1, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Zero (): Vec3\n{\n    return new Vec3(0, 0, 0);\n}\n", "import { Vec3Backward } from './Vec3Backward';\nimport { Vec3Down } from './Vec3Down';\nimport { Vec3Forward } from './Vec3Forward';\nimport { Vec3Left } from './Vec3Left';\nimport { Vec3Right } from './Vec3Right';\nimport { Vec3Up } from './Vec3Up';\nimport { Vec3Zero } from './Vec3Zero';\n\nexport const UP = Vec3Up();\nexport const DOWN = Vec3Down();\nexport const LEFT = Vec3Left();\nexport const RIGHT = Vec3Right();\nexport const FORWARD = Vec3Forward();\nexport const BACKWARD = Vec3Backward();\nexport const ZERO = Vec3Zero();\n", "import { IRectangle } from '../../geom/rectangle/IRectangle';\nimport { Mat4Multiply } from '../mat4/Mat4Multiply';\nimport { Matrix4 } from '../mat4/Matrix4';\nimport { Vec3 } from './Vec3';\nimport { Vec3TransformMat4 } from './Vec3TransformMat4';\n\nconst tempMatrix1 = new Matrix4();\nconst tempMatrix2 = new Matrix4();\n\nexport function Vec3Project (v: Vec3, world: Matrix4, transform: Matrix4, viewport: IRectangle, out: Vec3 = new Vec3()): Vec3\n{\n    const { x, y, width, height } = viewport;\n\n    tempMatrix1.set(\n        width / 2, 0, 0, 0,\n        0, -height / 2, 0, 0,\n        0, 0, 0.5, 0,\n        x + width / 2, height / 2 + y, 0.5, 1\n    );\n\n    Mat4Multiply(world, transform, tempMatrix2);\n    Mat4Multiply(tempMatrix2, tempMatrix1, tempMatrix2);\n\n    return Vec3TransformMat4(v, tempMatrix2, out);\n}\n", "import { Mat4Invert } from '../mat4/Mat4Invert';\nimport { Mat4Multiply } from '../mat4/Mat4Multiply';\nimport { Matrix4 } from '../mat4/Matrix4';\nimport { Vec3 } from './Vec3';\nimport { Vec3Scale } from './Vec3Scale';\nimport { Vec3TransformMat4 } from './Vec3TransformMat4';\n\nconst matrix = new Matrix4();\nconst screenSource = new Vec3();\n\nexport function Vec3Unproject (v: Vec3, viewportWidth: number, viewportHeight: number, world: Matrix4, view: Matrix4, projection: Matrix4, out: Vec3 = new Vec3()): Vec3\n{\n    Mat4Multiply(world, view, matrix);\n    Mat4Multiply(matrix, projection, matrix);\n    Mat4Invert(matrix, matrix);\n\n    const { x, y, z } = v;\n\n    screenSource.set(\n        x / viewportWidth * 2 - 1,\n        -(y / viewportHeight * 2 - 1),\n        2 * z - 1\n    );\n\n    Vec3TransformMat4(screenSource, matrix, out);\n\n    const data = matrix.data;\n\n    const num = screenSource.x * data[3] + screenSource.y * data[7] + screenSource.z * data[11] + data[15];\n\n    //  if within epsilon?\n    return Vec3Scale(out, 1 / num, out);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Snap a value to nearest grid slice, using ceil.\n *\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `15`.\n * As will `14` snap to `15`... but `16` will snap to `20`.\n *\n * @function Phaser.Math.Snap.Ceil\n * @since 3.0.0\n *\n * @param {number} value - The value to snap.\n * @param {number} gap - The interval gap of the grid.\n * @param {number} [start=0] - Optional starting offset for gap.\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\n *\n * @return {number} The snapped value.\n */\nexport function SnapCeil (value: number, gap: number, start: number = 0, divide: boolean = false): number\n{\n    if (gap === 0)\n    {\n        return value;\n    }\n\n    value -= start;\n    value = gap * Math.ceil(value / gap);\n\n    return (divide) ? (start + value) / gap : start + value;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Snap a value to nearest grid slice, using floor.\n *\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10`.\n * As will `14` snap to `10`... but `16` will snap to `15`.\n *\n * @function Phaser.Math.Snap.Floor\n * @since 3.0.0\n *\n * @param {number} value - The value to snap.\n * @param {number} gap - The interval gap of the grid.\n * @param {number} [start=0] - Optional starting offset for gap.\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\n *\n * @return {number} The snapped value.\n */\nexport function SnapFloor (value: number, gap: number, start: number = 0, divide: boolean = false): number\n{\n    if (gap === 0)\n    {\n        return value;\n    }\n\n    value -= start;\n    value = gap * Math.floor(value / gap);\n\n    return (divide) ? (start + value) / gap : start + value;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Snap a value to nearest grid slice, using rounding.\n *\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10` whereas `14` will snap to `15`.\n *\n * @function Phaser.Math.Snap.To\n * @since 3.0.0\n *\n * @param {number} value - The value to snap.\n * @param {number} gap - The interval gap of the grid.\n * @param {number} [start=0] - Optional starting offset for gap.\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\n *\n * @return {number} The snapped value.\n */\nexport function SnapTo (value: number, gap: number, start: number = 0, divide: boolean = false): number\n{\n    if (gap === 0)\n    {\n        return value;\n    }\n\n    value -= start;\n    value = gap * Math.round(value / gap);\n\n    return (divide) ? (start + value) / gap : start + value;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { SnapCeil } from './SnapCeil';\nimport { SnapFloor } from './SnapFloor';\nimport { SnapTo } from './SnapTo';\n\nexport {\n    SnapCeil,\n    SnapFloor,\n    SnapTo\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate the mean average of the given values.\n *\n * @function Phaser.Math.Average\n * @since 3.0.0\n *\n * @param {number[]} values - The values to average.\n *\n * @return {number} The average value.\n */\nexport function Average (values: number[]): number\n{\n    let sum = 0;\n\n    for (let i = 0; i < values.length; i++)\n    {\n        sum += (+values[i]);\n    }\n\n    return sum / values.length;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Ceils to some place comparative to a `base`, default is 10 for decimal place.\n *\n * The `place` is represented by the power applied to `base` to get that place.\n *\n * @function Phaser.Math.CeilTo\n * @since 3.0.0\n *\n * @param {number} value - The value to round.\n * @param {number} [place=0] - The place to round to.\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\n *\n * @return {number} The rounded value.\n */\nexport function CeilTo (value: number, place: number = 0, base: number = 10): number\n{\n    const p = Math.pow(base, -place);\n\n    return Math.ceil(value * p) / p;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculates the positive difference of two given numbers.\n *\n * @function Phaser.Math.Difference\n * @since 3.0.0\n *\n * @param {number} a - The first number in the calculation.\n * @param {number} b - The second number in the calculation.\n *\n * @return {number} The positive difference of the two given numbers.\n */\nexport function Difference (a: number, b: number): number\n{\n    return Math.abs(a - b);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Floors to some place comparative to a `base`, default is 10 for decimal place.\n *\n * The `place` is represented by the power applied to `base` to get that place.\n *\n * @function Phaser.Math.FloorTo\n * @since 3.0.0\n *\n * @param {number} value - The value to round.\n * @param {number} [place=0] - The place to round to.\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\n *\n * @return {number} The rounded value.\n */\nexport function FloorTo (value: number, place: number = 0, base: number = 10): number\n{\n    const p = Math.pow(base, -place);\n\n    return Math.floor(value * p) / p;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Clamp } from './Clamp';\n\n/**\n * Return a value based on the range between `min` and `max` and the percentage given.\n *\n * @function Phaser.Math.FromPercent\n * @since 3.0.0\n *\n * @param {number} percent - A value between 0 and 1 representing the percentage.\n * @param {number} min - The minimum value.\n * @param {number} [max] - The maximum value.\n *\n * @return {number} The value that is `percent` percent between `min` and `max`.\n */\nexport function FromPercent (percent: number, min: number, max?: number): number\n{\n    percent = Clamp(percent, 0, 1);\n\n    return (max - min) * percent;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate a per-ms speed from a distance and time (given in seconds).\n *\n * @function Phaser.Math.GetSpeed\n * @since 3.0.0\n *\n * @param {number} distance - The distance.\n * @param {number} time - The time, in seconds.\n *\n * @return {number} The speed, in distance per ms.\n */\nexport function GetSpeed (distance: number, time: number): number\n{\n    return (distance / time) / 1000;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Add an `amount` to a `value`, limiting the maximum result to `max`.\n *\n * @function Phaser.Math.MaxAdd\n * @since 3.0.0\n *\n * @param {number} value - The value to add to.\n * @param {number} amount - The amount to add.\n * @param {number} max - The maximum value to return.\n *\n * @return {number} The resulting value.\n */\nexport function MaxAdd (value: number, amount: number, max: number): number\n{\n    return Math.min(value + amount, max);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Subtract an `amount` from `value`, limiting the minimum result to `min`.\n *\n * @function Phaser.Math.MinSub\n * @since 3.0.0\n *\n * @param {number} value - The value to subtract from.\n * @param {number} amount - The amount to subtract.\n * @param {number} min - The minimum value to return.\n *\n * @return {number} The resulting value.\n */\nexport function MinSub (value: number, amount: number, min: number): number\n{\n    return Math.max(value - amount, min);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Work out what percentage `value` is of the range between `min` and `max`.\n * If `max` isn't given then it will return the percentage of `value` to `min`.\n *\n * You can optionally specify an `upperMax` value, which is a mid-way point in the range that represents 100%, after which the % starts to go down to zero again.\n *\n * @function Phaser.Math.Percent\n * @since 3.0.0\n *\n * @param {number} value - The value to determine the percentage of.\n * @param {number} min - The minimum value.\n * @param {number} [max] - The maximum value.\n * @param {number} [upperMax] - The mid-way point in the range that represents 100%.\n *\n * @return {number} A value between 0 and 1 representing the percentage.\n */\nexport function Percent (value: number, min: number, max?: number, upperMax?: number): number\n{\n    if (max === undefined) { max = min + 1; }\n\n    let percentage = (value - min) / (max - min);\n\n    if (percentage > 1)\n    {\n        if (upperMax !== undefined)\n        {\n            percentage = ((upperMax - value)) / (upperMax - max);\n\n            if (percentage < 0)\n            {\n                percentage = 0;\n            }\n        }\n        else\n        {\n            percentage = 1;\n        }\n    }\n    else if (percentage < 0)\n    {\n        percentage = 0;\n    }\n\n    return percentage;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from './const';\n\n/**\n * Convert the given angle in radians, to the equivalent angle in degrees.\n *\n * @function Phaser.Math.RadToDeg\n * @since 3.0.0\n *\n * @param {number} radians - The angle in radians to convert ot degrees.\n *\n * @return {number} The given angle converted to degrees.\n */\nexport function RadToDeg (radians: number): number\n{\n    return radians * MATH_CONST.RAD_TO_DEG;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Round a value to the given precision.\n * \n * For example:\n * \n * ```javascript\n * RoundTo(123.456, 0) = 123\n * RoundTo(123.456, 1) = 120\n * RoundTo(123.456, 2) = 100\n * ```\n * \n * To round the decimal, i.e. to round to precision, pass in a negative `place`:\n * \n * ```javascript\n * RoundTo(123.456789, 0) = 123\n * RoundTo(123.456789, -1) = 123.5\n * RoundTo(123.456789, -2) = 123.46\n * RoundTo(123.456789, -3) = 123.457\n * ```\n *\n * @function Phaser.Math.RoundTo\n * @since 3.0.0\n *\n * @param {number} value - The value to round.\n * @param {number} [place=0] - The place to round to. Positive to round the units, negative to round the decimal.\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\n *\n * @return {number} The rounded value.\n */\nexport function RoundTo (value: number, place: number = 0, base: number = 10): number\n{\n    const p = Math.pow(base, -place);\n\n    return Math.round(value * p) / p;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @typedef {object} Phaser.Types.Math.SinCosTable\n * @since 3.0.0\n *\n * @property {number[]} sin - The sine values.\n * @property {number[]} cos - The cosine values.\n * @property {number} length - The length.\n */\n\ntype SinCosTable = { sin: number[]; cos: number[]; length: number };\n\n/**\n * Generate a series of sine and cosine values.\n *\n * @function Phaser.Math.SinCosTableGenerator\n * @since 3.0.0\n *\n * @param {number} length - The number of values to generate.\n * @param {number} [sinAmp=1] - The sine value amplitude.\n * @param {number} [cosAmp=1] - The cosine value amplitude.\n * @param {number} [frequency=1] - The frequency of the values.\n *\n * @return {SinCosTable} The generated values.\n */\nexport function SinCosTableGenerator (length: number, sinAmp: number = 1, cosAmp: number = 1, frequency: number = 1): SinCosTable\n{\n    frequency *= Math.PI / length;\n\n    const cos = [];\n    const sin = [];\n\n    for (let c = 0; c < length; c++)\n    {\n        cosAmp -= sinAmp * frequency;\n        sinAmp += cosAmp * frequency;\n\n        cos[c] = cosAmp;\n        sin[c] = sinAmp;\n    }\n\n    return {\n        sin,\n        cos,\n        length\n    };\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if the two values are within the given `tolerance` of each other.\n *\n * @function Phaser.Math.Within\n * @since 3.0.0\n *\n * @param {number} a - The first value to use in the calculation.\n * @param {number} b - The second value to use in the calculation.\n * @param {number} tolerance - The tolerance. Anything equal to or less than this value is considered as being within range.\n *\n * @return {boolean} Returns `true` if `a` is less than or equal to the tolerance of `b`.\n */\nexport function Within (a: number, b: number, tolerance: number): boolean\n{\n    return (Math.abs(a - b) <= tolerance);\n}\n", "import { AddChild, AddChildren, ConsoleTreeChildren, GetBounds, RemoveChild, SetBounds } from '../../../../phaser-genesis/src/display/';\n\nimport { Game } from '../../../../phaser-genesis/src/Game';\nimport { BackgroundColor, GlobalVar, Parent, Scenes, Size, WebGL } from '../../../../phaser-genesis/src/config';\nimport { On } from '../../../../phaser-genesis/src/events';\nimport { Container, Rectangle, Sprite, Text } from '../../../../phaser-genesis/src/gameobjects/';\nimport { Loader } from '../../../../phaser-genesis/src/loader/Loader';\nimport { Scene } from '../../../../phaser-genesis/src/scenes/Scene';\nimport { StaticWorld } from '../../../../phaser-genesis/src/world/StaticWorld';\nimport { Between } from '../../../../phaser-genesis/src/math';\nimport { IGameObject } from '../../../../phaser-genesis/src/gameobjects/IGameObject';\n\nclass Demo extends Scene\n{\n    constructor ()\n    {\n        super();\n        let world = new StaticWorld(this);\n\n        let headsup = new StaticWorld(this);\n        let headsuptext = new Text(0, 0, '...', undefined, ).setOrigin(0, 0);\n        headsuptext.strokeStyle = '#000';\n        AddChild(headsup, headsuptext);\n\n        let nextGrow = 0;\n        let depth = 0;\n        let total = 0;\n        let slowUpdateCounts = [];\n\n        const wB = world.camera.bounds;\n        let container = new Container(wB.x, wB.y, wB.width, wB.height).setOrigin(0, 0);\n        AddChild(world, container);\n        let horizon:Container[] = [container];\n        let newHorizon:Container[] = [];\n        let h = 0;\n        let pixels = 0;\n\n        On(this, 'update', (delta, time) => {\n            if (slowUpdateCounts.length < 10 && delta > 75) {\n                slowUpdateCounts.push(total);\n            }\n            headsuptext.setText(`Time: ${time}\\nDepth: ${depth} / Total: ${total}\\nPixels: ${pixels}\\nMissed frames @ totals: ${slowUpdateCounts}`);\n            for (let i = 0; i < 1024 && h < horizon.length; ++i, ++h) {\n                let parent = horizon[h];\n                let isVertical = parent.width > parent.height;\n                let newW = parent.width / (isVertical ? 2 : 1);\n                let newH = parent.height / (isVertical ? 1 : 2);\n                let a = new Container(0, 0, newW, newH).setOrigin(0, 0);\n                let newX = isVertical ? a.width : 0;\n                let newY = isVertical ? 0 : a.height;\n                let b = new Container(newX, newY, newW, newH).setOrigin(0, 0);\n                const rand = Math.random()\n                if (rand < Math.pow(2, -depth)) {\n                    if (rand & 0x01) {\n                        pixels++;\n                        AddChild(a, new Rectangle(0, 0, 1, 1, Between(0, 0xFFFFFF)));\n                    }\n                    if (rand & 0x10) {\n                        pixels++;\n                        AddChild(b, new Rectangle(0, 0, 1, 1, Between(0, 0xFFFFFF)));\n                    }\n                }\n                AddChildren(parent, a, b);\n                newHorizon.push(a, b);\n                total += 2;\n            }\n            if (time > nextGrow && h >= horizon.length) {\n                nextGrow = time + 500;\n\n                h = 0;\n                horizon = newHorizon;\n                newHorizon = [];\n                depth += 1;\n            }\n        });\n    }\n}\n\nnew Game(\n    WebGL(),\n    GlobalVar('Phaser4'),\n    Size(800, 600),\n    Parent('gameParent'),\n    BackgroundColor(0x2d2d2d),\n    Scenes(Demo)\n);\n"],
  "mappings": "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",
  "names": []
}
