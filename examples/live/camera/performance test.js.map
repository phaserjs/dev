{
  "version": 3,
  "sources": ["../../../../phaser-genesis/src/config/const.ts", "../../../../phaser-genesis/src/config/ConfigStore.ts", "../../../../phaser-genesis/src/config/backgroundcolor/SetBackgroundColor.ts", "../../../../phaser-genesis/src/config/backgroundcolor/BackgroundColor.ts", "../../../../phaser-genesis/src/config/banner/SetBanner.ts", "../../../../phaser-genesis/src/config/batchsize/SetBatchSize.ts", "../../../../phaser-genesis/src/config/batchsize/BatchSize.ts", "../../../../phaser-genesis/src/config/backgroundcolor/GetBackgroundColor.ts", "../../../../phaser-genesis/src/config/size/GetHeight.ts", "../../../../phaser-genesis/src/config/size/GetResolution.ts", "../../../../phaser-genesis/src/config/size/GetWidth.ts", "../../../../phaser-genesis/src/config/renderer/SetRenderer.ts", "../../../../phaser-genesis/src/config/defaultorigin/SetDefaultOrigin.ts", "../../../../phaser-genesis/src/config/globalvar/SetGlobalVar.ts", "../../../../phaser-genesis/src/config/globalvar/GlobalVar.ts", "../../../../phaser-genesis/src/config/maxtextures/SetMaxTextures.ts", "../../../../phaser-genesis/src/dom/GetElement.ts", "../../../../phaser-genesis/src/config/parent/SetParent.ts", "../../../../phaser-genesis/src/config/parent/Parent.ts", "../../../../phaser-genesis/src/config/scenes/SetScenes.ts", "../../../../phaser-genesis/src/config/scenes/Scenes.ts", "../../../../phaser-genesis/src/config/size/SetSize.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ShaderStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/VertexBufferStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/FramebufferStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentFramebuffer.ts", "../../../../phaser-genesis/src/geom/rectangle/RectangleContains.ts", "../../../../phaser-genesis/src/geom/rectangle/Rectangle.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ViewportStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentViewport.ts", "../../../../phaser-genesis/src/geom/rectangle/RectangleEquals.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BlendModeStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ColorMatrixStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/SetAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindShaderEntry.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetCamera.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Begin.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CurrentColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/SetUniform.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindDefaultViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/TextureStack.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ClearWebGLTextures.ts", "../../../../phaser-genesis/src/config/maxtextures/GetMaxTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CreateTempTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/GetVertexBufferEntry.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopColor.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopShader.ts", "../../../../phaser-genesis/src/renderer/BindingQueue.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/CreateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/DeleteFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/DeleteGLTexture.ts", "../../../../phaser-genesis/src/math/pow2/IsSizePowerOfTwo.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/SetGLTextureFilterMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetWebGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/UnbindTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/UpdateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/GLTextureBinding.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ProcessBindingQueue.ts", "../../../../phaser-genesis/src/colormatrix/const.ts", "../../../../phaser-genesis/src/config/batchsize/GetBatchSize.ts", "../../../../phaser-genesis/src/math/mat4/Mat4Ortho.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/SetUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/BindShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/MULTI_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateDepthBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/DeleteGLBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CompileShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL_CONST.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DeleteShaders.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateProgram.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniformSetter.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_VERT.ts", "../../../../phaser-genesis/node_modules/bitecs/src/Constants.js", "../../../../phaser-genesis/node_modules/bitecs/src/Storage.js", "../../../../phaser-genesis/node_modules/bitecs/src/Util.js", "../../../../phaser-genesis/node_modules/bitecs/src/Serialize.js", "../../../../phaser-genesis/node_modules/bitecs/src/Entity.js", "../../../../phaser-genesis/node_modules/bitecs/src/Query.js", "../../../../phaser-genesis/node_modules/bitecs/src/Component.js", "../../../../phaser-genesis/node_modules/bitecs/src/World.js", "../../../../phaser-genesis/node_modules/bitecs/src/System.js", "../../../../phaser-genesis/node_modules/bitecs/src/index.js", "../../../../phaser-genesis/src/textures/UpdateFrameUVs.ts", "../../../../phaser-genesis/src/textures/Frame.ts", "../../../../phaser-genesis/src/GameObjectWorld.ts", "../../../../phaser-genesis/src/textures/SetFrameSize.ts", "../../../../phaser-genesis/src/textures/Texture.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/SetShaderFromConfig.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/Shader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/MultiTextureQuadShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ResetTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultWebGLTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/SingleTextureQuadShader.ts", "../../../../phaser-genesis/src/components/transform/Transform2DComponent.ts", "../../../../phaser-genesis/src/components/transform/AddTransform2DComponent.ts", "../../../../phaser-genesis/src/utils/NOOP.ts", "../../../../phaser-genesis/src/math/mat4/Matrix4.ts", "../../../../phaser-genesis/src/components/transform/SetBounds.ts", "../../../../phaser-genesis/src/components/dirty/DirtyComponent.ts", "../../../../phaser-genesis/src/GameInstance.ts", "../../../../phaser-genesis/src/components/hierarchy/HierarchyComponent.ts", "../../../../phaser-genesis/src/components/hierarchy/GetParentID.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyChildCache.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyChildTransform.ts", "../../../../phaser-genesis/src/components/permissions/PermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/WillCacheChildren.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyParents.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyTransform.ts", "../../../../phaser-genesis/src/components/transform/UpdateExtent.ts", "../../../../phaser-genesis/src/components/transform/Size.ts", "../../../../phaser-genesis/src/camera/BaseCamera.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyTransform.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyTransform.ts", "../../../../phaser-genesis/src/camera/StaticCamera.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/VertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/RenderPass.ts", "../../../../phaser-genesis/src/components/color/CompareColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetColorMatrix.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetColor.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetShader.ts", "../../../../phaser-genesis/src/textures/WhiteTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Start.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Draw.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Flush.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/End.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/GetCompressedTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/GetRGBArray.ts", "../../../../phaser-genesis/src/config/webglcontext/GetWebGLContext.ts", "../../../../phaser-genesis/src/renderer/RendererInstance.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRendererInstance.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRenderer.ts", "../../../../phaser-genesis/src/config/webgl/WebGL.ts", "../../../../phaser-genesis/src/config/webglcontext/SetWebGLContext.ts", "../../../../phaser-genesis/src/textures/SetFramePivot.ts", "../../../../phaser-genesis/src/textures/SetFrameSourceSize.ts", "../../../../phaser-genesis/src/textures/SetFrameTrim.ts", "../../../../phaser-genesis/src/textures/parsers/AtlasParser.ts", "../../../../phaser-genesis/src/textures/CreateCanvas.ts", "../../../../phaser-genesis/src/textures/types/CanvasTexture.ts", "../../../../phaser-genesis/src/textures/AlphaTexture.ts", "../../../../phaser-genesis/src/textures/TextureManagerInstance.ts", "../../../../phaser-genesis/src/textures/TextureManager.ts", "../../../../phaser-genesis/src/textures/CreateTextureManager.ts", "../../../../phaser-genesis/src/textures/GetTexture.ts", "../../../../phaser-genesis/src/textures/GetFramesInRange.ts", "../../../../phaser-genesis/src/gameobjects/GameObjectCache.ts", "../../../../phaser-genesis/src/textures/ReturnTexture.ts", "../../../../phaser-genesis/src/textures/RemoveTextureFromGameObject.ts", "../../../../phaser-genesis/src/components/transform/SetExtent.ts", "../../../../phaser-genesis/src/textures/SetExtentFromFrame.ts", "../../../../phaser-genesis/src/components/vertices/QuadVertexComponent.ts", "../../../../phaser-genesis/src/components/vertices/SetUV.ts", "../../../../phaser-genesis/src/textures/SetVertexUVsFromFrame.ts", "../../../../phaser-genesis/src/textures/SetFrame.ts", "../../../../phaser-genesis/src/textures/SetTexture.ts", "../../../../phaser-genesis/src/components/color/ColorComponent.ts", "../../../../phaser-genesis/src/components/color/AddColorComponent.ts", "../../../../phaser-genesis/src/components/hierarchy/GetWorldID.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyColor.ts", "../../../../phaser-genesis/src/components/dirty/AddDirtyComponent.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyChildColor.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyChildTransform.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyColor.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyDisplayList.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyWorldTransform.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyChildCache.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyChildColor.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyChildTransform.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyColor.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyDisplayList.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyWorldTransform.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyChildColor.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyDisplayList.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyWorldTransform.ts", "../../../../phaser-genesis/src/components/dirty/WillUpdateTransform.ts", "../../../../phaser-genesis/src/components/permissions/SetWillColorChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillColorChildren.ts", "../../../../phaser-genesis/src/components/color/Color.ts", "../../../../phaser-genesis/src/components/hierarchy/GetNextSiblingID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetNextSiblingID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetPreviousSiblingID.ts", "../../../../phaser-genesis/src/components/hierarchy/LinkSiblings.ts", "../../../../phaser-genesis/src/components/hierarchy/SetLastChildID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetPreviousSiblingID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetFirstChildID.ts", "../../../../phaser-genesis/src/components/hierarchy/AddHierarchyComponent.ts", "../../../../phaser-genesis/src/components/hierarchy/GetFirstChildID.ts", "../../../../phaser-genesis/src/components/hierarchy/ClearSiblings.ts", "../../../../phaser-genesis/src/components/hierarchy/DecreaseNumChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/ClearWorldAndParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/MoveNext.ts", "../../../../phaser-genesis/src/components/hierarchy/DepthFirstSearchFromParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetChildIDsFromParent.ts", "../../../../phaser-genesis/src/components/hierarchy/GetChildrenFromParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetLastChildID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetNumChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/GetParentGameObject.ts", "../../../../phaser-genesis/src/components/hierarchy/GetWorldFromID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetWorldFromParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/HasChildren.ts", "../../../../phaser-genesis/src/components/permissions/GetVisibleChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillRenderChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillUpdateChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/MoveNextUpdatable.ts", "../../../../phaser-genesis/src/components/hierarchy/SetNumChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/RelinkChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/RemoveChildID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetWorldID.ts", "../../../../phaser-genesis/src/components/hierarchy/RemoveWorldTag.ts", "../../../../phaser-genesis/src/components/hierarchy/SetParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/RemoveChildIDFromCurrentParent.ts", "../../../../phaser-genesis/src/components/permissions/WillTransformChildren.ts", "../../../../phaser-genesis/src/components/transform/SetRootTransform.ts", "../../../../phaser-genesis/src/components/hierarchy/SetWorldTag.ts", "../../../../phaser-genesis/src/components/hierarchy/SetAndUpdateParent.ts", "../../../../phaser-genesis/src/components/permissions/AddPermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/GetVisible.ts", "../../../../phaser-genesis/src/components/permissions/HasCustomDisplayList.ts", "../../../../phaser-genesis/src/components/permissions/HasRenderableChildren.ts", "../../../../phaser-genesis/src/components/permissions/SetCustomDisplayList.ts", "../../../../phaser-genesis/src/components/permissions/SetVisible.ts", "../../../../phaser-genesis/src/components/permissions/SetVisibleChildren.ts", "../../../../phaser-genesis/src/components/permissions/SetWillCacheChildren.ts", "../../../../phaser-genesis/src/components/permissions/SetWillTransformChildren.ts", "../../../../phaser-genesis/src/components/permissions/SetWillUpdateChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillRender.ts", "../../../../phaser-genesis/src/components/permissions/WillUpdate.ts", "../../../../phaser-genesis/src/components/transform/GetLocalBounds.ts", "../../../../phaser-genesis/src/math/vec2/Vec2FromArray.ts", "../../../../phaser-genesis/src/math/vec2/Vec2ToArray.ts", "../../../../phaser-genesis/src/math/vec2/Vec2.ts", "../../../../phaser-genesis/src/components/transform/IsFixedTransform.ts", "../../../../phaser-genesis/src/components/transform/IsInView.ts", "../../../../phaser-genesis/src/components/transform/Origin.ts", "../../../../phaser-genesis/src/components/transform/Position.ts", "../../../../phaser-genesis/src/components/transform/Scale.ts", "../../../../phaser-genesis/src/components/transform/SetFixedTransform.ts", "../../../../phaser-genesis/src/components/transform/SetInViewFromBounds.ts", "../../../../phaser-genesis/src/components/transform/UpdateAxisAligned.ts", "../../../../phaser-genesis/src/components/transform/Skew.ts", "../../../../phaser-genesis/src/components/transform/UpdateLocalTransform.ts", "../../../../phaser-genesis/src/components/vertices/SetQuadPosition.ts", "../../../../phaser-genesis/src/components/transform/UpdateQuadBounds.ts", "../../../../phaser-genesis/src/components/transform/UpdateWorldTransform.ts", "../../../../phaser-genesis/src/components/transform/UpdateTransforms.ts", "../../../../phaser-genesis/src/components/vertices/SetQuadColor.ts", "../../../../phaser-genesis/src/components/vertices/AddQuadVertex.ts", "../../../../phaser-genesis/src/components/vertices/SetQuadTextureIndex.ts", "../../../../phaser-genesis/src/animation/CreateAnimData.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/BatchTexturedQuadBuffer.ts", "../../../../phaser-genesis/src/display/RemoveChildrenBetween.ts", "../../../../phaser-genesis/src/display/DestroyChildren.ts", "../../../../phaser-genesis/src/display/IsValidParent.ts", "../../../../phaser-genesis/src/display/AddChild.ts", "../../../../phaser-genesis/src/display/ReparentChildren.ts", "../../../../phaser-genesis/src/gameobjects/GameObject.ts", "../../../../phaser-genesis/src/config/defaultorigin/GetDefaultOriginX.ts", "../../../../phaser-genesis/src/config/defaultorigin/GetDefaultOriginY.ts", "../../../../phaser-genesis/src/gameobjects/container/Container.ts", "../../../../phaser-genesis/src/gameobjects/sprite/Sprite.ts", "../../../../phaser-genesis/src/gameobjects/animatedsprite/AnimatedSprite.ts", "../../../../phaser-genesis/src/math/spatialgrid/SpatialHashGrid.ts", "../../../../phaser-genesis/src/gameobjects/spatialgridlayer/SpatialGridLayer.ts", "../../../../phaser-genesis/src/canvas/CanvasRoundedRect.ts", "../../../../phaser-genesis/src/gameobjects/text/Text.ts", "../../../../phaser-genesis/src/utils/array/GetRandom.ts", "../../../../phaser-genesis/src/display/RemoveChild.ts", "../../../../phaser-genesis/src/display/RemoveChildren.ts", "../../../../phaser-genesis/src/math/Between.ts", "../../../../phaser-genesis/src/animation/CalculateDuration.ts", "../../../../phaser-genesis/src/animation/LinkFrames.ts", "../../../../phaser-genesis/src/animation/Animation.ts", "../../../../phaser-genesis/src/animation/AnimationFrame.ts", "../../../../phaser-genesis/src/animation/CreateAnimationFromAtlas.ts", "../../../../phaser-genesis/src/events/Emit.ts", "../../../../phaser-genesis/src/input/keyboard/Key.ts", "../../../../phaser-genesis/src/input/keyboard/keys/DownKey.ts", "../../../../phaser-genesis/src/events/EventEmitter.ts", "../../../../phaser-genesis/src/input/keyboard/Keyboard.ts", "../../../../phaser-genesis/src/input/keyboard/keys/LeftKey.ts", "../../../../phaser-genesis/src/events/EventInstance.ts", "../../../../phaser-genesis/src/events/Off.ts", "../../../../phaser-genesis/src/events/On.ts", "../../../../phaser-genesis/src/input/keyboard/keys/RightKey.ts", "../../../../phaser-genesis/src/input/keyboard/keys/UpKey.ts", "../../../../phaser-genesis/src/camera/controls/CursorKeyCameraControls.ts", "../../../../phaser-genesis/src/config/banner/AddBanner.ts", "../../../../phaser-genesis/src/config/globalvar/AddGlobalVar.ts", "../../../../phaser-genesis/src/dom/AddToDOM.ts", "../../../../phaser-genesis/src/config/parent/AddToParent.ts", "../../../../phaser-genesis/src/config/renderer/CreateRenderer.ts", "../../../../phaser-genesis/src/config/scenes/GetScenes.ts", "../../../../phaser-genesis/src/events/Once.ts", "../../../../phaser-genesis/src/scenes/SceneManagerInstance.ts", "../../../../phaser-genesis/src/world/WorldList.ts", "../../../../phaser-genesis/src/scenes/SceneManager.ts", "../../../../phaser-genesis/src/scenes/CreateSceneManager.ts", "../../../../phaser-genesis/src/world/CreateWorldRenderData.ts", "../../../../phaser-genesis/src/dom/DOMContentLoaded.ts", "../../../../phaser-genesis/src/world/ResetWorldRenderData.ts", "../../../../phaser-genesis/src/scenes/GetConfigValue.ts", "../../../../phaser-genesis/src/scenes/Install.ts", "../../../../phaser-genesis/src/scenes/RenderStats.ts", "../../../../phaser-genesis/src/scenes/Scene.ts", "../../../../phaser-genesis/src/config/SetConfigDefaults.ts", "../../../../phaser-genesis/src/components/timer/Time.ts", "../../../../phaser-genesis/src/Game.ts", "../../../../phaser-genesis/src/loader/CreateFile.ts", "../../../../phaser-genesis/src/loader/IsAbsoluteURI.ts", "../../../../phaser-genesis/src/loader/GetURL.ts", "../../../../phaser-genesis/src/loader/RequestFile.ts", "../../../../phaser-genesis/src/loader/files/ImageFile.ts", "../../../../phaser-genesis/src/cache/Cache.ts", "../../../../phaser-genesis/src/loader/files/JSONFile.ts", "../../../../phaser-genesis/src/loader/files/AtlasFile.ts", "../../../../phaser-genesis/src/loader/files/LoadAtlasFile.ts", "../../../../phaser-genesis/src/loader/files/LoadImageFile.ts", "../../../../phaser-genesis/src/input/mouse/Mouse.ts", "../../../../phaser-genesis/src/animation/Play.ts", "../../../../phaser-genesis/src/gameobjects/text/SetBackgroundStyle.ts", "../../../../phaser-genesis/src/gameobjects/text/SetLineSpacing.ts", "../../../../phaser-genesis/src/gameobjects/text/SetPadding.ts", "../libs/stats.js", "../../../../phaser-genesis/src/gameobjects/staticlayer/StaticLayer.ts", "../../../../phaser-genesis/src/world/events/WorldAfterUpdateEvent.ts", "../../../../phaser-genesis/src/world/events/WorldBeforeUpdateEvent.ts", "../../../../phaser-genesis/src/world/events/WorldPostRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldPreRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldShutdownEvent.ts", "../../../../phaser-genesis/src/world/events/WorldUpdateEvent.ts", "../../../../phaser-genesis/src/scenes/events/SceneDestroyEvent.ts", "../../../../phaser-genesis/src/world/UpdateWorld.ts", "../../../../phaser-genesis/src/world/BaseWorld.ts", "../../../../phaser-genesis/src/world/RenderGLNode.ts", "../../../../phaser-genesis/src/world/ProcessNode.ts", "../../../../phaser-genesis/src/world/UpdateNode.ts", "../../../../phaser-genesis/src/world/PreRenderWorld.ts", "../../../../phaser-genesis/src/world/RenderGLWorld.ts", "../../../../phaser-genesis/src/camera/WorldCamera.ts", "../../../../phaser-genesis/src/world/World.ts", "../../src/camera/performance test.ts"],
  "sourcesContent": ["export const CONFIG_DEFAULTS = {\r\n    AUTO: 'Auto',\r\n    BACKGROUND_COLOR: 'BackgroundColor',\r\n    BANNER: 'Banner',\r\n    BATCH_SIZE: 'BatchSize',\r\n    CANVAS_CONTEXT: 'CanvasContext',\r\n    CANVAS: 'Canvas',\r\n    DEFAULT_ORIGIN: 'DefaultOrigin',\r\n    GLOBAL_VAR: 'GlobalVar',\r\n    MAX_TEXTURES: 'MaxTextures',\r\n    PARENT: 'Parent',\r\n    RENDERER: 'Renderer',\r\n    SCENES: 'Scenes',\r\n    SIZE: 'Size',\r\n    WEBGL_CONTEXT: 'WebGLContext',\r\n    WEBGL: 'WebGL',\r\n    WORLD_SIZE: 'WorldSize',\r\n    WORLD_WIDTH: 'WorldWidth',\r\n    WORLD_HEIGHT: 'WorldHeight'\r\n};\r\n", "export const ConfigStore = new Map();\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBackgroundColor (color: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BACKGROUND_COLOR, color);\r\n}\r\n", "import { SetBackgroundColor } from './SetBackgroundColor';\r\n\r\nexport function BackgroundColor (color: number): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetBackgroundColor(color);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBanner (title: string = '', version: string = '', url: string = '', color: string = '#fff', background: string = 'linear-gradient(#3e0081 40%, #00bcc3)'): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BANNER, { title, version, url, color, background });\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBatchSize (size: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BATCH_SIZE, size);\r\n}\r\n", "import { SetBatchSize } from './SetBatchSize';\r\n\r\nexport function BatchSize (size: number): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetBatchSize(size);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetBackgroundColor (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.BACKGROUND_COLOR);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetHeight (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).height;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetResolution (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).resolution;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetWidth (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).width;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\r\n\r\nexport function SetRenderer (renderer: IRendererConstructor): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.RENDERER, renderer);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetDefaultOrigin (x: number = 0.5, y: number = x): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.DEFAULT_ORIGIN, { x, y });\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetGlobalVar (name: string): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.GLOBAL_VAR, name);\r\n}\r\n", "import { SetGlobalVar } from './SetGlobalVar';\r\n\r\nexport function GlobalVar (name: string): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetGlobalVar(name);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetMaxTextures (max: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.MAX_TEXTURES, max);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Attempts to get the target DOM element based on the given value, which can be either\r\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\r\n * can be found it will return a reference to the document.body.\r\n *\r\n * @function Phaser.DOM.GetElement\r\n * @since 4.0.0\r\n *\r\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\r\n * \r\n * @returns {HTMLElement} The HTML Element that was found.\r\n */\r\nexport function GetElement (target?: string | HTMLElement): HTMLElement\r\n{\r\n    let element: HTMLElement;\r\n\r\n    if (target)\r\n    {\r\n        if (typeof target === 'string')\r\n        {\r\n            //  Hopefully an element ID\r\n            element = document.getElementById(target);\r\n        }\r\n        else if (typeof target === 'object' && target.nodeType === 1)\r\n        {\r\n            //  Quick test for a HTMLElement\r\n            element = target;\r\n        }\r\n    }\r\n\r\n    if (!element)\r\n    {\r\n        element = document.body;\r\n    }\r\n\r\n    return element;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { GetElement } from '../../dom/GetElement';\r\n\r\nexport function SetParent (parentElement?: string | HTMLElement): void\r\n{\r\n    //  If this function was called and `null` *wasn't* given as the parent\r\n    //  then we try to figure it out, or fallback to the document body\r\n    if (parentElement)\r\n    {\r\n        ConfigStore.set(CONFIG_DEFAULTS.PARENT, GetElement(parentElement));\r\n    }\r\n}\r\n", "import { SetParent } from './SetParent';\r\n\r\nexport function Parent (parentElement?: string | HTMLElement): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetParent(parentElement);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\n\r\nexport function SetScenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.SCENES, [].concat(scenes));\r\n}\r\n", "import { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\nimport { SetScenes } from './SetScenes';\r\n\r\nexport function Scenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetScenes(scenes);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetSize (width: number = 800, height: number = 600, resolution: number = 1): void\r\n{\r\n    if (resolution === 0)\r\n    {\r\n        resolution = window.devicePixelRatio;\r\n    }\r\n\r\n    ConfigStore.set(CONFIG_DEFAULTS.SIZE, { width, height, resolution });\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { IShader } from '../shaders/IShader';\r\nimport { ShaderStackEntry } from './ShaderStackEntry';\r\n\r\nexport type IShaderStack =\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    stack: ShaderStackEntry[];\r\n    active: IShader;\r\n    default: ShaderStackEntry;\r\n    index: number;\r\n    init: <T extends IRenderPass> (renderPass: T) => void;\r\n};\r\n\r\nexport const ShaderStack: IShaderStack =\r\n{\r\n    renderPass: null,\r\n    stack: [],\r\n    active: null,\r\n    default: null,\r\n    index: 0,\r\n\r\n    init: <T extends IRenderPass> (renderPass: T): void =>\r\n    {\r\n        ShaderStack.renderPass = renderPass;\r\n    }\r\n};\r\n", "import { ShaderStack } from './ShaderStack';\r\nimport { ShaderStackEntry } from './ShaderStackEntry';\r\n\r\nexport function CurrentShader (): ShaderStackEntry\r\n{\r\n    return ShaderStack.stack[ShaderStack.index];\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\r\n\r\nexport type IVertexBufferStack =\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    stack: IVertexBuffer[];\r\n    active: IVertexBuffer;\r\n    default: IVertexBuffer;\r\n    index: number;\r\n    init: <T extends IRenderPass> (renderPass: T) => void;\r\n};\r\n\r\nexport const VertexBufferStack: IVertexBufferStack =\r\n{\r\n    renderPass: null,\r\n    stack: [],\r\n    active: null,\r\n    default: null,\r\n    index: 0,\r\n\r\n    init: <T extends IRenderPass> (renderPass: T): void =>\r\n    {\r\n        VertexBufferStack.renderPass = renderPass;\r\n    }\r\n};\r\n", "import { IVertexBuffer } from '../buffers/IVertexBuffer';\r\nimport { VertexBufferStack } from './VertexBufferStack';\r\n\r\nexport function CurrentVertexBuffer (): IVertexBuffer\r\n{\r\n    return VertexBufferStack.stack[VertexBufferStack.index];\r\n}\r\n", "import { FramebufferStackEntry } from './FramebufferStackEntry';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport type IFramebufferStack =\r\n{\r\n    renderPass: IRenderPass;\r\n    stack: FramebufferStackEntry[];\r\n    active: WebGLFramebuffer;\r\n    default: FramebufferStackEntry;\r\n    index: number;\r\n    init: <T extends IRenderPass> (renderPass: T) => void;\r\n};\r\n\r\nexport const FramebufferStack: IFramebufferStack =\r\n{\r\n    renderPass: null,\r\n    stack: [],\r\n    active: null,\r\n    default: null,\r\n    index: 0,\r\n\r\n    init: <T extends IRenderPass> (renderPass: T): void =>\r\n    {\r\n        FramebufferStack.renderPass = renderPass;\r\n    }\r\n};\r\n", "import { FramebufferStack } from './FramebufferStack';\r\nimport { FramebufferStackEntry } from './FramebufferStackEntry';\r\n\r\nexport function CurrentFramebuffer (): FramebufferStackEntry\r\n{\r\n    return FramebufferStack.stack[FramebufferStack.index];\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { IRectangle } from './IRectangle';\r\n\r\n/**\r\n * Checks if a given point is inside a Rectangle's bounds.\r\n */\r\nexport function RectangleContains (rect: IRectangle, x: number, y: number): boolean\r\n{\r\n    if (rect.width <= 0 || rect.height <= 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RectangleContains } from './RectangleContains';\r\n\r\nexport class Rectangle\r\n{\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor (x: number = 0, y: number = 0, width: number = 0, height: number = 0)\r\n    {\r\n        this.set(x, y, width, height);\r\n    }\r\n\r\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    }\r\n\r\n    contains (x: number, y: number): boolean\r\n    {\r\n        return RectangleContains(this, x, y);\r\n    }\r\n\r\n    set right (value: number)\r\n    {\r\n        if (value <= this.x)\r\n        {\r\n            this.width = 0;\r\n        }\r\n        else\r\n        {\r\n            this.width = value - this.x;\r\n        }\r\n    }\r\n\r\n    get right (): number\r\n    {\r\n        return this.x + this.width;\r\n    }\r\n\r\n    set bottom (value: number)\r\n    {\r\n        if (value <= this.y)\r\n        {\r\n            this.height = 0;\r\n        }\r\n        else\r\n        {\r\n            this.height = value - this.y;\r\n        }\r\n    }\r\n\r\n    get bottom (): number\r\n    {\r\n        return this.y + this.height;\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\n\r\nexport type IViewportStack =\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    stack: Rectangle[];\r\n    active: Rectangle;\r\n    default: Rectangle;\r\n    index: number;\r\n    init: <T extends IRenderPass> (renderPass: T) => void;\r\n};\r\n\r\nexport const ViewportStack: IViewportStack =\r\n{\r\n    renderPass: null,\r\n    stack: [],\r\n    active: null,\r\n    default: null,\r\n    index: 0,\r\n\r\n    init: <T extends IRenderPass> (renderPass: T): void =>\r\n    {\r\n        ViewportStack.renderPass = renderPass;\r\n    }\r\n};\r\n", "import { Rectangle } from '../../../geom/rectangle/Rectangle';\r\nimport { ViewportStack } from './ViewportStack';\r\n\r\nexport function AddViewport (x: number = 0, y: number = 0, width: number = 0, height: number = 0): Rectangle\r\n{\r\n    const entry = new Rectangle(x, y, width, height);\r\n\r\n    ViewportStack.index++;\r\n\r\n    //  cursor already at the end of the stack, so we need to grow it\r\n    if (ViewportStack.index === ViewportStack.stack.length)\r\n    {\r\n        ViewportStack.stack.push(entry);\r\n    }\r\n    else\r\n    {\r\n        ViewportStack.stack[ViewportStack.index] = entry;\r\n    }\r\n\r\n    return entry;\r\n}\r\n", "import { Rectangle } from '../../../geom/rectangle/Rectangle';\r\nimport { ViewportStack } from './ViewportStack';\r\n\r\nexport function CurrentViewport (): Rectangle\r\n{\r\n    return ViewportStack.stack[ViewportStack.index];\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { IRectangle } from './IRectangle';\r\n\r\n/**\r\n * Compares the `x`, `y`, `width` and `height` properties of two rectangles.\r\n */\r\nexport function RectangleEquals (rect: IRectangle, toCompare: IRectangle): boolean\r\n{\r\n    return (\r\n        rect.x === toCompare.x &&\r\n        rect.y === toCompare.y &&\r\n        rect.width === toCompare.width &&\r\n        rect.height === toCompare.height\r\n    );\r\n}\r\n", "export let gl: WebGLRenderingContext;\r\n\r\nexport const GL =\r\n{\r\n    get: (): WebGLRenderingContext =>\r\n    {\r\n        return gl;\r\n    },\r\n\r\n    set: (context: WebGLRenderingContext | undefined): void =>\r\n    {\r\n        gl = context;\r\n    }\r\n};\r\n", "import { CurrentViewport } from './CurrentViewport';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\nimport { RectangleEquals } from '../../../geom/rectangle/RectangleEquals';\r\nimport { ViewportStack } from './ViewportStack';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindViewport (viewport?: Rectangle): void\r\n{\r\n    if (!viewport)\r\n    {\r\n        viewport = CurrentViewport();\r\n    }\r\n\r\n    if (!ViewportStack.active || !RectangleEquals(ViewportStack.active, viewport))\r\n    {\r\n        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\r\n\r\n        ViewportStack.active = viewport;\r\n    }\r\n}\r\n", "import { AddViewport } from './AddViewport';\r\nimport { BindViewport } from './BindViewport';\r\n\r\nexport function SetViewport (x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\r\n{\r\n    const entry = AddViewport(x, y, width, height);\r\n\r\n    BindViewport(entry);\r\n}\r\n", "import { CurrentFramebuffer } from './CurrentFramebuffer';\r\nimport { FramebufferStack } from './FramebufferStack';\r\nimport { FramebufferStackEntry } from './FramebufferStackEntry';\r\nimport { SetViewport } from './SetViewport';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindFramebuffer (clear: boolean = true, entry?: FramebufferStackEntry): void\r\n{\r\n    if (!entry)\r\n    {\r\n        entry = CurrentFramebuffer();\r\n    }\r\n\r\n    const { framebuffer, viewport } = entry;\r\n\r\n    if (FramebufferStack.active !== framebuffer)\r\n    {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n    }\r\n\r\n    if (clear)\r\n    {\r\n        gl.clearColor(0, 0, 0, 0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    if (viewport)\r\n    {\r\n        SetViewport(viewport.x, viewport.y, viewport.width, viewport.height);\r\n    }\r\n\r\n    FramebufferStack.active = framebuffer;\r\n}\r\n", "import { BindViewport } from './BindViewport';\r\nimport { ViewportStack } from './ViewportStack';\r\n\r\nexport function PopViewport (): void\r\n{\r\n    ViewportStack.index--;\r\n\r\n    BindViewport();\r\n}\r\n", "import { BindFramebuffer } from './BindFramebuffer';\r\nimport { CurrentFramebuffer } from './CurrentFramebuffer';\r\nimport { FramebufferStack } from './FramebufferStack';\r\nimport { PopViewport } from './PopViewport';\r\n\r\nexport function PopFramebuffer (): void\r\n{\r\n    if (CurrentFramebuffer().viewport)\r\n    {\r\n        PopViewport();\r\n    }\r\n\r\n    FramebufferStack.index--;\r\n\r\n    BindFramebuffer(false);\r\n}\r\n", "import { BlendModeStackEntry } from './BlendModeStackEntry';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport type IBlendModeStack =\r\n{\r\n    renderPass: IRenderPass;\r\n    stack: BlendModeStackEntry[];\r\n    default: BlendModeStackEntry;\r\n    index: number;\r\n    init: <T extends IRenderPass> (renderPass: T) => void;\r\n};\r\n\r\nexport const BlendModeStack: IBlendModeStack =\r\n{\r\n    renderPass: null,\r\n    stack: [],\r\n    default: null,\r\n    index: 0,\r\n\r\n    init: <T extends IRenderPass> (renderPass: T): void =>\r\n    {\r\n        BlendModeStack.renderPass = renderPass;\r\n    }\r\n};\r\n", "import { ColorMatrixStackEntry } from './ColorMatrixStackEntry';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport type IColorMatrixStack =\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    stack: ColorMatrixStackEntry[];\r\n    default: ColorMatrixStackEntry;\r\n    index: number;\r\n    init: <T extends IRenderPass> (renderPass: T) => void;\r\n};\r\n\r\nexport const ColorMatrixStack: IColorMatrixStack =\r\n{\r\n    renderPass: null,\r\n    stack: [],\r\n    default: null,\r\n    index: 0,\r\n\r\n    init: <T extends IRenderPass> (renderPass: T): void =>\r\n    {\r\n        ColorMatrixStack.renderPass = renderPass;\r\n    }\r\n};\r\n", "import { ColorMatrixStack } from './ColorMatrixStack';\r\nimport { ColorMatrixStackEntry } from './ColorMatrixStackEntry';\r\n\r\nexport function AddColorMatrix (colorMatrix: Float32Array, colorOffset: Float32Array): ColorMatrixStackEntry\r\n{\r\n    const entry = { colorMatrix, colorOffset };\r\n\r\n    ColorMatrixStack.index++;\r\n\r\n    //  cursor already at the end of the stack, so we need to grow it\r\n    if (ColorMatrixStack.index === ColorMatrixStack.stack.length)\r\n    {\r\n        ColorMatrixStack.stack.push(entry);\r\n    }\r\n    else\r\n    {\r\n        ColorMatrixStack.stack[ColorMatrixStack.index] = entry;\r\n    }\r\n\r\n    return entry;\r\n}\r\n", "import { FramebufferStack } from './FramebufferStack';\r\nimport { FramebufferStackEntry } from './FramebufferStackEntry';\r\nimport { IRectangle } from '../../../geom/rectangle/IRectangle';\r\n\r\nexport function AddFramebuffer <T extends IRectangle> (framebuffer: WebGLFramebuffer, viewport?: T): FramebufferStackEntry\r\n{\r\n    const entry = { framebuffer, viewport };\r\n\r\n    FramebufferStack.index++;\r\n\r\n    //  cursor already at the end of the stack, so we need to grow it\r\n    if (FramebufferStack.index === FramebufferStack.stack.length)\r\n    {\r\n        FramebufferStack.stack.push(entry);\r\n    }\r\n    else\r\n    {\r\n        FramebufferStack.stack[FramebufferStack.index] = entry;\r\n    }\r\n\r\n    return entry;\r\n}\r\n", "import { IShader } from '../shaders/IShader';\r\nimport { ShaderStack } from './ShaderStack';\r\nimport { ShaderStackEntry } from './ShaderStackEntry';\r\n\r\nexport function AddShader <T extends IShader> (shader: T, textureID?: number): ShaderStackEntry\r\n{\r\n    const entry = { shader, textureID };\r\n\r\n    ShaderStack.index++;\r\n\r\n    //  cursor already at the end of the stack, so we need to grow it\r\n    if (ShaderStack.index === ShaderStack.stack.length)\r\n    {\r\n        ShaderStack.stack.push(entry);\r\n    }\r\n    else\r\n    {\r\n        ShaderStack.stack[ShaderStack.index] = entry;\r\n    }\r\n\r\n    return entry;\r\n}\r\n", "import { CurrentVertexBuffer } from '../renderpass/CurrentVertexBuffer';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from './IShader';\r\nimport { gl } from '../GL';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport function SetAttributes <T extends IShader> (shader: T, renderPass: IRenderPass): void\r\n{\r\n    if (shader.program)\r\n    {\r\n        //  stride = vertexByteSize\r\n        const stride = CurrentVertexBuffer().vertexByteSize;\r\n\r\n        shader.attributes.forEach(attrib =>\r\n        {\r\n            gl.vertexAttribPointer(attrib.index, attrib.size, attrib.type, attrib.normalized, stride, attrib.offset);\r\n        });\r\n    }\r\n}\r\n", "import { CurrentShader } from './CurrentShader';\r\nimport { SetAttributes } from '../shaders/SetAttributes';\r\nimport { ShaderStack } from './ShaderStack';\r\nimport { ShaderStackEntry } from './ShaderStackEntry';\r\n\r\nexport function BindShaderEntry (entry?: ShaderStackEntry): void\r\n{\r\n    if (!entry)\r\n    {\r\n        entry = CurrentShader();\r\n    }\r\n\r\n    if (!entry.shader.isActive)\r\n    {\r\n        const success = entry.shader.bind(ShaderStack.renderPass, entry.textureID);\r\n\r\n        if (success)\r\n        {\r\n            SetAttributes(entry.shader, ShaderStack.renderPass);\r\n\r\n            if (ShaderStack.active && ShaderStack.active !== entry.shader)\r\n            {\r\n                ShaderStack.active.isActive = false;\r\n            }\r\n\r\n            ShaderStack.active = entry.shader;\r\n        }\r\n    }\r\n}\r\n", "import { BindShaderEntry } from './BindShaderEntry';\r\nimport { ShaderStack } from './ShaderStack';\r\n\r\nexport function BindDefaultShader (): void\r\n{\r\n    ShaderStack.index = 0;\r\n\r\n    BindShaderEntry(ShaderStack.default);\r\n}\r\n", "import { CurrentShader } from './CurrentShader';\r\nimport { Flush } from './Flush';\r\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function SetCamera (renderPass: IRenderPass, camera: IBaseCamera): void\r\n{\r\n    if (renderPass.current2DCamera !== camera)\r\n    {\r\n        Flush(renderPass);\r\n\r\n        renderPass.current2DCamera = camera;\r\n        renderPass.cameraMatrix = camera.getMatrix();\r\n    }\r\n\r\n    if (camera.isDirty)\r\n    {\r\n        CurrentShader().shader.bind(renderPass);\r\n    }\r\n}\r\n", "import { BindDefaultShader } from './BindDefaultShader';\r\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { SetCamera } from './SetCamera';\r\n\r\n//  Call at the start of each World rendering\r\n\r\nexport function Begin (renderPass: IRenderPass, camera: IBaseCamera): void\r\n{\r\n    BindDefaultShader();\r\n\r\n    SetCamera(renderPass, camera);\r\n}\r\n", "import { BlendModeStack } from './BlendModeStack';\r\nimport { BlendModeStackEntry } from './BlendModeStackEntry';\r\n\r\nexport function CurrentBlendMode (): BlendModeStackEntry\r\n{\r\n    return BlendModeStack.stack[BlendModeStack.index];\r\n}\r\n", "import { BlendModeStackEntry } from './BlendModeStackEntry';\r\nimport { CurrentBlendMode } from './CurrentBlendMode';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindBlendMode (entry?: BlendModeStackEntry): void\r\n{\r\n    if (!entry)\r\n    {\r\n        entry = CurrentBlendMode();\r\n    }\r\n\r\n    if (entry.enable)\r\n    {\r\n        if (!gl.isEnabled(gl.BLEND))\r\n        {\r\n            gl.enable(gl.BLEND);\r\n\r\n            gl.blendFuncSeparate(entry.srcRGB, entry.dstRGB, entry.srcAlpha, entry.dstAlpha);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        gl.disable(gl.BLEND);\r\n    }\r\n}\r\n", "import { ColorMatrixStack } from './ColorMatrixStack';\r\nimport { ColorMatrixStackEntry } from './ColorMatrixStackEntry';\r\n\r\nexport function CurrentColorMatrix (): ColorMatrixStackEntry\r\n{\r\n    return ColorMatrixStack.stack[ColorMatrixStack.index];\r\n}\r\n", "import { IShader } from './IShader';\r\n\r\nexport function SetUniform <T extends IShader> (shader: T, key: string, value: unknown): void\r\n{\r\n    const uniforms = shader.uniforms;\r\n\r\n    if (uniforms.has(key))\r\n    {\r\n        uniforms.set(key, value);\r\n\r\n        if (shader.isActive)\r\n        {\r\n            const setter = shader.uniformSetters.get(key);\r\n\r\n            setter(value);\r\n        }\r\n    }\r\n}\r\n", "import { ColorMatrixStack } from './ColorMatrixStack';\r\nimport { ColorMatrixStackEntry } from './ColorMatrixStackEntry';\r\nimport { CurrentColorMatrix } from './CurrentColorMatrix';\r\nimport { CurrentShader } from './CurrentShader';\r\nimport { Flush } from './Flush';\r\nimport { SetUniform } from '../shaders/SetUniform';\r\n\r\nexport function BindColorMatrix (entry?: ColorMatrixStackEntry): void\r\n{\r\n    if (!entry)\r\n    {\r\n        entry = CurrentColorMatrix();\r\n    }\r\n\r\n    const shader = CurrentShader().shader;\r\n\r\n    Flush(ColorMatrixStack.renderPass);\r\n\r\n    SetUniform(shader, 'uColorMatrix', entry.colorMatrix);\r\n    SetUniform(shader, 'uColorOffset', entry.colorOffset);\r\n}\r\n", "import { BindBlendMode } from './BindBlendMode';\r\nimport { BlendModeStack } from './BlendModeStack';\r\n\r\nexport function BindDefaultBlendMode (): void\r\n{\r\n    BlendModeStack.index = 0;\r\n\r\n    BindBlendMode(BlendModeStack.default);\r\n}\r\n", "import { BindColorMatrix } from './BindColorMatrix';\r\nimport { ColorMatrixStack } from './ColorMatrixStack';\r\n\r\nexport function BindDefaultColorMatrix (): void\r\n{\r\n    ColorMatrixStack.index = 0;\r\n\r\n    BindColorMatrix(ColorMatrixStack.default);\r\n}\r\n", "import { BindFramebuffer } from './BindFramebuffer';\r\nimport { FramebufferStack } from './FramebufferStack';\r\n\r\nexport function BindDefaultFramebuffer (): void\r\n{\r\n    FramebufferStack.index = 0;\r\n\r\n    BindFramebuffer(false, FramebufferStack.default);\r\n}\r\n", "import { CurrentVertexBuffer } from './CurrentVertexBuffer';\r\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\r\nimport { VertexBufferStack } from './VertexBufferStack';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindVertexBuffer (buffer?: IVertexBuffer): void\r\n{\r\n    if (!buffer)\r\n    {\r\n        buffer = CurrentVertexBuffer();\r\n    }\r\n\r\n    if (!buffer.isBound)\r\n    {\r\n        const indexBuffer = (buffer.indexed) ? buffer.indexBuffer : null;\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer);\r\n\r\n        buffer.isBound = true;\r\n\r\n        if (VertexBufferStack.active && VertexBufferStack.active !== buffer)\r\n        {\r\n            VertexBufferStack.active.isBound = false;\r\n        }\r\n\r\n        VertexBufferStack.active = buffer;\r\n    }\r\n}\r\n", "import { BindVertexBuffer } from './BindVertexBuffer';\r\nimport { VertexBufferStack } from './VertexBufferStack';\r\n\r\nexport function BindDefaultVertexBuffer (): void\r\n{\r\n    VertexBufferStack.index = 0;\r\n\r\n    BindVertexBuffer(VertexBufferStack.default);\r\n}\r\n", "import { BindViewport } from './BindViewport';\r\nimport { ViewportStack } from './ViewportStack';\r\n\r\nexport function BindDefaultViewport (): void\r\n{\r\n    ViewportStack.index = 0;\r\n\r\n    BindViewport(ViewportStack.default);\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { ITexture } from '../../../textures/ITexture';\r\n\r\nexport type ITextureStack =\r\n{\r\n    renderPass: IRenderPass;\r\n    textures: Map<number, ITexture>;\r\n    tempTextures: Map<number, WebGLTexture>;\r\n    textureIndex: number[];\r\n    maxTextures: number;\r\n    init: <T extends IRenderPass> (renderPass: T) => void;\r\n};\r\n\r\nexport const TextureStack: ITextureStack =\r\n{\r\n    renderPass: null,\r\n    textures: null,\r\n    tempTextures: null,\r\n    textureIndex: [],\r\n    maxTextures: 0,\r\n\r\n    init: <T extends IRenderPass> (renderPass: T): void =>\r\n    {\r\n        TextureStack.renderPass = renderPass;\r\n    }\r\n};\r\n", "import { TextureStack } from './TextureStack';\r\n\r\nexport function ClearWebGLTextures (): void\r\n{\r\n    TextureStack.textures.forEach(texture =>\r\n    {\r\n        if (texture)\r\n        {\r\n            texture.binding.unbind();\r\n        }\r\n    });\r\n\r\n    TextureStack.textures.clear();\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetMaxTextures (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.MAX_TEXTURES);\r\n}\r\n", "import { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\r\nimport { SetMaxTextures } from '../../../config/maxtextures/SetMaxTextures';\r\nimport { gl } from '../GL';\r\n\r\n//  As per the WebGL spec, the browser should always support at least 8 texture units\r\n//  However, the user can set this to any value they like (lower than this)\r\n\r\nexport function CreateTempTextures (): Array<[ number, WebGLTexture ]>\r\n{\r\n    //  Note: This is the maximum number of TIUs that a _fragment_ shader supports\r\n    //  https://www.khronos.org/opengl/wiki/Common_Mistakes#Texture_Unit\r\n    let maxGPUTextures: number = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    let maxCombinedGPUTextures: number = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n\r\n    console.log('MAX GPU', maxGPUTextures, 'MAX COMBINED', maxCombinedGPUTextures);\r\n\r\n    const maxConfigTextures = GetMaxTextures();\r\n\r\n    if (maxConfigTextures === 0 || maxConfigTextures > maxGPUTextures)\r\n    {\r\n        //  Insert gpu limit into config value\r\n        SetMaxTextures(maxGPUTextures);\r\n    }\r\n    else\r\n    {\r\n        maxGPUTextures = maxConfigTextures;\r\n    }\r\n\r\n    const textures: Array<[ number, WebGLTexture ]> = [];\r\n\r\n    //  Create temp textures to stop WebGL errors on mac os\r\n    for (let i: number = 0; i < maxGPUTextures; i++)\r\n    {\r\n        const tempTexture = gl.createTexture();\r\n\r\n        gl.activeTexture(gl.TEXTURE0 + i);\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, tempTexture);\r\n\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([ 0, 0, 255, 255 ]));\r\n\r\n        textures.push([ i, tempTexture ]);\r\n    }\r\n\r\n    return textures;\r\n}\r\n", "import { BufferEntry } from '../draw/BufferEntry';\r\nimport { CurrentVertexBuffer } from './CurrentVertexBuffer';\r\nimport { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nconst bufferEntry: BufferEntry = {\r\n    buffer: null,\r\n    F32: null,\r\n    offset: 0\r\n};\r\n\r\nexport function GetVertexBufferEntry (renderPass: IRenderPass, addToCount: number = 0): BufferEntry\r\n{\r\n    const buffer = CurrentVertexBuffer();\r\n\r\n    //  If batch cannot take the size of this entry, flush it first\r\n    if (renderPass.count + addToCount >= buffer.batchSize)\r\n    {\r\n        Flush(renderPass);\r\n    }\r\n\r\n    bufferEntry.buffer = buffer;\r\n    bufferEntry.F32 = buffer.vertexViewF32;\r\n    bufferEntry.offset = renderPass.count * buffer.entryElementSize;\r\n\r\n    renderPass.count += addToCount;\r\n\r\n    return bufferEntry;\r\n}\r\n", "import { BindColorMatrix } from './BindColorMatrix';\r\nimport { ColorMatrixStack } from './ColorMatrixStack';\r\n\r\nexport function PopColorMatrix (): void\r\n{\r\n    ColorMatrixStack.index--;\r\n\r\n    BindColorMatrix();\r\n}\r\n", "import { Color } from '../../../components/color/Color';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { PopColorMatrix } from './PopColorMatrix';\r\n\r\nexport function PopColor <T extends IRenderPass> (renderPass: T, color: Color): void\r\n{\r\n    if (color.colorMatrixEnabled && color.willColorChildren)\r\n    {\r\n        PopColorMatrix();\r\n    }\r\n}\r\n", "import { BindShaderEntry } from './BindShaderEntry';\r\nimport { ShaderStack } from './ShaderStack';\r\n\r\nexport function PopShader (): void\r\n{\r\n    ShaderStack.index--;\r\n\r\n    BindShaderEntry();\r\n}\r\n", "import { IGLTextureBindingConfig } from './webgl1/textures/IGLTextureBindingConfig';\r\nimport { ITexture } from '../textures/ITexture';\r\n\r\nexport type BindingQueueEntry = {\r\n    texture: ITexture,\r\n    glConfig: IGLTextureBindingConfig\r\n};\r\n\r\nconst queue: BindingQueueEntry[] = [];\r\n\r\nexport const BindingQueue =\r\n{\r\n    add: (texture: ITexture, glConfig?: IGLTextureBindingConfig): void =>\r\n    {\r\n        queue.push({ texture, glConfig });\r\n    },\r\n\r\n    get: (): BindingQueueEntry[] =>\r\n    {\r\n        return queue;\r\n    },\r\n\r\n    clear: (): void =>\r\n    {\r\n        queue.length = 0;\r\n    }\r\n};\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateFramebuffer (texture: WebGLTexture, attachment?: GLenum): WebGLFramebuffer\r\n{\r\n    if (!attachment)\r\n    {\r\n        attachment = gl.COLOR_ATTACHMENT0;\r\n    }\r\n\r\n    const framebuffer = gl.createFramebuffer();\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n    return framebuffer;\r\n}\r\n", "import { IGLMipmapType } from './IGLTextureBindingConfig';\r\nimport { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateGLTexture <T extends IGLTextureBinding> (binding: T, mipmaps?: IGLMipmapType[]): WebGLTexture\r\n{\r\n    const { generateMipmap, minFilter, parent, compressed, internalFormat, flipY, unpackPremultiplyAlpha, magFilter, wrapS, wrapT, isPOT } = binding;\r\n\r\n    const source = parent.image;\r\n\r\n    let width = parent.width;\r\n    let height = parent.height;\r\n\r\n    const glTexture: WebGLTexture = gl.createTexture();\r\n\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\r\n\r\n    if (source)\r\n    {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n\r\n        width = source.width;\r\n        height = source.height;\r\n    }\r\n    else if (compressed && mipmaps)\r\n    {\r\n        for (let i = 0; i < mipmaps.length; i++)\r\n        {\r\n            gl.compressedTexImage2D(gl.TEXTURE_2D, i, internalFormat, mipmaps[i].width, mipmaps[i].height, 0, mipmaps[i].data);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    }\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n\r\n    if (generateMipmap && isPOT)\r\n    {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    binding.texture = glTexture;\r\n\r\n    return glTexture;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteFramebuffer (framebuffer: WebGLFramebuffer): void\r\n{\r\n    if (gl && gl.isFramebuffer(framebuffer))\r\n    {\r\n        gl.deleteFramebuffer(framebuffer);\r\n    }\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteGLTexture (texture: WebGLTexture): void\r\n{\r\n    if (gl.isTexture(texture))\r\n    {\r\n        gl.deleteTexture(texture);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if the given `width` and `height` are a power of two.\r\n * Useful for checking texture dimensions.\r\n *\r\n * @function Phaser.Math.Pow2.IsSize\r\n * @since 3.0.0\r\n *\r\n * @param {number} width - The width.\r\n * @param {number} height - The height.\r\n *\r\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\r\n */\r\nexport function IsSizePowerOfTwo (width: number, height: number): boolean\r\n{\r\n    if (width < 1 || height < 1)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function SetGLTextureFilterMode (texture: WebGLTexture, linear: boolean = true): void\r\n{\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\r\n}\r\n", "import { ClearWebGLTextures } from './ClearWebGLTextures';\r\nimport { Flush } from './Flush';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { TextureStack } from './TextureStack';\r\nimport { gl } from '../GL';\r\n\r\n//  request the next available texture and bind it\r\n//  returns the new ID\r\n\r\nexport function SetWebGLTexture <T extends ITexture> (texture: T): number\r\n{\r\n    if (!texture.binding)\r\n    {\r\n        return -1;\r\n    }\r\n\r\n    const binding = texture.binding;\r\n    const textures = TextureStack.textures;\r\n\r\n    //  Make sure texture isn't already bound\r\n    if (!binding.isBound)\r\n    {\r\n        //  Is the current texture Map full? If so, flush it all\r\n        if (textures.size === TextureStack.maxTextures)\r\n        {\r\n            Flush(TextureStack.renderPass);\r\n\r\n            ClearWebGLTextures();\r\n        }\r\n\r\n        // Add texture to the map\r\n        const textureUnit = textures.size;\r\n\r\n        gl.activeTexture(gl.TEXTURE0 + textureUnit);\r\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n\r\n        textures.set(textureUnit, texture);\r\n\r\n        binding.bind(textureUnit);\r\n    }\r\n\r\n    return binding.textureUnit;\r\n}\r\n", "import { ITexture } from '../../../textures/ITexture';\r\nimport { TextureStack } from './TextureStack';\r\nimport { gl } from '../GL';\r\n\r\nexport function UnbindTexture <T extends ITexture> (texture: T): void\r\n{\r\n    const index = texture.binding.textureUnit;\r\n\r\n    const binding = texture.binding;\r\n\r\n    binding.unbind();\r\n\r\n    gl.activeTexture(gl.TEXTURE0 + index);\r\n    gl.bindTexture(gl.TEXTURE_2D, TextureStack.tempTextures.get(index));\r\n}\r\n", "import { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { SetWebGLTexture } from '../renderpass/SetWebGLTexture';\r\nimport { UnbindTexture } from '../renderpass/UnbindTexture';\r\nimport { gl } from '../GL';\r\n\r\nexport function UpdateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\r\n{\r\n    const parent = binding.parent;\r\n    const source = parent.image;\r\n    const width = source.width;\r\n    const height = source.height;\r\n\r\n    if (width > 0 && height > 0)\r\n    {\r\n        SetWebGLTexture(parent);\r\n\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n\r\n        UnbindTexture(parent);\r\n    }\r\n\r\n    return binding.texture;\r\n}\r\n", "import { IGLMipmapType, IGLTextureBindingConfig } from './IGLTextureBindingConfig';\r\n\r\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\r\nimport { CreateGLTexture } from './CreateGLTexture';\r\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\r\nimport { DeleteGLTexture } from './DeleteGLTexture';\r\nimport { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { IsSizePowerOfTwo } from '../../../math/pow2/IsSizePowerOfTwo';\r\nimport { SetGLTextureFilterMode } from './SetGLTextureFilterMode';\r\nimport { UpdateGLTexture } from './UpdateGLTexture';\r\nimport { gl } from '../GL';\r\n\r\nexport class GLTextureBinding implements IGLTextureBinding\r\n{\r\n    parent: ITexture;\r\n\r\n    texture: WebGLTexture;\r\n    framebuffer: WebGLFramebuffer;\r\n    depthbuffer: WebGLRenderbuffer;\r\n\r\n    format: string;\r\n    internalFormat: GLenum;\r\n    compressed: boolean;\r\n    mipmaps: IGLMipmapType[];\r\n\r\n    isBound: boolean = false;\r\n    textureUnit: number = 0;\r\n\r\n    unpackPremultiplyAlpha: boolean = true;\r\n\r\n    minFilter: GLenum;\r\n    magFilter: GLenum;\r\n    wrapS: GLenum;\r\n    wrapT: GLenum;\r\n\r\n    flipY: boolean = false;\r\n    isPOT: boolean = false;\r\n    generateMipmap: boolean = false;\r\n\r\n    constructor (parent: ITexture, config: IGLTextureBindingConfig = {})\r\n    {\r\n        this.parent = parent;\r\n\r\n        this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\r\n\r\n        //  Add option to dump the mipmaps arrays after binding - but prevents context loss restoration\r\n\r\n        const {\r\n            mipmaps = null,\r\n            compressed = false,\r\n            format = 'IMG',\r\n            internalFormat = 0,\r\n            texture = null,\r\n            framebuffer = null,\r\n            createFramebuffer = false,\r\n            depthbuffer = null,\r\n            unpackPremultiplyAlpha = true,\r\n            minFilter = (this.isPOT) ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR,\r\n            magFilter = gl.LINEAR,\r\n            wrapS = gl.CLAMP_TO_EDGE,\r\n            wrapT = gl.CLAMP_TO_EDGE,\r\n            generateMipmap = this.isPOT,\r\n            flipY = false\r\n        } = config;\r\n\r\n        this.compressed = compressed;\r\n        this.format = format;\r\n        this.internalFormat = internalFormat;\r\n        this.mipmaps = mipmaps;\r\n\r\n        //  If you don't set minFilter to LINEAR then the compressed textures don't work!\r\n        if (compressed)\r\n        {\r\n            this.minFilter = gl.LINEAR;\r\n        }\r\n        else\r\n        {\r\n            this.minFilter = minFilter;\r\n        }\r\n\r\n        this.magFilter = magFilter;\r\n        this.wrapS = wrapS;\r\n        this.wrapT = wrapT;\r\n        this.generateMipmap = generateMipmap;\r\n        this.flipY = flipY;\r\n        this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\r\n\r\n        if (texture)\r\n        {\r\n            this.texture = texture;\r\n        }\r\n        else\r\n        {\r\n            CreateGLTexture(this, mipmaps);\r\n        }\r\n\r\n        if (framebuffer)\r\n        {\r\n            this.framebuffer = framebuffer;\r\n        }\r\n        else if (createFramebuffer)\r\n        {\r\n            this.framebuffer = CreateFramebuffer(this.texture);\r\n        }\r\n\r\n        if (depthbuffer)\r\n        {\r\n            this.depthbuffer = depthbuffer;\r\n        }\r\n\r\n        parent.binding = this;\r\n    }\r\n\r\n    //  Needed?\r\n    setFilter (linear: boolean): void\r\n    {\r\n        if (this.texture)\r\n        {\r\n            SetGLTextureFilterMode(this.texture, linear);\r\n        }\r\n    }\r\n\r\n    create (): WebGLTexture\r\n    {\r\n        const texture = this.texture;\r\n\r\n        if (texture)\r\n        {\r\n            DeleteGLTexture(texture);\r\n        }\r\n\r\n        return CreateGLTexture(this);\r\n    }\r\n\r\n    update (): WebGLTexture\r\n    {\r\n        const texture = this.texture;\r\n\r\n        if (!texture)\r\n        {\r\n            return CreateGLTexture(this);\r\n        }\r\n        else\r\n        {\r\n            return UpdateGLTexture(this);\r\n        }\r\n    }\r\n\r\n    bind (index: number): void\r\n    {\r\n        this.isBound = true;\r\n        this.textureUnit = index;\r\n    }\r\n\r\n    unbind (): void\r\n    {\r\n        this.isBound = false;\r\n        this.textureUnit = 0;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.unbind();\r\n\r\n        DeleteGLTexture(this.texture);\r\n        DeleteFramebuffer(this.framebuffer);\r\n\r\n        this.parent = null;\r\n        this.texture = null;\r\n        this.framebuffer = null;\r\n    }\r\n}\r\n", "import { BindingQueue } from '../../BindingQueue';\r\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\r\n\r\nexport function ProcessBindingQueue (): void\r\n{\r\n    const queue = BindingQueue.get();\r\n\r\n    queue.forEach(entry =>\r\n    {\r\n        const { texture, glConfig } = entry;\r\n\r\n        if (!texture.binding)\r\n        {\r\n            texture.binding = new GLTextureBinding(texture, glConfig);\r\n        }\r\n    });\r\n\r\n    BindingQueue.clear();\r\n}\r\n", "export const DEFAULT_COLOR_MATRIX = new Float32Array([ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ]);\r\nexport const DEFAULT_COLOR_OFFSET = new Float32Array(4);\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetBatchSize (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.BATCH_SIZE);\r\n}\r\n", "import { Matrix4 } from './Matrix4';\r\n\r\n// Generates an orthogonal projection matrix with the given bounds\r\n\r\nexport function Mat4Ortho (matrix: Float32Array, left: number, right: number, bottom: number, top: number, near: number, far: number): void\r\n{\r\n    const lr = 1 / (left - right);\r\n    const bt = 1 / (bottom - top);\r\n    const nf = 1 / (near - far);\r\n\r\n    matrix.set([\r\n        -2 * lr,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        -2 * bt,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        2 * nf,\r\n        0,\r\n        (left + right) * lr,\r\n        (top + bottom) * bt,\r\n        (far + near) * nf,\r\n        1\r\n    ]);\r\n}\r\n", "import { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from './IShader';\r\nimport { gl } from '../GL';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport function SetUniforms <T extends IShader> (shader: T, renderPass: IRenderPass): boolean\r\n{\r\n    if (!shader.program)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    gl.useProgram(shader.program);\r\n\r\n    shader.isActive = true;\r\n\r\n    const uniforms = shader.uniforms;\r\n\r\n    for (const [ name, setter ] of shader.uniformSetters.entries())\r\n    {\r\n        setter(uniforms.get(name));\r\n    }\r\n\r\n    return true;\r\n}\r\n", "import { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from './IShader';\r\nimport { SetUniforms } from './SetUniforms';\r\n\r\nexport function BindShader <T extends IShader> (shader: T, renderPass: IRenderPass): boolean\r\n{\r\n    const uniforms = shader.uniforms;\r\n\r\n    uniforms.set('uProjectionMatrix', renderPass.projectionMatrix);\r\n    uniforms.set('uCameraMatrix', renderPass.cameraMatrix);\r\n\r\n    shader.updateUniforms(renderPass);\r\n\r\n    return SetUniforms(shader, renderPass);\r\n}\r\n", "export const MULTI_QUAD_FRAG =\r\n`#define SHADER_NAME MULTI_QUAD_FRAG\r\n#define numTextures %count%\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture[%count%];\r\nuniform mat4 uColorMatrix;\r\nuniform vec4 uColorOffset;\r\n\r\nvec4 getSampler (int index, vec2 uv)\r\n{\r\n    for (int i = 0; i < numTextures; ++i)\r\n    {\r\n        vec4 color = texture2D(uTexture[i], uv);\r\n\r\n        if (i == index)\r\n        {\r\n            return color * vec4(vTintColor.rgb * vTintColor.a, vTintColor.a);\r\n        }\r\n    }\r\n\r\n    //  Return black\r\n    return vec4(0);\r\n}\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color = getSampler(int(vTextureId), vTextureCoord);\r\n\r\n    //  Un pre-mult alpha\r\n    if (color.a > 0.0)\r\n    {\r\n        color.rgb /= color.a;\r\n    }\r\n\r\n    vec4 result = color * uColorMatrix + (uColorOffset / 255.0);\r\n\r\n    //  Pre-mult alpha\r\n    result.rgb *= result.a;\r\n\r\n    gl_FragColor = vec4(result.rgb, result.a);\r\n}`;\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateDepthBuffer (framebuffer: WebGLFramebuffer, textureWidth: number, textureHeight: number): WebGLRenderbuffer\r\n{\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    const depthBuffer = gl.createRenderbuffer();\r\n\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\r\n\r\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureWidth, textureHeight);\r\n\r\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n    return depthBuffer;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteGLBuffer (buffer: WebGLBuffer): void\r\n{\r\n    if (gl.isBuffer(buffer))\r\n    {\r\n        gl.deleteBuffer(buffer);\r\n    }\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function CompileShader (source: string, type: GLenum): WebGLShader | null\r\n{\r\n    const shader = gl.createShader(type);\r\n\r\n    gl.shaderSource(shader, source);\r\n\r\n    gl.compileShader(shader);\r\n\r\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n    if (!status)\r\n    {\r\n        const info = gl.getShaderInfoLog(shader);\r\n\r\n        //  Adding line numbers idea borrowed from Gregg Tavares!\r\n        const sourceLines = source.split('\\n').map((line, index) =>\r\n        {\r\n            return `${index}: ${line}`;\r\n        });\r\n\r\n        console.error(`Error compiling shader: ${info}`, sourceLines.join('\\n'));\r\n\r\n        gl.deleteShader(shader);\r\n\r\n        return null;\r\n    }\r\n\r\n    return shader;\r\n}\r\n", "const BYTE                   = 0x1400;\r\nconst UNSIGNED_BYTE          = 0x1401;\r\nconst SHORT                  = 0x1402;\r\nconst UNSIGNED_SHORT         = 0x1403;\r\nconst INT                    = 0x1404;\r\nconst UNSIGNED_INT           = 0x1405;\r\nconst FLOAT                  = 0x1406;\r\nconst REPEAT                 = 0x2901;  // eslint-disable-line\r\nconst CLAMP_TO_EDGE          = 0x812F;\r\nconst MIRRORED_REPEAT        = 0x8370;  // eslint-disable-line\r\nconst NEAREST                = 0x2600;  // eslint-disable-line\r\nconst LINEAR                 = 0x2601;\r\nconst NEAREST_MIPMAP_NEAREST = 0x2700;  // eslint-disable-line\r\nconst LINEAR_MIPMAP_NEAREST  = 0x2701;  // eslint-disable-line\r\nconst NEAREST_MIPMAP_LINEAR  = 0x2702;  // eslint-disable-line\r\nconst LINEAR_MIPMAP_LINEAR   = 0x2703;  // eslint-disable-line\r\n\r\nexport {\r\n    BYTE,\r\n    UNSIGNED_BYTE,\r\n    SHORT,\r\n    UNSIGNED_SHORT,\r\n    INT,\r\n    UNSIGNED_INT,\r\n    FLOAT,\r\n    REPEAT,\r\n    CLAMP_TO_EDGE,\r\n    MIRRORED_REPEAT,\r\n    NEAREST,\r\n    LINEAR,\r\n    NEAREST_MIPMAP_NEAREST,\r\n    LINEAR_MIPMAP_NEAREST,\r\n    NEAREST_MIPMAP_LINEAR,\r\n    LINEAR_MIPMAP_LINEAR\r\n};\r\n", "import * as GL_CONST from '../GL_CONST';\r\n\r\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\r\nimport { gl } from '../GL';\r\n\r\nexport type ShaderAttributeEntry = {\r\n    size: number;\r\n    type?: number;\r\n    normalized?: boolean;\r\n    stride?: number;\r\n};\r\n\r\nexport function CreateAttributes (program: WebGLProgram, attribs: Record<string, ShaderAttributeEntry>): Map<string, IVertexAttribPointer>\r\n{\r\n    const attributes = new Map();\r\n\r\n    const defaultSettings: ShaderAttributeEntry =\r\n    {\r\n        size: 1,\r\n        type: GL_CONST.FLOAT,\r\n        normalized: false,\r\n        stride: 0\r\n    };\r\n\r\n    let offset = 0;\r\n\r\n    for (const [ name, entry ] of Object.entries(attribs))\r\n    {\r\n        const index = gl.getAttribLocation(program, name);\r\n\r\n        if (index !== -1)\r\n        {\r\n            gl.enableVertexAttribArray(index);\r\n\r\n            const {\r\n\r\n                size = defaultSettings.size,\r\n                type = defaultSettings.type,\r\n                normalized = defaultSettings.normalized,\r\n                stride = defaultSettings.stride\r\n\r\n            } = entry;\r\n\r\n            attributes.set(name, { index, size, type, normalized, stride, offset });\r\n\r\n            //  Default value as used by FLOAT, UNSIGNED_INT and INT\r\n            let typeSize = 4;\r\n\r\n            if (type === GL_CONST.UNSIGNED_SHORT || type === GL_CONST.SHORT)\r\n            {\r\n                typeSize = 2;\r\n            }\r\n            else if (type === GL_CONST.UNSIGNED_BYTE || type === GL_CONST.BYTE)\r\n            {\r\n                typeSize = 1;\r\n            }\r\n\r\n            offset += size * typeSize;\r\n        }\r\n    }\r\n\r\n    return attributes;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteShaders (...shaders: WebGLShader[]): void\r\n{\r\n    shaders.forEach(shader =>\r\n    {\r\n        gl.deleteShader(shader);\r\n    });\r\n}\r\n", "import { DeleteShaders } from './DeleteShaders';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateProgram (...shaders: WebGLShader[]): WebGLProgram\r\n{\r\n    const program = gl.createProgram();\r\n\r\n    shaders.forEach(shader =>\r\n    {\r\n        gl.attachShader(program, shader);\r\n    });\r\n\r\n    gl.linkProgram(program);\r\n\r\n    const status = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n    if (!status)\r\n    {\r\n        const info = gl.getProgramInfoLog(program);\r\n\r\n        console.error(`Error linking program: ${info}`);\r\n\r\n        gl.deleteProgram(program);\r\n\r\n        DeleteShaders(...shaders);\r\n\r\n        return null;\r\n    }\r\n\r\n    return program;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport type FloatSetter = (v: number) => void;\r\nexport type F32Setter = (v: Float32List) => void;\r\nexport type I32Setter = (v: Int32List) => void;\r\n\r\nexport function CreateUniformSetter (uniform: WebGLActiveInfo, location: WebGLUniformLocation, isArray: boolean = false): FloatSetter | F32Setter | I32Setter\r\n{\r\n    switch (uniform.type)\r\n    {\r\n        case gl.INT:\r\n        case gl.BOOL:\r\n        {\r\n            if (isArray)\r\n            {\r\n                return (v: Int32List): void =>\r\n                {\r\n                    gl.uniform1iv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1i(location, v);\r\n                };\r\n            }\r\n        }\r\n\r\n        case gl.INT_VEC2:\r\n        case gl.BOOL_VEC2:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform2iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.INT_VEC3:\r\n        case gl.BOOL_VEC3:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform3iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.INT_VEC4:\r\n        case gl.BOOL_VEC4:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform4iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT:\r\n        {\r\n            if (isArray)\r\n            {\r\n                return (v: Float32List): void =>\r\n                {\r\n                    gl.uniform1fv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1f(location, v);\r\n                };\r\n            }\r\n        }\r\n\r\n        case gl.FLOAT_VEC2:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform2fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_VEC3:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform3fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_VEC4:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform4fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT2:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix2fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT3:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix3fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT4:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix4fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.SAMPLER_2D:\r\n        case gl.SAMPLER_CUBE:\r\n        {\r\n            if (uniform.size > 1)\r\n            {\r\n                return (v: Int32List): void =>\r\n                {\r\n                    gl.uniform1iv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1i(location, v);\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { CreateUniformSetter } from './CreateUniformSetter';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateUniforms (program: WebGLProgram): Map<string, Function>\r\n{\r\n    const uniforms = new Map();\r\n\r\n    const total = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n    for (let i = 0; i < total; i++)\r\n    {\r\n        const uniform = gl.getActiveUniform(program, i);\r\n\r\n        let name = uniform.name;\r\n\r\n        if (name.startsWith('gl_') || name.startsWith('webgl_'))\r\n        {\r\n            //  Skip built-in uniforms\r\n            continue;\r\n        }\r\n\r\n        const location = gl.getUniformLocation(program, name);\r\n\r\n        if (location)\r\n        {\r\n            let isArray = false;\r\n\r\n            //  If uniform name has [0] at the end, remove it\r\n            if (name.endsWith('[0]'))\r\n            {\r\n                name = name.slice(0, -3);\r\n\r\n                isArray = (uniform.size > 1);\r\n            }\r\n\r\n            uniforms.set(name, CreateUniformSetter(uniform, location, isArray));\r\n        }\r\n    }\r\n\r\n    return uniforms;\r\n}\r\n", "import { CompileShader } from './CompileShader';\r\nimport { CreateAttributes } from './CreateAttributes';\r\nimport { CreateProgram } from './CreateProgram';\r\nimport { CreateUniforms } from './CreateUniforms';\r\nimport { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\r\nimport { IShader } from './IShader';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateShader <T extends IShader> (shader: T, fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): T\r\n{\r\n    const maxTextures = GetMaxTextures();\r\n\r\n    //  Replace %count% by default, as lots of shaders will need it (and it won't hurt if it doesn't exist)\r\n    fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\r\n\r\n    const fragmentShader = CompileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\r\n    const vertexShader = CompileShader(vertexShaderSource, gl.VERTEX_SHADER);\r\n\r\n    if (!fragmentShader || !vertexShader)\r\n    {\r\n        return;\r\n    }\r\n\r\n    const program = CreateProgram(fragmentShader, vertexShader);\r\n\r\n    if (!program)\r\n    {\r\n        return;\r\n    }\r\n\r\n    const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n    gl.useProgram(program);\r\n\r\n    shader.program = program;\r\n\r\n    shader.uniformSetters = CreateUniforms(program);\r\n\r\n    shader.uniforms = new Map();\r\n\r\n    //  Copy starting values from the config object to the uniforms map but only if a setter exists\r\n    for (const [ key, value ] of Object.entries(uniforms))\r\n    {\r\n        if (shader.uniformSetters.has(key))\r\n        {\r\n            shader.uniforms.set(key, value);\r\n        }\r\n    }\r\n\r\n    shader.attributes = CreateAttributes(program, attribs);\r\n\r\n    gl.useProgram(currentProgram);\r\n\r\n    shader.isActive = false;\r\n\r\n    return shader;\r\n}\r\n", "import * as GL_CONST from '../GL_CONST';\r\n\r\nimport { ShaderAttributeEntry } from './CreateAttributes';\r\n\r\nexport const DefaultQuadAttributes: Record<string, ShaderAttributeEntry> =\r\n{\r\n    aVertexPosition: { size: 2 },\r\n    aTextureCoord: { size: 2 },\r\n    aTextureId: { size: 1 },\r\n    aTintColor: { size: 4 }\r\n};\r\n", "export const DefaultQuadUniforms: Record<string, Number | Float32List> =\r\n{\r\n    uProjectionMatrix: new Float32Array(16),\r\n    uCameraMatrix: new Float32Array(16),\r\n    uTexture: 0,\r\n    uColorMatrix: new Float32Array([\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1\r\n    ]),\r\n    uColorOffset: new Float32Array(4)\r\n};\r\n", "export const SINGLE_QUAD_FRAG =\r\n`#define SHADER_NAME SINGLE_QUAD_FRAG\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform mat4 uColorMatrix;\r\nuniform vec4 uColorOffset;\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color = texture2D(uTexture, vTextureCoord);\r\n\r\n    //  Un pre-mult alpha\r\n    if (color.a > 0.0)\r\n    {\r\n        color.rgb /= color.a;\r\n    }\r\n\r\n    vec4 result = color * uColorMatrix + (uColorOffset / 255.0);\r\n\r\n    //  Pre-mult alpha\r\n    result.rgb *= result.a;\r\n\r\n    gl_FragColor = vec4(result.rgb, result.a);\r\n}`;\r\n", "export const SINGLE_QUAD_VERT =\r\n`#define SHADER_NAME SINGLE_QUAD_VERT\r\n\r\nprecision highp float;\r\n\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute float aTextureId;\r\nattribute vec4 aTintColor;\r\n\r\nuniform mat4 uProjectionMatrix;\r\nuniform mat4 uCameraMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nvoid main (void)\r\n{\r\n    vTextureCoord = aTextureCoord;\r\n    vTextureId = aTextureId;\r\n    vTintColor = aTintColor;\r\n\r\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\r\n}`;\r\n", "export const TYPES_ENUM = {\n  i8: 'i8',\n  ui8: 'ui8',\n  ui8c: 'ui8c',\n  i16: 'i16',\n  ui16: 'ui16',\n  i32: 'i32',\n  ui32: 'ui32',\n  f32: 'f32',\n  f64: 'f64',\n  eid: 'eid',\n}\n\nexport const TYPES_NAMES = {\n  i8: 'Int8',\n  ui8: 'Uint8',\n  ui8c: 'Uint8Clamped',\n  i16: 'Int16',\n  ui16: 'Uint16',\n  i32: 'Int32',\n  ui32: 'Uint32',\n  eid: 'Uint32',\n  f32: 'Float32',\n  f64: 'Float64'\n}\n\nexport const TYPES = {\n  i8: Int8Array,\n  ui8: Uint8Array,\n  ui8c: Uint8ClampedArray,\n  i16: Int16Array,\n  ui16: Uint16Array,\n  i32: Int32Array,\n  ui32: Uint32Array,\n  f32: Float32Array,\n  f64: Float64Array,\n  eid: Uint32Array,\n}\n\nexport const UNSIGNED_MAX = {\n  uint8: 2**8,\n  uint16: 2**16,\n  uint32: 2**32\n}\n", "import { TYPES, TYPES_ENUM, TYPES_NAMES, UNSIGNED_MAX } from './Constants.js'\n// import { createAllocator } from './Allocator.js'\n\nconst roundToMultiple = mul => x => Math.ceil(x / mul) * mul\nconst roundToMultiple4 = roundToMultiple(4)\n\nexport const $storeRef = Symbol('storeRef')\nexport const $storeSize = Symbol('storeSize')\nexport const $storeMaps = Symbol('storeMaps')\nexport const $storeFlattened = Symbol('storeFlattened')\nexport const $storeBase = Symbol('storeBase')\nexport const $storeType = Symbol('storeType')\n\nexport const $storeArrayCounts = Symbol('storeArrayCount')\nexport const $storeSubarrays = Symbol('storeSubarrays')\nexport const $subarrayCursors = Symbol('subarrayCursors')\nexport const $subarray = Symbol('subarray')\nexport const $subarrayFrom = Symbol('subarrayFrom')\nexport const $subarrayTo = Symbol('subarrayTo')\nexport const $parentArray = Symbol('subStore')\nexport const $tagStore = Symbol('tagStore')\n\nexport const $queryShadow = Symbol('queryShadow')\nexport const $serializeShadow = Symbol('serializeShadow')\n\nexport const $indexType = Symbol('indexType')\nexport const $indexBytes = Symbol('indexBytes')\n\nexport const $isEidType = Symbol('isEidType')\n\nconst stores = {}\n\n// const alloc = createAllocator()\n\nexport const resize = (ta, size) => {\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\n  const newTa = new ta.constructor(newBuffer)\n  newTa.set(ta, 0)\n  return newTa\n}\n\nexport const createShadow = (store, key) => {\n  if (!ArrayBuffer.isView(store)) {\n    const shadowStore = store[$parentArray].slice(0).fill(0)\n    store[key] = store.map((_,eid) => {\n      const from = store[eid][$subarrayFrom]\n      const to = store[eid][$subarrayTo]\n      return shadowStore.subarray(from, to)\n    })\n  } else {\n    store[key] = store.slice(0).fill(0)\n  }\n}\n\nconst resizeSubarray = (metadata, store, size) => {\n  const cursors = metadata[$subarrayCursors]\n  let type = store[$storeType]\n  const length = store[0].length\n  const indexType =\n    length <= UNSIGNED_MAX.uint8\n      ? TYPES_ENUM.ui8\n      : length <= UNSIGNED_MAX.uint16\n        ? TYPES_ENUM.ui16\n        : TYPES_ENUM.ui32\n\n  if (cursors[type] === 0) {\n\n    const arrayCount = metadata[$storeArrayCounts][type]\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\n    \n    // // for threaded impl\n    // // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n    // // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n    // // const buffer = new SharedArrayBuffer(totalBytes)\n\n    const array = new TYPES[type](roundToMultiple4(summedLength * size))\n\n    array.set(metadata[$storeSubarrays][type])\n    \n    metadata[$storeSubarrays][type] = array\n    \n    array[$indexType] = TYPES_NAMES[indexType]\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  }\n\n  const start = cursors[type]\n  let end = 0\n  for (let eid = 0; eid < size; eid++) {\n    const from = cursors[type] + (eid * length)\n    const to = from + length\n\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\n    \n    store[eid][$subarrayFrom] = from\n    store[eid][$subarrayTo] = to\n    store[eid][$subarray] = true\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    \n    end = to\n  }\n\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n}\n\nconst resizeRecursive = (metadata, store, size) => {\n  Object.keys(store).forEach(key => {\n    const ta = store[key]\n    if (Array.isArray(ta)) {\n      resizeSubarray(metadata, ta, size)\n      store[$storeFlattened].push(ta)\n    } else if (ArrayBuffer.isView(ta)) {\n      store[key] = resize(ta, size)\n      store[$storeFlattened].push(store[key])\n    } else if (typeof ta === 'object') {\n      resizeRecursive(metadata, store[key], size)\n    }\n  })\n}\n\nexport const resizeStore = (store, size) => {\n  if (store[$tagStore]) return\n  store[$storeSize] = size\n  store[$storeFlattened].length = 0\n  Object.keys(store[$subarrayCursors]).forEach(k => {\n    store[$subarrayCursors][k] = 0\n  })\n  resizeRecursive(store, store, size)\n}\n\nexport const resetStore = store => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      ta.fill(0)\n    })\n    Object.keys(store[$storeSubarrays]).forEach(key => {\n      store[$storeSubarrays][key].fill(0)\n    })\n  }\n}\n\nexport const resetStoreFor = (store, eid) => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\n      else ta[eid].fill(0)\n    })\n  }\n}\n\n// const createTypeStore = (type, length) => {\n//   const store = alloc(type, length)\n//   store[$isEidType] = type === TYPES_ENUM.eid\n//   return store\n// }\nconst createTypeStore = (type, length) => {\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\n  const buffer = new ArrayBuffer(totalBytes)\n  const store = new TYPES[type](buffer)\n  store[$isEidType] = type === TYPES_ENUM.eid\n  return store\n}\n\nexport const parentArray = store => store[$parentArray]\n\nconst createArrayStore = (metadata, type, length) => {\n  const size = metadata[$storeSize]\n  const store = Array(size).fill(0)\n  store[$storeType] = type\n  store[$isEidType] = type === TYPES_ENUM.eid\n\n  const cursors = metadata[$subarrayCursors]\n  const indexType =\n    length <= UNSIGNED_MAX.uint8\n      ? TYPES_ENUM.ui8\n      : length <= UNSIGNED_MAX.uint16\n        ? TYPES_ENUM.ui16\n        : TYPES_ENUM.ui32\n\n  if (!length) throw new Error('bitECS - Must define component array length')\n  if (!TYPES[type]) throw new Error(`bitECS - Invalid component array property type ${type}`)\n\n  // create buffer for type if it does not already exist\n  if (!metadata[$storeSubarrays][type]) {\n    const arrayCount = metadata[$storeArrayCounts][type]\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\n    \n    // for threaded impl\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n    // const buffer = new SharedArrayBuffer(totalBytes)\n\n    const array = new TYPES[type](roundToMultiple4(summedLength * size))\n\n    metadata[$storeSubarrays][type] = array\n    \n    array[$indexType] = TYPES_NAMES[indexType]\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  }\n\n  // pre-generate subarrays for each eid\n  const start = cursors[type]\n  let end = 0\n  for (let eid = 0; eid < size; eid++) {\n    const from = cursors[type] + (eid * length)\n    const to = from + length\n\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\n    \n    store[eid][$subarrayFrom] = from\n    store[eid][$subarrayTo] = to\n    store[eid][$subarray] = true\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    \n    end = to\n  }\n\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n\n  return store\n}\n\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\n\nexport const createStore = (schema, size) => {\n  const $store = Symbol('store')\n\n  if (!schema || !Object.keys(schema).length) {\n    // tag component\n    stores[$store] = {\n      [$storeSize]: size,\n      [$tagStore]: true,\n      [$storeBase]: () => stores[$store]\n    }\n    return stores[$store]\n  }\n\n  schema = JSON.parse(JSON.stringify(schema))\n\n  const arrayCounts = {}\n  const collectArrayCounts = s => {\n    const keys = Object.keys(s)\n    for (const k of keys) {\n      if (isArrayType(s[k])) {\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\n        arrayCounts[s[k][0]]++\n      } else if (s[k] instanceof Object) {\n        collectArrayCounts(s[k])\n      }\n    }\n  }\n  collectArrayCounts(schema)\n\n  const metadata = {\n    [$storeSize]: size,\n    [$storeMaps]: {},\n    [$storeSubarrays]: {},\n    [$storeRef]: $store,\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\n    [$storeFlattened]: [],\n    [$storeArrayCounts]: arrayCounts\n  }\n\n  if (schema instanceof Object && Object.keys(schema).length) {\n\n    const recursiveTransform = (a, k) => {\n\n      if (typeof a[k] === 'string') {\n\n        a[k] = createTypeStore(a[k], size)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n\n      } else if (isArrayType(a[k])) {\n        \n        const [type, length] = a[k]\n        a[k] = createArrayStore(metadata, type, length)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n        // Object.seal(a[k])\n\n      } else if (a[k] instanceof Object) {\n        \n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\n        // Object.seal(a[k])\n        \n      }\n\n      return a\n    }\n\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\n    stores[$store][$storeBase] = () => stores[$store]\n\n    // Object.seal(stores[$store])\n\n    return stores[$store]\n\n  }\n}\n\nexport const free = (store) => {\n  delete stores[store[$storeRef]]\n}", "export const Uint32SparseSet = (length) => {\n  const dense = new Uint32Array(length)\n  const sparse = new Uint32Array(length)\n\n  let cursor = 0\n  dense.count = () => cursor + 1\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = cursor\n    dense[cursor] = val\n\n    cursor++\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense[cursor]\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n\n    cursor--\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}\n\nexport const SparseSet = () => {\n  const dense = []\n  const sparse = []\n\n  dense.sort = function (comparator) {\n    const result = Array.prototype.sort.call(this, comparator)\n\n    for(let i = 0; i < dense.length; i++) {\n      sparse[dense[i]] = i\n    }\n    \n    return result\n  }\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = dense.push(val) - 1\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense.pop()\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}", "import { $indexBytes, $indexType, $isEidType, $serializeShadow, $storeBase, $storeFlattened, $tagStore, createShadow } from \"./Storage.js\"\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\nimport { $entityArray, $entitySparseSet, addEntity, eidToWorld } from \"./Entity.js\"\nimport { $localEntities, $localEntityLookup } from \"./World.js\"\n\nexport const DESERIALIZE_MODE = {\n  REPLACE: 0,\n  APPEND: 1,\n  MAP: 2\n}\n\nlet resized = false\n\nexport const setSerializationResized = v => { resized = v }\n\nconst canonicalize = (target) => {\n  let componentProps = []\n  let changedProps = new Map()\n  if (Array.isArray(target)) {\n    componentProps = target\n      .map(p => {\n        if (!p) throw new Error('bitECS - Cannot serialize undefined component')\n        if (typeof p === 'function') {\n          const [c, mod] = p()\n          if (mod === 'changed') {\n            c[$storeFlattened].forEach(prop => {\n              const $ = Symbol()\n              createShadow(prop, $)\n              changedProps.set(prop, $)\n            })\n            return c[$storeFlattened]\n          }\n        }\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\n          return p[$storeFlattened]\n        }\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\n          return p\n        }\n      })\n      .reduce((a,v) => a.concat(v), [])\n  }\n  return [componentProps, changedProps]\n}\n\n/**\n * Defines a new serializer which targets the given components to serialize the data of when called on a world or array of EIDs.\n *\n * @param {object|array} target\n * @param {number} [maxBytes=20000000]\n * @returns {function} serializer\n */\nexport const defineSerializer = (target, maxBytes = 20000000) => {\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\n\n  let [componentProps, changedProps] = canonicalize(target)\n\n  // TODO: calculate max bytes based on target & recalc upon resize\n\n  const buffer = new ArrayBuffer(maxBytes)\n  const view = new DataView(buffer)\n\n  return (ents) => {\n\n    if (resized) {\n      [componentProps, changedProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (isWorld) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n    \n    let world\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\n      world = ents\n      ents = ents[$entityArray]\n    } else {\n      world = eidToWorld.get(ents[0])\n    }\n\n    if (!ents.length) return\n\n    let where = 0\n\n    // iterate over component props\n    for (let pid = 0; pid < componentProps.length; pid++) {\n      const prop = componentProps[pid]\n      const $diff = changedProps.get(prop)\n      \n      // write pid\n      view.setUint8(where, pid)\n      where += 1\n\n      // save space for entity count\n      const countWhere = where\n      where += 4\n\n      let count = 0\n      // write eid,val\n      for (let i = 0; i < ents.length; i++) {\n        const eid = ents[i]\n\n        // skip if entity doesn't have this component\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\n          continue\n        }\n\n        // write eid\n        view.setUint32(where, eid)\n        where += 4\n\n        if (prop[$tagStore]) {\n          continue\n        }\n\n        // if property is an array\n        if (ArrayBuffer.isView(prop[eid])) {\n          const type = prop[eid].constructor.name.replace('Array', '')\n          const indexType = prop[eid][$indexType]\n          const indexBytes = prop[eid][$indexBytes]\n\n          // add space for count of dirty array elements\n          const countWhere2 = where\n          where += indexBytes\n\n          let count2 = 0\n\n          // write index,value\n          for (let i = 0; i < prop[eid].length; i++) {\n            const value = prop[eid][i]\n\n            if ($diff && prop[eid][i] === prop[$diff][eid][i]) {\n              continue\n            }\n\n            // write array index\n            view[`set${indexType}`](where, i)\n            where += indexBytes\n\n            // write value at that index\n            view[`set${type}`](where, value)\n            where += prop[eid].BYTES_PER_ELEMENT\n            count2++\n          }\n\n          if (count2 > 0) {\n            // write total element count\n            view[`set${indexType}`](countWhere2, count2)\n            count++\n          }\n        } else {\n\n          // if there are no changes then skip writing this property\n          if ($diff && prop[$diff][eid] !== prop[eid]) {\n            continue\n          }\n\n          const type = prop.constructor.name.replace('Array', '')\n          // set value next [type] bytes\n          view[`set${type}`](where, prop[eid])\n          where += prop.BYTES_PER_ELEMENT\n\n          // sync shadow state\n          if (prop[$diff]) prop[$diff][eid] = prop[eid]\n\n          count++\n        }\n      }\n\n      if (count > 0) {\n        // write how many eid/value pairs were written\n        view.setUint32(countWhere, count)\n      } else {\n        // if nothing was written (diffed with no changes) \n        // then move cursor back by 5 bytes to overwrite pid & count\n        where -= 5\n      }\n    }\n    return buffer.slice(0, where)\n  }\n}\n\nconst newEntities = new Map()\n\n/**\n * Defines a new deserializer which targets the given components to deserialize onto a given world.\n *\n * @param {object|array} target\n * @returns {function} deserializer\n */\nexport const defineDeserializer = (target) => {\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\n  let [componentProps] = canonicalize(target)\n\n\n  return (world, packet, mode=0) => {\n\n    newEntities.clear()\n    \n    if (resized) {\n      [componentProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (isWorld) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n\n    const localEntities = world[$localEntities]\n    const localEntityLookup = world[$localEntityLookup]\n\n    const view = new DataView(packet)\n    let where = 0\n\n    while (where < packet.byteLength) {\n\n      // pid\n      const pid = view.getUint8(where)\n      where += 1\n\n      // entity count\n      const entityCount = view.getUint32(where)\n      where += 4\n\n      // component property\n      const prop = componentProps[pid]\n\n      // Get the entities and set their prop values\n      for (let i = 0; i < entityCount; i++) {\n        let eid = view.getUint32(where)\n        where += 4\n\n        if (mode === DESERIALIZE_MODE.MAP) {\n          if (localEntities.has(eid)) {\n            eid = localEntities.get(eid)\n          } else if (newEntities.has(eid)) {\n            eid = newEntities.get(eid)\n          } else {\n            const newEid = addEntity(world)\n            localEntities.set(eid, newEid)\n            localEntityLookup.set(newEid, eid)\n            newEntities.set(eid, newEid)\n            eid = newEid\n          }\n        }\n\n        if (mode === DESERIALIZE_MODE.APPEND ||  \n          mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)\n        ) {\n          const newEid = newEntities.get(eid) || addEntity(world)\n          newEntities.set(eid, newEid)\n          eid = newEid\n        }\n\n        const component = prop[$storeBase]()\n        if (!hasComponent(world, component, eid)) {\n          addComponent(world, component, eid)\n        }\n\n        if (component[$tagStore]) {\n          continue\n        }\n        \n        if (ArrayBuffer.isView(prop[eid])) {\n          const array = prop[eid]\n          const count = view[`get${array[$indexType]}`](where)\n          where += array[$indexBytes]\n\n          // iterate over count\n          for (let i = 0; i < count; i++) {\n            const index = view[`get${array[$indexType]}`](where)\n            where += array[$indexBytes]\n\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\n            where += array.BYTES_PER_ELEMENT\n            if (prop[$isEidType]) {\n              let localEid = localEntities.get(value)\n              if (!world[$entitySparseSet].has(localEid)) localEid = addEntity(world)\n              prop[eid][index] = localEid\n            } else prop[eid][index] = value\n          }\n        } else {\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\n          where += prop.BYTES_PER_ELEMENT\n\n          if (prop[$isEidType]) {\n            let localEid = localEntities.get(value)\n            if (!world[$entitySparseSet].has(localEid)) localEid = addEntity(world)\n            prop[eid] = localEid\n          } else prop[eid] = value\n        }\n      }\n    }\n  }\n}", "import { resizeComponents } from './Component.js'\nimport { $notQueries, $queries, queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query.js'\nimport { $localEntities, $localEntityLookup, resizeWorlds } from './World.js'\nimport { setSerializationResized } from './Serialize.js'\n\nexport const $entityMasks = Symbol('entityMasks')\nexport const $entityComponents = Symbol('entityComponents')\nexport const $entitySparseSet = Symbol('entitySparseSet')\nexport const $entityArray = Symbol('entityArray')\nexport const $entityIndices = Symbol('entityIndices')\nexport const $removedEntities = Symbol('removedEntities')\n\nlet defaultSize = 100000\n\n// need a global EID cursor which all worlds and all components know about\n// so that world entities can posess entire rows spanning all component tables\nlet globalEntityCursor = 0\nlet globalSize = defaultSize\nlet resizeThreshold = () => globalSize - (globalSize / 5)\n\nexport const getGlobalSize = () => globalSize\n\n// removed eids should also be global to prevent memory leaks\nconst removed = []\n\nexport const resetGlobals = () => {\n  globalSize = defaultSize\n  globalEntityCursor = 0\n  removed.length = 0\n}\n\nexport const getDefaultSize = () => defaultSize\n\n/**\n * Sets the default maximum number of entities for worlds and component stores.\n *\n * @param {number} size\n */\nexport const setDefaultSize = size => { \n  defaultSize = size\n  resetGlobals()\n}\n\nexport const getEntityCursor = () => globalEntityCursor\nexport const getRemovedEntities = () => removed\n\nexport const eidToWorld = new Map()\n\n/**\n * Adds a new entity to the specified world.\n *\n * @param {World} world\n * @returns {number} eid\n */\nexport const addEntity = (world) => {\n\n  // if data stores are 80% full\n  if (globalEntityCursor >= resizeThreshold()) {\n    // grow by half the original size rounded up to a multiple of 4\n    const size = globalSize\n    const amount = Math.ceil((size/2) / 4) * 4\n    const newSize = size + amount\n    globalSize = newSize\n    resizeWorlds(newSize)\n    resizeComponents(newSize)\n    setSerializationResized(true)\n    console.info(`\uD83D\uDC7E bitECS - resizing all data stores from ${size} to ${size+amount}`)\n  }\n\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\n  \n  world[$entitySparseSet].add(eid)\n  eidToWorld.set(eid, world)\n\n  world[$notQueries].forEach(q => {\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  })\n\n  world[$entityComponents].set(eid, new Set())\n\n  return eid\n}\n\n/**\n * Removes an existing entity from the specified world.\n *\n * @param {World} world\n * @param {number} eid\n */\nexport const removeEntity = (world, eid) => {\n  // Check if entity is already removed\n  if (!world[$entitySparseSet].has(eid)) return\n\n  // Remove entity from all queries\n  // TODO: archetype graph\n  world[$queries].forEach(q => {\n    queryRemoveEntity(world, q, eid)\n  })\n\n  // Free the entity\n  removed.push(eid)\n\n  // remove all eid state from world\n  world[$entitySparseSet].remove(eid)\n  world[$entityComponents].delete(eid)\n\n  // remove from deserializer mapping\n  world[$localEntities].delete(world[$localEntityLookup].get(eid))\n  world[$localEntityLookup].delete(eid)\n\n  // Clear entity bitmasks\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\n}\n\n/**\n *  Returns an array of components that an entity possesses.\n *\n * @param {*} world\n * @param {*} eid\n */\nexport const getEntityComponents = (world, eid) => Array.from(world[$entityComponents].get(eid))", "import { SparseSet } from './Util.js'\nimport { $queryShadow, $storeFlattened, $tagStore, createShadow } from './Storage.js'\nimport { $componentMap, registerComponent } from './Component.js'\nimport { $entityMasks, $entityArray, getEntityCursor, $entitySparseSet } from './Entity.js'\n\n\n\nexport function Not(c) { return () => [c, 'not'] }\nexport function Or(c) { return () => [c, 'or'] }\nexport function Changed(c) { return () => [c, 'changed'] }\n\nexport function Any(...comps) { return function QueryAny() { return comps } }\nexport function All(...comps) { return function QueryAll() { return comps } }\nexport function None(...comps) { return function QueryNone() { return comps } }\n\nexport const $queries = Symbol('queries')\nexport const $notQueries = Symbol('notQueries')\n\nexport const $queryAny = Symbol('queryAny')\nexport const $queryAll = Symbol('queryAll')\nexport const $queryNone = Symbol('queryNone')\n\nexport const $queryMap = Symbol('queryMap')\nexport const $dirtyQueries = Symbol('$dirtyQueries')\nexport const $queryComponents = Symbol('queryComponents')\nexport const $enterQuery = Symbol('enterQuery')\nexport const $exitQuery = Symbol('exitQuery')\n\n/**\n * Given an existing query, returns a new function which returns entities who have been added to the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const enterQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  return q.entered.splice(0)\n}\n\n/**\n * Given an existing query, returns a new function which returns entities who have been removed from the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const exitQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  return q.exited.splice(0)\n}\n\nexport const registerQuery = (world, query) => {\n\n  const components = []\n  const notComponents = []\n  const changedComponents = []\n\n  query[$queryComponents].forEach(c => {\n    if (typeof c === 'function') {\n      const [comp, mod] = c()\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\n      if (mod === 'not') {\n        notComponents.push(comp)\n      }\n      if (mod === 'changed') {\n        changedComponents.push(comp)\n        components.push(comp)\n      }\n      // if (mod === 'all') {\n      //   allComponents.push(comp)\n      // }\n      // if (mod === 'any') {\n      //   anyComponents.push(comp)\n      // }\n      // if (mod === 'none') {\n      //   noneComponents.push(comp)\n      // }\n    } else {\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\n      components.push(c)\n    }\n  })\n\n\n  const mapComponents = c => world[$componentMap].get(c)\n\n  const allComponents = components.concat(notComponents).map(mapComponents)\n\n  // const sparseSet = Uint32SparseSet(getGlobalSize())\n  const sparseSet = SparseSet()\n\n  const archetypes = []\n  // const changed = SparseSet()\n  const changed = []\n  const toRemove = SparseSet()\n  const entered = []\n  const exited = []\n\n  const generations = allComponents\n    .map(c => c.generationId)\n    .reduce((a,v) => {\n      if (a.includes(v)) return a\n      a.push(v)\n      return a\n    }, [])\n\n  const reduceBitflags = (a,c) => {\n    if (!a[c.generationId]) a[c.generationId] = 0\n    a[c.generationId] |= c.bitflag\n    return a\n  }\n  const masks = components\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  const notMasks = notComponents\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  // const orMasks = orComponents\n  //   .map(mapComponents)\n  //   .reduce(reduceBitmasks, {})\n\n  const hasMasks = allComponents\n    .reduce(reduceBitflags, {})\n\n  const flatProps = components\n    .filter(c => !c[$tagStore])\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\n    .reduce((a,v) => a.concat(v), [])\n\n  const shadows = flatProps.map(prop => {\n      const $ = Symbol()\n      createShadow(prop, $)\n      return prop[$]\n  }, [])\n\n  const q = Object.assign(sparseSet, {\n    archetypes,\n    changed,\n    components,\n    notComponents,\n    changedComponents,\n    allComponents,\n    masks,\n    notMasks,\n    // orMasks,\n    hasMasks,\n    generations,\n    flatProps,\n    toRemove,\n    entered,\n    exited,\n    shadows,\n  })\n  \n  world[$queryMap].set(query, q)\n  world[$queries].add(q)\n  \n  allComponents.forEach(c => {\n    c.queries.add(q)\n  })\n\n  if (notComponents.length) world[$notQueries].add(q)\n\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\n    if (!world[$entitySparseSet].has(eid)) continue\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  }\n}\n\nconst diff = (q, clearDiff) => {\n  if (clearDiff) q.changed = []\n  const { flatProps, shadows } = q\n  for (let i = 0; i < q.dense.length; i++) {\n    const eid = q.dense[i]\n    let dirty = false\n    for (let pid = 0; pid < flatProps.length; pid++) {\n      const prop = flatProps[pid]\n      const shadow = shadows[pid]\n      // console.log('hi', shadow)\n      if (ArrayBuffer.isView(prop[eid])) {\n        for (let i = 0; i < prop[eid].length; i++) {\n          if (prop[eid][i] !== shadow[eid][i]) {\n            dirty = true\n            shadow[eid][i] = prop[eid][i]\n            break\n          }\n        }\n      } else {\n        if (prop[eid] !== shadow[eid]) {\n          dirty = true\n          shadow[eid] = prop[eid]\n        }\n      }\n    }\n    if (dirty) q.changed.push(eid)\n  }\n  return q.changed\n}\n\n// const queryEntityChanged = (q, eid) => {\n//   if (q.changed.has(eid)) return\n//   q.changed.add(eid)\n// }\n\n// export const entityChanged = (world, component, eid) => {\n//   const { changedQueries } = world[$componentMap].get(component)\n//   changedQueries.forEach(q => {\n//     const match = queryCheckEntity(world, q, eid)\n//     if (match) queryEntityChanged(q, eid)\n//   })\n// }\n\nconst flatten = (a,v) => a.concat(v)\n\nconst aggregateComponentsFor = mod => x => x.filter(f => f.name === mod().constructor.name).reduce(flatten)\n\nconst getAnyComponents = aggregateComponentsFor(Any)\nconst getAllComponents = aggregateComponentsFor(All)\nconst getNoneComponents = aggregateComponentsFor(None)\n\n/**\n * Defines a query function which returns a matching set of entities when called on a world.\n *\n * @param {array} components\n * @returns {function} query\n */\n\nexport const defineQuery = (...args) => {\n  let components\n  let any, all, none\n  if (Array.isArray(args[0])) {\n    components = args[0]\n  } else {\n    any = getAnyComponents(args)\n    all = getAllComponents(args)\n    none = getNoneComponents(args)\n  }\n  \n\n  if (components === undefined || components[$componentMap] !== undefined) {\n    return world => world ? world[$entityArray] : components[$entityArray]\n  }\n\n  const query = function (world, clearDiff=true) {\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\n\n    const q = world[$queryMap].get(query)\n\n    commitRemovals(world)\n\n    if (q.changedComponents.length) return diff(q, clearDiff)\n    // if (q.changedComponents.length) return q.changed.dense\n\n    return q.dense\n  }\n\n  query[$queryComponents] = components\n  query[$queryAny] = any\n  query[$queryAll] = all\n  query[$queryNone] = none\n\n  return query\n}\n\nconst bin = value => {\n  if (!Number.isSafeInteger(value)) {\n    throw new TypeError('value must be a safe integer');\n  }\n\n  const negative = value < 0;\n  const twosComplement = negative ? Number.MAX_SAFE_INTEGER + value + 1 : value;\n  const signExtend = negative ? '1' : '0';\n\n  return twosComplement.toString(2).padStart(4, '0').padStart(0, signExtend);\n}\n\n// TODO: archetype graph\nexport const queryCheckEntity = (world, q, eid) => {\n  const { masks, notMasks, generations } = q\n  let or = 0\n  for (let i = 0; i < generations.length; i++) {\n    const generationId = generations[i]\n    const qMask = masks[generationId]\n    const qNotMask = notMasks[generationId]\n    // const qOrMask = orMasks[generationId]\n    const eMask = world[$entityMasks][generationId][eid]\n    \n    // any\n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\n    //   continue\n    // }\n    // not all \n    // if (qNotMask && (eMask & qNotMask) === qNotMask) {\n    // }\n    // not any\n    if (qNotMask && (eMask & qNotMask) !== 0) {\n      return false\n    }\n    // all\n    if (qMask && (eMask & qMask) !== qMask) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const queryCheckComponent = (q, c) => {\n  const { generationId, bitflag } = c\n  const { hasMasks } = q\n  const mask = hasMasks[generationId]\n  return (mask & bitflag) === bitflag\n}\n\nexport const queryAddEntity = (q, eid) => {\n  if (q.has(eid)) return\n  q.add(eid)\n  q.entered.push(eid)\n}\n\nconst queryCommitRemovals = (q) => {\n  for (let i = q.toRemove.dense.length-1; i >= 0; i--) {\n    const eid = q.toRemove.dense[i]\n    q.toRemove.remove(eid)\n    q.remove(eid)\n  }\n}\n\nexport const commitRemovals = (world) => {\n  if (!world[$dirtyQueries].size) return\n  world[$dirtyQueries].forEach(queryCommitRemovals)\n  world[$dirtyQueries].clear()\n}\n\nexport const queryRemoveEntity = (world, q, eid) => {\n  if (!q.has(eid) || q.toRemove.has(eid)) return\n  q.toRemove.add(eid)\n  world[$dirtyQueries].add(q)\n  q.exited.push(eid)\n}\n\n\n/**\n * Resets a Changed-based query, clearing the underlying list of changed entities.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const resetChangedQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  q.changed = []\n}\n\n/**\n * Removes a query from a world.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const removeQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  world[$queries].delete(q)\n  world[$queryMap].delete(query)\n}", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, commitRemovals } from './Query.js'\nimport { $bitflag, $size } from './World.js'\nimport { $entityMasks, getDefaultSize, eidToWorld, $entityComponents, getGlobalSize, $entitySparseSet } from './Entity.js'\n\nexport const $componentMap = Symbol('componentMap')\n\nexport const components = []\n\nexport const resizeComponents = (size) => {\n  components.forEach(component => resizeStore(component, size))\n}\n\n\n/**\n * Defines a new component store.\n *\n * @param {object} schema\n * @returns {object}\n */\nexport const defineComponent = (schema) => {\n  const component = createStore(schema, getGlobalSize())\n  if (schema && Object.keys(schema).length) components.push(component)\n  return component\n}\n\nexport const incrementBitflag = (world) => {\n  world[$bitflag] *= 2\n  if (world[$bitflag] >= 2**31) {\n    world[$bitflag] = 1\n    world[$entityMasks].push(new Uint32Array(world[$size]))\n  }\n}\n\n\n/**\n * Registers a component with a world.\n *\n * @param {World} world\n * @param {Component} component\n */\nexport const registerComponent = (world, component) => {\n  if (!component) throw new Error(`bitECS - Cannot register null or undefined component`)\n\n  const queries = new Set()\n  const notQueries = new Set()\n  const changedQueries = new Set()\n\n  world[$queries].forEach(q => {\n    if (q.allComponents.includes(component)) {\n      queries.add(q)\n    }\n  })\n\n  world[$componentMap].set(component, { \n    generationId: world[$entityMasks].length - 1,\n    bitflag: world[$bitflag],\n    store: component,\n    queries,\n    notQueries,\n    changedQueries,\n  })\n\n  if (component[$storeSize] < getGlobalSize()) {\n    resizeStore(component, getGlobalSize())\n  }\n\n  incrementBitflag(world)\n}\n\n/**\n * Registers multiple components with a world.\n *\n * @param {World} world\n * @param {Component} components\n */\nexport const registerComponents = (world, components) => {\n  components.forEach(c => registerComponent(world, c))\n}\n\n/**\n * Checks if an entity has a component.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @returns {boolean}\n */\nexport const hasComponent = (world, component, eid) => {\n  const registeredComponent = world[$componentMap].get(component)\n  if (!registeredComponent) return false\n  const { generationId, bitflag } = registeredComponent\n  const mask = world[$entityMasks][generationId][eid]\n  return (mask & bitflag) === bitflag\n}\n\n/**\n * Adds a component to an entity\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=false]\n */\nexport const addComponent = (world, component, eid, reset=true) => {\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\n  if (hasComponent(world, component, eid)) return\n\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries, notQueries } = c\n    \n  // Add bitflag to entity bitmask\n  world[$entityMasks][generationId][eid] |= bitflag\n\n  // todo: archetype graph\n  queries.forEach(q => {\n    // remove this entity from toRemove if it exists in this query\n    if (q.toRemove.has(eid)) q.toRemove.remove(eid)\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n    if (!match) queryRemoveEntity(world, q, eid)\n  })\n\n  world[$entityComponents].get(eid).add(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n\n/**\n * Removes a component from an entity and resets component state unless otherwise specified.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=true]\n */\nexport const removeComponent = (world, component, eid, reset=false) => {\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries, notQueries } = c\n\n  if (!(world[$entityMasks][generationId][eid] & bitflag)) return\n\n  // Remove flag from entity bitmask\n  world[$entityMasks][generationId][eid] &= ~bitflag\n  \n  // todo: archetype graph\n  queries.forEach(q => {\n    // remove this entity from toRemove if it exists in this query\n    if (q.toRemove.has(eid)) q.toRemove.remove(eid)\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n    if (!match) queryRemoveEntity(world, q, eid)\n  })\n\n  world[$entityComponents].get(eid).delete(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n", "import { $componentMap } from './Component.js'\nimport { $queryMap, $queries, $dirtyQueries, $notQueries } from './Query.js'\nimport { $entityArray, $entityComponents, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity.js'\nimport { resize } from './Storage.js'\nimport { SparseSet } from './Util.js'\n\nexport const $size = Symbol('size')\nexport const $resizeThreshold = Symbol('resizeThreshold')\nexport const $bitflag = Symbol('bitflag')\nexport const $archetypes = Symbol('archetypes')\nexport const $localEntities = Symbol('localEntities')\nexport const $localEntityLookup = Symbol('localEntityLookp')\n\nexport const worlds = []\n\nexport const resizeWorlds = (size) => {\n  worlds.forEach(world => {\n    world[$size] = size\n\n    for (let i = 0; i < world[$entityMasks].length; i++) {\n      const masks = world[$entityMasks][i];\n      world[$entityMasks][i] = resize(masks, size)\n    }\n    \n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\n  })\n}\n\n/**\n * Creates a new world.\n *\n * @returns {object}\n */\nexport const createWorld = (obj={}) => {\n  const world = obj\n  resetWorld(world)\n  worlds.push(world)\n  return world\n}\n\n/**\n * Resets a world.\n *\n * @param {World} world\n * @returns {object}\n */\nexport const resetWorld = (world) => {\n  const size = getGlobalSize()\n  world[$size] = size\n\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\n\n  world[$entityMasks] = [new Uint32Array(size)]\n  world[$entityComponents] = new Map()\n  world[$archetypes] = []\n\n  world[$entitySparseSet] = SparseSet()\n  world[$entityArray] = world[$entitySparseSet].dense\n\n  world[$bitflag] = 1\n\n  world[$componentMap] = new Map()\n\n  world[$queryMap] = new Map()\n  world[$queries] = new Set()\n  world[$notQueries] = new Set()\n  world[$dirtyQueries] = new Set()\n\n  world[$localEntities] = new Map()\n  world[$localEntityLookup] = new Map()\n\n  return world\n}\n\n/**\n * Deletes a world.\n *\n * @param {World} world\n */\nexport const deleteWorld = (world) => {\n  Object.getOwnPropertySymbols(world).forEach($ => { delete world[$] })\n  Object.keys(world).forEach(key => { delete world[key] })\n  worlds.splice(worlds.indexOf(world), 1)\n}\n", "/**\n * Defines a new system function.\n *\n * @param {function} update\n * @returns {function}\n */\n export const defineSystem = (update) => (world, ...args) => {\n  update(world, ...args)\n  return world\n}", "import { createWorld, resetWorld, deleteWorld } from './World.js'\nimport { addEntity, removeEntity, setDefaultSize, getEntityComponents} from './Entity.js'\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\nimport { defineSystem } from './System.js'\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery } from './Query.js'\nimport { defineSerializer, defineDeserializer, DESERIALIZE_MODE } from './Serialize.js'\nimport { parentArray } from './Storage.js'\nimport { TYPES_ENUM } from './Constants.js'\n// import { defineProxy } from './Proxy.js'\n\nexport const pipe = (...fns) => (input) => {\n  let tmp = input\n  for (let i = 0; i < fns.length; i++) {\n    const fn = fns[i]\n    tmp = fn(tmp)\n  }\n  return tmp\n}\n\nexport const Types = TYPES_ENUM\n\nexport {\n\n  setDefaultSize,\n  createWorld,\n  resetWorld,\n  deleteWorld,\n  addEntity,\n  removeEntity,\n\n  registerComponent,\n  registerComponents,\n  defineComponent,\n  addComponent,\n  removeComponent,\n  hasComponent,\n  getEntityComponents,\n  // entityChanged,\n\n  // defineProxy,\n\n  defineQuery,\n  Changed,\n  Not,\n  // Or,\n  enterQuery,\n  exitQuery,\n  commitRemovals,\n  resetChangedQuery,\n  removeQuery,\n\n  defineSystem,\n  \n  defineSerializer,\n  defineDeserializer,\n  DESERIALIZE_MODE,\n\n  parentArray,\n\n}\n", "import { IFrame } from './IFrame';\r\n\r\nexport function UpdateFrameUVs <T extends IFrame> (frame: T): T\r\n{\r\n    const { x, y, width, height } = frame;\r\n\r\n    const baseTextureWidth = frame.texture.width;\r\n    const baseTextureHeight = frame.texture.height;\r\n\r\n    frame.u0 = x / baseTextureWidth;\r\n    frame.v0 = y / baseTextureHeight;\r\n\r\n    frame.u1 = (x + width) / baseTextureWidth;\r\n    frame.v1 = (y + height) / baseTextureHeight;\r\n\r\n    return frame;\r\n}\r\n", "import { IFrame } from './IFrame';\r\nimport { Texture } from './Texture';\r\nimport { UpdateFrameUVs } from './UpdateFrameUVs';\r\n\r\nexport class Frame implements IFrame\r\n{\r\n    texture: Texture;\r\n    key: string | number;\r\n\r\n    //  This is the actual area of the texture to draw to canvas / webgl, including any extruded data.\r\n    //  This is the same as the 'trimmed' + 'extruded' area from an atlas.\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    trimmed: boolean = false;\r\n\r\n    //  Original size of the image before being trimmed or added to an atlas (which can add extrude data to it).\r\n    sourceSizeWidth: number;\r\n    sourceSizeHeight: number;\r\n\r\n    //  The size of the image having been trimmed, before being added to the atlas (i.e. doesn't have any extrusion values in it)\r\n    spriteSourceSizeX: number;\r\n    spriteSourceSizeY: number;\r\n    spriteSourceSizeWidth: number;\r\n    spriteSourceSizeHeight: number;\r\n\r\n    pivot: { x: number; y: number };\r\n\r\n    u0: number;\r\n    v0: number;\r\n    u1: number;\r\n    v1: number;\r\n\r\n    constructor (texture: Texture, key: string | number, x: number, y: number, width: number, height: number)\r\n    {\r\n        this.texture = texture;\r\n        this.key = key;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n\r\n        UpdateFrameUVs(this);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.texture = null;\r\n    }\r\n}\r\n", "import { createWorld } from 'bitecs';\r\n\r\nconst world = createWorld();\r\n\r\nexport const GameObjectWorld = world;\r\n", "import { IFrame } from './IFrame';\r\nimport { UpdateFrameUVs } from './UpdateFrameUVs';\r\n\r\nexport function SetFrameSize <T extends IFrame> (frame: T, width: number, height: number): T\r\n{\r\n    frame.width = width;\r\n    frame.height = height;\r\n    frame.sourceSizeWidth = width;\r\n    frame.sourceSizeHeight = height;\r\n\r\n    return UpdateFrameUVs(frame);\r\n}\r\n", "import { Query, defineComponent, defineQuery, removeQuery } from 'bitecs';\r\n\r\nimport { BindingQueue } from '../renderer/BindingQueue';\r\nimport { Frame } from './Frame';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { IGLTextureBinding } from '../renderer/webgl1/textures/IGLTextureBinding';\r\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\r\nimport { ITexture } from './ITexture';\r\nimport { SetFrameSize } from './SetFrameSize';\r\n\r\nexport class Texture implements ITexture\r\n{\r\n    tag = defineComponent();\r\n\r\n    //  Unique identifier of this Texture, if stored in the Texture Manager\r\n    key: string = '';\r\n\r\n    locked: boolean = true;\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    image: TexImageSource;\r\n\r\n    binding: IGLTextureBinding;\r\n\r\n    firstFrame: Frame;\r\n\r\n    frames: Map<string | number, Frame>;\r\n\r\n    data: unknown;\r\n\r\n    inUseQuery: Query;\r\n\r\n    constructor (image?: TexImageSource, width?: number, height?: number, glConfig?: IGLTextureBindingConfig)\r\n    {\r\n        if (image)\r\n        {\r\n            width = image.width;\r\n            height = image.height;\r\n        }\r\n\r\n        this.image = image;\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.frames = new Map();\r\n\r\n        this.data = {};\r\n\r\n        this.addFrame('__BASE', 0, 0, width, height);\r\n\r\n        this.inUseQuery = defineQuery([ this.tag ]);\r\n\r\n        BindingQueue.add(this, glConfig);\r\n    }\r\n\r\n    addFrame (key: string | number, x: number, y: number, width: number, height: number): Frame\r\n    {\r\n        if (this.frames.has(key))\r\n        {\r\n            return null;\r\n        }\r\n\r\n        const frame = new Frame(this, key, x, y, width, height);\r\n\r\n        this.frames.set(key, frame);\r\n\r\n        if (!this.firstFrame || this.firstFrame.key === '__BASE')\r\n        {\r\n            this.firstFrame = frame;\r\n        }\r\n\r\n        return frame;\r\n    }\r\n\r\n    getFrame (key?: string | number | Frame): Frame\r\n    {\r\n        //  null, undefined, empty string, zero\r\n        if (!key)\r\n        {\r\n            return this.firstFrame;\r\n        }\r\n\r\n        if (key instanceof Frame)\r\n        {\r\n            key = key.key;\r\n        }\r\n\r\n        let frame: Frame = this.frames.get(key);\r\n\r\n        if (!frame)\r\n        {\r\n            console.warn(`Frame missing: ${key}`);\r\n\r\n            frame = this.firstFrame;\r\n        }\r\n\r\n        return frame;\r\n    }\r\n\r\n    setSize (width: number, height: number): void\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        const frame = this.frames.get('__BASE');\r\n\r\n        SetFrameSize(frame, width, height);\r\n    }\r\n\r\n    update (image: TexImageSource, glConfig?: IGLTextureBindingConfig): void\r\n    {\r\n        this.image = image;\r\n\r\n        this.setSize(image.width, image.height);\r\n\r\n        BindingQueue.add(this, glConfig);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        if (this.binding)\r\n        {\r\n            this.binding.destroy();\r\n        }\r\n\r\n        this.frames.clear();\r\n\r\n        removeQuery(GameObjectWorld, this.inUseQuery);\r\n\r\n        this.binding = null;\r\n        this.data = null;\r\n        this.image = null;\r\n        this.firstFrame = null;\r\n    }\r\n}\r\n", "import { CreateDepthBuffer } from '../fbo/CreateDepthBuffer';\r\nimport { CreateFramebuffer } from '../index';\r\nimport { CreateShader } from './CreateShader';\r\nimport { DefaultQuadAttributes } from './DefaultQuadAttributes';\r\nimport { DefaultQuadUniforms } from './DefaultQuadUniforms';\r\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\r\nimport { GetHeight } from '../../../config/size/GetHeight';\r\nimport { GetResolution } from '../../../config/size/GetResolution';\r\nimport { GetWidth } from '../../../config/size/GetWidth';\r\nimport { IShader } from './IShader';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\r\nimport { SINGLE_QUAD_VERT } from '../glsl/SINGLE_QUAD_VERT';\r\nimport { Texture } from '../../../textures/Texture';\r\n\r\nexport function SetShaderFromConfig <T extends IShader> (shader: T, config: IShaderConfig): T\r\n{\r\n    const {\r\n        attributes = DefaultQuadAttributes,\r\n        fragmentShader = SINGLE_QUAD_FRAG,\r\n        height = GetHeight(),\r\n        renderToFramebuffer = false,\r\n        renderToDepthbuffer = false,\r\n        resolution = GetResolution(),\r\n        vertexShader = SINGLE_QUAD_VERT,\r\n        width = GetWidth(),\r\n        uniforms = DefaultQuadUniforms\r\n    } = config;\r\n\r\n    CreateShader(shader, fragmentShader, vertexShader, uniforms, attributes);\r\n\r\n    if (renderToFramebuffer)\r\n    {\r\n        shader.renderToFramebuffer = true;\r\n\r\n        const texture = new Texture(null, width * resolution, height * resolution);\r\n        const binding = new GLTextureBinding(texture);\r\n\r\n        binding.framebuffer = CreateFramebuffer(binding.texture);\r\n\r\n        if (renderToDepthbuffer)\r\n        {\r\n            shader.renderToDepthbuffer = true;\r\n\r\n            binding.depthbuffer = CreateDepthBuffer(binding.framebuffer, texture.width, texture.height);\r\n        }\r\n\r\n        shader.texture = texture;\r\n        shader.framebuffer = binding.framebuffer;\r\n        shader.viewport = new Rectangle(0, 0, width, height);\r\n    }\r\n\r\n    return shader;\r\n}\r\n", "import { BindShader } from './BindShader';\r\nimport { IRectangle } from '../../../geom/rectangle/IRectangle';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from './IShader';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\r\nimport { SetShaderFromConfig } from './SetShaderFromConfig';\r\nimport { Texture } from '../../../textures/Texture';\r\n\r\nexport class Shader implements IShader\r\n{\r\n    program: WebGLProgram;\r\n\r\n    attributes: Map<string, IVertexAttribPointer>;\r\n\r\n    uniforms: Map<string, unknown>;\r\n\r\n    uniformSetters: Map<string, Function>;\r\n\r\n    texture: Texture;\r\n\r\n    framebuffer: WebGLFramebuffer;\r\n\r\n    renderToFramebuffer: boolean = false;\r\n\r\n    renderToDepthbuffer: boolean = false;\r\n\r\n    isActive: boolean = false;\r\n\r\n    viewport?: IRectangle;\r\n\r\n    constructor (config?: IShaderConfig)\r\n    {\r\n        if (config)\r\n        {\r\n            SetShaderFromConfig(this, config);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    updateUniforms (renderPass: IRenderPass): void\r\n    {\r\n        //  Use this to set any extra uniform values prior to the bind\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        return BindShader(this, renderPass);\r\n    }\r\n}\r\n", "import { BindShader } from './BindShader';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { MULTI_QUAD_FRAG } from '../glsl/MULTI_QUAD_FRAG';\r\nimport { Shader } from './Shader';\r\nimport { TextureStack } from '../renderpass/TextureStack';\r\n\r\nexport class MultiTextureQuadShader extends Shader\r\n{\r\n    constructor (config: IShaderConfig = {})\r\n    {\r\n        config.fragmentShader = config?.fragmentShader || MULTI_QUAD_FRAG;\r\n\r\n        super(config);\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        this.uniforms.set('uTexture', TextureStack.textureIndex);\r\n\r\n        return BindShader(this, renderPass);\r\n    }\r\n}\r\n", "import { BlendModeStack } from './BlendModeStack';\r\nimport { gl } from '../GL';\r\n\r\nexport function SetDefaultBlendMode (enable: boolean, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum = gl.SRC_ALPHA, dstAlpha: GLenum = gl.ONE_MINUS_SRC_ALPHA): void\r\n{\r\n    const entry = { enable, srcRGB, dstRGB, srcAlpha, dstAlpha };\r\n\r\n    //  The default entry always goes in index zero\r\n    BlendModeStack.stack[0] = entry;\r\n\r\n    BlendModeStack.index = 0;\r\n\r\n    BlendModeStack.default = entry;\r\n}\r\n", "import { ColorMatrixStack } from './ColorMatrixStack';\r\n\r\nexport function SetDefaultColorMatrix (colorMatrix: Float32Array, colorOffset: Float32Array): void\r\n{\r\n    const entry = { colorMatrix, colorOffset };\r\n\r\n    //  The default entry always goes into index zero\r\n    ColorMatrixStack.stack[0] = entry;\r\n\r\n    ColorMatrixStack.index = 0;\r\n\r\n    ColorMatrixStack.default = entry;\r\n}\r\n", "import { IShader } from '../shaders/IShader';\r\nimport { ShaderStack } from './ShaderStack';\r\n\r\nexport function SetDefaultShader <T extends IShader> (shader: T, textureID?: number): void\r\n{\r\n    const entry = { shader, textureID };\r\n\r\n    //  The default entry always goes into index zero\r\n    ShaderStack.stack[0] = entry;\r\n\r\n    ShaderStack.index = 0;\r\n\r\n    ShaderStack.default = entry;\r\n}\r\n", "import { IVertexBuffer } from '../buffers/IVertexBuffer';\r\nimport { VertexBufferStack } from './VertexBufferStack';\r\n\r\nexport function SetDefaultVertexBuffer (buffer: IVertexBuffer): void\r\n{\r\n    VertexBufferStack.stack[0] = buffer;\r\n\r\n    VertexBufferStack.index = 0;\r\n\r\n    VertexBufferStack.default = buffer;\r\n}\r\n", "import { Rectangle } from '../../../geom/rectangle/Rectangle';\r\nimport { ViewportStack } from './ViewportStack';\r\n\r\nexport function SetDefaultViewport (x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\r\n{\r\n    const entry = new Rectangle(x, y, width, height);\r\n\r\n    //  The default entry always goes into index zero\r\n    ViewportStack.stack[0] = entry;\r\n\r\n    ViewportStack.index = 0;\r\n\r\n    ViewportStack.default = entry;\r\n}\r\n", "import { ClearWebGLTextures } from './ClearWebGLTextures';\r\nimport { TextureStack } from './TextureStack';\r\nimport { gl } from '../GL';\r\n\r\nexport function ResetTextures (): void\r\n{\r\n    TextureStack.tempTextures.forEach((texture, index) =>\r\n    {\r\n        gl.activeTexture(gl.TEXTURE0 + index);\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    });\r\n\r\n    ClearWebGLTextures();\r\n}\r\n", "import { CreateTempTextures } from './CreateTempTextures';\r\nimport { ResetTextures } from './ResetTextures';\r\nimport { TextureStack } from './TextureStack';\r\n\r\nexport function SetDefaultWebGLTextures (): void\r\n{\r\n    if (TextureStack.textures)\r\n    {\r\n        ResetTextures();\r\n    }\r\n\r\n    const tempTextures = CreateTempTextures();\r\n\r\n    TextureStack.maxTextures = tempTextures.length;\r\n\r\n    TextureStack.tempTextures = new Map(tempTextures);\r\n    TextureStack.textures = new Map();\r\n\r\n    TextureStack.textureIndex = [];\r\n\r\n    TextureStack.tempTextures.forEach((texture, index) =>\r\n    {\r\n        TextureStack.textureIndex.push(index);\r\n    });\r\n}\r\n", "import { IShaderConfig } from './IShaderConfig';\r\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\r\nimport { Shader } from './Shader';\r\n\r\nexport class SingleTextureQuadShader extends Shader\r\n{\r\n    constructor (config: IShaderConfig = {})\r\n    {\r\n        config.fragmentShader = config?.fragmentShader || SINGLE_QUAD_FRAG;\r\n\r\n        super(config);\r\n    }\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nexport const TRANSFORM = {\r\n    IS_ROOT: 0,\r\n    X: 1,\r\n    Y: 2,\r\n    ROTATION: 3,\r\n    SCALE_X: 4,\r\n    SCALE_Y: 5,\r\n    SKEW_X: 6,\r\n    SKEW_Y: 7,\r\n    AXIS_ALIGNED: 8,\r\n    FRAME_X1: 9,\r\n    FRAME_Y1: 10,\r\n    FRAME_X2: 11,\r\n    FRAME_Y2: 12,\r\n    LOCAL_A: 13,\r\n    LOCAL_B: 14,\r\n    LOCAL_C: 15,\r\n    LOCAL_D: 16,\r\n    LOCAL_TX: 17,\r\n    LOCAL_TY: 18,\r\n    BOUNDS_X1: 19,\r\n    BOUNDS_Y1: 20,\r\n    BOUNDS_X2: 21,\r\n    BOUNDS_Y2: 22,\r\n    ORIGIN_X: 23,\r\n    ORIGIN_Y: 24,\r\n    WORLD_A: 25,\r\n    WORLD_B: 26,\r\n    WORLD_C: 27,\r\n    WORLD_D: 28,\r\n    WORLD_TX: 29,\r\n    WORLD_TY: 30,\r\n    FRAME_WIDTH: 31,\r\n    FRAME_HEIGHT: 32,\r\n    IN_VIEW: 33,\r\n    UPDATED: 34,\r\n    FIXED: 35\r\n};\r\n\r\nexport const Transform2DComponent = defineComponent({\r\n    data: [ Types.f32, 36 ]\r\n});\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { addComponent } from 'bitecs';\r\n\r\n//  The A, B, C, D, TX, TY elements are a short-form of a 3x3 Matrix, with the last column ignored:\r\n\r\n//  |----|----|----|\r\n//  | a  | b  | 0  |\r\n//  |----|----|----|\r\n//  | c  | d  | 0  |\r\n//  |----|----|----|\r\n//  | tx | ty | 1  |\r\n//  |----|----|----|\r\n\r\n//  [0] = a - X scale\r\n//  [1] = b - X skew\r\n//  [2] = c - Y skew\r\n//  [3] = d - Y scale\r\n//  [4] = tx - X translation\r\n//  [5] = ty - Y translation\r\n\r\nexport function AddTransform2DComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, Transform2DComponent, id);\r\n\r\n    //  Component defaults to zero, so we only need to set the other values\r\n    //  We could do this via data.set once the array structure is set in stone\r\n\r\n    const data = Transform2DComponent.data[id];\r\n\r\n    data[TRANSFORM.SCALE_X] = 1;\r\n    data[TRANSFORM.SCALE_Y] = 1;\r\n    data[TRANSFORM.AXIS_ALIGNED] = 1;\r\n}\r\n", "export function NOOP (): void\r\n{\r\n    //  No-op\r\n}\r\n", "import { NOOP } from '../../utils/NOOP';\r\n\r\n//  4x4 Matrix in column-major format\r\n\r\n/**\r\n * |-----|-----|-----|-----|\r\n * | m00 | m01 | m02 | m03 |\r\n * |-----|-----|-----|-----|\r\n * | m10 | m11 | m12 | m13 |\r\n * |-----|-----|-----|-----|\r\n * | m20 | m21 | m22 | m23 |\r\n * |-----|-----|-----|-----|\r\n * | m30 | m31 | m32 | m33 |\r\n * |-----|-----|-----|-----|\r\n *\r\n * [0] = m00 - 1st value of 1st row\r\n * [1] = m01 - 2nd value of 1st row\r\n * [2] = m02 - 3rd value of 1st row\r\n * [3] = m03 - 4th value of 1st row\r\n * [4] = m10 - 1st value of 2nd row\r\n * [5] = m11 - 2nd value of 2nd row\r\n * [6] = m12 - 3rd value of 2nd row\r\n * [7] = m13 - 4th value of 2nd row\r\n * [8] = m20 - 1st value of 3rd row\r\n * [9] = m21 - 2nd value of 3rd row\r\n * [10] = m22 - 3rd value of 3rd row\r\n * [11] = m23 - 4th value of 3rd row\r\n * [12] = m30 - 1st value of 4th row\r\n * [13] = m31 - 2nd value of 4th row\r\n * [14] = m32 - 3rd value of 4th row\r\n * [15] = m33 - 4th value of 4th row\r\n */\r\n\r\nexport class Matrix4\r\n{\r\n    data: Float32Array;\r\n\r\n    onChange: (mat4: Matrix4) => void;\r\n\r\n    constructor (src?: Matrix4 | Float32List)\r\n    {\r\n        const data = new Float32Array(16);\r\n\r\n        this.data = data;\r\n        this.onChange = NOOP;\r\n\r\n        if (src)\r\n        {\r\n            if (Array.isArray(src))\r\n            {\r\n                this.fromArray(src);\r\n            }\r\n            else\r\n            {\r\n                this.fromArray((src as Matrix4).data);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            data[0] = 1;\r\n            data[5] = 1;\r\n            data[10] = 1;\r\n            data[15] = 1;\r\n        }\r\n    }\r\n\r\n    set (m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number): this\r\n    {\r\n        this.data.set([\r\n            m00,\r\n            m01,\r\n            m02,\r\n            m03,\r\n\r\n            m10,\r\n            m11,\r\n            m12,\r\n            m13,\r\n\r\n            m20,\r\n            m21,\r\n            m22,\r\n            m23,\r\n\r\n            m30,\r\n            m31,\r\n            m32,\r\n            m33\r\n        ]);\r\n\r\n        this.onChange(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    toArray (dst: Float32List = [], index: number = 0): Float32List\r\n    {\r\n        const data = this.data;\r\n\r\n        for (let i = 0; i < 16; i++)\r\n        {\r\n            dst[ index + i ] = data[i];\r\n        }\r\n\r\n        return dst;\r\n    }\r\n\r\n    fromArray (src: Float32List, index: number = 0): this\r\n    {\r\n        const data = this.data;\r\n\r\n        for (let i = 0; i < 16; i++)\r\n        {\r\n            data[i] = src[ index + i ];\r\n        }\r\n\r\n        this.onChange(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    toString (): string\r\n    {\r\n        return '[ mat4=' + this.data.join(', ') + ' ]';\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.onChange = NOOP;\r\n        this.data = null;\r\n    }\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport function SetBounds (id: number, x: number, y: number, right: number, bottom: number): void\r\n{\r\n    const data = Transform2DComponent.data[id];\r\n\r\n    data[TRANSFORM.BOUNDS_X1] = x;\r\n    data[TRANSFORM.BOUNDS_Y1] = y;\r\n    data[TRANSFORM.BOUNDS_X2] = right;\r\n    data[TRANSFORM.BOUNDS_Y2] = bottom;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\n/**\r\n * TRANSFORM - This own entities local transform is dirty\r\n * CHILD_TRANSFORM - Has a child (of any depth) that has a dirty local transform\r\n * COLOR - This own entities color component is dirty\r\n * CHILD_COLOR - Has a child (of any depth) that has a dirty color component\r\n * CHILD_CACHE - This entity caches children (like a RenderLayer) and has a child (of any depth) that is dirty (transform or color)\r\n * WORLD_TRANSFORM - This own entities world transform is dirty\r\n * DISPLAY_LIST - If the Game Object has a custom display list (like SpatialGridLayer) this indicates if it's dirty, or not.\r\n * SELF - The Game Object that has this component is dirty (used by Render Layer and for your own custom objects)\r\n */\r\n\r\nexport const DIRTY = {\r\n    TRANSFORM: 0,\r\n    CHILD_TRANSFORM: 1,\r\n    COLOR: 2,\r\n    CHILD_COLOR: 3,\r\n    CHILD_CACHE: 4,\r\n    WORLD_TRANSFORM: 5,\r\n    DISPLAY_LIST: 6,\r\n    SELF: 7\r\n};\r\n\r\nexport const DirtyComponent = defineComponent({\r\n    data: [ Types.ui8, 8 ]\r\n});\r\n", "import { Game } from './Game';\r\n\r\nexport let instance: Game;\r\nexport let frame: number = 0;\r\nexport let elapsed: number = 0;\r\n\r\nexport const GameInstance =\r\n{\r\n    get: (): Game =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (game: Game | undefined): void =>\r\n    {\r\n        instance = game;\r\n    },\r\n\r\n    getFrame: (): number =>\r\n    {\r\n        return frame;\r\n    },\r\n\r\n    setFrame: (current: number): void =>\r\n    {\r\n        frame = current;\r\n    },\r\n\r\n    getElapsed: (): number =>\r\n    {\r\n        return elapsed;\r\n    },\r\n\r\n    setElapsed: (current: number): void =>\r\n    {\r\n        elapsed = current;\r\n    }\r\n\r\n};\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nexport const HIERARCHY = {\r\n    WORLD: 0,\r\n    PARENT: 1,\r\n    NEXT: 2,\r\n    PREV: 3,\r\n    FIRST: 4,\r\n    LAST: 5,\r\n    NUM_CHILDREN: 6,\r\n    DEPTH: 7\r\n};\r\n\r\n//  world = The ID of the World entity the owner of this component belongs to\r\n//  parent = The ID of the Parent entity. If it has no parent, will match the world ID\r\n//  next = The ID of the next entity in the display list (horizontally, the next sibling)\r\n//  prev = The ID of the previous entity in the display list (horizontally, the previous sibling)\r\n//  first = The ID of the left-most (first) child entity of this parent\r\n//  last = The ID of the right-most (last) child entity of this parent\r\n//  numChildren = The number of direct descendants this entity has\r\n//  depth = Reserved to allow for per-child depth sorting outside of the display list index\r\n\r\nexport const HierarchyComponent = defineComponent({\r\n    data: [ Types.ui32, 8 ]\r\n});\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetParentID (id: number): number\r\n{\r\n    return HierarchyComponent.data[id][HIERARCHY.PARENT];\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyChildCache (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.CHILD_CACHE] = 1;\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyChildTransform (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.CHILD_TRANSFORM] = 1;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nexport const PERMISSION = {\r\n    VISIBLE: 0,\r\n    VISIBLE_CHILDREN: 1,\r\n    WILL_UPDATE: 2,\r\n    WILL_UPDATE_CHILDREN: 3,\r\n    WILL_RENDER: 4,\r\n    WILL_RENDER_CHILDREN: 5,\r\n    WILL_CACHE_CHILDREN: 6,\r\n    WILL_TRANSFORM_CHILDREN: 7,\r\n    WILL_COLOR_CHILDREN: 8,\r\n    CUSTOM_DISPLAY_LIST: 9\r\n};\r\n\r\nexport const PermissionsComponent = defineComponent({\r\n    data: [ Types.ui8, 10 ]\r\n});\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillCacheChildren (id: number): boolean\r\n{\r\n    return !!(PermissionsComponent.data[id][PERMISSION.WILL_CACHE_CHILDREN]);\r\n}\r\n", "import { GameInstance } from '../../GameInstance';\r\nimport { GetParentID } from '../hierarchy/GetParentID';\r\nimport { SetDirtyChildCache } from './SetDirtyChildCache';\r\nimport { SetDirtyChildTransform } from './SetDirtyChildTransform';\r\nimport { WillCacheChildren } from '../permissions/WillCacheChildren';\r\n\r\nlet prevParentID: number;\r\nlet prevFrame: number;\r\n\r\nexport function SetDirtyParents (childID: number): void\r\n{\r\n    let id = GetParentID(childID);\r\n\r\n    const frame = GameInstance.getFrame();\r\n\r\n    if (id === prevParentID && frame === prevFrame)\r\n    {\r\n        return;\r\n    }\r\n\r\n    prevParentID = id;\r\n    prevFrame = frame;\r\n\r\n    while (id)\r\n    {\r\n        SetDirtyChildTransform(id);\r\n\r\n        if (WillCacheChildren(id))\r\n        {\r\n            SetDirtyChildCache(id);\r\n        }\r\n\r\n        id = GetParentID(id);\r\n    }\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nimport { SetDirtyParents } from './SetDirtyParents';\r\n\r\nexport function SetDirtyTransform (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.TRANSFORM] = 1;\r\n\r\n    SetDirtyParents(id);\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\r\n\r\nexport function UpdateExtent (id: number, width: number, height: number): void\r\n{\r\n    const data = Transform2DComponent.data[id];\r\n\r\n    const x = -(data[TRANSFORM.ORIGIN_X]) * width;\r\n    const y = -(data[TRANSFORM.ORIGIN_Y]) * height;\r\n\r\n    data[TRANSFORM.FRAME_X1] = x;\r\n    data[TRANSFORM.FRAME_Y1] = y;\r\n    data[TRANSFORM.FRAME_X2] = x + width;\r\n    data[TRANSFORM.FRAME_Y2] = y + height;\r\n    data[TRANSFORM.FRAME_WIDTH] = width;\r\n    data[TRANSFORM.FRAME_HEIGHT] = height;\r\n\r\n    //  TODO - Do we really need to do this?\r\n    // data[TRANSFORM.WORLD_A] = x;\r\n    // data[TRANSFORM.WORLD_B] = y;\r\n    // data[TRANSFORM.WORLD_C] = x + width;\r\n    // data[TRANSFORM.WORLD_D] = y + height;\r\n    // data[TRANSFORM.WORLD_TX] = width;\r\n    // data[TRANSFORM.WORLD_TY] = height;\r\n\r\n    SetDirtyTransform(id);\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { IVec2 } from '../../math/vec2/IVec2';\r\nimport { UpdateExtent } from './UpdateExtent';\r\n\r\nexport class Size implements IVec2\r\n{\r\n    private id: number;\r\n    private _data: Float32Array;\r\n\r\n    constructor (id: number, width: number = 0, height: number = 0)\r\n    {\r\n        this.id = id;\r\n\r\n        this._data = Transform2DComponent.data[id];\r\n\r\n        this.set(width, height);\r\n    }\r\n\r\n    set (width: number, height: number = width): this\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    }\r\n\r\n    set width (value: number)\r\n    {\r\n        UpdateExtent(this.id, value, this.height);\r\n    }\r\n\r\n    get width (): number\r\n    {\r\n        return this._data[TRANSFORM.FRAME_WIDTH];\r\n    }\r\n\r\n    set height (value: number)\r\n    {\r\n        UpdateExtent(this.id, this.width, value);\r\n    }\r\n\r\n    get height (): number\r\n    {\r\n        return this._data[TRANSFORM.FRAME_HEIGHT];\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        this.width = value;\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return this.width;\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        this.height = value;\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return this.height;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this._data = null;\r\n    }\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from '../components/transform/Transform2DComponent';\r\nimport { addEntity, removeComponent, removeEntity } from 'bitecs';\r\n\r\nimport { AddTransform2DComponent } from '../components/transform/AddTransform2DComponent';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { IBaseCamera } from './IBaseCamera';\r\nimport { IMatrix4 } from '../math/mat4/IMatrix4';\r\nimport { Matrix4 } from '../math/mat4/Matrix4';\r\nimport { SetBounds } from '../components/transform/SetBounds';\r\nimport { Size } from '../components/transform/Size';\r\n\r\nexport class BaseCamera implements IBaseCamera\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    readonly type: string = 'BaseCamera';\r\n\r\n    //  User defined name. Never used internally.\r\n    name: string = '';\r\n\r\n    size: Size;\r\n\r\n    //  For loading into the shaders\r\n    matrix: IMatrix4;\r\n\r\n    isDirty: boolean;\r\n\r\n    private _data: Float32Array;\r\n\r\n    constructor (width: number, height: number)\r\n    {\r\n        const id = this.id;\r\n\r\n        AddTransform2DComponent(id);\r\n\r\n        this.matrix = new Matrix4();\r\n\r\n        this.size = new Size(id, width, height);\r\n\r\n        this._data = Transform2DComponent.data[id];\r\n\r\n        this.reset(width, height);\r\n    }\r\n\r\n    preRender (): boolean\r\n    {\r\n        return this.isDirty;\r\n    }\r\n\r\n    postRender (): void\r\n    {\r\n        this.isDirty = false;\r\n    }\r\n\r\n    getBoundsX (): number\r\n    {\r\n        return this._data[TRANSFORM.BOUNDS_X1];\r\n    }\r\n\r\n    getBoundsY (): number\r\n    {\r\n        return this._data[TRANSFORM.BOUNDS_Y1];\r\n    }\r\n\r\n    getBoundsRight (): number\r\n    {\r\n        return this._data[TRANSFORM.BOUNDS_X2];\r\n    }\r\n\r\n    getBoundsBottom (): number\r\n    {\r\n        return this._data[TRANSFORM.BOUNDS_Y2];\r\n    }\r\n\r\n    getMatrix (): Float32Array\r\n    {\r\n        return this.matrix.data;\r\n    }\r\n\r\n    reset (width: number, height: number): void\r\n    {\r\n        this.size.set(width, height);\r\n\r\n        this.isDirty = true;\r\n\r\n        SetBounds(this.id, 0, 0, width, height);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        const id = this.id;\r\n\r\n        removeComponent(GameObjectWorld, Transform2DComponent, id);\r\n\r\n        removeEntity(GameObjectWorld, id);\r\n    }\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyTransform (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.TRANSFORM] = 0;\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyTransform (id: number): boolean\r\n{\r\n    return !!(DirtyComponent.data[id][DIRTY.TRANSFORM]);\r\n}\r\n", "import { BaseCamera } from './BaseCamera';\r\nimport { ClearDirtyTransform } from '../components/dirty/ClearDirtyTransform';\r\nimport { HasDirtyTransform } from '../components/dirty/HasDirtyTransform';\r\nimport { IStaticCamera } from './IStaticCamera';\r\n\r\n//  A Static Camera just has a size. It cannot be moved or scaled.\r\n\r\nexport class StaticCamera extends BaseCamera implements IStaticCamera\r\n{\r\n    readonly type: string = 'StaticCamera';\r\n\r\n    constructor (width: number, height: number)\r\n    {\r\n        super(width, height);\r\n    }\r\n\r\n    preRender (): boolean\r\n    {\r\n        const id = this.id;\r\n\r\n        if (HasDirtyTransform(id))\r\n        {\r\n            this.isDirty = true;\r\n\r\n            ClearDirtyTransform(id);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\r\nimport { IVertexBuffer } from './IVertexBuffer';\r\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\r\nimport { gl } from '../GL';\r\n\r\nexport class VertexBuffer implements IVertexBuffer\r\n{\r\n    //  Handy for debug tracing\r\n    name: string;\r\n\r\n    /**\r\n     * Maximum number of entries per batch before a flush takes place.\r\n     * For a Mesh, this is the number of triangles / faces in the vertex buffer.\r\n     * Typically each face consists of 3 verts.\r\n     *\r\n     * @type {number}\r\n     */\r\n    batchSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, per entry in the array buffer.\r\n     *\r\n     * @type {number}\r\n     */\r\n    dataSize: number;\r\n\r\n    /**\r\n     * The amount of elements / floats a single vertex consists of.\r\n     *\r\n     * The default is 9:\r\n     *\r\n     * position (x,y - 2 floats)\r\n     * texture coord (x,y - 2 floats)\r\n     * texture index (uint)\r\n     * red channel (float)\r\n     * green channel (float)\r\n     * blue channel (float)\r\n     * alpha channel (float)\r\n     *\r\n     * @type {number}\r\n     */\r\n    vertexElementSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of a single vertex in the array buffer.\r\n     *\r\n     * This is `vertexElementSize * dataSize`.\r\n     *\r\n     * @type {number}\r\n     */\r\n    vertexByteSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of a single entry in the array buffer.\r\n     *\r\n     * This is `vertexByteSize * elementsPerEntry` for a quad.\r\n     *\r\n     * @type {number}\r\n     */\r\n    entryByteSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of the Array Buffer.\r\n     *\r\n     * This is `batchSize * entryByteSize`\r\n     *\r\n     * @type {number}\r\n     */\r\n    bufferByteSize: number;\r\n\r\n    /**\r\n     * The Array Buffer.\r\n     *\r\n     * @type {ArrayBuffer}\r\n     */\r\n    data: ArrayBuffer;\r\n\r\n    /**\r\n     * Float32 View of the Array Buffer.\r\n     *\r\n     * @type {Float32Array}\r\n     */\r\n    vertexViewF32: Float32Array;\r\n\r\n    /**\r\n     * The data array buffer.\r\n     *\r\n     * @type {WebGLBuffer}\r\n     */\r\n    vertexBuffer: WebGLBuffer;\r\n\r\n    /**\r\n     * The size, in quantity of elements, of a single entry in the element index array.\r\n     *\r\n     * This is `vertexElementSize * elementsPerEntry`\r\n     *\r\n     * @type {number}\r\n     */\r\n    entryElementSize: number;\r\n\r\n    indexed: boolean = false;\r\n\r\n    isDynamic: boolean = false;\r\n\r\n    /**\r\n     * The total number of entries added to the buffer so far, or reserved to be added.\r\n     *\r\n     * This is the total number of indices / verticies, not faces.\r\n     * Typically there are 3 verts per face, so this value is usually batchSize x 3 for a Mesh.\r\n     *\r\n     * @type {number}\r\n     */\r\n    count: number = 0;\r\n\r\n    /**\r\n     * The current buffer offset.\r\n     *\r\n     * @type {number}\r\n     */\r\n    offset: number = 0;\r\n\r\n    /**\r\n     * The number of elements per entry in the buffer.\r\n     *\r\n     * This is 3 for a tri and 4 for a quad in an indexed buffer.\r\n     *\r\n     * @type {number}\r\n     */\r\n    elementsPerEntry: number;\r\n\r\n    isBound: boolean = false;\r\n\r\n    constructor (config: IVertexBufferConfig = {})\r\n    {\r\n        const {\r\n            name = 'VBO',\r\n            batchSize = 1,\r\n            dataSize = 4,\r\n            isDynamic = true,\r\n            elementsPerEntry = 3,\r\n            vertexElementSize = 9\r\n        } = config;\r\n\r\n        this.name = name;\r\n        this.batchSize = batchSize;\r\n        this.dataSize = dataSize;\r\n        this.vertexElementSize = vertexElementSize;\r\n        this.isDynamic = isDynamic;\r\n        this.elementsPerEntry = elementsPerEntry;\r\n\r\n        //  Derive the remaining values\r\n        this.vertexByteSize = vertexElementSize * dataSize;\r\n        this.entryByteSize = this.vertexByteSize * elementsPerEntry;\r\n        this.bufferByteSize = batchSize * this.entryByteSize;\r\n        this.entryElementSize = this.vertexElementSize * this.elementsPerEntry;\r\n\r\n        this.create();\r\n    }\r\n\r\n    resize (batchSize: number): void\r\n    {\r\n        this.batchSize = batchSize;\r\n        this.bufferByteSize = batchSize * this.entryByteSize;\r\n\r\n        if (this.vertexBuffer)\r\n        {\r\n            DeleteGLBuffer(this.vertexBuffer);\r\n        }\r\n\r\n        this.create();\r\n    }\r\n\r\n    create (): void\r\n    {\r\n        const data = new ArrayBuffer(this.bufferByteSize);\r\n\r\n        this.data = data;\r\n\r\n        this.vertexViewF32 = new Float32Array(data);\r\n\r\n        this.vertexBuffer = gl.createBuffer();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n\r\n        const type = (this.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, data, type);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.isBound = false;\r\n    }\r\n\r\n    add (count: number): void\r\n    {\r\n        this.count += count;\r\n        this.offset += (this.vertexElementSize * count);\r\n    }\r\n\r\n    reset (): void\r\n    {\r\n        this.count = 0;\r\n        this.offset = 0;\r\n    }\r\n\r\n    canContain (count: number): boolean\r\n    {\r\n        return ((this.count + count) <= this.batchSize);\r\n    }\r\n\r\n    free (): number\r\n    {\r\n        return Math.max(0, 1 - (this.count / this.batchSize));\r\n    }\r\n\r\n    bind (): void\r\n    {\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        DeleteGLBuffer(this.vertexBuffer);\r\n\r\n        this.data = null;\r\n        this.vertexViewF32 = null;\r\n        this.vertexBuffer = null;\r\n    }\r\n}\r\n", "import { DEFAULT_COLOR_MATRIX, DEFAULT_COLOR_OFFSET } from '../../../colormatrix/const';\r\n\r\nimport { BlendModeStack } from './BlendModeStack';\r\nimport { ColorMatrixStack } from './ColorMatrixStack';\r\nimport { FramebufferStack } from './FramebufferStack';\r\nimport { GetBatchSize } from '../../../config/batchsize/GetBatchSize';\r\nimport { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\r\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { IShader } from '../shaders/IShader';\r\nimport { IWebGLRenderer } from '../IWebGLRenderer';\r\nimport { Mat4Ortho } from '../../../math/mat4/Mat4Ortho';\r\nimport { MultiTextureQuadShader } from '../shaders/MultiTextureQuadShader';\r\nimport { SetDefaultBlendMode } from './SetDefaultBlendMode';\r\nimport { SetDefaultColorMatrix } from './SetDefaultColorMatrix';\r\nimport { SetDefaultFramebuffer } from './index';\r\nimport { SetDefaultShader } from './SetDefaultShader';\r\nimport { SetDefaultVertexBuffer } from './SetDefaultVertexBuffer';\r\nimport { SetDefaultViewport } from './SetDefaultViewport';\r\nimport { SetDefaultWebGLTextures } from './SetDefaultWebGLTextures';\r\nimport { ShaderStack } from './ShaderStack';\r\nimport { SingleTextureQuadShader } from '../shaders/SingleTextureQuadShader';\r\nimport { StaticCamera } from '../../../camera/StaticCamera';\r\nimport { TextureStack } from './TextureStack';\r\nimport { VertexBuffer } from '../buffers/VertexBuffer';\r\nimport { VertexBufferStack } from './VertexBufferStack';\r\nimport { ViewportStack } from './ViewportStack';\r\n\r\nexport class RenderPass implements IRenderPass\r\n{\r\n    renderer: IWebGLRenderer;\r\n\r\n    projectionMatrix: Float32Array;\r\n    cameraMatrix: Float32Array;\r\n\r\n    count: number = 0;\r\n    prevCount: number = 0;\r\n    flushTotal: number = 0;\r\n\r\n    //  Single Texture Quad Shader + Camera\r\n    quadShader: IShader;\r\n    quadCamera: IBaseCamera;\r\n\r\n    //  Current 2D Camera\r\n    current2DCamera: IBaseCamera;\r\n\r\n    constructor (renderer: IWebGLRenderer)\r\n    {\r\n        this.renderer = renderer;\r\n\r\n        this.projectionMatrix = new Float32Array(16);\r\n\r\n        FramebufferStack.init(this);\r\n        BlendModeStack.init(this);\r\n        VertexBufferStack.init(this);\r\n        ViewportStack.init(this);\r\n        ShaderStack.init(this);\r\n        ColorMatrixStack.init(this);\r\n        TextureStack.init(this);\r\n\r\n        this.reset();\r\n    }\r\n\r\n    flush (): void\r\n    {\r\n        this.prevCount = this.count;\r\n\r\n        this.count = 0;\r\n\r\n        this.flushTotal++;\r\n    }\r\n\r\n    //  TODO - Call when context is lost and restored\r\n    //  TODO - If already created, delete shaders / buffers first (i.e. during context loss)\r\n    reset (): void\r\n    {\r\n        const gl = this.renderer.gl;\r\n\r\n        //  Default QuadShader (for FBO drawing)\r\n\r\n        this.quadShader = new SingleTextureQuadShader();\r\n        this.quadCamera = new StaticCamera(this.renderer.width, this.renderer.height);\r\n\r\n        //  Default settings\r\n\r\n        SetDefaultWebGLTextures();\r\n        SetDefaultFramebuffer();\r\n        SetDefaultBlendMode(true, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n        SetDefaultVertexBuffer(new VertexBuffer({ batchSize: GetBatchSize() }));\r\n        SetDefaultShader((GetMaxTextures() === 1) ? new SingleTextureQuadShader() : new MultiTextureQuadShader());\r\n        SetDefaultColorMatrix(DEFAULT_COLOR_MATRIX, DEFAULT_COLOR_OFFSET);\r\n    }\r\n\r\n    resize (width: number, height: number): void\r\n    {\r\n        //  TODO - -1 to 1?\r\n        Mat4Ortho(this.projectionMatrix, 0, width, height, 0, -1000, 1000);\r\n\r\n        this.quadCamera.reset(width, height);\r\n\r\n        SetDefaultViewport(0, 0, width, height);\r\n    }\r\n\r\n    isCameraDirty (): boolean\r\n    {\r\n        return this.current2DCamera.isDirty;\r\n    }\r\n}\r\n", "\r\nexport function CompareColorMatrix (srcMatrix: Float32Array, srcOffset: Float32Array, targetMatrix: Float32Array, targetOffset: Float32Array): boolean\r\n{\r\n    for (let i = 0; i < srcOffset.length; i++)\r\n    {\r\n        if (srcOffset[i] !== targetOffset[i])\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < srcMatrix.length; i++)\r\n    {\r\n        if (srcMatrix[i] !== targetMatrix[i])\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n", "import { AddColorMatrix } from './AddColorMatrix';\r\nimport { BindColorMatrix } from './BindColorMatrix';\r\nimport { Color } from '../../../components/color/Color';\r\nimport { CompareColorMatrix } from '../../../components/color/CompareColorMatrix';\r\nimport { CurrentColorMatrix } from './CurrentColorMatrix';\r\n\r\nexport function SetColorMatrix (color: Color): void\r\n{\r\n    const current = CurrentColorMatrix();\r\n\r\n    const entry = AddColorMatrix(color.colorMatrix, color.colorOffset);\r\n\r\n    if (!CompareColorMatrix(entry.colorMatrix, entry.colorOffset, current.colorMatrix, current.colorOffset))\r\n    {\r\n        BindColorMatrix(entry);\r\n    }\r\n}\r\n", "import { Color } from '../../../components/color/Color';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { SetColorMatrix } from './SetColorMatrix';\r\n\r\nexport function SetColor <T extends IRenderPass> (renderPass: T, color: Color): void\r\n{\r\n    if (color.colorMatrixEnabled && color.willColorChildren)\r\n    {\r\n        SetColorMatrix(color);\r\n    }\r\n}\r\n", "import { FramebufferStack } from './FramebufferStack';\r\nimport { IRectangle } from '../../../geom/rectangle/IRectangle';\r\n\r\nexport function SetDefaultFramebuffer <T extends IRectangle> (framebuffer: WebGLFramebuffer = null, viewport?: T): void\r\n{\r\n    const entry = { framebuffer, viewport };\r\n\r\n    //  The default entry always goes into index zero\r\n    FramebufferStack.stack[0] = entry;\r\n\r\n    FramebufferStack.index = 0;\r\n\r\n    FramebufferStack.default = entry;\r\n}\r\n", "import { AddFramebuffer } from './AddFramebuffer';\r\nimport { BindFramebuffer } from './BindFramebuffer';\r\nimport { IRectangle } from '../../../geom/rectangle/IRectangle';\r\n\r\nexport function SetFramebuffer <T extends IRectangle> (framebuffer: WebGLFramebuffer, clear: boolean = true, viewport?: T): void\r\n{\r\n    const entry = AddFramebuffer(framebuffer, viewport);\r\n\r\n    BindFramebuffer(clear, entry);\r\n}\r\n", "import { AddShader } from './AddShader';\r\nimport { BindShaderEntry } from './BindShaderEntry';\r\nimport { IShader } from '../shaders/IShader';\r\n\r\nexport function SetShader <T extends IShader> (shader: T, textureID?: number): void\r\n{\r\n    const entry = AddShader(shader, textureID);\r\n\r\n    BindShaderEntry(entry);\r\n}\r\n", "import { Texture } from './Texture';\r\n\r\nlet instance: Texture;\r\n\r\nexport const WhiteTexture =\r\n{\r\n    get: (): Texture =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (texture: Texture): void =>\r\n    {\r\n        instance = texture;\r\n    }\r\n};\r\n", "import { BindDefaultBlendMode } from './BindDefaultBlendMode';\r\nimport { BindDefaultColorMatrix } from './BindDefaultColorMatrix';\r\nimport { BindDefaultFramebuffer } from './BindDefaultFramebuffer';\r\nimport { BindDefaultShader } from './BindDefaultShader';\r\nimport { BindDefaultVertexBuffer } from './BindDefaultVertexBuffer';\r\nimport { BindDefaultViewport } from './BindDefaultViewport';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function Start (renderPass: IRenderPass): IRenderPass\r\n{\r\n    if (!renderPass.current2DCamera)\r\n    {\r\n        renderPass.current2DCamera = renderPass.quadCamera;\r\n        renderPass.cameraMatrix = renderPass.quadCamera.getMatrix();\r\n    }\r\n\r\n    renderPass.count = 0;\r\n    renderPass.flushTotal = 0;\r\n\r\n    BindDefaultFramebuffer();\r\n    BindDefaultBlendMode();\r\n    BindDefaultVertexBuffer();\r\n    BindDefaultViewport();\r\n    BindDefaultShader();\r\n    BindDefaultColorMatrix();\r\n\r\n    return renderPass;\r\n}\r\n", "import { CurrentShader } from './CurrentShader';\r\nimport { CurrentVertexBuffer } from './CurrentVertexBuffer';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { PopFramebuffer } from './PopFramebuffer';\r\nimport { SetFramebuffer } from './index';\r\nimport { gl } from '../GL';\r\n\r\nexport function Draw (renderPass: IRenderPass): void\r\n{\r\n    const count = renderPass.count;\r\n\r\n    if (count === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    const currentBuffer = CurrentVertexBuffer();\r\n    const currentShader = CurrentShader();\r\n\r\n    const renderToFramebuffer = currentShader.shader.renderToFramebuffer;\r\n\r\n    if (renderToFramebuffer)\r\n    {\r\n        SetFramebuffer(currentShader.shader.framebuffer, true, currentShader.shader.viewport);\r\n    }\r\n\r\n    if (count === currentBuffer.batchSize)\r\n    {\r\n        const type = (currentBuffer.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, currentBuffer.data, type);\r\n    }\r\n    else\r\n    {\r\n        const subsize = count * currentBuffer.entryElementSize;\r\n\r\n        const view = currentBuffer.vertexViewF32.subarray(0, subsize);\r\n\r\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\r\n    }\r\n\r\n    if (currentBuffer.indexed)\r\n    {\r\n        gl.drawElements(gl.TRIANGLES, count * currentBuffer.entryIndexSize, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    else\r\n    {\r\n        gl.drawArrays(gl.TRIANGLES, 0, count * currentBuffer.elementsPerEntry);\r\n    }\r\n\r\n    if (renderToFramebuffer)\r\n    {\r\n        PopFramebuffer();\r\n    }\r\n}\r\n", "import { Draw } from './Draw';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function Flush (renderPass: IRenderPass, forceCount?: number): boolean\r\n{\r\n    if (forceCount)\r\n    {\r\n        renderPass.count = forceCount;\r\n    }\r\n\r\n    const count = renderPass.count;\r\n\r\n    if (count === 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    Draw(renderPass);\r\n\r\n    renderPass.flush();\r\n\r\n    return true;\r\n}\r\n", "import { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function End (renderPass: IRenderPass): void\r\n{\r\n    Flush(renderPass);\r\n}\r\n", "import { ICompressedTextures } from './ICompressedTextures';\r\n\r\nexport function GetCompressedTextures (gl: WebGLRenderingContext): ICompressedTextures\r\n{\r\n    const extString = 'WEBGL_compressed_texture_';\r\n    const wkExtString = 'WEBKIT_' + extString;\r\n\r\n    const hasExt = (format: string) =>\r\n    {\r\n        const results = gl.getExtension(extString + format) || gl.getExtension(wkExtString + format);\r\n\r\n        if (results)\r\n        {\r\n            const glEnums = {};\r\n\r\n            for (const key in results)\r\n            {\r\n                glEnums[results[key]] = key;\r\n            }\r\n\r\n            return glEnums;\r\n        }\r\n    };\r\n\r\n    return {\r\n        ETC: hasExt('etc'),\r\n        ETC1: hasExt('etc1'),\r\n        ATC: hasExt('atc'),\r\n        ASTC: hasExt('astc'),\r\n        BPTC: hasExt('bptc'),\r\n        RGTC: hasExt('rgtc'),\r\n        PVRTC: hasExt('pvrtc'),\r\n        S3TC: hasExt('s3tc'),\r\n        S3TCSRGB: hasExt('s3tc_srgb'),\r\n        IMG: true\r\n    };\r\n}\r\n", "export function GetRGBArray (color: number, output: number[] = []): number[]\r\n{\r\n    const r: number = color >> 16 & 0xFF;\r\n    const g: number = color >> 8 & 0xFF;\r\n    const b: number = color & 0xFF;\r\n    const a: number = (color > 16777215) ? color >>> 24 : 255;\r\n\r\n    output[0] = r / 255;\r\n    output[1] = g / 255;\r\n    output[2] = b / 255;\r\n    output[3] = a / 255;\r\n\r\n    return output;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetWebGLContext (): WebGLContextAttributes\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.WEBGL_CONTEXT);\r\n}\r\n", "import { IRenderer } from './IRenderer';\r\n\r\nexport let instance: IRenderer;\r\n\r\nexport const RendererInstance =\r\n{\r\n    get: (): IRenderer =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (renderer: IRenderer | undefined): void =>\r\n    {\r\n        instance = renderer;\r\n    }\r\n};\r\n", "import { RendererInstance } from '../RendererInstance';\r\nimport { WebGLRenderer } from './WebGLRenderer';\r\n\r\nexport let instance: WebGLRenderer;\r\n\r\nexport const WebGLRendererInstance =\r\n{\r\n    get: (): WebGLRenderer =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (renderer: WebGLRenderer | undefined): void =>\r\n    {\r\n        instance = renderer;\r\n        RendererInstance.set(renderer);\r\n    }\r\n};\r\n", "import { End } from './renderpass/End';\r\nimport { GL } from './GL';\r\nimport { GetBackgroundColor } from '../../config/backgroundcolor/GetBackgroundColor';\r\nimport { GetCompressedTextures } from './textures/GetCompressedTextures';\r\nimport { GetHeight } from '../../config/size/GetHeight';\r\nimport { GetRGBArray } from './colors/GetRGBArray';\r\nimport { GetResolution } from '../../config/size/GetResolution';\r\nimport { GetWebGLContext } from '../../config/webglcontext/GetWebGLContext';\r\nimport { GetWidth } from '../../config/size/GetWidth';\r\nimport { ICompressedTextures } from './textures/ICompressedTextures';\r\nimport { IRenderPass } from './renderpass/IRenderPass';\r\nimport { ProcessBindingQueue } from './renderpass/ProcessBindingQueue';\r\nimport { RenderPass } from './renderpass/RenderPass';\r\nimport { Start } from './renderpass/Start';\r\nimport { WebGLRendererInstance } from './WebGLRendererInstance';\r\n\r\nexport class WebGLRenderer\r\n{\r\n    canvas: HTMLCanvasElement;\r\n    gl: WebGLRenderingContext;\r\n\r\n    renderPass: IRenderPass;\r\n\r\n    clearColor = [ 0, 0, 0, 1 ];\r\n\r\n    width: number;\r\n    height: number;\r\n    resolution: number;\r\n\r\n    clearBeforeRender: boolean = true;\r\n    optimizeRedraw: boolean = true;\r\n    autoResize: boolean = true;\r\n\r\n    contextLost: boolean = false;\r\n\r\n    compression: ICompressedTextures;\r\n\r\n    constructor ()\r\n    {\r\n        this.width = GetWidth();\r\n        this.height = GetHeight();\r\n        this.resolution = GetResolution();\r\n\r\n        this.setBackgroundColor(GetBackgroundColor());\r\n\r\n        const canvas = document.createElement('canvas');\r\n\r\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\r\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\r\n\r\n        this.canvas = canvas;\r\n\r\n        this.initContext();\r\n\r\n        //  By this stage the context is available\r\n        WebGLRendererInstance.set(this);\r\n\r\n        this.renderPass = new RenderPass(this);\r\n\r\n        this.resize(this.width, this.height, this.resolution);\r\n\r\n        //  Process default textures from the Texture Manager\r\n        ProcessBindingQueue();\r\n    }\r\n\r\n    initContext (): void\r\n    {\r\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\r\n\r\n        GL.set(gl);\r\n\r\n        this.gl = gl;\r\n\r\n        this.compression = GetCompressedTextures(gl);\r\n\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.disable(gl.CULL_FACE);\r\n    }\r\n\r\n    resize (width: number, height: number, resolution: number = 1): void\r\n    {\r\n        const calcWidth = width * resolution;\r\n        const calcHeight = height * resolution;\r\n\r\n        this.width = calcWidth;\r\n        this.height = calcHeight;\r\n        this.resolution = resolution;\r\n\r\n        const canvas = this.canvas;\r\n\r\n        canvas.width = calcWidth;\r\n        canvas.height = calcHeight;\r\n\r\n        if (this.autoResize)\r\n        {\r\n            canvas.style.width = width.toString() + 'px';\r\n            canvas.style.height = height.toString() + 'px';\r\n        }\r\n\r\n        this.renderPass.resize(calcWidth, calcHeight);\r\n    }\r\n\r\n    onContextLost (event: Event): void\r\n    {\r\n        event.preventDefault();\r\n\r\n        this.contextLost = true;\r\n    }\r\n\r\n    onContextRestored (): void\r\n    {\r\n        this.contextLost = false;\r\n\r\n        this.initContext();\r\n    }\r\n\r\n    setBackgroundColor (color: number): this\r\n    {\r\n        GetRGBArray(color, this.clearColor);\r\n\r\n        return this;\r\n    }\r\n\r\n    //  TODO - Remove?\r\n    reset (): void\r\n    {\r\n        // this.renderPass.reset();\r\n    }\r\n\r\n    begin (willRedraw: boolean): IRenderPass\r\n    {\r\n        if (this.contextLost)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const gl = this.gl;\r\n\r\n        //  This is only here because if we don't do _something_ with the context,\r\n        //  GL Spector can't see it!\r\n        gl.getContextAttributes();\r\n\r\n        ProcessBindingQueue();\r\n\r\n        //  Nothing dirty? Display the previous frame\r\n        if (this.optimizeRedraw && !willRedraw)\r\n        {\r\n            // return;\r\n        }\r\n\r\n        if (this.clearBeforeRender)\r\n        {\r\n            const cls = this.clearColor;\r\n\r\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n\r\n        return Start(this.renderPass);\r\n    }\r\n\r\n    end (): void\r\n    {\r\n        End(this.renderPass);\r\n\r\n        // eslint-disable-next-line no-debugger\r\n        // debugger;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        WebGLRendererInstance.set(undefined);\r\n    }\r\n}\r\n", "import { SetRenderer } from '../renderer/SetRenderer';\r\nimport { WebGLRenderer } from '../../renderer/webgl1/WebGLRenderer';\r\n\r\nexport function WebGL (): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetRenderer(WebGLRenderer);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetWebGLContext (contextAttributes: WebGLContextAttributes): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.WEBGL_CONTEXT, contextAttributes);\r\n}\r\n", "import { IFrame } from './IFrame';\r\n\r\nexport function SetFramePivot <T extends IFrame> (frame: T, x: number, y: number): T\r\n{\r\n    frame.pivot = { x, y };\r\n\r\n    return frame;\r\n}\r\n", "import { IFrame } from './IFrame';\r\n\r\nexport function SetFrameSourceSize <T extends IFrame> (frame: T, width: number, height: number): T\r\n{\r\n    frame.sourceSizeWidth = width;\r\n    frame.sourceSizeHeight = height;\r\n\r\n    return frame;\r\n}\r\n", "import { IFrame } from './IFrame';\r\n\r\nexport function SetFrameTrim <T extends IFrame> (frame: T, width: number, height: number, x: number, y: number, w: number, h: number): T\r\n{\r\n    frame.trimmed = true;\r\n\r\n    frame.sourceSizeWidth = width;\r\n    frame.sourceSizeHeight = height;\r\n\r\n    frame.spriteSourceSizeX = x;\r\n    frame.spriteSourceSizeY = y;\r\n    frame.spriteSourceSizeWidth = w;\r\n    frame.spriteSourceSizeHeight = h;\r\n\r\n    return frame;\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unsafe-call */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n\r\nimport { Frame } from '../Frame';\r\nimport { SetFramePivot } from '../SetFramePivot';\r\nimport { SetFrameSourceSize } from '../SetFrameSourceSize';\r\nimport { SetFrameTrim } from '../SetFrameTrim';\r\nimport { Texture } from '../Texture';\r\n\r\nexport function AtlasParser (texture: Texture, data: any): void\r\n{\r\n    let frames: any[];\r\n\r\n    if (Array.isArray(data.textures))\r\n    {\r\n        //  TP3 Format\r\n        frames = data.textures[0].frames;\r\n    }\r\n    else if (Array.isArray(data.frames))\r\n    {\r\n        //  TP2 Format Array\r\n        frames = data.frames;\r\n    }\r\n    else if (data.hasOwnProperty('frames'))\r\n    {\r\n        //  TP2 Format Hash\r\n        frames = [];\r\n\r\n        for (const [ filename, frame ] of Object.entries(data.frames))\r\n        {\r\n            //  Inject the filename into the frame object\r\n            frame['filename'] = filename;\r\n\r\n            frames.push(frame);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        console.warn('Invalid Texture Atlas JSON');\r\n    }\r\n\r\n    if (frames)\r\n    {\r\n        let newFrame: Frame;\r\n\r\n        for (let i = 0; i < frames.length; i++)\r\n        {\r\n            const src = frames[i];\r\n\r\n            //  The frame values are the exact coordinates to cut the frame out of the atlas from\r\n            newFrame = texture.addFrame(src.filename, src.frame.x, src.frame.y, src.frame.w, src.frame.h);\r\n\r\n            //  These are the original (non-trimmed) sprite values\r\n            if (src.trimmed)\r\n            {\r\n                SetFrameTrim(\r\n                    newFrame,\r\n                    src.sourceSize.w,\r\n                    src.sourceSize.h,\r\n                    src.spriteSourceSize.x,\r\n                    src.spriteSourceSize.y,\r\n                    src.spriteSourceSize.w,\r\n                    src.spriteSourceSize.h\r\n                );\r\n            }\r\n            else\r\n            {\r\n                SetFrameSourceSize(newFrame, src.sourceSize.w, src.sourceSize.h);\r\n            }\r\n\r\n            if (src.rotated)\r\n            {\r\n                // newFrame.rotated = true;\r\n                // newFrame.updateUVsInverted();\r\n            }\r\n\r\n            if (src.anchor)\r\n            {\r\n                SetFramePivot(newFrame, src.anchor.x, src.anchor.y);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "export function CreateCanvas (width: number, height: number): CanvasRenderingContext2D\r\n{\r\n    const canvas = document.createElement('canvas');\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    return canvas.getContext('2d');\r\n}\r\n", "import { CreateCanvas } from '../CreateCanvas';\r\nimport { Texture } from '../Texture';\r\n\r\nexport function CanvasTexture (width: number = 32, height: number = 32): Texture\r\n{\r\n    const ctx = CreateCanvas(width, height);\r\n\r\n    return new Texture(ctx.canvas);\r\n}\r\n", "import { Texture } from './Texture';\r\n\r\nlet instance: Texture;\r\n\r\nexport const AlphaTexture =\r\n{\r\n    get: (): Texture =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (texture: Texture): void =>\r\n    {\r\n        instance = texture;\r\n    }\r\n};\r\n", "import { TextureManager } from './TextureManager';\r\n\r\nlet instance: TextureManager;\r\n\r\nexport const TextureManagerInstance =\r\n{\r\n    get: (): TextureManager =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (manager: TextureManager | null): void =>\r\n    {\r\n        if (instance)\r\n        {\r\n            throw new Error('Cannot instantiate TextureManager more than once');\r\n        }\r\n\r\n        instance = manager;\r\n    }\r\n};\r\n", "import { AlphaTexture } from './AlphaTexture';\r\nimport { CreateCanvas } from './CreateCanvas';\r\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\r\nimport { Texture } from './Texture';\r\nimport { TextureManagerInstance } from './TextureManagerInstance';\r\nimport { WhiteTexture } from './WhiteTexture';\r\n\r\nexport class TextureManager\r\n{\r\n    textures: Map<string, Texture>;\r\n\r\n    constructor ()\r\n    {\r\n        TextureManagerInstance.set(this);\r\n\r\n        this.textures = new Map();\r\n\r\n        this.createDefaultTextures();\r\n    }\r\n\r\n    private createDefaultTextures (): void\r\n    {\r\n        const alphaTexture = this.add('__BLANK', new Texture(CreateCanvas(2, 2).canvas));\r\n\r\n        AlphaTexture.set(alphaTexture);\r\n\r\n        const missing = CreateCanvas(32, 32);\r\n\r\n        missing.strokeStyle = '#0f0';\r\n        missing.moveTo(0, 0);\r\n        missing.lineTo(32, 32);\r\n        missing.stroke();\r\n        missing.strokeRect(0.5, 0.5, 31, 31);\r\n\r\n        this.add('__MISSING', new Texture(missing.canvas));\r\n\r\n        const white = CreateCanvas(2, 2);\r\n\r\n        white.fillStyle = '#fff';\r\n        white.fillRect(0, 0, 2, 2);\r\n\r\n        const whiteTexture = this.add('__WHITE', new Texture(white.canvas));\r\n\r\n        //  Because this is used frequently by Graphics and Shapes\r\n        WhiteTexture.set(whiteTexture);\r\n    }\r\n\r\n    get (key: string): Texture\r\n    {\r\n        const textures = this.textures;\r\n\r\n        if (textures.has(key))\r\n        {\r\n            return textures.get(key);\r\n        }\r\n        else\r\n        {\r\n            return textures.get('__MISSING');\r\n        }\r\n    }\r\n\r\n    has (key: string): boolean\r\n    {\r\n        return this.textures.has(key);\r\n    }\r\n\r\n    add (key: string, source: Texture | TexImageSource, glConfig?: IGLTextureBindingConfig): Texture\r\n    {\r\n        let texture: Texture;\r\n\r\n        if (!this.textures.has(key))\r\n        {\r\n            if (source instanceof Texture)\r\n            {\r\n                texture = source;\r\n            }\r\n            else\r\n            {\r\n                texture = new Texture(source, 0, 0, glConfig);\r\n            }\r\n\r\n            texture.key = key;\r\n\r\n            this.textures.set(key, texture);\r\n        }\r\n\r\n        return texture;\r\n    }\r\n\r\n    update (key: string, source: TexImageSource, glConfig?: IGLTextureBindingConfig): Texture\r\n    {\r\n        const texture = this.textures.get(key);\r\n\r\n        if (texture)\r\n        {\r\n            texture.update(source, glConfig);\r\n        }\r\n\r\n        return texture;\r\n    }\r\n}\r\n", "import { TextureManager } from './TextureManager';\r\n\r\nexport function CreateTextureManager (): void\r\n{\r\n    new TextureManager();\r\n}\r\n", "import { Texture } from './Texture';\r\nimport { TextureManagerInstance } from './TextureManagerInstance';\r\n\r\nexport function GetTexture (key: string): Texture\r\n{\r\n    return TextureManagerInstance.get().get(key);\r\n}\r\n", "import { Frame } from './Frame';\r\nimport { ITexture } from './ITexture';\r\n\r\nexport type GetFramesInRangeConfig =\r\n{\r\n    prefix?: string;\r\n    start?: number;\r\n    end: number;\r\n    zeroPad?: number;\r\n    suffix?: string;\r\n};\r\n\r\nexport function GetFramesInRange (texture: ITexture, config: GetFramesInRangeConfig): Frame[]\r\n{\r\n    const {\r\n        prefix = '',\r\n        start = 0,\r\n        zeroPad = 0,\r\n        suffix = ''\r\n    } = config;\r\n\r\n    let end = config.end;\r\n\r\n    const output: Frame[] = [];\r\n\r\n    const diff: number = (start < end) ? 1 : -1;\r\n\r\n    //  Adjust because we use i !== end in the for loop\r\n    end += diff;\r\n\r\n    for (let i: number = start; i !== end; i += diff)\r\n    {\r\n        const frameKey = (prefix + i.toString().padStart(zeroPad, '0') + suffix);\r\n\r\n        output.push(texture.getFrame(frameKey));\r\n    }\r\n\r\n    return output;\r\n}\r\n", "import { IGameObject } from './IGameObject';\r\n\r\nexport const GameObjectCache = {\r\n\r\n    local: <IGameObject[]>[],\r\n\r\n    set: function (index: number, object: IGameObject): void\r\n    {\r\n        this.local[index] = object;\r\n    },\r\n\r\n    get: function (index: number): IGameObject\r\n    {\r\n        return this.local[index];\r\n    },\r\n\r\n    clear: function (): void\r\n    {\r\n        this.local.length = 0;\r\n    },\r\n\r\n    remove: function (index: number): void\r\n    {\r\n        this.local[index] = null;\r\n    }\r\n};\r\n", "import { Frame } from './Frame';\r\nimport { GetTexture } from './GetTexture';\r\nimport { IFrame } from './IFrame';\r\nimport { ITexture } from './ITexture';\r\nimport { Texture } from './Texture';\r\n\r\nexport function ReturnTexture <T extends ITexture, F extends IFrame>  (key: string | T | F, frame?: string | number | IFrame): { texture: Texture, frame: Frame }\r\n{\r\n    let texture: Texture;\r\n\r\n    if (key instanceof Frame)\r\n    {\r\n        frame = key.key;\r\n        texture = key.texture;\r\n    }\r\n    else if (key instanceof Texture)\r\n    {\r\n        texture = key;\r\n    }\r\n    else\r\n    {\r\n        texture = GetTexture(key as string);\r\n    }\r\n\r\n    if (!texture)\r\n    {\r\n        console.warn(`Invalid Texture key: ${key as string}`);\r\n    }\r\n    else\r\n    {\r\n        return { texture, frame: texture.getFrame(frame) };\r\n    }\r\n}\r\n", "import { GameObjectWorld } from '../GameObjectWorld';\r\nimport { ISprite } from '../gameobjects/sprite/ISprite';\r\nimport { removeComponent } from 'bitecs';\r\n\r\nexport function RemoveTextureFromGameObject <T extends ISprite> (sprite: T): void\r\n{\r\n    if (sprite.texture)\r\n    {\r\n        const currentTexture = sprite.texture;\r\n\r\n        removeComponent(GameObjectWorld, currentTexture.tag, sprite.id);\r\n\r\n        sprite.texture = null;\r\n        sprite.frame = null;\r\n        sprite.hasTexture = false;\r\n    }\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\r\n\r\n//  The area covered by this transform component + origin + size (usually from a Frame)\r\n\r\nexport function SetExtent (id: number, x: number, y: number, width: number, height: number): void\r\n{\r\n    const data = Transform2DComponent.data[id];\r\n\r\n    data[TRANSFORM.FRAME_X1] = x;\r\n    data[TRANSFORM.FRAME_Y1] = y;\r\n    data[TRANSFORM.FRAME_X2] = x + width;\r\n    data[TRANSFORM.FRAME_Y2] = y + height;\r\n    data[TRANSFORM.FRAME_WIDTH] = width;\r\n    data[TRANSFORM.FRAME_HEIGHT] = height;\r\n\r\n    SetDirtyTransform(id);\r\n}\r\n", "import { IContainer } from '../gameobjects/container/IContainer';\r\nimport { IFrame } from './IFrame';\r\nimport { SetExtent } from '../components/transform/SetExtent';\r\n\r\nexport function SetExtentFromFrame <C extends IContainer, F extends IFrame> (child: C, frame: F): C\r\n{\r\n    const originX = child.origin.x;\r\n    const originY = child.origin.y;\r\n\r\n    const sourceSizeWidth = frame.sourceSizeWidth;\r\n    const sourceSizeHeight = frame.sourceSizeHeight;\r\n\r\n    let x: number;\r\n    let y: number;\r\n    let width: number;\r\n    let height: number;\r\n\r\n    if (frame.trimmed)\r\n    {\r\n        x = frame.spriteSourceSizeX - (originX * sourceSizeWidth);\r\n        y = frame.spriteSourceSizeY - (originY * sourceSizeHeight);\r\n\r\n        width = frame.spriteSourceSizeWidth;\r\n        height = frame.spriteSourceSizeHeight;\r\n    }\r\n    else\r\n    {\r\n        x = -originX * sourceSizeWidth;\r\n        y = -originY * sourceSizeHeight;\r\n\r\n        width = sourceSizeWidth;\r\n        height = sourceSizeHeight;\r\n    }\r\n\r\n    SetExtent(child.id, x, y, width, height);\r\n\r\n    return child;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\n/**\r\n * Buffer Structure:\r\n *\r\n * Triangle 1:\r\n *\r\n * Top Left Vert\r\n *\r\n * 0 - x position\r\n * 1 - y position\r\n * 2 - u0\r\n * 3 - v0\r\n * 4 - Texture Index\r\n * 5 - Red Component\r\n * 6 - Green Component\r\n * 7 - Blue Component\r\n * 8 - Alpha Component\r\n *\r\n * Bottom Left Vert\r\n *\r\n * 9 - x position\r\n * 10 - y position\r\n * 11 - u0\r\n * 12 - v1\r\n * 13 - Texture Index\r\n * 14 - Red Component\r\n * 15 - Green Component\r\n * 16 - Blue Component\r\n * 17 - Alpha Component\r\n *\r\n * Bottom Right Vert\r\n *\r\n * 18 - x position\r\n * 19 - y position\r\n * 20 - u1\r\n * 21 - v1\r\n * 22 - Texture Index\r\n * 23 - Red Component\r\n * 24 - Green Component\r\n * 25 - Blue Component\r\n * 26 - Alpha Component\r\n *\r\n * Triangle 2:\r\n *\r\n * Top Left Vert\r\n *\r\n * 27 - x position\r\n * 28 - y position\r\n * 29 - u0\r\n * 30 - v0\r\n * 31 - Texture Index\r\n * 32 - Red Component\r\n * 33 - Green Component\r\n * 34 - Blue Component\r\n * 35 - Alpha Component\r\n *\r\n * Bottom Right Vert\r\n *\r\n * 36 - x position\r\n * 37 - y position\r\n * 38 - u1\r\n * 39 - v1\r\n * 40 - Texture Index\r\n * 41 - Red Component\r\n * 42 - Green Component\r\n * 43 - Blue Component\r\n * 44 - Alpha Component\r\n *\r\n * Top Right Vert\r\n *\r\n * 45 - x position\r\n * 46 - y position\r\n * 47 - u1\r\n * 48 - v0\r\n * 49 - Texture Index\r\n * 50 - Red Component\r\n * 51 - Green Component\r\n * 52 - Blue Component\r\n * 53 - Alpha Component\r\n */\r\n\r\nexport const QuadVertexComponent = defineComponent({\r\n    values: [ Types.f32, 54 ]\r\n});\r\n", "import { QuadVertexComponent } from './QuadVertexComponent';\r\n\r\n//  0, 0, 1, 1 = normal\r\n//  0, 1, 1, 0 = flipped on Y\r\n\r\nexport function SetUV (id: number, u0: number, v0: number, u1: number, v1: number): void\r\n{\r\n    const data = QuadVertexComponent.values[id];\r\n\r\n    //  top left\r\n    data[2] = u0;\r\n    data[3] = v0;\r\n\r\n    //  bottom left\r\n    data[11] = u0;\r\n    data[12] = v1;\r\n\r\n    //  bottom right\r\n    data[20] = u1;\r\n    data[21] = v1;\r\n\r\n    //  top left\r\n    data[29] = u0;\r\n    data[30] = v0;\r\n\r\n    //  bottom right\r\n    data[38] = u1;\r\n    data[39] = v1;\r\n\r\n    //  top right\r\n    data[47] = u1;\r\n    data[48] = v0;\r\n}\r\n", "import { IFrame } from './IFrame';\r\nimport { SetUV } from '../components/vertices/SetUV';\r\n\r\nexport function SetVertexUVsFromFrame <T extends IFrame> (id: number, frame: T): T\r\n{\r\n    SetUV(id, frame.u0, frame.v0, frame.u1, frame.v1);\r\n\r\n    return frame;\r\n}\r\n", "import { Frame } from './Frame';\r\nimport { ISprite } from '../gameobjects/sprite/ISprite';\r\nimport { SetExtentFromFrame } from './SetExtentFromFrame';\r\nimport { SetVertexUVsFromFrame } from './SetVertexUVsFromFrame';\r\nimport { Texture } from './Texture';\r\n\r\nexport function SetFrame <T extends ISprite> (texture: Texture, key?: string | number | Frame, ...children: T[]): T[]\r\n{\r\n    const frame = texture.getFrame(key);\r\n\r\n    const pivot = frame.pivot;\r\n\r\n    children.forEach(child =>\r\n    {\r\n        if (!child || frame === child.frame)\r\n        {\r\n            return;\r\n        }\r\n\r\n        child.frame = frame;\r\n        child.hasTexture = true;\r\n\r\n        if (pivot)\r\n        {\r\n            child.origin.set(pivot.x, pivot.y);\r\n        }\r\n\r\n        SetExtentFromFrame(child, frame);\r\n\r\n        //  This rarely changes, so we'll set it here, rather than every game step:\r\n        SetVertexUVsFromFrame(child.id, frame);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "import { GameObjectWorld } from '../GameObjectWorld';\r\nimport { IFrame } from './IFrame';\r\nimport { ISprite } from '../gameobjects/sprite/ISprite';\r\nimport { ITexture } from './ITexture';\r\nimport { RemoveTextureFromGameObject } from './RemoveTextureFromGameObject';\r\nimport { ReturnTexture } from './ReturnTexture';\r\nimport { SetFrame } from './SetFrame';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function SetTexture <S extends ISprite, T extends ITexture, F extends IFrame> (texture: string | T | F, frame: string | number | F, ...children: S[]): S[]\r\n{\r\n    const { texture: srcTexture, frame: srcFrame } = ReturnTexture(texture, frame);\r\n\r\n    children.forEach(child =>\r\n    {\r\n        if (child.hasTexture)\r\n        {\r\n            RemoveTextureFromGameObject(child);\r\n        }\r\n\r\n        child.texture = srcTexture;\r\n\r\n        addComponent(GameObjectWorld, srcTexture.tag, child.id);\r\n    });\r\n\r\n    SetFrame(srcTexture, srcFrame, ...children);\r\n\r\n    return children;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nexport const ColorComponent = defineComponent({\r\n    r: Types.ui8c,\r\n    g: Types.ui8c,\r\n    b: Types.ui8c,\r\n    a: Types.f32,\r\n    colorMatrix: [ Types.f32, 16 ],\r\n    colorOffset: [ Types.f32, 4 ]\r\n});\r\n", "import { ColorComponent } from './ColorComponent';\r\nimport { DEFAULT_COLOR_MATRIX } from '../../colormatrix/const';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddColorComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, ColorComponent, id);\r\n\r\n    ColorComponent.r[id] = 255;\r\n    ColorComponent.g[id] = 255;\r\n    ColorComponent.b[id] = 255;\r\n    ColorComponent.a[id] = 1;\r\n    ColorComponent.colorMatrix[id].set(DEFAULT_COLOR_MATRIX);\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetWorldID (id: number): number\r\n{\r\n    return HierarchyComponent.data[id][HIERARCHY.WORLD];\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nimport { GetWorldID } from '../hierarchy/GetWorldID';\r\n\r\nexport function SetDirtyColor (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.COLOR] = 1;\r\n\r\n    //  TODO - Set dirty parents color\r\n\r\n    const world = GetWorldID(id);\r\n\r\n    if (world)\r\n    {\r\n        DirtyComponent.data[world][DIRTY.CHILD_COLOR] = 1;\r\n    }\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { SetDirtyColor } from './SetDirtyColor';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddDirtyComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, DirtyComponent, id);\r\n\r\n    SetDirtyColor(id);\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyChildColor (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.CHILD_COLOR] = 0;\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyChildTransform (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.CHILD_TRANSFORM] = 0;\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyColor (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.COLOR] = 0;\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyDisplayList (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.DISPLAY_LIST] = 0;\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyWorldTransform (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.WORLD_TRANSFORM] = 0;\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyChildCache (id: number): boolean\r\n{\r\n    return !!(DirtyComponent.data[id][DIRTY.CHILD_CACHE]);\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyChildColor (id: number): boolean\r\n{\r\n    return !!(DirtyComponent.data[id][DIRTY.CHILD_COLOR]);\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyChildTransform (id: number): boolean\r\n{\r\n    return !!(DirtyComponent.data[id][DIRTY.CHILD_TRANSFORM]);\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyColor (id: number): boolean\r\n{\r\n    return !!(DirtyComponent.data[id][DIRTY.COLOR]);\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyDisplayList (id: number): boolean\r\n{\r\n    return !!(DirtyComponent.data[id][DIRTY.DISPLAY_LIST]);\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyWorldTransform (id: number): boolean\r\n{\r\n    return !!(DirtyComponent.data[id][DIRTY.WORLD_TRANSFORM]);\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyChildColor (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.CHILD_COLOR] = 1;\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyDisplayList (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.DISPLAY_LIST] = 1;\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyWorldTransform (id: number): void\r\n{\r\n    DirtyComponent.data[id][DIRTY.WORLD_TRANSFORM] = 1;\r\n}\r\n", "import { DIRTY, DirtyComponent } from './DirtyComponent';\r\n\r\nexport function WillUpdateTransform (id: number): boolean\r\n{\r\n    const data = DirtyComponent.data[id];\r\n\r\n    return !!(data[DIRTY.WORLD_TRANSFORM] || data[DIRTY.CHILD_TRANSFORM]);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function SetWillColorChildren (id: number, value: boolean): void\r\n{\r\n    PermissionsComponent.data[id][PERMISSION.WILL_COLOR_CHILDREN] = Number(value);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillColorChildren (id: number): boolean\r\n{\r\n    return !!(PermissionsComponent.data[id][PERMISSION.WILL_COLOR_CHILDREN]);\r\n}\r\n", "import { AddColorComponent } from './AddColorComponent';\r\nimport { ColorComponent } from './ColorComponent';\r\nimport { SetDirtyColor } from '../dirty';\r\nimport { SetWillColorChildren } from '../permissions/SetWillColorChildren';\r\nimport { WillColorChildren } from '../permissions/WillColorChildren';\r\n\r\n//  red, green, blue in the range 0-255\r\n//  alpha in the range 0-1\r\n//  colorMatrix Float32Array of length 16, values are 0 to 1\r\n//  colorOffset Float32Array of length 4, values are integer\r\n\r\nexport class Color\r\n{\r\n    private id: number;\r\n\r\n    colorMatrixEnabled: boolean = false;\r\n\r\n    constructor (id: number, red: number = 255, green: number = 255, blue: number = 255, alpha: number = 1)\r\n    {\r\n        AddColorComponent(id);\r\n\r\n        this.id = id;\r\n\r\n        this.set(red, green, blue, alpha);\r\n    }\r\n\r\n    set (red: number, green: number, blue: number, alpha: number): void\r\n    {\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n        this.alpha = alpha;\r\n    }\r\n\r\n    //  In the range 0x000000 to 0xffffff (alpha is ignored)\r\n    set tint (value: number)\r\n    {\r\n        this.red = (value >> 16) & 0xff;\r\n        this.green = (value >> 8) & 0xff;\r\n        this.blue = value & 0xff;\r\n    }\r\n\r\n    get tint (): number\r\n    {\r\n        return this.red << 16 | this.green << 8 | this.blue;\r\n    }\r\n\r\n    set willColorChildren (value: boolean)\r\n    {\r\n        SetWillColorChildren(this.id, value);\r\n    }\r\n\r\n    get willColorChildren (): boolean\r\n    {\r\n        return WillColorChildren(this.id);\r\n    }\r\n\r\n    //  16 element array (4x4)\r\n    set colorMatrix (value: Float32List)\r\n    {\r\n        ColorComponent.colorMatrix[this.id].set(value);\r\n\r\n        SetDirtyColor(this.id);\r\n\r\n        this.colorMatrixEnabled = true;\r\n    }\r\n\r\n    get colorMatrix (): Float32Array\r\n    {\r\n        return ColorComponent.colorMatrix[this.id];\r\n    }\r\n\r\n    //  4 element array (vec4)\r\n    set colorOffset (value: Float32List)\r\n    {\r\n        ColorComponent.colorOffset[this.id].set(value);\r\n\r\n        SetDirtyColor(this.id);\r\n    }\r\n\r\n    get colorOffset (): Float32Array\r\n    {\r\n        return ColorComponent.colorOffset[this.id];\r\n    }\r\n\r\n    //  All in the range 0-255 or 0x00-0xFF\r\n    set red (value: number)\r\n    {\r\n        ColorComponent.r[this.id] = value;\r\n\r\n        SetDirtyColor(this.id);\r\n    }\r\n\r\n    get red (): number\r\n    {\r\n        return ColorComponent.r[this.id];\r\n    }\r\n\r\n    set green (value: number)\r\n    {\r\n        ColorComponent.g[this.id] = value;\r\n\r\n        SetDirtyColor(this.id);\r\n    }\r\n\r\n    get green (): number\r\n    {\r\n        return ColorComponent.g[this.id];\r\n    }\r\n\r\n    set blue (value: number)\r\n    {\r\n        ColorComponent.b[this.id] = value;\r\n\r\n        SetDirtyColor(this.id);\r\n    }\r\n\r\n    get blue (): number\r\n    {\r\n        return ColorComponent.b[this.id];\r\n    }\r\n\r\n    set alpha (value: number)\r\n    {\r\n        ColorComponent.a[this.id] = value;\r\n\r\n        SetDirtyColor(this.id);\r\n    }\r\n\r\n    get alpha (): number\r\n    {\r\n        return ColorComponent.a[this.id];\r\n    }\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetNextSiblingID (id: number): number\r\n{\r\n    return HierarchyComponent.data[id][HIERARCHY.NEXT];\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetNextSiblingID (parentID: number, childID: number): void\r\n{\r\n    HierarchyComponent.data[parentID][HIERARCHY.NEXT] = childID;\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetPreviousSiblingID (parentID: number, childID: number): void\r\n{\r\n    HierarchyComponent.data[parentID][HIERARCHY.PREV] = childID;\r\n}\r\n", "import { SetNextSiblingID } from './SetNextSiblingID';\r\nimport { SetPreviousSiblingID } from './SetPreviousSiblingID';\r\n\r\n//  A linked to B\r\n\r\n//  A.next = B\r\n//  B.prev = A\r\n\r\nexport function LinkSiblings (childA: number, childB: number): void\r\n{\r\n    SetNextSiblingID(childA, childB);\r\n    SetPreviousSiblingID(childB, childA);\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetLastChildID (parentID: number, childID: number): void\r\n{\r\n    HierarchyComponent.data[parentID][HIERARCHY.LAST] = childID;\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetPreviousSiblingID (id: number): number\r\n{\r\n    return HierarchyComponent.data[id][HIERARCHY.PREV];\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetFirstChildID (parentID: number, childID: number): void\r\n{\r\n    HierarchyComponent.data[parentID][HIERARCHY.FIRST] = childID;\r\n}\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { HierarchyComponent } from './HierarchyComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddHierarchyComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, HierarchyComponent, id);\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetFirstChildID (parentID: number): number\r\n{\r\n    return HierarchyComponent.data[parentID][HIERARCHY.FIRST];\r\n}\r\n", "import { SetNextSiblingID } from './SetNextSiblingID';\r\nimport { SetPreviousSiblingID } from './SetPreviousSiblingID';\r\n\r\nexport function ClearSiblings (id: number): void\r\n{\r\n    SetNextSiblingID(id, 0);\r\n    SetPreviousSiblingID(id, 0);\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function DecreaseNumChildren (parentID: number, total: number = 1): void\r\n{\r\n    const data = HierarchyComponent.data[parentID];\r\n\r\n    data[HIERARCHY.NUM_CHILDREN] = Math.max(0, data[HIERARCHY.NUM_CHILDREN] - total);\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\nimport { hasComponent, removeComponent } from 'bitecs';\r\n\r\nimport { DecreaseNumChildren } from './DecreaseNumChildren';\r\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { GetParentID } from './GetParentID';\r\nimport { GetWorldID } from './GetWorldID';\r\nimport { IBaseWorld } from '../../world/IBaseWorld';\r\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\r\n\r\nexport function ClearWorldAndParentID (id: number): void\r\n{\r\n    const worldID = GetWorldID(id);\r\n    const parentID = GetParentID(id);\r\n    const world = GameObjectCache.get(worldID) as IBaseWorld;\r\n\r\n    HierarchyComponent.data[id][HIERARCHY.WORLD] = 0;\r\n    HierarchyComponent.data[id][HIERARCHY.PARENT] = 0;\r\n\r\n    if (world && hasComponent(GameObjectWorld, world.tag, id))\r\n    {\r\n        removeComponent(GameObjectWorld, world.tag, id);\r\n    }\r\n\r\n    DecreaseNumChildren(parentID);\r\n\r\n    SetDirtyParents(id);\r\n}\r\n", "import { GetFirstChildID } from './GetFirstChildID';\r\nimport { GetNextSiblingID } from './GetNextSiblingID';\r\nimport { GetParentID } from './GetParentID';\r\n\r\nexport function MoveNext (id: number, rootID: number): number\r\n{\r\n    //  Does 'id' have any children of its own?\r\n    const firstChild = GetFirstChildID(id);\r\n\r\n    if (firstChild > 0)\r\n    {\r\n        return firstChild;\r\n    }\r\n    else\r\n    {\r\n        const sibling = GetNextSiblingID(id);\r\n\r\n        if (sibling === 0)\r\n        {\r\n            //  No more children, how about from the parent?\r\n            const parent = GetParentID(id);\r\n\r\n            if (parent === rootID)\r\n            {\r\n                //  We're at the end of the list\r\n                return 0;\r\n            }\r\n            else\r\n            {\r\n                return GetNextSiblingID(parent);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return sibling;\r\n        }\r\n    }\r\n}\r\n", "import { GetFirstChildID } from './GetFirstChildID';\r\nimport { MoveNext } from './MoveNext';\r\n\r\n//  Returns ALL child IDs based on the given Parent, to any depth\r\n\r\nexport function DepthFirstSearchFromParentID (parentID: number, removeParent: boolean = true): number[]\r\n{\r\n    const output: number[] = [ parentID ];\r\n\r\n    let next = GetFirstChildID(parentID);\r\n\r\n    while (next > 0)\r\n    {\r\n        output.push(next);\r\n\r\n        next = MoveNext(next, parentID);\r\n    }\r\n\r\n    //  Remove the parent from the results\r\n    if (removeParent)\r\n    {\r\n        output.shift();\r\n    }\r\n\r\n    return output;\r\n}\r\n", "import { GetFirstChildID } from './GetFirstChildID';\r\nimport { GetNextSiblingID } from './GetNextSiblingID';\r\nimport { IGameObject } from '../../gameobjects/IGameObject';\r\n\r\nexport function GetChildIDsFromParent <T extends IGameObject> (parent: T): number[]\r\n{\r\n    let next = GetFirstChildID(parent.id);\r\n\r\n    const output = [];\r\n\r\n    while (next > 0)\r\n    {\r\n        output.push(next);\r\n\r\n        next = GetNextSiblingID(next);\r\n    }\r\n\r\n    return output;\r\n}\r\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { GetFirstChildID } from './GetFirstChildID';\r\nimport { GetNextSiblingID } from './GetNextSiblingID';\r\nimport { IGameObject } from '../../gameobjects/IGameObject';\r\n\r\nexport function GetChildrenFromParentID (id: number): IGameObject[]\r\n{\r\n    const out: IGameObject[] = [];\r\n\r\n    let next = GetFirstChildID(id);\r\n\r\n    while (next > 0)\r\n    {\r\n        out.push(GameObjectCache.get(next));\r\n\r\n        next = GetNextSiblingID(next);\r\n    }\r\n\r\n    return out;\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetLastChildID (parentID: number): number\r\n{\r\n    return HierarchyComponent.data[parentID][HIERARCHY.LAST];\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetNumChildren (id: number): number\r\n{\r\n    return HierarchyComponent.data[id][HIERARCHY.NUM_CHILDREN];\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { IGameObject } from '../../gameobjects/IGameObject';\r\n\r\nexport function GetParentGameObject (id: number): IGameObject\r\n{\r\n    return GameObjectCache.get(HierarchyComponent.data[id][HIERARCHY.PARENT]);\r\n}\r\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { GetWorldID } from './GetWorldID';\r\nimport { IBaseWorld } from '../../world/IBaseWorld';\r\n\r\nexport function GetWorldFromID (childID: number): IBaseWorld | undefined\r\n{\r\n    const worldID = GetWorldID(childID);\r\n\r\n    if (worldID)\r\n    {\r\n        return GameObjectCache.get(worldID) as IBaseWorld;\r\n    }\r\n}\r\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { GetWorldID } from './GetWorldID';\r\nimport { IBaseWorld } from '../../world/IBaseWorld';\r\n\r\nexport function GetWorldFromParentID (parentID: number): IBaseWorld | undefined\r\n{\r\n    const worldID = GetWorldID(parentID);\r\n\r\n    return GameObjectCache.get(worldID) as IBaseWorld;\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function HasChildren (id: number): boolean\r\n{\r\n    return !!(HierarchyComponent.data[id][HIERARCHY.NUM_CHILDREN] > 0);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function GetVisibleChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.data[id][PERMISSION.VISIBLE_CHILDREN]);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nimport { GetVisibleChildren } from './GetVisibleChildren';\r\n\r\nexport function WillRenderChildren (id: number): boolean\r\n{\r\n    return GetVisibleChildren(id) && !!(PermissionsComponent.data[id][PERMISSION.WILL_RENDER_CHILDREN]);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillUpdateChildren (id: number): boolean\r\n{\r\n    return !!(PermissionsComponent.data[id][PERMISSION.WILL_UPDATE_CHILDREN]);\r\n}\r\n", "import { GetFirstChildID } from './GetFirstChildID';\r\nimport { GetNextSiblingID } from './GetNextSiblingID';\r\nimport { GetParentID } from './GetParentID';\r\nimport { GetWorldID } from './GetWorldID';\r\nimport { WillUpdateChildren } from '../permissions/WillUpdateChildren';\r\n\r\nexport function MoveNextUpdatable (id: number): number\r\n{\r\n    //  Does 'id' have any children of its own?\r\n    const firstChild = GetFirstChildID(id);\r\n\r\n    if (firstChild > 0 && WillUpdateChildren(id))\r\n    {\r\n        return firstChild;\r\n    }\r\n    else\r\n    {\r\n        const sibling = GetNextSiblingID(id);\r\n\r\n        if (sibling === 0)\r\n        {\r\n            //  No more children, how about from the parent?\r\n            const parent = GetParentID(id);\r\n\r\n            if (parent === GetWorldID(id))\r\n            {\r\n                //  We're at the end of the list\r\n                return 0;\r\n            }\r\n            else\r\n            {\r\n                return GetNextSiblingID(parent);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return sibling;\r\n        }\r\n    }\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetNumChildren (parentID: number, total: number): void\r\n{\r\n    HierarchyComponent.data[parentID][HIERARCHY.NUM_CHILDREN] = total;\r\n}\r\n", "import { LinkSiblings } from './LinkSiblings';\r\nimport { SetFirstChildID } from './SetFirstChildID';\r\nimport { SetLastChildID } from './SetLastChildID';\r\nimport { SetNumChildren } from './SetNumChildren';\r\n\r\nexport function RelinkChildren (parentID: number, children: number[]): void\r\n{\r\n    const len = children.length;\r\n\r\n    if (len === 0)\r\n    {\r\n        SetNumChildren(parentID, 0);\r\n        SetFirstChildID(parentID, 0);\r\n        SetLastChildID(parentID, 0);\r\n\r\n        return;\r\n    }\r\n\r\n    let total = 1;\r\n\r\n    let childA = children[0];\r\n\r\n    SetFirstChildID(parentID, childA);\r\n\r\n    if (len === 1)\r\n    {\r\n        SetLastChildID(parentID, childA);\r\n\r\n        SetNumChildren(parentID, total);\r\n\r\n        return;\r\n    }\r\n\r\n    for (let i = 1; i < len; i++)\r\n    {\r\n        const childB = children[i];\r\n\r\n        LinkSiblings(childA, childB);\r\n\r\n        childA = childB;\r\n\r\n        total++;\r\n    }\r\n\r\n    SetLastChildID(parentID, childA);\r\n\r\n    SetNumChildren(parentID, total);\r\n}\r\n", "import { ClearSiblings } from './ClearSiblings';\r\nimport { GetFirstChildID } from './GetFirstChildID';\r\nimport { GetLastChildID } from './GetLastChildID';\r\nimport { GetNextSiblingID } from './GetNextSiblingID';\r\nimport { GetParentID } from './GetParentID';\r\nimport { GetPreviousSiblingID } from './GetPreviousSiblingID';\r\nimport { LinkSiblings } from './LinkSiblings';\r\nimport { SetFirstChildID } from './SetFirstChildID';\r\nimport { SetLastChildID } from './SetLastChildID';\r\n\r\nexport function RemoveChildID (childID: number): void\r\n{\r\n    const parentID = GetParentID(childID);\r\n\r\n    const first = GetFirstChildID(parentID);\r\n    const last = GetLastChildID(parentID);\r\n\r\n    const prevID = GetPreviousSiblingID(childID);\r\n    const nextID = GetNextSiblingID(childID);\r\n\r\n    LinkSiblings(prevID, nextID);\r\n\r\n    if (first === childID)\r\n    {\r\n        SetFirstChildID(parentID, nextID);\r\n    }\r\n\r\n    if (last === childID)\r\n    {\r\n        SetLastChildID(parentID, prevID);\r\n    }\r\n\r\n    ClearSiblings(childID);\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetWorldID (id: number, worldID: number): void\r\n{\r\n    HierarchyComponent.data[id][HIERARCHY.WORLD] = worldID;\r\n}\r\n", "import { DepthFirstSearchFromParentID } from './DepthFirstSearchFromParentID';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { GetWorldFromParentID } from './GetWorldFromParentID';\r\nimport { SetWorldID } from './SetWorldID';\r\nimport { removeComponent } from 'bitecs';\r\n\r\nexport function RemoveWorldTag (id: number): void\r\n{\r\n    const world = GetWorldFromParentID(id);\r\n\r\n    const children = DepthFirstSearchFromParentID(id, false);\r\n\r\n    children.map(childID =>\r\n    {\r\n        removeComponent(GameObjectWorld, world.tag, childID);\r\n\r\n        SetWorldID(childID, 0);\r\n    });\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetParentID (childID: number, parentID: number): void\r\n{\r\n    HierarchyComponent.data[childID][HIERARCHY.PARENT] = parentID;\r\n}\r\n", "import { GetFirstChildID } from './GetFirstChildID';\r\nimport { GetLastChildID } from './GetLastChildID';\r\nimport { GetNextSiblingID } from './GetNextSiblingID';\r\nimport { GetNumChildren } from './GetNumChildren';\r\nimport { GetParentID } from './GetParentID';\r\nimport { GetPreviousSiblingID } from './GetPreviousSiblingID';\r\nimport { GetWorldFromID } from './index';\r\nimport { RemoveWorldTag } from './RemoveWorldTag';\r\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\r\nimport { SetFirstChildID } from './SetFirstChildID';\r\nimport { SetLastChildID } from './SetLastChildID';\r\nimport { SetNextSiblingID } from './SetNextSiblingID';\r\nimport { SetNumChildren } from './SetNumChildren';\r\nimport { SetParentID } from './SetParentID';\r\nimport { SetPreviousSiblingID } from './SetPreviousSiblingID';\r\n\r\nexport function RemoveChildIDFromCurrentParent (childID: number, newParentID?: number): void\r\n{\r\n    const parentID = GetParentID(childID);\r\n\r\n    if (parentID)\r\n    {\r\n        const firstID = GetFirstChildID(parentID);\r\n        const lastID = GetLastChildID(parentID);\r\n\r\n        const nextID = GetNextSiblingID(childID);\r\n        const prevID = GetPreviousSiblingID(childID);\r\n\r\n        if (childID === firstID)\r\n        {\r\n            SetFirstChildID(parentID, nextID);\r\n        }\r\n\r\n        if (childID === lastID)\r\n        {\r\n            SetLastChildID(parentID, prevID);\r\n        }\r\n\r\n        if (nextID)\r\n        {\r\n            SetPreviousSiblingID(nextID, prevID);\r\n        }\r\n\r\n        if (prevID)\r\n        {\r\n            SetNextSiblingID(prevID, nextID);\r\n        }\r\n\r\n        SetDirtyParents(childID);\r\n\r\n        SetParentID(childID, 0);\r\n\r\n        SetNumChildren(parentID, GetNumChildren(parentID) - 1);\r\n    }\r\n\r\n    const oldWorld = GetWorldFromID(childID);\r\n    const newWorld = (newParentID) ? GetWorldFromID(newParentID) : null;\r\n\r\n    if (oldWorld && oldWorld !== newWorld)\r\n    {\r\n        RemoveWorldTag(childID);\r\n    }\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillTransformChildren (id: number): boolean\r\n{\r\n    return !!(PermissionsComponent.data[id][PERMISSION.WILL_TRANSFORM_CHILDREN]);\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { GetParentID } from '../hierarchy/GetParentID';\r\nimport { GetWorldID } from '../hierarchy/GetWorldID';\r\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\r\n\r\nexport function SetRootTransform (id: number): void\r\n{\r\n    const worldID = GetWorldID(id);\r\n    let currentParent = GetParentID(id);\r\n\r\n    let isRootTransform = true;\r\n\r\n    while (currentParent && currentParent !== worldID)\r\n    {\r\n        if (WillTransformChildren(currentParent))\r\n        {\r\n            isRootTransform = false;\r\n            break;\r\n        }\r\n\r\n        currentParent = GetParentID(currentParent);\r\n    }\r\n\r\n    Transform2DComponent.data[id][TRANSFORM.IS_ROOT] = Number(isRootTransform);\r\n}\r\n", "import { DepthFirstSearchFromParentID } from './DepthFirstSearchFromParentID';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { IBaseWorld } from '../../world/IBaseWorld';\r\nimport { SetDirtyChildColor } from '../dirty/SetDirtyChildColor';\r\nimport { SetWorldID } from './SetWorldID';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function SetWorldTag <W extends IBaseWorld> (world: W, id: number): void\r\n{\r\n    const worldID = world.id;\r\n    const worldTag = world.tag;\r\n\r\n    const children = DepthFirstSearchFromParentID(id, false);\r\n\r\n    children.map(childID =>\r\n    {\r\n        addComponent(GameObjectWorld, worldTag, childID);\r\n\r\n        SetWorldID(childID, worldID);\r\n    });\r\n\r\n    world.updateDisplayList = true;\r\n\r\n    SetDirtyChildColor(worldID);\r\n}\r\n", "import { GetNumChildren } from './GetNumChildren';\r\nimport { GetWorldFromParentID } from './GetWorldFromParentID';\r\nimport { SetDirtyChildCache } from '../dirty/SetDirtyChildCache';\r\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\r\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\r\nimport { SetNumChildren } from './SetNumChildren';\r\nimport { SetParentID } from './SetParentID';\r\nimport { SetRootTransform } from '../transform/SetRootTransform';\r\nimport { SetWorldTag } from './SetWorldTag';\r\nimport { WillCacheChildren } from '../permissions/WillCacheChildren';\r\n\r\nexport function SetAndUpdateParent (parentID: number, childID: number, addChildren: number = 1): void\r\n{\r\n    SetParentID(childID, parentID);\r\n\r\n    if (!WillCacheChildren(childID))\r\n    {\r\n        SetDirtyTransform(childID);\r\n    }\r\n\r\n    SetDirtyParents(childID);\r\n\r\n    SetRootTransform(childID);\r\n\r\n    SetNumChildren(parentID, GetNumChildren(parentID) + addChildren);\r\n\r\n    if (WillCacheChildren(parentID))\r\n    {\r\n        SetDirtyChildCache(parentID);\r\n    }\r\n\r\n    const world = GetWorldFromParentID(parentID);\r\n\r\n    if (world)\r\n    {\r\n        SetWorldTag(world, childID);\r\n    }\r\n}\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { PermissionsComponent } from './PermissionsComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddPermissionsComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, PermissionsComponent, id);\r\n\r\n    PermissionsComponent.data[id].set([ 1, 1, 1, 1, 1, 1, 0, 1, 1, 0 ]);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function GetVisible (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.data[id][PERMISSION.VISIBLE]);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function HasCustomDisplayList (id: number): boolean\r\n{\r\n    return !!(PermissionsComponent.data[id][PERMISSION.CUSTOM_DISPLAY_LIST]);\r\n}\r\n", "import { GetNumChildren } from '../hierarchy/GetNumChildren';\r\nimport { HasDirtyChildCache } from '../dirty/HasDirtyChildCache';\r\nimport { WillCacheChildren } from './WillCacheChildren';\r\nimport { WillRenderChildren } from './WillRenderChildren';\r\n\r\nexport function HasRenderableChildren (id: number, dirtyCamera: boolean): number\r\n{\r\n    const numChildren = GetNumChildren(id);\r\n\r\n    if (numChildren === 0 || !WillRenderChildren(id))\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    //  By this stage we know it has some children\r\n\r\n    //  A Container won't cache children\r\n    //  A RenderLayer will cache children, but check if any are dirty or not\r\n    if (dirtyCamera || !WillCacheChildren(id) || (WillCacheChildren(id) && HasDirtyChildCache(id)))\r\n    {\r\n        return numChildren;\r\n    }\r\n\r\n    return 0;\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function SetCustomDisplayList (id: number, value: boolean): void\r\n{\r\n    PermissionsComponent.data[id][PERMISSION.CUSTOM_DISPLAY_LIST] = Number(value);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\r\n\r\nexport function SetVisible (id: number, value: boolean): void\r\n{\r\n    PermissionsComponent.data[id][PERMISSION.VISIBLE] = Number(value);\r\n\r\n    SetDirtyParents(id);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\r\n\r\nexport function SetVisibleChildren (id: number, value: boolean): void\r\n{\r\n    PermissionsComponent.data[id][PERMISSION.VISIBLE_CHILDREN] = Number(value);\r\n\r\n    SetDirtyParents(id);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function SetWillCacheChildren (id: number, value: boolean): void\r\n{\r\n    PermissionsComponent.data[id][PERMISSION.WILL_CACHE_CHILDREN] = Number(value);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function SetWillTransformChildren (id: number, value: boolean): void\r\n{\r\n    PermissionsComponent.data[id][PERMISSION.WILL_TRANSFORM_CHILDREN] = Number(value);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function SetWillUpdateChildren (id: number, value: boolean): void\r\n{\r\n    PermissionsComponent.data[id][PERMISSION.WILL_UPDATE_CHILDREN] = Number(value);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillRender (id: number): boolean\r\n{\r\n    return !!(PermissionsComponent.data[id][PERMISSION.VISIBLE]) &&\r\n           !!(PermissionsComponent.data[id][PERMISSION.WILL_RENDER]);\r\n}\r\n", "import { PERMISSION, PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillUpdate (id: number): boolean\r\n{\r\n    return !!(PermissionsComponent.data[id][PERMISSION.WILL_UPDATE]);\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { IBounds } from './IBounds';\r\n\r\nexport function GetLocalBounds (id: number): IBounds\r\n{\r\n    const data = Transform2DComponent.data[id];\r\n\r\n    const left = data[TRANSFORM.BOUNDS_X1];\r\n    const top = data[TRANSFORM.BOUNDS_Y1];\r\n    const right = data[TRANSFORM.BOUNDS_X2];\r\n    const bottom = data[TRANSFORM.BOUNDS_Y2];\r\n\r\n    return { left, top, right, bottom };\r\n}\r\n", "import { IVec2 } from './IVec2';\r\n\r\nexport function Vec2FromArray (dst: IVec2, src: Float32List = [], index: number = 0): IVec2\r\n{\r\n    return dst.set(\r\n        src[ index ],\r\n        src[ index + 1 ]\r\n    );\r\n}\r\n", "import { IVec2Like } from './IVec2Like';\r\n\r\nexport function Vec2ToArray (v: IVec2Like, dst: Float32List = [], index: number = 0): Float32List\r\n{\r\n    dst[ index ] = v.x;\r\n    dst[ index + 1 ] = v.y;\r\n\r\n    return dst;\r\n}\r\n", "import { IVec2 } from './IVec2';\r\nimport { Vec2FromArray } from './Vec2FromArray';\r\nimport { Vec2ToArray } from './Vec2ToArray';\r\n\r\nexport class Vec2 implements IVec2\r\n{\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor (x: number = 0, y: number = 0)\r\n    {\r\n        this.set(x, y);\r\n    }\r\n\r\n    set (x: number = 0, y: number = 0): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    toArray (dst: Float32List = [], index: number = 0): Float32List\r\n    {\r\n        return Vec2ToArray(this, dst, index);\r\n    }\r\n\r\n    fromArray (src: Float32List, index: number = 0): this\r\n    {\r\n        Vec2FromArray(this, src, index);\r\n\r\n        return this;\r\n    }\r\n\r\n    toString (): string\r\n    {\r\n        return `{ x=${this.x}, y=${this.y} }`;\r\n    }\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport function IsFixedTransform (id: number): boolean\r\n{\r\n    return !!(Transform2DComponent.data[id][TRANSFORM.FIXED]);\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport function IsInView (id: number): boolean\r\n{\r\n    return !!(Transform2DComponent.data[id][TRANSFORM.IN_VIEW]);\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { IVec2 } from '../../math/vec2/IVec2';\r\nimport { UpdateExtent } from './UpdateExtent';\r\n\r\nexport class Origin implements IVec2\r\n{\r\n    private id: number;\r\n    private _x: number;\r\n    private _y: number;\r\n    private _data: Float32Array;\r\n\r\n    constructor (id: number, x: number = 0, y: number = 0)\r\n    {\r\n        this.id = id;\r\n\r\n        this._data = Transform2DComponent.data[id];\r\n\r\n        this.set(x, y);\r\n    }\r\n\r\n    set (x: number, y: number = x): this\r\n    {\r\n        const data = this._data;\r\n\r\n        this._x = x;\r\n        this._y = y;\r\n\r\n        data[TRANSFORM.ORIGIN_X] = x;\r\n        data[TRANSFORM.ORIGIN_Y] = y;\r\n\r\n        UpdateExtent(this.id, data[TRANSFORM.FRAME_WIDTH], data[TRANSFORM.FRAME_HEIGHT]);\r\n\r\n        return this;\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        const data = this._data;\r\n\r\n        this._x = value;\r\n\r\n        data[TRANSFORM.ORIGIN_X] = value;\r\n\r\n        UpdateExtent(this.id, data[TRANSFORM.FRAME_WIDTH], data[TRANSFORM.FRAME_HEIGHT]);\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return this._x;\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        const data = this._data;\r\n\r\n        this._y = value;\r\n\r\n        data[TRANSFORM.ORIGIN_Y] = value;\r\n\r\n        UpdateExtent(this.id, data[TRANSFORM.FRAME_WIDTH], data[TRANSFORM.FRAME_HEIGHT]);\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return this._y;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this._data = null;\r\n    }\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { IVec2 } from '../../math/vec2/IVec2';\r\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\r\n\r\nexport class Position implements IVec2\r\n{\r\n    private id: number;\r\n    private _x: number;\r\n    private _y: number;\r\n    private _data: Float32Array;\r\n\r\n    constructor (id: number, x: number = 0, y: number = 0)\r\n    {\r\n        this.id = id;\r\n\r\n        this._data = Transform2DComponent.data[id];\r\n\r\n        this.set(x, y);\r\n    }\r\n\r\n    set (x: number, y: number = x): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        if (value !== this._x)\r\n        {\r\n            this._x = value;\r\n\r\n            this._data[TRANSFORM.X] = value;\r\n\r\n            SetDirtyTransform(this.id);\r\n        }\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return this._x;\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        if (value !== this._y)\r\n        {\r\n            this._y = value;\r\n\r\n            this._data[TRANSFORM.Y] = value;\r\n\r\n            SetDirtyTransform(this.id);\r\n        }\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return this._y;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this._data = null;\r\n    }\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { IVec2 } from '../../math/vec2/IVec2';\r\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\r\n\r\nexport class Scale implements IVec2\r\n{\r\n    private id: number;\r\n    private _x: number;\r\n    private _y: number;\r\n    private _data: Float32Array;\r\n\r\n    constructor (id: number, x: number = 1, y: number = 1)\r\n    {\r\n        this.id = id;\r\n\r\n        this._data = Transform2DComponent.data[id];\r\n\r\n        this.set(x, y);\r\n    }\r\n\r\n    set (x: number, y: number = x): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        if (value !== this._x)\r\n        {\r\n            this._x = value;\r\n\r\n            this._data[TRANSFORM.SCALE_X] = value;\r\n\r\n            SetDirtyTransform(this.id);\r\n        }\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return this._x;\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        if (value !== this._y)\r\n        {\r\n            this._y = value;\r\n\r\n            this._data[TRANSFORM.SCALE_Y] = value;\r\n\r\n            SetDirtyTransform(this.id);\r\n        }\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return this._y;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this._data = null;\r\n    }\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from '../transform/Transform2DComponent';\r\n\r\nexport function SetFixedTransform (id: number, value: boolean): void\r\n{\r\n    Transform2DComponent.data[id][TRANSFORM.FIXED] = Number(value);\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from '../transform/Transform2DComponent';\r\n\r\nexport function SetInViewFromBounds (id: number, cx: number, cy: number, cright: number, cbottom: number): void\r\n{\r\n    const data: Float32Array = Transform2DComponent.data[id];\r\n\r\n    const bx = data[TRANSFORM.BOUNDS_X1];\r\n    const by = data[TRANSFORM.BOUNDS_Y1];\r\n    const br = data[TRANSFORM.BOUNDS_X2];\r\n    const bb = data[TRANSFORM.BOUNDS_Y2];\r\n\r\n    data[TRANSFORM.IN_VIEW] = Number(!(cright < bx || cbottom < by || cx > br || cy > bb));\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport function UpdateAxisAligned (id: number): void\r\n{\r\n    const data = Transform2DComponent.data[id];\r\n\r\n    const rotation = data[TRANSFORM.ROTATION];\r\n    const skewX = data[TRANSFORM.SKEW_X];\r\n    const skewY = data[TRANSFORM.SKEW_Y];\r\n\r\n    data[TRANSFORM.AXIS_ALIGNED] = Number(rotation === 0 && skewX === 0 && skewY === 0);\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { IVec2 } from '../../math/vec2/IVec2';\r\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\r\nimport { UpdateAxisAligned } from './UpdateAxisAligned';\r\n\r\nexport class Skew implements IVec2\r\n{\r\n    private id: number;\r\n    private _x: number;\r\n    private _y: number;\r\n    private _data: Float32Array;\r\n\r\n    constructor (id: number, x: number = 0, y: number = 0)\r\n    {\r\n        this.id = id;\r\n\r\n        this._data = Transform2DComponent.data[id];\r\n\r\n        this.set(x, y);\r\n    }\r\n\r\n    set (x: number, y: number = x): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        if (value !== this._x)\r\n        {\r\n            this._x = value;\r\n\r\n            this._data[TRANSFORM.SKEW_X] = value;\r\n\r\n            const id = this.id;\r\n\r\n            UpdateAxisAligned(id);\r\n            SetDirtyTransform(id);\r\n        }\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return this._x;\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        if (value !== this._y)\r\n        {\r\n            this._y = value;\r\n\r\n            this._data[TRANSFORM.SKEW_Y] = value;\r\n\r\n            const id = this.id;\r\n\r\n            UpdateAxisAligned(id);\r\n            SetDirtyTransform(id);\r\n        }\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return this._y;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this._data = null;\r\n    }\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { ClearDirtyTransform } from '../dirty/ClearDirtyTransform';\r\n\r\nexport function UpdateLocalTransform (id: number): boolean\r\n{\r\n    const data: Float32Array = Transform2DComponent.data[id];\r\n\r\n    const tx = data[TRANSFORM.X];\r\n    const ty = data[TRANSFORM.Y];\r\n    const rotation = data[TRANSFORM.ROTATION];\r\n    const scaleX = data[TRANSFORM.SCALE_X];\r\n    const scaleY = data[TRANSFORM.SCALE_Y];\r\n    const skewX = data[TRANSFORM.SKEW_X];\r\n    const skewY = data[TRANSFORM.SKEW_Y];\r\n    const axisAligned = Boolean(data[TRANSFORM.AXIS_ALIGNED]);\r\n\r\n    let a = scaleX;\r\n    let b = 0;\r\n    let c = 0;\r\n    let d = scaleY;\r\n\r\n    if (!axisAligned)\r\n    {\r\n        a = Math.cos(rotation + skewY) * scaleX;\r\n        b = Math.sin(rotation + skewY) * scaleX;\r\n        c = -Math.sin(rotation - skewX) * scaleY;\r\n        d = Math.cos(rotation - skewX) * scaleY;\r\n    }\r\n\r\n    data[TRANSFORM.LOCAL_A] = a;\r\n    data[TRANSFORM.LOCAL_B] = b;\r\n    data[TRANSFORM.LOCAL_C] = c;\r\n    data[TRANSFORM.LOCAL_D] = d;\r\n    data[TRANSFORM.LOCAL_TX] = tx;\r\n    data[TRANSFORM.LOCAL_TY] = ty;\r\n\r\n    ClearDirtyTransform(id);\r\n\r\n    //  This is a root transform, so world is the same as local\r\n    if (data[TRANSFORM.IS_ROOT])\r\n    {\r\n        data[TRANSFORM.WORLD_A] = a;\r\n        data[TRANSFORM.WORLD_B] = b;\r\n        data[TRANSFORM.WORLD_C] = c;\r\n        data[TRANSFORM.WORLD_D] = d;\r\n        data[TRANSFORM.WORLD_TX] = tx;\r\n        data[TRANSFORM.WORLD_TY] = ty;\r\n\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n", "import { QuadVertexComponent } from './QuadVertexComponent';\r\n\r\nexport function SetQuadPosition (id: number, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): void\r\n{\r\n    const data = QuadVertexComponent.values[id];\r\n\r\n    //  top left\r\n    data[0] = x0;\r\n    data[1] = y0;\r\n\r\n    //  bottom left\r\n    data[9] = x1;\r\n    data[10] = y1;\r\n\r\n    //  bottom right\r\n    data[18] = x2;\r\n    data[19] = y2;\r\n\r\n    //  top left\r\n    data[27] = x0;\r\n    data[28] = y0;\r\n\r\n    //  bottom right\r\n    data[36] = x2;\r\n    data[37] = y2;\r\n\r\n    //  top right\r\n    data[45] = x3;\r\n    data[46] = y3;\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nimport { SetQuadPosition } from '../vertices/SetQuadPosition';\r\n\r\nexport function UpdateQuadBounds (id: number, cx: number, cy: number, cright: number, cbottom: number): void\r\n{\r\n    const data: Float32Array = Transform2DComponent.data[id];\r\n\r\n    const a = data[TRANSFORM.WORLD_A];\r\n    const b = data[TRANSFORM.WORLD_B];\r\n    const c = data[TRANSFORM.WORLD_C];\r\n    const d = data[TRANSFORM.WORLD_D];\r\n    const tx = data[TRANSFORM.WORLD_TX];\r\n    const ty = data[TRANSFORM.WORLD_TY];\r\n\r\n    const x = data[TRANSFORM.FRAME_X1];\r\n    const y = data[TRANSFORM.FRAME_Y1];\r\n    const right = data[TRANSFORM.FRAME_X2];\r\n    const bottom = data[TRANSFORM.FRAME_Y2];\r\n\r\n    //  top left\r\n    let x0 = (x * a) + tx;\r\n    let y0 = (y * d) + ty;\r\n\r\n    //  bottom left\r\n    let x1 = (x * a) + tx;\r\n    let y1 = (bottom * d) + ty;\r\n\r\n    //  bottom right\r\n    let x2 = (right * a) + tx;\r\n    let y2 = (bottom * d) + ty;\r\n\r\n    //  top right\r\n    let x3 = (right * a) + tx;\r\n    let y3 = (y * d) + ty;\r\n\r\n    let bx = x0;\r\n    let by = y0;\r\n    let br = x2;\r\n    let bb = y2;\r\n\r\n    const aligned = data[TRANSFORM.AXIS_ALIGNED] && data[TRANSFORM.IS_ROOT];\r\n\r\n    if (!aligned)\r\n    {\r\n        x0 += (y * c);\r\n        y0 += (x * b);\r\n        x1 += (bottom * c);\r\n        y1 += (x * b);\r\n        x2 += (bottom * c);\r\n        y2 += (right * b);\r\n        x3 += (y * c);\r\n        y3 += (right * b);\r\n\r\n        bx = Math.min(x0, x1, x2, x3);\r\n        by = Math.min(y0, y1, y2, y3);\r\n        br = Math.max(x0, x1, x2, x3);\r\n        bb = Math.max(y0, y1, y2, y3);\r\n    }\r\n\r\n    data[TRANSFORM.BOUNDS_X1] = bx;\r\n    data[TRANSFORM.BOUNDS_Y1] = by;\r\n    data[TRANSFORM.BOUNDS_X2] = br;\r\n    data[TRANSFORM.BOUNDS_Y2] = bb;\r\n\r\n    data[TRANSFORM.IN_VIEW] = Number(!(cright < bx || cbottom < by || cx > br || cy > bb));\r\n\r\n    //  Always set quad position, so we can always extract the quad points at any time, in-view, or not (i.e. for input)\r\n    SetQuadPosition(id, x0, y0, x1, y1, x2, y2, x3, y3);\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport function UpdateWorldTransform (id: number, parentID: number): void\r\n{\r\n    const data = Transform2DComponent.data[id];\r\n    const parentData = Transform2DComponent.data[parentID];\r\n\r\n    const pa = parentData[TRANSFORM.WORLD_A];\r\n    const pb = parentData[TRANSFORM.WORLD_B];\r\n    const pc = parentData[TRANSFORM.WORLD_C];\r\n    const pd = parentData[TRANSFORM.WORLD_D];\r\n    const ptx = parentData[TRANSFORM.WORLD_TX];\r\n    const pty = parentData[TRANSFORM.WORLD_TY];\r\n\r\n    const a = data[TRANSFORM.LOCAL_A];\r\n    const b = data[TRANSFORM.LOCAL_B];\r\n    const c = data[TRANSFORM.LOCAL_C];\r\n    const d = data[TRANSFORM.LOCAL_D];\r\n    const tx = data[TRANSFORM.LOCAL_TX];\r\n    const ty = data[TRANSFORM.LOCAL_TY];\r\n\r\n    data[TRANSFORM.WORLD_A] = a * pa + b * pc;\r\n    data[TRANSFORM.WORLD_B] = a * pb + b * pd;\r\n    data[TRANSFORM.WORLD_C] = c * pa + d * pc;\r\n    data[TRANSFORM.WORLD_D] = c * pb + d * pd;\r\n    data[TRANSFORM.WORLD_TX] = tx * pa + ty * pc + ptx;\r\n    data[TRANSFORM.WORLD_TY] = tx * pb + ty * pd + pty;\r\n}\r\n", "import { IsFixedTransform } from './IsFixedTransform';\r\nimport { SetDirtyWorldTransform } from '../dirty/SetDirtyWorldTransform';\r\nimport { UpdateLocalTransform } from './UpdateLocalTransform';\r\nimport { UpdateQuadBounds } from './UpdateQuadBounds';\r\nimport { UpdateWorldTransform } from './UpdateWorldTransform';\r\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\r\n\r\nexport function UpdateTransforms (id: number, parentID: number, updateWorld: boolean, cx: number, cy: number, cright: number, cbottom: number): void\r\n{\r\n    if (updateWorld || UpdateLocalTransform(id))\r\n    {\r\n        UpdateWorldTransform(id, parentID);\r\n    }\r\n\r\n    if (WillTransformChildren(id))\r\n    {\r\n        SetDirtyWorldTransform(id);\r\n    }\r\n\r\n    if (!IsFixedTransform(id))\r\n    {\r\n        UpdateQuadBounds(id, cx, cy, cright, cbottom);\r\n    }\r\n}\r\n", "import { QuadVertexComponent } from './QuadVertexComponent';\r\n\r\nexport function SetQuadColor (id: number, red: number, green: number, blue: number, alpha: number): void\r\n{\r\n    const data = QuadVertexComponent.values[id];\r\n\r\n    data[5] = red;\r\n    data[6] = green;\r\n    data[7] = blue;\r\n    data[8] = alpha;\r\n\r\n    data[14] = red;\r\n    data[15] = green;\r\n    data[16] = blue;\r\n    data[17] = alpha;\r\n\r\n    data[23] = red;\r\n    data[24] = green;\r\n    data[25] = blue;\r\n    data[26] = alpha;\r\n\r\n    data[32] = red;\r\n    data[33] = green;\r\n    data[34] = blue;\r\n    data[35] = alpha;\r\n\r\n    data[41] = red;\r\n    data[42] = green;\r\n    data[43] = blue;\r\n    data[44] = alpha;\r\n\r\n    data[50] = red;\r\n    data[51] = green;\r\n    data[52] = blue;\r\n    data[53] = alpha;\r\n}\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { QuadVertexComponent } from './QuadVertexComponent';\r\nimport { SetQuadColor } from './SetQuadColor';\r\nimport { SetQuadPosition } from './SetQuadPosition';\r\nimport { SetUV } from './SetUV';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddQuadVertex (id: number, width: number = 0, height: number = 0): void\r\n{\r\n    addComponent(GameObjectWorld, QuadVertexComponent, id);\r\n\r\n    if (width || height)\r\n    {\r\n        SetUV(id, 0, 0, 1, 1);\r\n        SetQuadColor(id, 1, 1, 1, 1);\r\n        SetQuadPosition(id, 0, 0, 0, height, width, height, width, 0);\r\n    }\r\n}\r\n", "import { QuadVertexComponent } from './QuadVertexComponent';\r\n\r\nexport function SetQuadTextureIndex (id: number, textureIndex: number): void\r\n{\r\n    const data = QuadVertexComponent.values[id];\r\n\r\n    if (data[4] !== textureIndex)\r\n    {\r\n        data[4] = textureIndex;\r\n        data[13] = textureIndex;\r\n        data[22] = textureIndex;\r\n        data[31] = textureIndex;\r\n        data[40] = textureIndex;\r\n        data[49] = textureIndex;\r\n    }\r\n}\r\n", "import { IAnimationData } from './IAnimationData';\r\n\r\nexport function CreateAnimData (\r\n    currentAnim: string = '',\r\n    frameRate: number = 0,\r\n    duration: number = 0,\r\n    delay: number = 0,\r\n    repeat: number = 0,\r\n    repeatDelay: number = 0,\r\n    yoyo: boolean = false,\r\n    hold: number = 0,\r\n    showOnStart: boolean = false,\r\n    hideOnComplete: boolean = false\r\n): IAnimationData\r\n{\r\n    return {\r\n        currentAnim,\r\n        frameRate,\r\n        duration,\r\n        delay,\r\n        repeat,\r\n        repeatDelay,\r\n        yoyo,\r\n        hold,\r\n        showOnStart,\r\n        hideOnComplete,\r\n        stopAfter: 0,\r\n        startFrame: 0,\r\n        timeScale: 1,\r\n        onStart: null,\r\n        onRepeat: null,\r\n        onComplete: null,\r\n        nextFrameTime: 0,\r\n        repeatCount: 0,\r\n        isPlaying: false,\r\n        forceRestart: false,\r\n        pendingStart: false,\r\n        playingForward: true\r\n    };\r\n}\r\n", "import { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { QuadVertexComponent } from '../../../components/vertices/QuadVertexComponent';\r\nimport { SetQuadTextureIndex } from '../../../components/vertices/SetQuadTextureIndex';\r\nimport { SetWebGLTexture } from '../renderpass/SetWebGLTexture';\r\n\r\nexport function BatchTexturedQuadBuffer <T extends ITexture> (texture: T, id: number, renderPass: IRenderPass): void\r\n{\r\n    const { F32, offset } = GetVertexBufferEntry(renderPass, 2);\r\n\r\n    const textureIndex = SetWebGLTexture(texture);\r\n\r\n    SetQuadTextureIndex(id, textureIndex);\r\n\r\n    F32.set(QuadVertexComponent.values[id], offset);\r\n}\r\n", "import { ClearWorldAndParentID } from '../components/hierarchy/ClearWorldAndParentID';\r\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\r\nimport { GetChildIDsFromParent } from '../components/hierarchy/GetChildIDsFromParent';\r\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RelinkChildren } from '../components/hierarchy/RelinkChildren';\r\n\r\nexport function RemoveChildrenBetween <P extends IGameObject> (parent: P, beginIndex: number = 0, endIndex?: number): IGameObject[]\r\n{\r\n    const parentID = parent.id;\r\n\r\n    if (endIndex === undefined)\r\n    {\r\n        endIndex = GetNumChildren(parentID);\r\n    }\r\n\r\n    const range = endIndex - beginIndex;\r\n\r\n    if (range > 0 && range <= endIndex)\r\n    {\r\n        const children = GetChildIDsFromParent(parent);\r\n\r\n        const removed = children.splice(beginIndex, range);\r\n\r\n        removed.forEach(childID =>\r\n        {\r\n            ClearWorldAndParentID(childID);\r\n        });\r\n\r\n        RelinkChildren(parentID, children);\r\n\r\n        removed.forEach(id => parent.onRemoveChild(id));\r\n\r\n        return removed.map(id => GameObjectCache.get(id));\r\n    }\r\n    else\r\n    {\r\n        return [];\r\n    }\r\n}\r\n", "import { GetWorldFromParentID } from '../components/hierarchy/GetWorldFromParentID';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\r\n\r\nexport function DestroyChildren <T extends IGameObject> (parent: T, beginIndex: number = 0, endIndex?: number): void\r\n{\r\n    const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\r\n\r\n    removed.forEach(child =>\r\n    {\r\n        child.destroy();\r\n    });\r\n\r\n    const world = GetWorldFromParentID(parent.id);\r\n\r\n    if (world)\r\n    {\r\n        world.updateDisplayList = true;\r\n    }\r\n}\r\n", "import { GetParentID } from '../components/hierarchy/GetParentID';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function IsValidParent <P extends IGameObject, C extends IGameObject> (parent: P, child: C): boolean\r\n{\r\n    const childID = child.id;\r\n    const parentID = parent.id;\r\n\r\n    //  It's not a valid parent if:\r\n\r\n    //  1) The parent ID is zero (only the Game instance can be zero)\r\n    //  2) The Child ID matches the Parent ID\r\n    //  3) The parent is already the child's parent\r\n\r\n    return !(parentID === 0 || childID === parentID || parentID === GetParentID(childID));\r\n}\r\n", "import { GetLastChildID } from '../components/hierarchy/GetLastChildID';\r\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { IsValidParent } from './IsValidParent';\r\nimport { LinkSiblings } from '../components/hierarchy/LinkSiblings';\r\nimport { RemoveChildIDFromCurrentParent } from '../components/hierarchy/RemoveChildIDFromCurrentParent';\r\nimport { SetAndUpdateParent } from '../components/hierarchy/SetAndUpdateParent';\r\nimport { SetFirstChildID } from '../components/hierarchy/SetFirstChildID';\r\nimport { SetLastChildID } from '../components/hierarchy/SetLastChildID';\r\n\r\nexport function AddChild <P extends IGameObject, C extends IGameObject> (parent: P, child: C): C\r\n{\r\n    if (IsValidParent(parent, child))\r\n    {\r\n        const childID = child.id;\r\n        const parentID = parent.id;\r\n        const numChildren = GetNumChildren(parentID);\r\n\r\n        RemoveChildIDFromCurrentParent(childID, parentID);\r\n\r\n        if (numChildren === 0)\r\n        {\r\n            SetFirstChildID(parentID, childID);\r\n        }\r\n        else\r\n        {\r\n            const lastChild = GetLastChildID(parentID);\r\n\r\n            LinkSiblings(lastChild, childID);\r\n        }\r\n\r\n        SetLastChildID(parentID, childID);\r\n\r\n        SetAndUpdateParent(parentID, childID);\r\n\r\n        parent.onAddChild(childID);\r\n    }\r\n\r\n    return child;\r\n}\r\n", "import { AddChild } from './AddChild';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\r\n\r\nexport function ReparentChildren <P extends IGameObject, T extends IGameObject> (parent: P, newParent: T, beginIndex: number = 0, endIndex?: number): IGameObject[]\r\n{\r\n    const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\r\n\r\n    moved.forEach(child =>\r\n    {\r\n        AddChild(newParent, child);\r\n    });\r\n\r\n    return moved;\r\n}\r\n", "import { HIERARCHY, HierarchyComponent } from '../components/hierarchy/HierarchyComponent';\r\n\r\nimport { AddDirtyComponent } from '../components/dirty/AddDirtyComponent';\r\nimport { AddHierarchyComponent } from '../components/hierarchy/AddHierarchyComponent';\r\nimport { AddPermissionsComponent } from '../components/permissions/AddPermissionsComponent';\r\nimport { DestroyChildren } from '../display/DestroyChildren';\r\nimport { DestroyEvent } from './events/DestroyEvent';\r\nimport { Emit } from '../events/Emit';\r\nimport { GameObjectCache } from './GameObjectCache';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { GetChildrenFromParentID } from '../components/hierarchy/GetChildrenFromParentID';\r\nimport { GetDepth } from '../components/hierarchy/GetDepth';\r\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\r\nimport { GetParentGameObject } from '../components/hierarchy/GetParentGameObject';\r\nimport { GetParentID } from '../components/hierarchy/GetParentID';\r\nimport { GetVisible } from '../components/permissions/GetVisible';\r\nimport { GetVisibleChildren } from '../components/permissions/GetVisibleChildren';\r\nimport { ICanvasRenderer } from '../renderer/canvas/ICanvasRenderer';\r\nimport { IEventInstance } from '../events/IEventInstance';\r\nimport { IGameObject } from './IGameObject';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { ReparentChildren } from '../display/ReparentChildren';\r\nimport { SetDepth } from '../components/hierarchy/SetDepth';\r\nimport { SetVisible } from '../components/permissions/SetVisible';\r\nimport { SetVisibleChildren } from '../components/permissions/SetVisibleChildren';\r\nimport { WillRender } from '../components/permissions/WillRender';\r\nimport { addEntity } from 'bitecs';\r\n\r\nexport class GameObject implements IGameObject\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    readonly type: string = 'GameObject';\r\n\r\n    //  User defined name. Never used internally.\r\n    name: string = '';\r\n\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor ()\r\n    {\r\n        const id = this.id;\r\n\r\n        AddHierarchyComponent(id);\r\n        AddPermissionsComponent(id);\r\n        AddDirtyComponent(id);\r\n\r\n        GameObjectCache.set(id, this);\r\n\r\n        // this.events = new Map();\r\n    }\r\n\r\n    isRenderable (): boolean\r\n    {\r\n        return WillRender(this.id);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    beforeUpdate (delta: number, time: number): void\r\n    {\r\n        //  Empty for parent classes to use.\r\n        //  Called before this GameObject and all of its children have been updated.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    update (delta: number, time: number): void\r\n    {\r\n        //  Empty for parent classes to use.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    afterUpdate (delta: number, time: number): void\r\n    {\r\n        //  Empty for parent classes to use.\r\n        //  Called after this GameObject and all of its children have been updated.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    preRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        //  Called before this GameObject and all of its children have been rendered.\r\n        //  If this Game Object won't render, this method is never called.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        //  Called after this GameObject and all of its children have been rendered.\r\n        //  If this Game Object won't render, this method is never called.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    postRenderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n        //  Called after this GameObject and all of its children have been rendered.\r\n        //  If this Game Object won't render, this method is never called.\r\n    }\r\n\r\n    set visible (value: boolean)\r\n    {\r\n        SetVisible(this.id, value);\r\n    }\r\n\r\n    get visible (): boolean\r\n    {\r\n        return GetVisible(this.id);\r\n    }\r\n\r\n    set visibleChildren (value: boolean)\r\n    {\r\n        SetVisibleChildren(this.id, value);\r\n    }\r\n\r\n    get visibleChildren (): boolean\r\n    {\r\n        return GetVisibleChildren(this.id);\r\n    }\r\n\r\n    /*\r\n    set depth (value: number)\r\n    {\r\n        SetDepth(this.id, value);\r\n    }\r\n\r\n    get depth (): number\r\n    {\r\n        return GetDepth(this.id);\r\n    }\r\n    */\r\n\r\n    hasParent (id?: number): boolean\r\n    {\r\n        const parentID = GetParentID(this.id);\r\n\r\n        if (id)\r\n        {\r\n            return (parentID === id);\r\n        }\r\n        else\r\n        {\r\n            return (parentID > 0);\r\n        }\r\n    }\r\n\r\n    getParent (): IGameObject | undefined\r\n    {\r\n        return GetParentGameObject(this.id);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    getChildren <T extends IRenderPass> (renderPass?: T): IGameObject[]\r\n    {\r\n        return GetChildrenFromParentID(this.id);\r\n    }\r\n\r\n    getNumChildren (): number\r\n    {\r\n        return GetNumChildren(this.id);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    onAddChild (childID: number): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    onUpdateChild (childID: number): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    onRemoveChild (childID: number): void\r\n    {\r\n    }\r\n\r\n    //#ifdef GET_DISPLAY_DATA\r\n    getDisplayData (): { id: number, parent: number, world: number, numChildren: number }\r\n    {\r\n        const id = this.id;\r\n\r\n        const data = HierarchyComponent.data[id];\r\n\r\n        return {\r\n            id,\r\n            parent: data[HIERARCHY.PARENT],\r\n            world: data[HIERARCHY.WORLD],\r\n            numChildren: data[HIERARCHY.NUM_CHILDREN]\r\n        };\r\n    }\r\n    //#endif\r\n\r\n    toString (): string\r\n    {\r\n        return `${this.type} id=\"${this.id}\" name=\"${this.name}\"`;\r\n    }\r\n\r\n    destroy <P extends IGameObject> (reparentChildren?: P): void\r\n    {\r\n        if (reparentChildren)\r\n        {\r\n            ReparentChildren(this, reparentChildren);\r\n        }\r\n        else\r\n        {\r\n            DestroyChildren(this);\r\n        }\r\n\r\n        //  TODO - Destroy process, remove from Cache, Tree, etc.\r\n\r\n        // Emit(this, DestroyEvent, this);\r\n        // this.events.clear();\r\n        // this.events = null;\r\n\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetDefaultOriginX (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).x;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetDefaultOriginY (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).y;\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from '../../components/transform/Transform2DComponent';\r\n\r\nimport { AddTransform2DComponent } from '../../components/transform/AddTransform2DComponent';\r\nimport { Color } from '../../components/color/Color';\r\nimport { Flush } from '../../renderer/webgl1/renderpass/Flush';\r\nimport { GameObject } from '../GameObject';\r\nimport { GetDefaultOriginX } from '../../config/defaultorigin/GetDefaultOriginX';\r\nimport { GetDefaultOriginY } from '../../config/defaultorigin/GetDefaultOriginY';\r\nimport { IContainer } from './IContainer';\r\nimport { IGameObject } from '../IGameObject';\r\nimport { IRectangle } from '../../geom/rectangle/IRectangle';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IShader } from '../../renderer/webgl1/shaders/IShader';\r\nimport { Origin } from '../../components/transform/Origin';\r\nimport { PopColor } from '../../renderer/webgl1/renderpass/PopColor';\r\nimport { PopShader } from '../../renderer/webgl1/renderpass/PopShader';\r\nimport { Position } from '../../components/transform/Position';\r\nimport { Rectangle } from '../../geom/rectangle/Rectangle';\r\nimport { Scale } from '../../components/transform/Scale';\r\nimport { SetColor } from '../../renderer/webgl1/renderpass/SetColor';\r\nimport { SetDirtyTransform } from '../../components/dirty/SetDirtyTransform';\r\nimport { SetShader } from '../../renderer/webgl1/renderpass/SetShader';\r\nimport { Size } from '../../components/transform/Size';\r\nimport { Skew } from '../../components/transform/Skew';\r\nimport { UpdateAxisAligned } from '../../components/transform/UpdateAxisAligned';\r\n\r\nexport class Container extends GameObject implements IContainer\r\n{\r\n    readonly type: string = 'Container';\r\n\r\n    position: Position;\r\n    scale: Scale;\r\n    skew: Skew;\r\n    origin: Origin;\r\n    size: Size;\r\n    color: Color;\r\n\r\n    shader: IShader;\r\n\r\n    private _rotation: number = 0;\r\n\r\n    constructor (x: number = 0, y: number = 0)\r\n    {\r\n        super();\r\n\r\n        const id = this.id;\r\n\r\n        AddTransform2DComponent(id);\r\n\r\n        this.position = new Position(id, x, y);\r\n        this.scale = new Scale(id);\r\n        this.skew = new Skew(id);\r\n        this.size = new Size(id);\r\n        this.origin = new Origin(id, GetDefaultOriginX(), GetDefaultOriginY());\r\n        this.color = new Color(id);\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        if (this.shader)\r\n        {\r\n            Flush(renderPass);\r\n\r\n            SetShader(this.shader, 0);\r\n        }\r\n\r\n        SetColor(renderPass, this.color);\r\n\r\n        this.preRenderGL(renderPass);\r\n    }\r\n\r\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        if (this.shader)\r\n        {\r\n            Flush(renderPass);\r\n\r\n            PopShader();\r\n        }\r\n\r\n        PopColor(renderPass, this.color);\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        this.position.x = value;\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return this.position.x;\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        this.position.y = value;\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return this.position.y;\r\n    }\r\n\r\n    set rotation (value: number)\r\n    {\r\n        this._rotation = value;\r\n\r\n        const id = this.id;\r\n\r\n        Transform2DComponent.data[id][TRANSFORM.ROTATION] = value;\r\n\r\n        UpdateAxisAligned(id);\r\n        SetDirtyTransform(id);\r\n    }\r\n\r\n    get rotation (): number\r\n    {\r\n        return this._rotation;\r\n    }\r\n\r\n    get alpha (): number\r\n    {\r\n        return this.color.alpha;\r\n    }\r\n\r\n    set alpha (value: number)\r\n    {\r\n        this.color.alpha = value;\r\n    }\r\n\r\n    setAlpha (value: number): this\r\n    {\r\n        this.alpha = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    setPosition (x: number, y?: number): this\r\n    {\r\n        this.position.set(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    setScale (x: number, y?: number): this\r\n    {\r\n        this.scale.set(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    setRotation (value: number): this\r\n    {\r\n        this.rotation = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    setSkew (x: number, y?: number): this\r\n    {\r\n        this.skew.set(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    setOrigin (x: number, y?: number): this\r\n    {\r\n        this.origin.set(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    getBounds (): IRectangle\r\n    {\r\n        const data = Transform2DComponent.data[this.id];\r\n\r\n        const x = data[TRANSFORM.BOUNDS_X1];\r\n        const y = data[TRANSFORM.BOUNDS_Y1];\r\n        const right = data[TRANSFORM.BOUNDS_X2];\r\n        const bottom = data[TRANSFORM.BOUNDS_Y2];\r\n\r\n        return new Rectangle(x, y, right - x, bottom - y);\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        this.position.destroy();\r\n        this.scale.destroy();\r\n        this.skew.destroy();\r\n        this.origin.destroy();\r\n\r\n        super.destroy(reparentChildren);\r\n    }\r\n}\r\n", "import { AddQuadVertex } from '../../components/vertices/AddQuadVertex';\r\nimport { BatchTexturedQuadBuffer } from '../../renderer/webgl1/draw/BatchTexturedQuadBuffer';\r\nimport { Container } from '../container/Container';\r\nimport { Flush } from '../../renderer/webgl1/renderpass/Flush';\r\nimport { Frame } from '../../textures/Frame';\r\nimport { ICanvasRenderer } from '../../renderer/canvas/ICanvasRenderer';\r\nimport { IFrame } from '../../textures/IFrame';\r\nimport { IGameObject } from '../IGameObject';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\nimport { ISprite } from './ISprite';\r\nimport { ITexture } from '../../textures/ITexture';\r\nimport { PopColorMatrix } from '../../renderer/webgl1/renderpass/PopColorMatrix';\r\nimport { SetColorMatrix } from '../../renderer/webgl1/renderpass/SetColorMatrix';\r\nimport { SetFrame } from '../../textures/SetFrame';\r\nimport { SetShader } from '../../renderer/webgl1/renderpass/SetShader';\r\nimport { SetTexture } from '../../textures/SetTexture';\r\nimport { Texture } from '../../textures/Texture';\r\nimport { WillRender } from '../../components/permissions/WillRender';\r\n\r\nexport class Sprite extends Container implements ISprite\r\n{\r\n    readonly type: string = 'Sprite';\r\n\r\n    texture: Texture;\r\n    frame: Frame;\r\n    hasTexture: boolean = false;\r\n\r\n    constructor (x: number, y: number, texture: string | Texture | Frame = '__BLANK', frame?: string | number | Frame)\r\n    {\r\n        super(x, y);\r\n\r\n        AddQuadVertex(this.id);\r\n\r\n        this.setTexture(texture, frame);\r\n    }\r\n\r\n    setTexture <T extends ITexture, F extends IFrame> (key: string | T | F, frame?: string | number | F): this\r\n    {\r\n        SetTexture(key, frame, this);\r\n\r\n        return this;\r\n    }\r\n\r\n    setFrame <F extends IFrame> (key?: string | number | F): this\r\n    {\r\n        SetFrame(this.texture, key, this);\r\n\r\n        return this;\r\n    }\r\n\r\n    isRenderable (): boolean\r\n    {\r\n        return (this.visible && this.hasTexture && WillRender(this.id) && this.alpha > 0);\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        const color = this.color;\r\n\r\n        if (this.shader)\r\n        {\r\n            Flush(renderPass);\r\n\r\n            SetShader(this.shader, 0);\r\n        }\r\n\r\n        if (color.colorMatrixEnabled)\r\n        {\r\n            SetColorMatrix(color);\r\n        }\r\n\r\n        this.preRenderGL(renderPass);\r\n\r\n        BatchTexturedQuadBuffer(this.texture, this.id, renderPass);\r\n\r\n        if (color.colorMatrixEnabled && !color.willColorChildren)\r\n        {\r\n            Flush(renderPass);\r\n\r\n            PopColorMatrix();\r\n        }\r\n    }\r\n\r\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n        // PreRenderVertices(this);\r\n\r\n        // DrawImage(this.frame, this.alpha, this.worldTransform, this.transformExtent, renderer);\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        super.destroy(reparentChildren);\r\n\r\n        this.texture = null;\r\n        this.frame = null;\r\n        this.hasTexture = false;\r\n    }\r\n}\r\n", "import { CreateAnimData } from '../../animation/CreateAnimData';\r\nimport { Frame } from '../../textures/Frame';\r\nimport { IAnimation } from '../../animation/IAnimation';\r\nimport { IAnimationData } from '../../animation/IAnimationData';\r\nimport { IAnimationFrame } from '../../animation/IAnimationFrame';\r\nimport { IGameObject } from '../IGameObject';\r\nimport { Sprite } from '../sprite/Sprite';\r\nimport { Texture } from '../../textures/Texture';\r\n\r\nexport class AnimatedSprite extends Sprite\r\n{\r\n    currentAnimation: IAnimation;\r\n    currentFrame: IAnimationFrame;\r\n\r\n    animData: IAnimationData;\r\n\r\n    hasStarted: boolean = false;\r\n    forward: boolean = true;\r\n    inReverse: boolean = false;\r\n\r\n    private accumulator: number = 0;\r\n    private nextTick: number = 0;\r\n    private delayCounter: number = 0;\r\n    private repeatCounter: number = 0;\r\n    private pendingRepeat: boolean = false;\r\n    private paused: boolean = false;\r\n    private wasPlaying: boolean = false;\r\n    private pendingStop: number = 0;\r\n    private pendingStopValue: number = 0;\r\n\r\n    constructor (x: number, y: number, texture: string | Texture | Frame, frame?: string | number | Frame)\r\n    {\r\n        super(x, y, texture, frame);\r\n\r\n        this.animData = CreateAnimData();\r\n    }\r\n\r\n    private handleStart (): void\r\n    {\r\n        if (this.animData.showOnStart)\r\n        {\r\n            this.visible = true;\r\n        }\r\n\r\n        this.setCurrentFrame(this.currentFrame);\r\n\r\n        this.hasStarted = true;\r\n\r\n        // this.emitEvents(Events.ANIMATION_START);\r\n    }\r\n\r\n    private handleRepeat (): void\r\n    {\r\n        this.pendingRepeat = false;\r\n\r\n        // this.emitEvents(Events.ANIMATION_REPEAT);\r\n    }\r\n\r\n    private handleStop (): void\r\n    {\r\n        this.pendingStop = 0;\r\n\r\n        this.animData.isPlaying = false;\r\n\r\n        // this.emitEvents(Events.ANIMATION_STOP);\r\n    }\r\n\r\n    private handleComplete (): void\r\n    {\r\n        this.pendingStop = 0;\r\n\r\n        this.animData.isPlaying = false;\r\n\r\n        if (this.animData.hideOnComplete)\r\n        {\r\n            this.visible = false;\r\n        }\r\n\r\n        // this.emitEvents(Events.ANIMATION_COMPLETE, Events.ANIMATION_COMPLETE_KEY);\r\n    }\r\n\r\n    reverse (): this\r\n    {\r\n        if (this.isPlaying)\r\n        {\r\n            this.inReverse = !this.inReverse;\r\n\r\n            this.forward = !this.forward;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    getProgress (): number\r\n    {\r\n        const frame = this.currentFrame;\r\n\r\n        if (!frame)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        let p = frame.progress;\r\n\r\n        if (this.inReverse)\r\n        {\r\n            p *= -1;\r\n        }\r\n\r\n        return p;\r\n    }\r\n\r\n    stop (): this\r\n    {\r\n        this.pendingStop = 0;\r\n\r\n        this.animData.isPlaying = false;\r\n\r\n        if (this.currentAnimation)\r\n        {\r\n            this.handleStop();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    update (delta: number, now: number): void\r\n    {\r\n        super.update(delta, now);\r\n\r\n        const data = this.animData;\r\n        const anim = this.currentAnimation;\r\n\r\n        if (!anim || !data.isPlaying || anim.paused)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.accumulator += delta * data.timeScale;\r\n\r\n        if (this.pendingStop === 1)\r\n        {\r\n            this.pendingStopValue -= delta;\r\n\r\n            if (this.pendingStopValue <= 0)\r\n            {\r\n                this.stop();\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (!this.hasStarted)\r\n        {\r\n            if (this.accumulator >= this.delayCounter)\r\n            {\r\n                this.accumulator -= this.delayCounter;\r\n\r\n                this.handleStart();\r\n            }\r\n        }\r\n        else if (this.accumulator >= this.nextTick)\r\n        {\r\n            //  Process one frame advance as standard\r\n\r\n            if (this.forward)\r\n            {\r\n                this.nextFrame();\r\n            }\r\n            else\r\n            {\r\n                this.prevFrame();\r\n            }\r\n\r\n            //  And only do more if we're skipping frames and have time left\r\n            if (data.isPlaying && this.pendingStop === 0 && anim.skipMissedFrames && this.accumulator > this.nextTick)\r\n            {\r\n                let safetyNet = 0;\r\n\r\n                do\r\n                {\r\n                    if (this.forward)\r\n                    {\r\n                        this.nextFrame();\r\n                    }\r\n                    else\r\n                    {\r\n                        this.prevFrame();\r\n                    }\r\n\r\n                    safetyNet++;\r\n\r\n                } while (data.isPlaying && this.accumulator > this.nextTick && safetyNet < 60);\r\n            }\r\n        }\r\n    }\r\n\r\n    nextFrame (): this\r\n    {\r\n        const frame = this.currentFrame;\r\n        const data = this.animData;\r\n\r\n        if (frame.isLast)\r\n        {\r\n            //  We're at the end of the animation\r\n\r\n            //  Yoyo? (happens before repeat)\r\n            if (data.yoyo)\r\n            {\r\n                this.handleYoyoFrame(false);\r\n            }\r\n            else if (this.repeatCounter > 0)\r\n            {\r\n                //  Repeat (happens before complete)\r\n                if (this.inReverse && this.forward)\r\n                {\r\n                    this.forward = false;\r\n                }\r\n                else\r\n                {\r\n                    this.repeatAnimation();\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.complete();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.setCurrentFrame(this.currentFrame.nextFrame);\r\n\r\n            this.getNextTick();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    repeatAnimation (): this\r\n    {\r\n        if (this.pendingStop === 2)\r\n        {\r\n            if (this.pendingStopValue === 0)\r\n            {\r\n                return this.stop();\r\n            }\r\n            else\r\n            {\r\n                this.pendingStopValue--;\r\n            }\r\n        }\r\n\r\n        const data = this.animData;\r\n\r\n        if (data.repeatDelay > 0 && !this.pendingRepeat)\r\n        {\r\n            this.pendingRepeat = true;\r\n            this.accumulator -= this.nextTick;\r\n            this.nextTick += data.repeatDelay;\r\n        }\r\n        else\r\n        {\r\n            this.repeatCounter--;\r\n\r\n            if (this.forward)\r\n            {\r\n                this.setCurrentFrame(this.currentFrame.nextFrame);\r\n            }\r\n            else\r\n            {\r\n                this.setCurrentFrame(this.currentFrame.prevFrame);\r\n            }\r\n\r\n            if (this.isPlaying)\r\n            {\r\n                this.getNextTick();\r\n\r\n                this.handleRepeat();\r\n            }\r\n        }\r\n    }\r\n\r\n    setCurrentFrame (animFrame: IAnimationFrame): void\r\n    {\r\n        this.currentFrame = animFrame;\r\n\r\n        this.setTexture(animFrame.texture, animFrame.frame);\r\n    }\r\n\r\n    getNextTick (): void\r\n    {\r\n        this.accumulator -= this.nextTick;\r\n\r\n        this.nextTick = this.currentAnimation.msPerFrame + this.currentFrame.duration;\r\n    }\r\n\r\n    handleYoyoFrame (isReverse: boolean = false): void\r\n    {\r\n        const animData = this.animData;\r\n\r\n        if (this.inReverse === !isReverse && this.repeatCounter > 0)\r\n        {\r\n            if (animData.repeatDelay === 0 || this.pendingRepeat)\r\n            {\r\n                this.forward = isReverse;\r\n            }\r\n\r\n            this.repeatAnimation();\r\n\r\n            return;\r\n        }\r\n\r\n        if (this.inReverse !== isReverse && this.repeatCounter === 0)\r\n        {\r\n            this.complete();\r\n\r\n            return;\r\n        }\r\n\r\n        this.forward = isReverse;\r\n\r\n        if (isReverse)\r\n        {\r\n            this.setCurrentFrame(this.currentFrame.nextFrame);\r\n        }\r\n        else\r\n        {\r\n            this.setCurrentFrame(this.currentFrame.prevFrame);\r\n        }\r\n\r\n        this.getNextTick();\r\n    }\r\n\r\n    prevFrame (): this\r\n    {\r\n        const frame = this.currentFrame;\r\n        const animData = this.animData;\r\n\r\n        if (frame.isFirst)\r\n        {\r\n            //  We're at the start of the animation\r\n            if (animData.yoyo)\r\n            {\r\n                this.handleYoyoFrame(true);\r\n            }\r\n            else if (this.repeatCounter > 0)\r\n            {\r\n                if (this.inReverse && !this.forward)\r\n                {\r\n                    this.repeatAnimation();\r\n                }\r\n                else\r\n                {\r\n                    //  Repeat (happens before complete)\r\n                    this.forward = true;\r\n\r\n                    this.repeatAnimation();\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.complete();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.setCurrentFrame(frame.prevFrame);\r\n            this.getNextTick();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    complete (): void\r\n    {\r\n        this.pendingStop = 0;\r\n\r\n        this.animData.isPlaying = false;\r\n\r\n        if (this.currentAnimation)\r\n        {\r\n            this.handleComplete();\r\n        }\r\n    }\r\n\r\n    play (): this\r\n    {\r\n        const data = this.animData;\r\n\r\n        if (data.repeat === -1)\r\n        {\r\n            //  Should give us 9,007,199,254,740,991 safe repeats\r\n            this.repeatCounter = Number.MAX_VALUE;\r\n        }\r\n\r\n        data.isPlaying = true;\r\n\r\n        //  If there is no start delay, we set the first frame immediately\r\n        if (data.delay === 0)\r\n        {\r\n            this.setTexture(this.currentFrame.texture, this.currentFrame.frame);\r\n\r\n            if (data.onStart)\r\n            {\r\n                data.onStart(this, this.currentAnimation);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            data.pendingStart = true;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    pause (atFrame: IAnimationFrame): this\r\n    {\r\n        if (!this.paused)\r\n        {\r\n            this.paused = true;\r\n            this.wasPlaying = this.isPlaying;\r\n            this.animData.isPlaying = false;\r\n        }\r\n\r\n        if (atFrame)\r\n        {\r\n            this.setCurrentFrame(atFrame);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    resume (fromFrame: IAnimationFrame): this\r\n    {\r\n        if (this.paused)\r\n        {\r\n            this.paused = false;\r\n            this.animData.isPlaying = this.wasPlaying;\r\n        }\r\n\r\n        if (fromFrame)\r\n        {\r\n            this.setCurrentFrame(fromFrame);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get isPlaying (): boolean\r\n    {\r\n        return this.animData.isPlaying;\r\n    }\r\n\r\n    get isPlayingForward (): boolean\r\n    {\r\n        return (this.animData.isPlaying && this.forward);\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        super.destroy(reparentChildren);\r\n\r\n        this.animData = null;\r\n    }\r\n}\r\n", "import { GetLocalBounds } from '../../components/transform/GetLocalBounds';\r\nimport { IBounds } from '../../components/transform/IBounds';\r\n\r\nexport class SpatialHashGrid\r\n{\r\n    //  The width / height of a grid cell in pixels\r\n    cellWidth: number;\r\n    cellHeight: number;\r\n\r\n    //  The cells Map\r\n    cells: Map<string, Set<number>>;\r\n\r\n    //  id insertion order array\r\n    ids: number[];\r\n    index: number;\r\n\r\n    getBounds: (id: number) => IBounds;\r\n\r\n    constructor (cellWidth: number, cellHeight: number, getBounds: (id: number) => IBounds = GetLocalBounds)\r\n    {\r\n        this.cellWidth = Math.abs(cellWidth);\r\n        this.cellHeight = Math.abs(cellHeight);\r\n\r\n        this.cells = new Map();\r\n\r\n        this.ids = [];\r\n        this.index = 0;\r\n\r\n        this.getBounds = getBounds;\r\n    }\r\n\r\n    clear (): void\r\n    {\r\n        this.cells.forEach(cell => cell.clear());\r\n\r\n        this.cells.clear();\r\n\r\n        this.ids = [];\r\n        this.index = 0;\r\n    }\r\n\r\n    getX (x: number): number\r\n    {\r\n        return Math.floor(x / this.cellWidth);\r\n    }\r\n\r\n    getY (y: number): number\r\n    {\r\n        return Math.floor(y / this.cellHeight);\r\n    }\r\n\r\n    getXCeil (x: number): number\r\n    {\r\n        return Math.ceil(x / this.cellWidth);\r\n    }\r\n\r\n    getYCeil (y: number): number\r\n    {\r\n        return Math.ceil(y / this.cellHeight);\r\n    }\r\n\r\n    getKey (x: number, y: number): string\r\n    {\r\n        return `${this.getX(x)} ${this.getY(y)}`;\r\n    }\r\n\r\n    getGridKey (x: number, y: number): string\r\n    {\r\n        return `${x} ${y}`;\r\n    }\r\n\r\n    addToCell (id: number, gridX: number, gridY: number): string\r\n    {\r\n        const cells = this.cells;\r\n\r\n        const key = this.getGridKey(gridX, gridY);\r\n\r\n        if (cells.has(key))\r\n        {\r\n            cells.get(key).add(id);\r\n        }\r\n        else\r\n        {\r\n            cells.set(key, new Set([ id ]));\r\n        }\r\n\r\n        return key;\r\n    }\r\n\r\n    inView (x: number, y: number, width: number, height: number): Set<number>\r\n    {\r\n        return this.intersects(x, y, x + width, y + height);\r\n    }\r\n\r\n    intersects (left: number, top: number, right: number, bottom: number): Set<number>\r\n    {\r\n        const topLeftX = this.getX(left);\r\n        const topLeftY = this.getY(top);\r\n\r\n        const bottomRightX = this.getX(right);\r\n        const bottomRightY = this.getY(bottom);\r\n\r\n        const cells = this.cells;\r\n\r\n        let results: number[] = [];\r\n\r\n        //  Quick exit if we only need the contents of 1 cell\r\n        if (topLeftX === bottomRightX && topLeftY === bottomRightY)\r\n        {\r\n            const key = this.getGridKey(topLeftX, topLeftY);\r\n\r\n            if (cells.has(key))\r\n            {\r\n                results = [ ...cells.get(key) ];\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const width = (bottomRightX - topLeftX) + 1;\r\n            const height = (bottomRightY - topLeftY) + 1;\r\n\r\n            let gridX = topLeftX;\r\n            let gridY = topLeftY;\r\n            let placed = 0;\r\n\r\n            for (let i = 0; i < width * height; i++)\r\n            {\r\n                const key = this.getGridKey(gridX, gridY);\r\n\r\n                if (cells.has(key))\r\n                {\r\n                    results = results.concat(...cells.get(key));\r\n                }\r\n\r\n                gridX++;\r\n                placed++;\r\n\r\n                if (placed === width)\r\n                {\r\n                    gridX = topLeftX;\r\n                    gridY++;\r\n                    placed = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        //  Sort by insertion index\r\n\r\n        const ids = this.ids;\r\n\r\n        results.sort((a: number, b: number): number =>\r\n        {\r\n            return ids[a] - ids[b];\r\n        });\r\n\r\n        return new Set(results);\r\n    }\r\n\r\n    add (id: number): void\r\n    {\r\n        const { left, top, right, bottom } = this.getBounds(id);\r\n\r\n        const topLeftX = this.getX(left);\r\n        const topLeftY = this.getY(top);\r\n\r\n        const bottomRightX = this.getXCeil(right);\r\n        const bottomRightY = this.getYCeil(bottom);\r\n\r\n        const width = (bottomRightX - topLeftX);\r\n        const height = (bottomRightY - topLeftY);\r\n\r\n        this.ids[id] = this.index++;\r\n\r\n        //  Quick exit if entity fits into 1 cell\r\n        if (width === 1 && height === 1)\r\n        {\r\n            this.addToCell(id, topLeftX, topLeftY);\r\n\r\n            return;\r\n        }\r\n\r\n        let gridX = topLeftX;\r\n        let gridY = topLeftY;\r\n        let placed = 0;\r\n\r\n        for (let i = 0; i < width * height; i++)\r\n        {\r\n            this.addToCell(id, gridX, gridY);\r\n\r\n            gridX++;\r\n            placed++;\r\n\r\n            if (placed === width)\r\n            {\r\n                gridX = topLeftX;\r\n                gridY++;\r\n                placed = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    update (id: number): void\r\n    {\r\n        this.remove(id);\r\n\r\n        this.add(id);\r\n    }\r\n\r\n    has (id: number): boolean\r\n    {\r\n        return !!this.ids[id];\r\n    }\r\n\r\n    getAll (): number[]\r\n    {\r\n        return this.ids.filter((index, id) => id !== undefined);\r\n    }\r\n\r\n    remove (id: number): void\r\n    {\r\n        if (this.has(id))\r\n        {\r\n            this.cells.forEach(cell => cell.delete(id));\r\n\r\n            this.ids[id] = undefined;\r\n        }\r\n    }\r\n}\r\n", "import { ClearDirtyDisplayList } from '../../components/dirty/ClearDirtyDisplayList';\r\nimport { GameObject } from '../GameObject';\r\nimport { GameObjectCache } from '../GameObjectCache';\r\nimport { GetWorldID } from '../../components/hierarchy/GetWorldID';\r\nimport { HasDirtyTransform } from '../../components/dirty/HasDirtyTransform';\r\nimport { IGameObject } from '../IGameObject';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\nimport { SetCustomDisplayList } from '../../components/permissions/SetCustomDisplayList';\r\nimport { SetDirtyChildColor } from '../../components/dirty/SetDirtyChildColor';\r\nimport { SetDirtyChildTransform } from '../../components/dirty/SetDirtyChildTransform';\r\nimport { SetDirtyDisplayList } from '../../components/dirty/SetDirtyDisplayList';\r\nimport { SetWillTransformChildren } from '../../components/permissions/SetWillTransformChildren';\r\nimport { SetWillUpdateChildren } from '../../components/permissions/SetWillUpdateChildren';\r\nimport { SpatialHashGrid } from '../../math/spatialgrid/SpatialHashGrid';\r\n\r\nexport class SpatialGridLayer extends GameObject\r\n{\r\n    readonly type: string = 'SpatialGridLayer';\r\n\r\n    hash: SpatialHashGrid;\r\n\r\n    onSortChildren: (a: IGameObject, b: IGameObject) => number;\r\n\r\n    constructor (cellWidth: number = 512, cellHeight: number = 512, updateChildren: boolean = false)\r\n    {\r\n        super();\r\n\r\n        this.hash = new SpatialHashGrid(cellWidth, cellHeight);\r\n\r\n        const id = this.id;\r\n\r\n        SetCustomDisplayList(id, true);\r\n        SetWillTransformChildren(id, false);\r\n        SetWillUpdateChildren(id, updateChildren);\r\n    }\r\n\r\n    getChildren <T extends IRenderPass> (renderPass?: T): IGameObject[]\r\n    {\r\n        ClearDirtyDisplayList(this.id);\r\n\r\n        const camera = renderPass.current2DCamera;\r\n\r\n        const cx = camera.getBoundsX();\r\n        const cy = camera.getBoundsY();\r\n        const cright = camera.getBoundsRight();\r\n        const cbottom = camera.getBoundsBottom();\r\n\r\n        const childIDs = this.hash.intersects(cx, cy, cright, cbottom);\r\n\r\n        const result: IGameObject[] = [];\r\n\r\n        childIDs.forEach(id =>\r\n        {\r\n            result.push(GameObjectCache.get(id));\r\n        });\r\n\r\n        if (this.onSortChildren)\r\n        {\r\n            result.sort(this.onSortChildren);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    onAddChild (childID: number): void\r\n    {\r\n        //  We only add it directly to the hash if its transform is clean.\r\n        //  As it will be added by `onUpdateChild` as part of the World.preRender step if its transform is dirty.\r\n        if (!HasDirtyTransform(childID))\r\n        {\r\n            this.hash.add(childID);\r\n        }\r\n\r\n        const worldID = GetWorldID(this.id);\r\n\r\n        SetDirtyDisplayList(this.id);\r\n\r\n        SetDirtyChildTransform(worldID);\r\n        SetDirtyChildColor(worldID);\r\n    }\r\n\r\n    onUpdateChild (childID: number): void\r\n    {\r\n        this.hash.update(childID);\r\n    }\r\n\r\n    onRemoveChild (childID: number): void\r\n    {\r\n        this.hash.remove(childID);\r\n\r\n        SetDirtyDisplayList(this.id);\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        this.hash.clear();\r\n\r\n        super.destroy(reparentChildren);\r\n    }\r\n}\r\n", "export function CanvasRoundedRect (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number = 6, fill: boolean = true, stroke: boolean = false): CanvasRenderingContext2D\r\n{\r\n    ctx.beginPath();\r\n\r\n    ctx.moveTo(x + radius, y);\r\n    ctx.lineTo(x + width - radius, y);\r\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n    ctx.lineTo(x + width, y + height - radius);\r\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n    ctx.lineTo(x + radius, y + height);\r\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n    ctx.lineTo(x, y + radius);\r\n    ctx.quadraticCurveTo(x, y, x + radius, y);\r\n\r\n    ctx.closePath();\r\n\r\n    if (stroke)\r\n    {\r\n        ctx.stroke();\r\n    }\r\n\r\n    if (fill)\r\n    {\r\n        ctx.fill();\r\n    }\r\n\r\n    return ctx;\r\n}\r\n", "import { CanvasRoundedRect } from '../../canvas/CanvasRoundedRect';\r\nimport { CanvasTexture } from '../../textures/types/CanvasTexture';\r\nimport { IContainer } from '../container/IContainer';\r\nimport { RendererInstance } from '../../renderer/RendererInstance';\r\nimport { Sprite } from '../sprite/Sprite';\r\n\r\nexport type VerticalTextAlignment = 'ascent' | 'lineheight';\r\n\r\nexport class Text extends Sprite\r\n{\r\n    readonly type: string = 'Text';\r\n\r\n    private _text: string;\r\n\r\n    preRenderCallback: (canvas: HTMLCanvasElement, context: CanvasRenderingContext2D) => void;\r\n    wordWrapCallback: (text: string) => string;\r\n\r\n    canvas: HTMLCanvasElement;\r\n    context: CanvasRenderingContext2D;\r\n    splitRegExp: RegExp = /(?:\\r\\n|\\r|\\n)/;\r\n    padding = { left: 0, right: 0, top: 0, bottom: 0 };\r\n    verticalAlign: VerticalTextAlignment = 'ascent';\r\n    lineSpacing: number = 0;\r\n    resolution: number;\r\n    font: string = '16px monospace';\r\n    fillStyle: string | CanvasGradient | CanvasPattern = '#fff';\r\n    strokeStyle: string | CanvasGradient | CanvasPattern = '';\r\n    backgroundStyle: string | CanvasGradient | CanvasPattern = '';\r\n    cornerRadius: number = 0;\r\n    textAlign: CanvasTextAlign = 'left';\r\n    textBaseline: CanvasTextBaseline = 'alphabetic';\r\n    lineWidth: number = 0;\r\n    lineDash: number[] = [];\r\n    fixedWidth: number;\r\n    fixedHeight: number;\r\n    antialias: boolean = false;\r\n\r\n    constructor (x: number, y: number, text: string | string[] = '', font?: string, fillStyle?: string | CanvasGradient | CanvasPattern)\r\n    {\r\n        super(x, y, CanvasTexture());\r\n\r\n        this.texture.key = `Text${this.id}`;\r\n\r\n        const renderer = RendererInstance.get();\r\n\r\n        this.resolution = renderer.resolution;\r\n\r\n        this.canvas = this.texture.image as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        // this.texture.glTexture = CreateGLTexture(this.canvas, 32, 32, false, this.antialias);\r\n\r\n        if (font)\r\n        {\r\n            this.font = font;\r\n        }\r\n\r\n        if (fillStyle)\r\n        {\r\n            this.fillStyle = fillStyle;\r\n        }\r\n\r\n        this.setText(text);\r\n    }\r\n\r\n    private syncContext (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D): void\r\n    {\r\n        if (this.preRenderCallback)\r\n        {\r\n            this.preRenderCallback(canvas, ctx);\r\n        }\r\n\r\n        ctx.font = this.font;\r\n        ctx.textBaseline = this.textBaseline;\r\n        ctx.textAlign = this.textAlign;\r\n        ctx.fillStyle = this.fillStyle;\r\n        ctx.strokeStyle = this.strokeStyle;\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.lineCap = 'round';\r\n        ctx.lineJoin = 'round';\r\n        ctx.setLineDash(this.lineDash);\r\n        ctx.imageSmoothingEnabled = this.antialias;\r\n\r\n        //  TODO Shadows\r\n    }\r\n\r\n    updateText (): this\r\n    {\r\n        const canvas = this.canvas;\r\n        const ctx = this.context;\r\n        const resolution = this.resolution;\r\n\r\n        const lines = this._text.split(this.splitRegExp);\r\n\r\n        const padding = this.padding;\r\n        const fillStyle = this.fillStyle;\r\n        const strokeStyle = this.strokeStyle;\r\n        const strokeWidth = this.lineWidth;\r\n        const lineSpacing = this.lineSpacing;\r\n        const strokeWidthHalf = (strokeWidth > 0) ? strokeWidth / 2 : 0;\r\n\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        this.syncContext(canvas, ctx);\r\n\r\n        //  Use specifically for measureText\r\n        ctx.textAlign = 'start';\r\n\r\n        //  Measure each line and add them together (note: measure text excludes stroke style!)\r\n\r\n        let maxWidth = 0;\r\n        let maxHeight = 0;\r\n        let y = 0;\r\n\r\n        const lineMetrics = [];\r\n\r\n        const vAlignAscent: boolean = (this.verticalAlign === 'ascent');\r\n\r\n        //  Work out an average line height for this font\r\n        const metrics = ctx.measureText('|M\u00C9q');\r\n\r\n        const averageLineHeight: number = Math.ceil(Math.abs(metrics.actualBoundingBoxAscent) + Math.abs(metrics.actualBoundingBoxDescent)) + strokeWidth;\r\n\r\n        for (let i = 0; i < lines.length; i++)\r\n        {\r\n            const metrics = ctx.measureText(lines[i]);\r\n\r\n            const left = metrics.actualBoundingBoxLeft;\r\n            const right = metrics.actualBoundingBoxRight;\r\n            let ascent = metrics.actualBoundingBoxAscent;\r\n            let descent = metrics.actualBoundingBoxDescent;\r\n\r\n            //  Zero for a carriage-return, but we still need to add in the space\r\n            if ((!ascent && !descent) || lines[i] === '')\r\n            {\r\n                ascent = averageLineHeight;\r\n                descent = 0;\r\n            }\r\n\r\n            const lineWidth = Math.ceil(Math.abs(left) + Math.abs(right)) + strokeWidth;\r\n            const lineHeight = Math.ceil(Math.abs(ascent) + Math.abs(descent)) + strokeWidth;\r\n\r\n            if (vAlignAscent)\r\n            {\r\n                y += ascent + strokeWidthHalf;\r\n\r\n                if (i > 0)\r\n                {\r\n                    y += lineSpacing + strokeWidthHalf;\r\n                }\r\n\r\n                maxHeight = y + descent + strokeWidthHalf;\r\n            }\r\n            else\r\n            {\r\n                y = maxHeight + ((lineHeight - descent) - strokeWidthHalf);\r\n\r\n                maxHeight += lineHeight;\r\n\r\n                if (i < lines.length - 1)\r\n                {\r\n                    maxHeight += lineSpacing;\r\n                }\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, lineWidth);\r\n\r\n            lineMetrics.push({ lineWidth, lineHeight, ascent, descent, left, right, y });\r\n        }\r\n\r\n        //  Account for lineSpacing + padding\r\n        maxWidth += padding.left + padding.right;\r\n        maxHeight += padding.top + padding.bottom;\r\n\r\n        const displayWidth = (this.fixedWidth) ? this.fixedWidth : maxWidth;\r\n        const displayHeight = (this.fixedHeight) ? this.fixedHeight : maxHeight;\r\n\r\n        const canvasWidth = Math.ceil(displayWidth * resolution);\r\n        const canvasHeight = Math.ceil(displayHeight * resolution);\r\n\r\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight)\r\n        {\r\n            canvas.width = canvasWidth;\r\n            canvas.height = canvasHeight;\r\n\r\n            this.texture.setSize(displayWidth, displayHeight);\r\n\r\n            this.size.set(displayWidth, displayHeight);\r\n        }\r\n\r\n        ctx.save();\r\n        ctx.scale(resolution, resolution);\r\n\r\n        this.syncContext(canvas, ctx);\r\n\r\n        const backgroundStyle = this.backgroundStyle;\r\n\r\n        if (backgroundStyle)\r\n        {\r\n            ctx.save();\r\n\r\n            ctx.fillStyle = backgroundStyle;\r\n            ctx.strokeStyle = backgroundStyle;\r\n\r\n            const cornerRadius = this.cornerRadius;\r\n\r\n            if (cornerRadius)\r\n            {\r\n                CanvasRoundedRect(ctx, 0, 0, displayWidth, displayHeight, cornerRadius);\r\n            }\r\n            else\r\n            {\r\n                const halfRadius = (cornerRadius > 0) ? cornerRadius / 2 : 0;\r\n\r\n                ctx.fillRect(halfRadius, halfRadius, displayWidth - cornerRadius, displayHeight - cornerRadius);\r\n            }\r\n\r\n            ctx.restore();\r\n        }\r\n\r\n        //  Text Alignment\r\n        const textAlign = this.textAlign;\r\n        const isCenter: boolean = (textAlign === 'center');\r\n        const isRight: boolean = (textAlign === 'right' || textAlign === 'end');\r\n\r\n        const yOffset = ((displayHeight - maxHeight) / 2) + padding.top;\r\n\r\n        for (let i = 0; i < lines.length; i++)\r\n        {\r\n            const line = lines[i];\r\n            const metrics = lineMetrics[i];\r\n\r\n            let tx = padding.left + metrics.left + strokeWidthHalf;\r\n            const ty = yOffset + metrics.y;\r\n\r\n            if (isCenter)\r\n            {\r\n                tx = displayWidth / 2;\r\n            }\r\n            else if (isRight)\r\n            {\r\n                tx = displayWidth - strokeWidthHalf;\r\n            }\r\n\r\n            if (strokeStyle)\r\n            {\r\n                ctx.strokeText(line, tx, ty);\r\n            }\r\n\r\n            if (fillStyle)\r\n            {\r\n                ctx.fillText(line, tx, ty);\r\n            }\r\n        }\r\n\r\n        ctx.restore();\r\n\r\n        if (this.texture.binding)\r\n        {\r\n            this.texture.binding.update();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get text (): string | string[]\r\n    {\r\n        return this._text;\r\n    }\r\n\r\n    set text (value: string | string[])\r\n    {\r\n        this.setText(value);\r\n    }\r\n\r\n    setText (value: string | string[] = ''): this\r\n    {\r\n        if (Array.isArray(value))\r\n        {\r\n            value = value.join('\\n');\r\n        }\r\n\r\n        if (value !== this._text)\r\n        {\r\n            this._text = value.toString();\r\n\r\n            this.updateText();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    destroy (reparentChildren?: IContainer): void\r\n    {\r\n        this.texture.destroy();\r\n\r\n        this.fillStyle = null;\r\n        this.strokeStyle = null;\r\n        this.backgroundStyle = null;\r\n\r\n        this.canvas = null;\r\n        this.context = null;\r\n\r\n        super.destroy(reparentChildren);\r\n    }\r\n}\r\n", "// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport function GetRandom (array: any[], startIndex: number = 0, length?: number): any\r\n{\r\n    if (!length)\r\n    {\r\n        length = array.length;\r\n    }\r\n\r\n    const randomIndex = startIndex + Math.floor(Math.random() * length);\r\n\r\n    return array[randomIndex];\r\n}\r\n", "import { DecreaseNumChildren } from '../components/hierarchy/DecreaseNumChildren';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildID } from '../components/hierarchy/RemoveChildID';\r\n\r\nexport function RemoveChild <P extends IGameObject, C extends IGameObject> (parent: P, child: C): C\r\n{\r\n    const childID = child.id;\r\n    const parentID = parent.id;\r\n\r\n    if (child.hasParent(parentID))\r\n    {\r\n        RemoveChildID(childID);\r\n\r\n        DecreaseNumChildren(parentID);\r\n\r\n        parent.onRemoveChild(childID);\r\n    }\r\n\r\n    return child;\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChild } from './RemoveChild';\r\n\r\nexport function RemoveChildren <P extends IGameObject> (parent: P, ...children: IGameObject[]): IGameObject[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        RemoveChild(parent, child);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "export function Between (min: number, max: number): number\r\n{\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n", "import { IAnimation } from './IAnimation';\r\n\r\nexport function CalculateDuration (animation: IAnimation, frameRate?: number, duration?: number): IAnimation\r\n{\r\n    const totalFrames = animation.frames.size;\r\n\r\n    if (!Number.isFinite(duration) && !Number.isFinite(frameRate))\r\n    {\r\n        //  No duration or frameRate given, use default frameRate of 24fps\r\n        animation.frameRate = 24;\r\n        animation.duration = (24 / totalFrames) * 1000;\r\n    }\r\n    else if (duration && !Number.isFinite(frameRate))\r\n    {\r\n        //  Duration given but no frameRate, so set the frameRate based on duration\r\n        //  I.e. 12 frames in the animation, duration = 4000 ms\r\n        //  So frameRate is 12 / (4000 / 1000) = 3 fps\r\n        animation.duration = duration;\r\n        animation.frameRate = totalFrames / (duration / 1000);\r\n    }\r\n    else\r\n    {\r\n        //  frameRate given, derive duration from it (even if duration also specified)\r\n        //  I.e. 15 frames in the animation, frameRate = 30 fps\r\n        //  So duration is 15 / 30 = 0.5 * 1000 (half a second, or 500ms)\r\n        animation.frameRate = frameRate;\r\n        animation.duration = (totalFrames / frameRate) * 1000;\r\n    }\r\n\r\n    animation.msPerFrame = 1000 / animation.frameRate;\r\n\r\n    return animation;\r\n}\r\n", "import { IAnimation } from './IAnimation';\r\nimport { IAnimationFrame } from './IAnimationFrame';\r\n\r\nexport function LinkFrames (animation: IAnimation): IAnimation\r\n{\r\n    const totalFrames = animation.frames.size;\r\n\r\n    if (totalFrames === 0)\r\n    {\r\n        return animation;\r\n    }\r\n\r\n    //  Link the AnimationFrames together, so we can advance from one to the next without searching the Set\r\n    let i = 0;\r\n\r\n    const framePercent = 1 / totalFrames;\r\n\r\n    let firstFrame: IAnimationFrame;\r\n    let prevFrame: IAnimationFrame;\r\n\r\n    for (const frame of animation.frames.values())\r\n    {\r\n        if (!prevFrame)\r\n        {\r\n            frame.isFirst = true;\r\n\r\n            animation.firstFrame = frame;\r\n\r\n            firstFrame = frame;\r\n        }\r\n        else\r\n        {\r\n            prevFrame.nextFrame = frame;\r\n\r\n            frame.prevFrame = prevFrame;\r\n        }\r\n\r\n        prevFrame = frame;\r\n\r\n        i++;\r\n\r\n        frame.progress = framePercent * i;\r\n\r\n        if (i === totalFrames)\r\n        {\r\n            //  Link them end-to-end, so they loop\r\n            frame.isLast = true;\r\n\r\n            frame.nextFrame = firstFrame;\r\n\r\n            firstFrame.prevFrame = frame;\r\n        }\r\n    }\r\n\r\n    return animation;\r\n}\r\n", "import { CalculateDuration } from './CalculateDuration';\r\nimport { IAnimation } from './IAnimation';\r\nimport { IAnimationConfig } from './IAnimationConfig';\r\nimport { IAnimationFrame } from './IAnimationFrame';\r\nimport { LinkFrames } from './LinkFrames';\r\n\r\nexport class Animation implements IAnimation\r\n{\r\n    key: string;\r\n    frames: Set<IAnimationFrame>;\r\n    firstFrame: IAnimationFrame;\r\n\r\n    msPerFrame: number;\r\n    frameRate: number;\r\n    duration: number;\r\n    skipMissedFrames: boolean;\r\n    delay: number;\r\n    hold: number;\r\n    repeat: number;\r\n    repeatDelay: number;\r\n    yoyo: boolean;\r\n    showOnStart: boolean;\r\n    hideOnComplete: boolean;\r\n    paused: boolean;\r\n\r\n    constructor (config: IAnimationConfig)\r\n    {\r\n        const {\r\n            key,\r\n            frames = [],\r\n            frameRate = null,\r\n            duration = null,\r\n            skipMissedFrames = true,\r\n            delay = 0,\r\n            repeat = 0,\r\n            repeatDelay = 0,\r\n            yoyo = false,\r\n            showOnStart = false,\r\n            hideOnComplete = false,\r\n            paused = false\r\n        } = config;\r\n\r\n        this.key = key;\r\n        this.skipMissedFrames = skipMissedFrames;\r\n        this.delay = delay;\r\n        this.repeat = repeat;\r\n        this.repeatDelay = repeatDelay;\r\n        this.yoyo = yoyo;\r\n        this.showOnStart = showOnStart;\r\n        this.hideOnComplete = hideOnComplete;\r\n        this.paused = paused;\r\n\r\n        this.frames = new Set(frames);\r\n\r\n        CalculateDuration(this, frameRate, duration);\r\n        LinkFrames(this);\r\n    }\r\n\r\n    getTotalFrames (): number\r\n    {\r\n        return this.frames.size;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.frames.clear();\r\n    }\r\n}\r\n", "import { IAnimationFrame } from './IAnimationFrame';\r\nimport { IFrame } from '../textures/IFrame';\r\nimport { ITexture } from '../textures/ITexture';\r\n\r\nexport class AnimationFrame implements IAnimationFrame\r\n{\r\n    texture: ITexture;\r\n    frame: IFrame;\r\n\r\n    isFirst: boolean = false;\r\n    isLast: boolean = false;\r\n    isKeyFrame: boolean = false;\r\n\r\n    nextFrame: IAnimationFrame;\r\n    prevFrame: IAnimationFrame;\r\n\r\n    duration: number = 0;\r\n    progress: number = 0;\r\n\r\n    constructor (texture: ITexture, frame: IFrame)\r\n    {\r\n        this.texture = texture;\r\n        this.frame = frame;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.texture = null;\r\n        this.frame = null;\r\n        this.nextFrame = null;\r\n        this.prevFrame = null;\r\n    }\r\n}\r\n", "import { Animation } from './Animation';\r\nimport { AnimationFrame } from './AnimationFrame';\r\nimport { GetFramesInRange } from '../textures/GetFramesInRange';\r\nimport { GetTexture } from '../textures/GetTexture';\r\nimport { IAnimationFromAtlas } from './IAnimationFromAtlasConfig';\r\nimport { Texture } from '../textures/Texture';\r\n\r\nexport function CreateAnimationFromAtlas (config: IAnimationFromAtlas): Animation\r\n{\r\n    const texture = (config.texture instanceof Texture) ? config.texture : GetTexture(config.texture as string);\r\n\r\n    const frames: AnimationFrame[] = [];\r\n\r\n    GetFramesInRange(texture, config).forEach(frame =>\r\n    {\r\n        frames.push(new AnimationFrame(texture, frame));\r\n    });\r\n\r\n    return new Animation({ frames, ... config });\r\n}\r\n", "import { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\n\r\nexport function Emit (emitter: IEventEmitter, event: string, ...args: unknown[]): boolean\r\n{\r\n    if (emitter.events.size === 0 || !emitter.events.has(event))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    const listeners: Set<IEventInstance> = emitter.events.get(event);\r\n\r\n    //  Convert to an array so the callbacks cannot impact what we're iterating\r\n    //  It works, but generates gc\r\n    const handlers = [ ...listeners ];\r\n\r\n    for (const ee of handlers)\r\n    {\r\n        ee.callback.apply(ee.context, args);\r\n\r\n        if (ee.once)\r\n        {\r\n            listeners.delete(ee);\r\n        }\r\n    }\r\n\r\n    if (listeners.size === 0)\r\n    {\r\n        emitter.events.delete(event);\r\n    }\r\n\r\n    return true;\r\n}\r\n", "import { Emit } from '../../events/Emit';\r\nimport { IEventInstance } from '../../events/IEventInstance';\r\nimport { IKey } from './IKey';\r\n\r\nexport class Key implements IKey\r\n{\r\n    //  The KeyEvent.key identifier\r\n    readonly value: string;\r\n\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    //  Will it invoke preventDefault?\r\n    capture: boolean = true;\r\n\r\n    //  Is it currently down?\r\n    isDown: boolean = false;\r\n\r\n    //  Process this key?\r\n    enabled: boolean = true;\r\n\r\n    //  rate of repeats in ms\r\n    repeatRate: number = 0;\r\n\r\n    //  Can this key repeat, or do you have to release it before pressing again\r\n    canRepeat: boolean = true;\r\n\r\n    //  The game time this key was last pressed down\r\n    timeDown: number = 0;\r\n\r\n    //  The game time this key was last updated (i.e. if down and repeating)\r\n    timeUpdated: number = 0;\r\n\r\n    //  The game time this key was last released\r\n    timeUp: number = 0;\r\n\r\n    shiftKey: boolean;\r\n    ctrlKey: boolean;\r\n    altKey: boolean;\r\n\r\n    downCallback: (key: IKey) => void;\r\n    upCallback: (key: IKey) => void;\r\n\r\n    constructor (value: string)\r\n    {\r\n        this.value = value;\r\n        this.events = new Map();\r\n    }\r\n\r\n    getValue (): string\r\n    {\r\n        return this.value;\r\n    }\r\n\r\n    down (event: KeyboardEvent): void\r\n    {\r\n        if (!this.enabled)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (this.capture)\r\n        {\r\n            event.preventDefault();\r\n        }\r\n\r\n        this.shiftKey = event.shiftKey;\r\n        this.ctrlKey = event.ctrlKey;\r\n        this.altKey = event.altKey;\r\n\r\n        if (this.isDown && this.canRepeat)\r\n        {\r\n            this.timeUpdated = event.timeStamp;\r\n\r\n            const delay = this.timeUpdated - this.timeDown;\r\n\r\n            //  Key is repeating\r\n            if (delay >= this.repeatRate)\r\n            {\r\n                Emit(this, 'keydown', this);\r\n\r\n                if (this.downCallback)\r\n                {\r\n                    this.downCallback(this);\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  Key is first down\r\n            this.isDown = true;\r\n\r\n            this.timeDown = event.timeStamp;\r\n            this.timeUpdated = event.timeStamp;\r\n\r\n            Emit(this, 'keydown', this);\r\n\r\n            if (this.downCallback)\r\n            {\r\n                this.downCallback(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    up (event: KeyboardEvent): void\r\n    {\r\n        if (!this.enabled)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (this.capture)\r\n        {\r\n            event.preventDefault();\r\n        }\r\n\r\n        this.shiftKey = event.shiftKey;\r\n        this.ctrlKey = event.ctrlKey;\r\n        this.altKey = event.altKey;\r\n\r\n        if (this.isDown)\r\n        {\r\n            //  Key is up\r\n            this.isDown = false;\r\n            this.timeUp = event.timeStamp;\r\n            this.timeUpdated = event.timeStamp;\r\n\r\n            Emit(this, 'keyup', this);\r\n\r\n            if (this.upCallback)\r\n            {\r\n                this.upCallback(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    reset (): void\r\n    {\r\n        this.isDown = false;\r\n        this.timeUpdated = this.timeDown;\r\n        this.timeUp = this.timeDown;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.downCallback = null;\r\n        this.upCallback = null;\r\n\r\n        this.events.clear();\r\n    }\r\n}\r\n", "import { Key } from '../Key';\r\n\r\nexport class DownKey extends Key\r\n{\r\n    constructor ()\r\n    {\r\n        super('ArrowDown');\r\n    }\r\n}\r\n", "import { IEventInstance } from './IEventInstance';\r\n\r\nexport class EventEmitter\r\n{\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor ()\r\n    {\r\n        this.events = new Map();\r\n    }\r\n}\r\n", "import { Emit } from '../../events/Emit';\r\nimport { EventEmitter } from '../../events/EventEmitter';\r\nimport { IKey } from './IKey';\r\n\r\nexport class Keyboard extends EventEmitter\r\n{\r\n    keys: Map<string, IKey>;\r\n\r\n    private keydownHandler: { (event: KeyboardEvent): void; (this: Window, ev: KeyboardEvent): void };\r\n    private keyupHandler: { (event: KeyboardEvent): void; (this: Window, ev: KeyboardEvent): void };\r\n    private blurHandler: { (): void; (this: Window, ev: FocusEvent): void };\r\n\r\n    /* eslint-disable @typescript-eslint/naming-convention */\r\n    keyConversion: { [ key: string ]: string } = {\r\n        Up: 'ArrowUp',\r\n        Down: 'ArrowDown',\r\n        Left: 'ArrowLeft',\r\n        Right: 'ArrowRight',\r\n        Spacebar: ' ',\r\n        Win: 'Meta',\r\n        Scroll: 'ScrollLock',\r\n        Del: 'Delete',\r\n        Apps: 'ContextMenu',\r\n        Esc: 'Escape',\r\n        Add: '+',\r\n        Subtract: '-',\r\n        Multiply: '*',\r\n        Decimal: '.',\r\n        Divide: '/'\r\n    };\r\n    /* eslint-enable @typescript-eslint/naming-convention */\r\n\r\n    constructor ()\r\n    {\r\n        super();\r\n\r\n        this.keydownHandler = (event: KeyboardEvent): void => this.onKeyDown(event);\r\n        this.keyupHandler = (event: KeyboardEvent): void => this.onKeyUp(event);\r\n        this.blurHandler = (): void => this.onBlur();\r\n\r\n        window.addEventListener('keydown', this.keydownHandler);\r\n        window.addEventListener('keyup', this.keyupHandler);\r\n        window.addEventListener('blur', this.blurHandler);\r\n\r\n        this.keys = new Map();\r\n    }\r\n\r\n    addKeys (...keys: IKey[]): void\r\n    {\r\n        keys.forEach(key =>\r\n        {\r\n            this.keys.set(key.getValue(), key);\r\n        });\r\n    }\r\n\r\n    clearKeys (): void\r\n    {\r\n        this.keys.clear();\r\n    }\r\n\r\n    private onBlur (): void\r\n    {\r\n        //  Iterate Keys and reset their state\r\n        this.keys.forEach(key =>\r\n        {\r\n            key.reset();\r\n        });\r\n    }\r\n\r\n    private getKeyValue (key: string): string\r\n    {\r\n        if (this.keyConversion.hasOwnProperty(key))\r\n        {\r\n            return this.keyConversion[key];\r\n        }\r\n        else\r\n        {\r\n            return key;\r\n        }\r\n    }\r\n\r\n    private onKeyDown (event: KeyboardEvent): void\r\n    {\r\n        const value = this.getKeyValue(event.key);\r\n\r\n        if (this.keys.has(value))\r\n        {\r\n            const key = this.keys.get(value);\r\n\r\n            key.down(event);\r\n        }\r\n\r\n        //  Key specific event\r\n        Emit(this, 'keydown-' + value, event);\r\n\r\n        //  Global keydown event\r\n        Emit(this, 'keydown', event);\r\n    }\r\n\r\n    private onKeyUp (event: KeyboardEvent): void\r\n    {\r\n        const value = this.getKeyValue(event.key);\r\n\r\n        if (this.keys.has(value))\r\n        {\r\n            const key = this.keys.get(value);\r\n\r\n            key.up(event);\r\n        }\r\n\r\n        //  Key specific event\r\n        Emit(this, 'keyup-' + value, event);\r\n\r\n        //  Global keyup event\r\n        Emit(this, 'keyup', event);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.clearKeys();\r\n\r\n        window.removeEventListener('keydown', this.keydownHandler);\r\n        window.removeEventListener('keyup', this.keyupHandler);\r\n        window.removeEventListener('blur', this.blurHandler);\r\n\r\n        Emit(this, 'destroy');\r\n    }\r\n}\r\n", "import { Key } from '../Key';\r\n\r\nexport class LeftKey extends Key\r\n{\r\n    constructor ()\r\n    {\r\n        super('ArrowLeft');\r\n    }\r\n}\r\n", "export class EventInstance\r\n{\r\n    callback: Function;\r\n    context: unknown;\r\n    once: boolean;\r\n\r\n    constructor (callback: Function, context: unknown, once: boolean = false)\r\n    {\r\n        this.callback = callback;\r\n        this.context = context;\r\n        this.once = once;\r\n    }\r\n}\r\n", "import { EventInstance } from './EventInstance';\r\nimport { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\n\r\nexport function Off (emitter: IEventEmitter, event: string, callback?: Function | IEventInstance, context?: unknown, once?: boolean): IEventEmitter\r\n{\r\n    const events = emitter.events;\r\n    const listeners = events.get(event);\r\n\r\n    if (!callback)\r\n    {\r\n        //  Remove all events matching the given key\r\n        events.delete(event);\r\n    }\r\n    else if (callback instanceof EventInstance)\r\n    {\r\n        listeners.delete(callback as IEventInstance);\r\n    }\r\n    else\r\n    {\r\n        const hasContext: boolean = !context;\r\n        const hasOnce: boolean = (once !== undefined);\r\n\r\n        for (const listener of listeners)\r\n        {\r\n            if (\r\n                (listener.callback === callback) &&\r\n                (hasContext && listener.context === context) &&\r\n                (hasOnce && listener.once === once)\r\n            )\r\n            {\r\n                listeners.delete(listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (listeners.size === 0)\r\n    {\r\n        events.delete(event);\r\n    }\r\n\r\n    return emitter;\r\n}\r\n", "import { EventInstance } from './EventInstance';\r\nimport { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\n\r\nexport function On (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter, once: boolean = false): IEventInstance\r\n{\r\n    if (typeof callback !== 'function')\r\n    {\r\n        throw new TypeError('Listener not a function');\r\n    }\r\n\r\n    const listener = new EventInstance(callback, context, once);\r\n    const listeners = emitter.events.get(event);\r\n\r\n    if (!listeners)\r\n    {\r\n        emitter.events.set(event, new Set([ listener ]));\r\n    }\r\n    else\r\n    {\r\n        listeners.add(listener);\r\n    }\r\n\r\n    return listener;\r\n}\r\n", "import { Key } from '../Key';\r\n\r\nexport class RightKey extends Key\r\n{\r\n    constructor ()\r\n    {\r\n        super('ArrowRight');\r\n    }\r\n}\r\n", "import { Key } from '../Key';\r\n\r\nexport class UpKey extends Key\r\n{\r\n    constructor ()\r\n    {\r\n        super('ArrowUp');\r\n    }\r\n}\r\n", "import { DownKey } from '../../input/keyboard/keys/DownKey';\r\nimport { IBaseCamera } from '../IBaseCamera';\r\nimport { IBaseWorld } from '../../world/IBaseWorld';\r\nimport { IEventInstance } from '../../events/IEventInstance';\r\nimport { Keyboard } from '../../input/keyboard/Keyboard';\r\nimport { LeftKey } from '../../input/keyboard/keys/LeftKey';\r\nimport { Off } from '../../events/Off';\r\nimport { On } from '../../events/On';\r\nimport { RightKey } from '../../input/keyboard/keys/RightKey';\r\nimport { UpKey } from '../../input/keyboard/keys/UpKey';\r\n\r\nexport class CursorKeyCameraControls\r\n{\r\n    keyboard: Keyboard;\r\n    leftKey: LeftKey;\r\n    rightKey: RightKey;\r\n    upKey: UpKey;\r\n    downKey: DownKey;\r\n\r\n    camera: IBaseCamera;\r\n    world: IBaseWorld;\r\n\r\n    cameraSpeedX: number;\r\n    cameraSpeedY: number;\r\n\r\n    listener: IEventInstance;\r\n\r\n    constructor (world: IBaseWorld, speedX: number = 2, speedY: number = 2)\r\n    {\r\n        if (!world.camera)\r\n        {\r\n            throw new Error('World has no camera');\r\n        }\r\n\r\n        this.world = world;\r\n        this.camera = world.camera;\r\n\r\n        this.cameraSpeedX = speedX;\r\n        this.cameraSpeedY = speedY;\r\n\r\n        this.keyboard = new Keyboard();\r\n\r\n        this.leftKey = new LeftKey();\r\n        this.rightKey = new RightKey();\r\n        this.upKey = new UpKey();\r\n        this.downKey = new DownKey();\r\n\r\n        this.keyboard.addKeys(this.leftKey, this.rightKey, this.upKey, this.downKey);\r\n\r\n        this.listener = On(world, 'update', this.update.bind(this));\r\n    }\r\n\r\n    update (): void\r\n    {\r\n        if (this.leftKey.isDown)\r\n        {\r\n            this.camera.x += this.cameraSpeedX;\r\n        }\r\n        else if (this.rightKey.isDown)\r\n        {\r\n            this.camera.x -= this.cameraSpeedX;\r\n        }\r\n\r\n        if (this.upKey.isDown)\r\n        {\r\n            this.camera.y += this.cameraSpeedY;\r\n        }\r\n        else if (this.downKey.isDown)\r\n        {\r\n            this.camera.y -= this.cameraSpeedY;\r\n        }\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        Off(this.world, 'update', this.listener);\r\n\r\n        this.keyboard.destroy();\r\n\r\n        this.world = null;\r\n        this.camera = null;\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/restrict-template-expressions */\r\n\r\nimport { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function AddBanner (): void\r\n{\r\n    const { title, version, url, color, background } = ConfigStore.get(CONFIG_DEFAULTS.BANNER);\r\n\r\n    if (title !== '')\r\n    {\r\n        const str = `${title} ${version}`.trimEnd();\r\n\r\n        console.log(\r\n            `%c${str}%c ${url}`,\r\n            `padding: 4px 16px; color: ${color}; background: ${background}`,\r\n            ''\r\n        );\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { Game } from '../../Game';\r\n\r\nexport function AddGlobalVar (game: Game): void\r\n{\r\n    const globalVar = ConfigStore.get(CONFIG_DEFAULTS.GLOBAL_VAR);\r\n\r\n    if (globalVar && window)\r\n    {\r\n        (window as unknown)[globalVar] = game;\r\n    }\r\n}\r\n", "import { GetElement } from './GetElement';\r\n\r\nexport function AddToDOM (element: HTMLElement, parent?: string | HTMLElement): HTMLElement\r\n{\r\n    const target: HTMLElement = GetElement(parent);\r\n\r\n    target.appendChild(element);\r\n\r\n    return element;\r\n}\r\n", "import { AddToDOM } from '../../dom/AddToDOM';\r\nimport { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { RendererInstance } from '../../renderer/RendererInstance';\r\n\r\nexport function AddToParent (): void\r\n{\r\n    const parent = ConfigStore.get(CONFIG_DEFAULTS.PARENT);\r\n    const canvas = RendererInstance.get().canvas;\r\n\r\n    //  Only add to the DOM if they either didn't set a Parent, or expressly set it to be non-null\r\n    //  Otherwise we'll let them add the canvas to the DOM themselves\r\n\r\n    if (parent && canvas)\r\n    {\r\n        AddToDOM(canvas, parent);\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function CreateRenderer (): void\r\n{\r\n    const renderer = ConfigStore.get(CONFIG_DEFAULTS.RENDERER);\r\n\r\n    if (renderer)\r\n    {\r\n        new renderer();\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\n\r\nexport function GetScenes (): ISceneConstructor[]\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SCENES);\r\n}\r\n", "import { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\nimport { On } from './On';\r\n\r\nexport function Once (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter): IEventInstance\r\n{\r\n    return On(emitter, event, callback, context, true);\r\n}\r\n", "import { SceneManager } from './SceneManager';\r\n\r\nlet instance: SceneManager;\r\n\r\nexport const SceneManagerInstance =\r\n{\r\n    get: (): SceneManager =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (manager: SceneManager | null): void =>\r\n    {\r\n        if (instance)\r\n        {\r\n            throw new Error('Cannot instantiate SceneManager more than once');\r\n        }\r\n\r\n        instance = manager;\r\n    }\r\n};\r\n", "import { IBaseWorld } from './IBaseWorld';\r\nimport { IScene } from '../scenes/IScene';\r\n\r\nexport const WorldList: Map<IScene, IBaseWorld[]> = new Map();\r\n", "import { Game } from '../Game';\r\nimport { GameInstance } from '../GameInstance';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { GetScenes } from '../config/scenes/GetScenes';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IScene } from './IScene';\r\nimport { Once } from '../events/Once';\r\nimport { ResetRenderStats } from './ResetRenderStats';\r\nimport { SceneManagerInstance } from './SceneManagerInstance';\r\nimport { WorldList } from '../world/WorldList';\r\nimport { addEntity } from 'bitecs';\r\n\r\nexport class SceneManager\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    game: Game;\r\n\r\n    scenes: Map<string, IScene> = new Map();\r\n\r\n    //  Used by Install to assign default scene keys when not specified\r\n    sceneIndex: number = 0;\r\n\r\n    //  Force the renderer to fully redraw\r\n    flush: boolean;\r\n\r\n    constructor ()\r\n    {\r\n        SceneManagerInstance.set(this);\r\n\r\n        this.game = GameInstance.get();\r\n\r\n        Once(this.game, 'boot', () => this.boot());\r\n    }\r\n\r\n    boot (): void\r\n    {\r\n        const scenes = GetScenes();\r\n\r\n        if (scenes)\r\n        {\r\n            scenes.forEach(scene => new scene());\r\n        }\r\n    }\r\n\r\n    update (): void\r\n    {\r\n        const time = this.game.time;\r\n\r\n        const delta = time.delta;\r\n        const now = time.lastTick;\r\n\r\n        // const gameFrame = time.frame;\r\n        // ResetRenderStats(gameFrame, this.scenes.size);\r\n\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                world.beforeUpdate(delta, now);\r\n            }\r\n\r\n            if (scene.update)\r\n            {\r\n                scene.update(delta, now);\r\n            }\r\n\r\n            for (const world of worlds)\r\n            {\r\n                world.update(delta, now);\r\n            }\r\n\r\n            for (const world of worlds)\r\n            {\r\n                world.afterUpdate(delta, now);\r\n            }\r\n        }\r\n    }\r\n\r\n    //  Run through all Scenes and Worlds within them, telling them to prepare to render\r\n    preRender (): void\r\n    {\r\n        const gameFrame = this.game.time.frame;\r\n\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                if (world.preRender(gameFrame))\r\n                {\r\n                    this.flush = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render (renderPass: IRenderPass): void\r\n    {\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                world.renderGL(renderPass);\r\n            }\r\n        }\r\n\r\n        this.flush = false;\r\n    }\r\n\r\n    //  TODO - This isn't used internally - is used by debug panel - move out?\r\n    /*\r\n    getRenderList (): IGameObject[]\r\n    {\r\n        let output: IGameObject[] = [];\r\n\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                output = output.concat(world.getRenderList());\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    updateWorldStats (numGameObjects: number, numRendered: number, numDisplayLists: number, numWorldTransforms: number): void\r\n    {\r\n        const id = this.id;\r\n\r\n        RenderStatsComponent.numGameObjects[id] += numGameObjects;\r\n        RenderStatsComponent.numGameObjectsRendered[id] += numRendered;\r\n        RenderStatsComponent.numDirtyWorldLists[id] += numDisplayLists;\r\n        RenderStatsComponent.numDirtyWorldTransforms[id] += numWorldTransforms;\r\n    }\r\n    */\r\n}\r\n", "import { SceneManager } from './SceneManager';\r\n\r\nexport function CreateSceneManager (): void\r\n{\r\n    new SceneManager();\r\n}\r\n", "import { IWorldRenderData } from './IWorldRenderData';\r\n\r\nexport function CreateWorldRenderData (): IWorldRenderData\r\n{\r\n    return {\r\n        gameFrame: 0,\r\n        dirtyLocal: 0,\r\n        dirtyWorld: 0,\r\n        dirtyQuad: 0,\r\n        dirtyColor: 0,\r\n        dirtyView: 0,\r\n        numChildren: 0,\r\n        rendered: 0,\r\n        renderMs: 0,\r\n        preRenderMs: 0,\r\n        updated: 0,\r\n        updateMs: 0,\r\n        fps: 0,\r\n        delta: 0,\r\n        processed: 0\r\n    };\r\n}\r\n", "export function DOMContentLoaded (callback: () => void): void\r\n{\r\n    const readyState = document.readyState;\r\n\r\n    if (readyState === 'complete' || readyState === 'interactive')\r\n    {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n\r\n    const check = (): void =>\r\n    {\r\n        document.removeEventListener('deviceready', check, true);\r\n        document.removeEventListener('DOMContentLoaded', check, true);\r\n        window.removeEventListener('load', check, true);\r\n\r\n        callback();\r\n    };\r\n\r\n    // TODO - Swap is IsCordova call\r\n\r\n    if (!document.body)\r\n    {\r\n        window.setTimeout(check, 20);\r\n    }\r\n    else if (window.hasOwnProperty('cordova'))\r\n    {\r\n        document.addEventListener('deviceready', check, true);\r\n    }\r\n    else\r\n    {\r\n        document.addEventListener('DOMContentLoaded', check, true);\r\n        window.addEventListener('load', check, true);\r\n    }\r\n}\r\n", "import { IWorldRenderData } from './IWorldRenderData';\r\n\r\nexport function ResetWorldRenderData (renderData: IWorldRenderData): void\r\n{\r\n    renderData.rendered = 0;\r\n    renderData.dirtyColor = 0;\r\n    renderData.dirtyLocal = 0;\r\n    renderData.dirtyView = 0;\r\n    renderData.dirtyWorld = 0;\r\n    renderData.dirtyQuad = 0;\r\n    renderData.processed = 0;\r\n    renderData.renderMs = 0;\r\n    renderData.preRenderMs = 0;\r\n    renderData.updated = 0;\r\n    renderData.updateMs = 0;\r\n}\r\n", "import { ISceneConfig } from './ISceneConfig';\r\n\r\nexport function GetConfigValue<Property extends keyof ISceneConfig> (config: ISceneConfig, property: Property, defaultValue: ISceneConfig[Property]): ISceneConfig[Property]\r\n{\r\n    if (Object.prototype.hasOwnProperty.call(config, property))\r\n    {\r\n        return config[property];\r\n    }\r\n    else\r\n    {\r\n        return defaultValue;\r\n    }\r\n}\r\n", "import { GetConfigValue } from './GetConfigValue';\r\nimport { IScene } from './IScene';\r\nimport { ISceneConfig } from './ISceneConfig';\r\nimport { SceneManagerInstance } from './SceneManagerInstance';\r\nimport { WorldList } from '../world/WorldList';\r\n\r\nexport function Install (scene: IScene, config: string | ISceneConfig = {}): void\r\n{\r\n    const sceneManager = SceneManagerInstance.get();\r\n\r\n    const size = sceneManager.scenes.size;\r\n    const sceneIndex = sceneManager.sceneIndex;\r\n    const firstScene = (size === 0);\r\n\r\n    if (typeof config === 'string')\r\n    {\r\n        scene.key = config;\r\n    }\r\n    else if (config || (!config && firstScene))\r\n    {\r\n        scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex.toString());\r\n    }\r\n\r\n    if (sceneManager.scenes.has(scene.key))\r\n    {\r\n        console.warn('Scene key already in use: ' + scene.key);\r\n    }\r\n    else\r\n    {\r\n        sceneManager.scenes.set(scene.key, scene);\r\n\r\n        sceneManager.flush = true;\r\n\r\n        sceneManager.sceneIndex++;\r\n    }\r\n\r\n    WorldList.set(scene, []);\r\n}\r\n", "export const RenderStats =\r\n{\r\n    fps: 0,\r\n    delta: 0,\r\n\r\n    //  The current Game Frame number\r\n    gameFrame: 0,\r\n\r\n    //  Total number of Scenes rendered\r\n    numScenes: 0,\r\n\r\n    //  Total number of Worlds rendered\r\n    numWorlds: 0,\r\n\r\n    //  Total number of Game Objects (across all worlds)\r\n    numGameObjects: 0,\r\n\r\n    //  Total number of Game Objects to be rendered (across all worlds)\r\n    numGameObjectsRendered: 0,\r\n\r\n    //  Total number of Game Objects with dirty local transforms\r\n    numDirtyLocalTransforms: 0,\r\n\r\n    //  Total number of Game Objects with dirty world transforms\r\n    numDirtyWorldTransforms: 0,\r\n\r\n    //  Total number of Game Objects with dirty vertices\r\n    numDirtyVertices: 0,\r\n\r\n    //  Total number of Worlds that had to recalculate their display lists\r\n    numDirtyWorldLists: 0,\r\n\r\n    //  How many Cameras were made dirty this frame across all Scenes?\r\n    numDirtyCameras: 0\r\n};\r\n", "import { Game } from '../Game';\r\nimport { GameInstance } from '../GameInstance';\r\nimport { IEventEmitter } from '../events/IEventEmitter';\r\nimport { IEventInstance } from '../events/IEventInstance';\r\nimport { IScene } from './IScene';\r\nimport { ISceneConfig } from './ISceneConfig';\r\nimport { Install } from './Install';\r\n\r\nexport class Scene implements IScene, IEventEmitter\r\n{\r\n    key: string;\r\n    game: Game;\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor (config?: string | ISceneConfig)\r\n    {\r\n        this.game = GameInstance.get();\r\n        this.events = new Map();\r\n\r\n        Install(this, config);\r\n    }\r\n}\r\n", "import { SetBackgroundColor } from './backgroundcolor/SetBackgroundColor';\r\nimport { SetBanner } from './banner/SetBanner';\r\nimport { SetBatchSize } from './batchsize/SetBatchSize';\r\nimport { SetDefaultOrigin } from './defaultorigin/SetDefaultOrigin';\r\nimport { SetMaxTextures } from './maxtextures/SetMaxTextures';\r\nimport { SetSize } from './size/SetSize';\r\nimport { SetWebGLContext } from './webglcontext/SetWebGLContext';\r\n\r\n//  Phaser 4 defaults\r\n\r\nexport function SetConfigDefaults (): void\r\n{\r\n    SetBackgroundColor(0);\r\n    SetBatchSize(2048);\r\n    SetBanner('Phaser', '4.0.0', 'https://phaser4.io');\r\n    SetMaxTextures(0);\r\n    SetDefaultOrigin(0.5, 0.5);\r\n    SetSize(800, 600, 1);\r\n    SetWebGLContext({\r\n        antialias: true,\r\n        desynchronized: true,\r\n        preserveDrawingBuffer: true\r\n    });\r\n}\r\n", "import { GameInstance } from '../../GameInstance';\r\nimport { RenderStats } from '../../scenes/RenderStats';\r\n\r\nexport class Time\r\n{\r\n    lastTick: number = 0;\r\n    elapsed: number = 0;\r\n    delta: number = 0;\r\n    fps: number = 60;\r\n    fpsCount: number = 0;\r\n    frame: number = 0;\r\n    ms: number = 0;\r\n    prevFrame: number = 0;\r\n\r\n    constructor ()\r\n    {\r\n        const now = performance.now();\r\n\r\n        this.lastTick = now;\r\n        this.prevFrame = now;\r\n    }\r\n\r\n    update (time: number): void\r\n    {\r\n        this.ms = time - this.lastTick;\r\n    }\r\n\r\n    updateDelta (time: number): number\r\n    {\r\n        //  Note that privacy.resistFingerprinting can round this value to 100us or more!\r\n        const now = performance.now();\r\n\r\n        //  How long it took to process this frame\r\n        const elapsed = now - time;\r\n\r\n        this.fpsCount++;\r\n\r\n        if (now >= this.prevFrame + 1000)\r\n        {\r\n            this.fps = (this.fpsCount * 1000) / (now - this.prevFrame);\r\n            this.prevFrame = now;\r\n            this.fpsCount = 0;\r\n        }\r\n\r\n        this.lastTick = now;\r\n        this.elapsed += elapsed;\r\n        this.delta = 1000 / this.fps;\r\n        this.frame++;\r\n\r\n        GameInstance.setFrame(this.frame);\r\n\r\n        RenderStats.fps = this.fps;\r\n        RenderStats.delta = 1000 / this.fps;\r\n\r\n        return this.frame;\r\n    }\r\n\r\n    resetLastTick (): void\r\n    {\r\n        this.lastTick = performance.now();\r\n    }\r\n}\r\n", "import { AddBanner } from './config/banner/AddBanner';\r\nimport { AddGlobalVar } from './config/globalvar/AddGlobalVar';\r\nimport { AddToParent } from './config/parent/AddToParent';\r\nimport { CreateRenderer } from './config/renderer/CreateRenderer';\r\nimport { CreateSceneManager } from './scenes/CreateSceneManager';\r\nimport { CreateTextureManager } from './textures/CreateTextureManager';\r\nimport { CreateWorldRenderData } from './world/CreateWorldRenderData';\r\nimport { DOMContentLoaded } from './dom/DOMContentLoaded';\r\nimport { Emit } from './events/Emit';\r\nimport { EventEmitter } from './events/EventEmitter';\r\nimport { GameInstance } from './GameInstance';\r\nimport { GameObjectWorld } from './GameObjectWorld';\r\nimport { IRenderPass } from './renderer/webgl1/renderpass/IRenderPass';\r\nimport { IWorldRenderData } from './world/IWorldRenderData';\r\nimport { RendererInstance } from './renderer/RendererInstance';\r\nimport { ResetWorldRenderData } from './world/ResetWorldRenderData';\r\nimport { SceneManagerInstance } from './scenes';\r\nimport { SetConfigDefaults } from './config/SetConfigDefaults';\r\nimport { Time } from './components/timer/Time';\r\nimport { addEntity } from 'bitecs';\r\n\r\nexport class Game extends EventEmitter\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    time: Time;\r\n\r\n    isBooted: boolean = false;\r\n    isPaused: boolean = false;\r\n\r\n    //  TODO - Allow update to run on different tick to render\r\n    //  TODO - Allow update and render to be called directly\r\n    willUpdate: boolean = true;\r\n    willRender: boolean = true;\r\n\r\n    renderStats: IWorldRenderData;\r\n\r\n    constructor (...settings: { (): void }[])\r\n    {\r\n        super();\r\n\r\n        this.time = new Time();\r\n\r\n        GameInstance.set(this);\r\n\r\n        SetConfigDefaults();\r\n\r\n        DOMContentLoaded(() => this.boot(settings));\r\n    }\r\n\r\n    boot (settings: { (): void }[]): void\r\n    {\r\n        //  Activate the settings post DOM Content Loaded\r\n        settings.forEach(setting => setting());\r\n\r\n        CreateRenderer();\r\n        CreateTextureManager();\r\n        CreateSceneManager();\r\n\r\n        AddBanner();\r\n        AddGlobalVar(this);\r\n        AddToParent();\r\n\r\n        this.isBooted = true;\r\n        this.renderStats = CreateWorldRenderData();\r\n\r\n        Emit(this, 'boot');\r\n\r\n        requestAnimationFrame(now => this.step(now));\r\n    }\r\n\r\n    pause (): void\r\n    {\r\n        this.isPaused = true;\r\n    }\r\n\r\n    resume (): void\r\n    {\r\n        this.isPaused = false;\r\n\r\n        this.time.resetLastTick();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    update (delta: number, time: number): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    render (renderPass: IRenderPass, delta: number, time: number): void\r\n    {\r\n    }\r\n\r\n    step (now: number): void\r\n    {\r\n        const renderer = RendererInstance.get();\r\n        const sceneManager = SceneManagerInstance.get();\r\n\r\n        const time = this.time;\r\n\r\n        ResetWorldRenderData(this.renderStats);\r\n\r\n        time.update(now);\r\n\r\n        if (!this.isPaused)\r\n        {\r\n            const delta = time.delta;\r\n\r\n            if (this.willUpdate)\r\n            {\r\n                sceneManager.update();\r\n\r\n                this.update(delta, now);\r\n\r\n                Emit(this, 'update', delta, now);\r\n            }\r\n\r\n            if (this.willRender)\r\n            {\r\n                sceneManager.preRender();\r\n\r\n                renderer.begin(sceneManager.flush);\r\n\r\n                const renderPass = renderer.renderPass;\r\n\r\n                sceneManager.render(renderPass);\r\n\r\n                this.render(renderPass, delta, now);\r\n\r\n                Emit(this, 'render', renderPass, delta, now);\r\n\r\n                renderer.end();\r\n            }\r\n        }\r\n\r\n        time.updateDelta(now);\r\n\r\n        Emit(this, 'step');\r\n\r\n        this.renderStats.fps = time.fps;\r\n        this.renderStats.delta = time.delta;\r\n\r\n        requestAnimationFrame(now => this.step(now));\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        //  TODO - Code destroy function\r\n    }\r\n}\r\n", "import { IFile } from './IFile';\r\n\r\nexport function CreateFile (key: string, url: string, skipCache: boolean = false): IFile\r\n{\r\n    return {\r\n        key,\r\n        url,\r\n        skipCache\r\n    };\r\n}\r\n", "export function IsAbsoluteURI (url: string): boolean\r\n{\r\n    return (/^(?:blob:|data:|http:\\/\\/|https:\\/\\/|\\/\\/)/).test(url);\r\n}\r\n", "import { ILoader } from './ILoader';\r\nimport { IsAbsoluteURI } from './IsAbsoluteURI';\r\n\r\nexport function GetURL (key: string, url: string, extension: string, loader?: ILoader): string\r\n{\r\n    if (!url)\r\n    {\r\n        url = `${key}.${extension}`;\r\n    }\r\n\r\n    if (IsAbsoluteURI(url))\r\n    {\r\n        return url;\r\n    }\r\n    else if (loader)\r\n    {\r\n        return `${loader.baseURL}${loader.path}${url}`;\r\n    }\r\n    else\r\n    {\r\n        return url;\r\n    }\r\n}\r\n", "import { IFile } from './IFile';\r\nimport { IFileData } from './IFileData';\r\n\r\nexport async function RequestFile (file: IFile, preload: (file: IFile) => boolean, onload: (file: IFile) => Promise<boolean>, fileData?: IFileData): Promise<IFile>\r\n{\r\n    if (!preload(file))\r\n    {\r\n        return Promise.reject(file);\r\n    }\r\n\r\n    try\r\n    {\r\n        const request = new Request(file.url, fileData?.requestInit);\r\n\r\n        file.response = await fetch(request);\r\n\r\n        if (file.response.ok && await onload(file))\r\n        {\r\n            return Promise.resolve(file);\r\n        }\r\n        else\r\n        {\r\n            return Promise.reject(file);\r\n        }\r\n    }\r\n    catch (error)\r\n    {\r\n        file.error = error;\r\n\r\n        return Promise.reject(file);\r\n    }\r\n}\r\n", "import { CreateFile } from '../CreateFile';\r\nimport { GetURL } from '../GetURL';\r\nimport { IFile } from '../IFile';\r\nimport { IFileData } from '../IFileData';\r\nimport { ILoader } from '../ILoader';\r\nimport { RequestFile } from '../RequestFile';\r\nimport { RequestFileType } from '../RequestFileType';\r\nimport { TextureManagerInstance } from '../../textures/TextureManagerInstance';\r\n\r\nexport function ImageFile (key: string, url?: string, fileData: IFileData = {}): RequestFileType\r\n{\r\n    return (loader?: ILoader): Promise<IFile> =>\r\n    {\r\n        const file = CreateFile(key, GetURL(key, url, 'png', loader), fileData?.skipCache);\r\n\r\n        const textureManager = TextureManagerInstance.get();\r\n\r\n        const preload = () =>\r\n        {\r\n            return (textureManager && (!textureManager.has(key) || !textureManager.get(key).locked));\r\n        };\r\n\r\n        const onload = async (file: IFile) =>\r\n        {\r\n            const blob = await file.response.blob();\r\n\r\n            let image;\r\n\r\n            if (window && 'createImageBitmap' in window && !fileData?.getImage)\r\n            {\r\n                image = await createImageBitmap(blob);\r\n            }\r\n            else\r\n            {\r\n                image = await new Promise <HTMLImageElement> ((resolve, reject)  =>\r\n                {\r\n                    const url = URL.createObjectURL(blob);\r\n\r\n                    const img = new Image();\r\n\r\n                    img.onload = (): void =>\r\n                    {\r\n                        URL.revokeObjectURL(url);\r\n\r\n                        resolve(img);\r\n                    };\r\n\r\n                    img.onerror = (): void =>\r\n                    {\r\n                        reject();\r\n                    };\r\n\r\n                    img.src = url;\r\n\r\n                    // Image is immediately-available or cached\r\n\r\n                    if (img.complete && img.width && img.height)\r\n                    {\r\n                        img.onload = null;\r\n                        img.onerror = null;\r\n\r\n                        resolve(img);\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (!image)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (fileData.skipCache)\r\n            {\r\n                file.data = image;\r\n            }\r\n            else if (textureManager.has(key))\r\n            {\r\n                file.data = textureManager.update(key, image, fileData?.glConfig);\r\n            }\r\n            else\r\n            {\r\n                file.data = textureManager.add(key, image, fileData?.glConfig);\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        return RequestFile(file, preload, onload, fileData);\r\n    };\r\n}\r\n", "const caches = new Map();\r\n\r\nexport const Cache = {\r\n\r\n    get: (type: string): Map<string, unknown> =>\r\n    {\r\n        if (!caches.has(type))\r\n        {\r\n            caches.set(type, new Map());\r\n        }\r\n\r\n        return caches.get(type);\r\n    },\r\n\r\n    getEntry: (cache: string, entry: string): unknown =>\r\n    {\r\n        if (caches.has(cache))\r\n        {\r\n            return caches.get(cache).get(entry);\r\n        }\r\n    }\r\n\r\n};\r\n", "import { Cache } from '../../cache/Cache';\r\nimport { CreateFile } from '../CreateFile';\r\nimport { GetURL } from '../GetURL';\r\nimport { IFile } from '../IFile';\r\nimport { IFileData } from '../IFileData';\r\nimport { ILoader } from '../ILoader';\r\nimport { RequestFile } from '../RequestFile';\r\nimport { RequestFileType } from '../RequestFileType';\r\n\r\nexport function JSONFile (key: string, url?: string, fileData: IFileData = {}): RequestFileType\r\n{\r\n    return (loader?: ILoader): Promise<IFile> =>\r\n    {\r\n        const file = CreateFile(key, GetURL(key, url, 'json', loader), fileData.skipCache);\r\n\r\n        const cache = Cache.get('JSON');\r\n\r\n        const preload = (file: IFile) =>\r\n        {\r\n            return (cache && (!cache.has(key) || !file.skipCache));\r\n        };\r\n\r\n        const onload = async (file: IFile) =>\r\n        {\r\n            file.data = await file.response.json();\r\n\r\n            if (!file.skipCache)\r\n            {\r\n                cache.set(key, file.data);\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        return RequestFile(file, preload, onload, fileData);\r\n    };\r\n}\r\n", "import { AtlasParser } from '../../textures/parsers/AtlasParser';\r\nimport { GetTexture } from '../../textures/GetTexture';\r\nimport { IFile } from '../IFile';\r\nimport { IFileData } from '../IFileData';\r\nimport { ILoader } from '../ILoader';\r\nimport { ImageFile } from './ImageFile';\r\nimport { JSONFile } from './JSONFile';\r\nimport { RequestFileType } from '../RequestFileType';\r\n\r\nexport function AtlasFile (key: string, textureURL?: string, atlasURL?: string, fileData: IFileData = {}): RequestFileType\r\n{\r\n    return async (loader?: ILoader): Promise<IFile> =>\r\n    {\r\n        try\r\n        {\r\n            const loadImage = ImageFile(key, textureURL, Object.assign({}, fileData, { skipCache: false }));\r\n            const loadJSON = JSONFile(key, atlasURL, Object.assign({}, fileData, { skipCache: true }));\r\n\r\n            const image = await loadImage(loader);\r\n            const json = await loadJSON(loader);\r\n\r\n            //  By this stage, the JSON and image are loaded and in the texture manager\r\n            AtlasParser(GetTexture(key), json.data);\r\n\r\n            return Promise.resolve(image);\r\n        }\r\n        catch (error)\r\n        {\r\n            return Promise.reject();\r\n        }\r\n    };\r\n}\r\n", "import { AtlasFile } from './AtlasFile';\r\nimport { IFile } from '../IFile';\r\nimport { IFileData } from '../IFileData';\r\n\r\nexport async function LoadAtlasFile (key: string, textureURL?: string, atlasURL?: string, fileData: IFileData = {}): Promise<IFile>\r\n{\r\n    const load = AtlasFile(key, textureURL, atlasURL, fileData);\r\n\r\n    return load();\r\n}\r\n", "import { IFile } from '../IFile';\r\nimport { IFileData } from '../IFileData';\r\nimport { ImageFile } from './ImageFile';\r\n\r\nexport async function LoadImageFile (key: string, url?: string, fileData: IFileData = {}): Promise<IFile>\r\n{\r\n    const load = ImageFile(key, url, fileData);\r\n\r\n    return load();\r\n}\r\n", "import { Emit } from '../../events/Emit';\r\nimport { EventEmitter } from '../../events/EventEmitter';\r\nimport { IGameObject } from '../../gameobjects/IGameObject';\r\nimport { Mat2dAppend } from '../../math/mat2d/Mat2dAppend';\r\nimport { Mat2dGlobalToLocal } from '../../math/mat2d/Mat2dGlobalToLocal';\r\nimport { RendererInstance } from '../../renderer/RendererInstance';\r\nimport { Vec2 } from '../../math/vec2/Vec2';\r\n\r\nexport class Mouse extends EventEmitter\r\n{\r\n    primaryDown: boolean = false;\r\n    auxDown: boolean = false;\r\n    secondaryDown: boolean = false;\r\n\r\n    blockContextMenu: boolean = true;\r\n\r\n    localPoint: Vec2;\r\n    hitPoint: Vec2;\r\n\r\n    private target: HTMLElement;\r\n    private resolution: number = 1;\r\n\r\n    private mousedownHandler: { (event: MouseEvent): void; (this: Window, ev: MouseEvent): void };\r\n    private mouseupHandler: { (event: MouseEvent): void; (this: Window, ev: MouseEvent): void };\r\n    private mousemoveHandler: { (event: MouseEvent): void; (this: Window, ev: MouseEvent): void };\r\n    private mousewheelHandler: { (event: WheelEvent): void; (this: Window, ev: WheelEvent): void };\r\n    private contextmenuHandler: { (event: MouseEvent): void; (this: Window, ev: MouseEvent): void };\r\n    private blurHandler: { (): void; (this: Window, ev: FocusEvent): void };\r\n\r\n    private transPoint: Vec2;\r\n\r\n    constructor (target?: HTMLElement)\r\n    {\r\n        super();\r\n\r\n        this.mousedownHandler = (event: MouseEvent): void => this.onMouseDown(event);\r\n        this.mouseupHandler = (event: MouseEvent): void => this.onMouseUp(event);\r\n        this.mousemoveHandler = (event: MouseEvent): void => this.onMouseMove(event);\r\n        this.mousewheelHandler = (event: WheelEvent): void => this.onMouseWheel(event);\r\n        this.contextmenuHandler = (event: MouseEvent): void => this.onContextMenuEvent(event);\r\n        this.blurHandler = (): void => this.onBlur();\r\n\r\n        this.localPoint = new Vec2();\r\n        this.hitPoint = new Vec2();\r\n        this.transPoint = new Vec2();\r\n\r\n        if (!target)\r\n        {\r\n            target = RendererInstance.get().canvas;\r\n        }\r\n\r\n        target.addEventListener('mousedown', this.mousedownHandler);\r\n        target.addEventListener('mouseup', this.mouseupHandler);\r\n        target.addEventListener('wheel', this.mousewheelHandler, { passive: false });\r\n        target.addEventListener('contextmenu', this.contextmenuHandler);\r\n\r\n        window.addEventListener('mouseup', this.mouseupHandler);\r\n        window.addEventListener('mousemove', this.mousemoveHandler);\r\n        window.addEventListener('blur', this.blurHandler);\r\n\r\n        this.target = target;\r\n    }\r\n\r\n    private onBlur (): void\r\n    {\r\n    }\r\n\r\n    private onMouseDown (event: MouseEvent): void\r\n    {\r\n        this.positionToPoint(event);\r\n\r\n        this.primaryDown = (event.button === 0);\r\n        this.auxDown = (event.button === 1);\r\n        this.secondaryDown = (event.button === 2);\r\n\r\n        Emit(this, 'pointerdown', this.localPoint.x, this.localPoint.y, event.button, event);\r\n    }\r\n\r\n    private onMouseUp (event: MouseEvent): void\r\n    {\r\n        this.positionToPoint(event);\r\n\r\n        this.primaryDown = !(event.button === 0);\r\n        this.auxDown = !(event.button === 1);\r\n        this.secondaryDown = !(event.button === 2);\r\n\r\n        Emit(this, 'pointerup', this.localPoint.x, this.localPoint.y, event.button, event);\r\n    }\r\n\r\n    private onMouseMove (event: MouseEvent): void\r\n    {\r\n        this.positionToPoint(event);\r\n\r\n        Emit(this, 'pointermove', this.localPoint.x, this.localPoint.y, event);\r\n    }\r\n\r\n    private onMouseWheel (event: WheelEvent): void\r\n    {\r\n        Emit(this, 'wheel', event.deltaX, event.deltaY, event.deltaZ, event);\r\n    }\r\n\r\n    private onContextMenuEvent (event: MouseEvent): void\r\n    {\r\n        if (this.blockContextMenu)\r\n        {\r\n            event.preventDefault();\r\n        }\r\n\r\n        Emit(this, 'contextmenu', event);\r\n    }\r\n\r\n    positionToPoint (event: MouseEvent): Vec2\r\n    {\r\n        return this.localPoint.set(event.offsetX, event.offsetY);\r\n    }\r\n\r\n    /*\r\n    getInteractiveChildren <T extends IGameObject> (parent: T, results: IGameObject[]): void\r\n    {\r\n        const children = parent.getChildren();\r\n\r\n        for (let i = 0; i < children.length; i++)\r\n        {\r\n            const child = children[i];\r\n\r\n            if (!child.visible || !child.input.enabled)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            results.push(child);\r\n\r\n            if (child.input.enabledChildren && child.numChildren)\r\n            {\r\n                this.getInteractiveChildren(child, results);\r\n            }\r\n        }\r\n    }\r\n\r\n    checkHitArea <T extends IGameObject> (entity: T, px: number, py: number): boolean\r\n    {\r\n        if (entity.input.hitArea)\r\n        {\r\n            if (entity.input.hitArea.contains(px, py))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return entity.transformExtent.contains(px, py);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    hitTest <T extends IGameObject> (...entities: T[]): boolean\r\n    {\r\n        const localX = this.localPoint.x;\r\n        const localY = this.localPoint.y;\r\n        const point = this.transPoint;\r\n\r\n        for (let i: number = 0; i < entities.length; i++)\r\n        {\r\n            const entity = entities[i];\r\n\r\n            if (!entity.world)\r\n            {\r\n                //  Can't hit test an entity if it hasn't been added to a World yet\r\n                continue;\r\n            }\r\n\r\n            const mat = Mat2dAppend(entity.world.camera.worldTransform, entity.worldTransform);\r\n\r\n            Mat2dGlobalToLocal(mat, localX, localY, point);\r\n\r\n            if (this.checkHitArea(entity, point.x, point.y))\r\n            {\r\n                this.hitPoint.set(point.x, point.y);\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    hitTestChildren <T extends IGameObject> (parent: T, topOnly: boolean = true): IGameObject[]\r\n    {\r\n        const output: IGameObject[] = [];\r\n\r\n        if (!parent.visible)\r\n        {\r\n            return output;\r\n        }\r\n\r\n        //  Build a list of potential input candidates\r\n        const candidates: IGameObject[] = [];\r\n        const parentInput = parent.input;\r\n\r\n        if (parentInput && parentInput.enabled)\r\n        {\r\n            candidates.push(parent);\r\n        }\r\n\r\n        if (parentInput.enabledChildren && parent.numChildren)\r\n        {\r\n            this.getInteractiveChildren(parent, candidates);\r\n        }\r\n\r\n        for (let i: number = candidates.length - 1; i >= 0; i--)\r\n        {\r\n            const entity = candidates[i];\r\n\r\n            if (this.hitTest(entity))\r\n            {\r\n                output.push(entity);\r\n\r\n                if (topOnly)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n    */\r\n\r\n    shutdown (): void\r\n    {\r\n        const target = this.target;\r\n\r\n        target.removeEventListener('mousedown', this.mousedownHandler);\r\n        target.removeEventListener('mouseup', this.mouseupHandler);\r\n        target.removeEventListener('wheel', this.mousewheelHandler);\r\n        target.removeEventListener('contextmenu', this.contextmenuHandler);\r\n\r\n        window.removeEventListener('mouseup', this.mouseupHandler);\r\n        window.removeEventListener('mousemove', this.mousemoveHandler);\r\n        window.removeEventListener('blur', this.blurHandler);\r\n    }\r\n}\r\n", "import { CreateAnimData } from './CreateAnimData';\r\nimport { IAnimatedSprite } from '../gameobjects/animatedsprite/IAnimatedSprite';\r\nimport { IAnimation } from './IAnimation';\r\nimport { IPlayAnimationConfig } from './IPlayAnimationConfig';\r\n\r\nexport function Play <T extends IAnimatedSprite> (animation: IAnimation, config: IPlayAnimationConfig = {}, ...sprites: T[]): T[]\r\n{\r\n    const data = CreateAnimData(\r\n        animation.key,\r\n        animation.frameRate,\r\n        animation.duration,\r\n        animation.delay,\r\n        animation.repeat,\r\n        animation.repeatDelay,\r\n        animation.yoyo,\r\n        animation.hold,\r\n        animation.showOnStart,\r\n        animation.hideOnComplete\r\n    );\r\n\r\n    //  Merge in any IPlayAnimationConfig overrides\r\n    Object.assign(data, config);\r\n\r\n    data.nextFrameTime = animation.msPerFrame + data.delay;\r\n\r\n    sprites.forEach(sprite =>\r\n    {\r\n        if (!sprite || !sprite.animData)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const spriteAnimData = sprite.animData;\r\n\r\n        //  Call Stop function instead of all this ...\r\n        if (spriteAnimData.isPlaying)\r\n        {\r\n            if (sprite.currentAnimation !== animation)\r\n            {\r\n                spriteAnimData.isPlaying = false;\r\n\r\n                if (spriteAnimData.onComplete)\r\n                {\r\n                    spriteAnimData.onComplete(sprite, sprite.currentAnimation);\r\n                }\r\n            }\r\n            else if (!data.forceRestart)\r\n            {\r\n                //  This animation is already playing? Just return then.\r\n                return;\r\n            }\r\n        }\r\n\r\n        Object.assign(spriteAnimData, data);\r\n\r\n        sprite.currentAnimation = animation;\r\n        sprite.currentFrame = animation.firstFrame;\r\n\r\n        sprite.play();\r\n    });\r\n\r\n    return sprites;\r\n}\r\n", "import { IText } from './IText';\r\n\r\nexport function SetBackgroundStyle (style: string | CanvasGradient | CanvasPattern, cornerRadius: number | null, ...text: IText[]): void\r\n{\r\n    text.forEach(entity =>\r\n    {\r\n        entity.backgroundStyle = style;\r\n\r\n        if (cornerRadius !== null)\r\n        {\r\n            entity.cornerRadius = cornerRadius;\r\n        }\r\n\r\n        entity.updateText();\r\n    });\r\n}\r\n", "import { IText } from './IText';\r\n\r\nexport function SetLineSpacing (spacing: number, ...text: IText[]): void\r\n{\r\n    text.forEach(entity =>\r\n    {\r\n        entity.lineSpacing = spacing;\r\n        entity.updateText();\r\n    });\r\n}\r\n", "import { IText } from './IText';\r\n\r\nexport function SetPadding (left: number, right: number, top: number, bottom: number, ...text: IText[]): void\r\n{\r\n    text.forEach(entity =>\r\n    {\r\n        const padding = entity.padding;\r\n\r\n        padding.left = left;\r\n        padding.right = right;\r\n        padding.top = top;\r\n        padding.bottom = bottom;\r\n\r\n        entity.updateText();\r\n    });\r\n}\r\n", "/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nexport function Stats (game, t = 0)\r\n{\r\n    var game = game;\r\n    var mode = 0;\r\n\r\n\tvar container = document.createElement( 'div' );\r\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\r\n\tcontainer.addEventListener( 'click', function ( event ) {\r\n\r\n\t\tevent.preventDefault();\r\n\t\tshowPanel( ++ mode % container.children.length );\r\n\r\n\t}, false );\r\n\r\n\t//\r\n\r\n\tfunction addPanel( panel ) {\r\n\r\n\t\tcontainer.appendChild( panel.dom );\r\n\t\treturn panel;\r\n\r\n\t}\r\n\r\n\tfunction showPanel( id ) {\r\n\r\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\r\n\r\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\r\n\r\n\t\t}\r\n\r\n\t\tmode = id;\r\n\r\n\t}\r\n\r\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\r\n\r\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\r\n\tvar renderMsPanel = addPanel( new Stats.Panel( 'MS RENDER', '#0f0', '#020' ) );\r\n\tvar updateMsPanel = addPanel( new Stats.Panel( 'MS UPDATE', '#f08', '#201' ) );\r\n\r\n    // var fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\r\n\t// var msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\r\n\t// var memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\r\n    // var phaserPanel = addPanel(new Stats.Panel( 'Render', '#AAA', '#111' ));\r\n\r\n    showPanel( t );\r\n\r\n\treturn {\r\n\r\n\t\tdom: container,\r\n\t\taddPanel: addPanel,\r\n\t\tshowPanel: showPanel,\r\n\r\n\t\tbegin: function ()\r\n        {\r\n\t\t\tbeginTime = performance.now();\r\n\t\t},\r\n\r\n\t\tend: function () {\r\n\r\n            // delta: 16.67333333492279\r\n            // dirtyColor: 0\r\n            // dirtyLocal: 25000\r\n            // dirtyQuad: 25000\r\n            // dirtyView: 0\r\n            // dirtyWorld: 0\r\n            // fps: 59.976009590444065\r\n            // gameFrame: 29929\r\n            // numChildren: 291242\r\n            // renderList: []\r\n            // renderMs: 5.8999998569488525\r\n            // rendered: 76\r\n            // updateMs: 0.8999998569488525\r\n            // updated: 25002\r\n\r\n\t\t\tvar time = performance.now();\r\n\r\n\t\t\tif (time >= prevTime + 250)\r\n            {\r\n                fpsPanel.update( game.renderStats.fps, 100 );\r\n                renderMsPanel.update( game.renderStats.renderMs, 200 );\r\n                updateMsPanel.update( game.renderStats.updateMs, 200 );\r\n\r\n\t\t\t\tprevTime = time;\r\n            }\r\n\r\n\t\t\treturn time;\r\n\t\t},\r\n\r\n\t\tupdate: function ()\r\n        {\r\n\t\t\tbeginTime = this.end();\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n\r\nStats.Panel = function ( name, fg, bg ) {\r\n\r\n\tvar min = Infinity, max = 0, round = Math.round;\r\n\tvar PR = round( window.devicePixelRatio || 1 );\r\n\r\n    var WIDTH = 120;\r\n    var HEIGHT = 48;\r\n    var TEXT_X = 3 * PR;\r\n    var TEXT_Y = 3 * PR;\r\n    var GRAPH_X = 3 * PR;\r\n    var GRAPH_Y = 15 * PR;\r\n    var GRAPH_WIDTH = (WIDTH - 6) * PR;\r\n    var GRAPH_HEIGHT = (HEIGHT - 18) * PR;\r\n\r\n\tvar canvas = document.createElement( 'canvas' );\r\n\r\n    canvas.style.cssText = `width:${WIDTH}px;height:${HEIGHT}px`;\r\n\r\n    WIDTH *= PR;\r\n    HEIGHT *= PR;\r\n\r\n    canvas.width = WIDTH;\r\n\tcanvas.height = HEIGHT;\r\n\r\n\tvar context = canvas.getContext( '2d' );\r\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\r\n\tcontext.textBaseline = 'top';\r\n\r\n\tcontext.fillStyle = bg;\r\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\r\n\r\n\tcontext.fillStyle = fg;\r\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\r\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\r\n\r\n\tcontext.fillStyle = bg;\r\n\tcontext.globalAlpha = 0.9;\r\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\r\n\r\n\treturn {\r\n\r\n\t\tdom: canvas,\r\n\r\n\t\tupdate: function ( value, maxValue ) {\r\n\r\n\t\t\tmin = Math.min( min, value );\r\n\t\t\tmax = Math.max( max, value );\r\n\r\n\t\t\tcontext.fillStyle = bg;\r\n\t\t\tcontext.globalAlpha = 1;\r\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\r\n\t\t\tcontext.fillStyle = fg;\r\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\r\n\r\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\r\n\r\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\r\n\r\n\t\t\tcontext.fillStyle = bg;\r\n\t\t\tcontext.globalAlpha = 0.9;\r\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n\r\nexport function StartStats (game, t = 0)\r\n{\r\n    const stats = new Stats(game, t);\r\n\r\n    document.body.appendChild(stats.dom);\r\n    \r\n    function animate ()\r\n    {\r\n        stats.update();\r\n\r\n        requestAnimationFrame(animate);\r\n    }\r\n    \r\n    requestAnimationFrame(animate);\r\n}\r\n", "import { TRANSFORM, Transform2DComponent } from '../../components/transform/Transform2DComponent';\r\n\r\nimport { AddTransform2DComponent } from '../../components/transform/AddTransform2DComponent';\r\nimport { GameObject } from '../GameObject';\r\nimport { IBaseCamera } from '../../camera/IBaseCamera';\r\nimport { IGameObject } from '../IGameObject';\r\nimport { SetDirtyTransform } from '../../components/dirty/SetDirtyTransform';\r\nimport { SetFixedTransform } from '../../components/transform/SetFixedTransform';\r\nimport { SetWillTransformChildren } from '../../components/permissions/SetWillTransformChildren';\r\n\r\nexport class StaticLayer extends GameObject\r\n{\r\n    readonly type: string = 'StaticLayer';\r\n\r\n    camera: IBaseCamera;\r\n\r\n    private _data: Float32Array;\r\n\r\n    constructor (camera: IBaseCamera)\r\n    {\r\n        super();\r\n\r\n        this.camera = camera;\r\n\r\n        const id = this.id;\r\n\r\n        AddTransform2DComponent(id);\r\n\r\n        SetFixedTransform(id, true);\r\n        SetWillTransformChildren(id, true);\r\n\r\n        this._data = Transform2DComponent.data[id];\r\n    }\r\n\r\n    update (): void\r\n    {\r\n        const camera = this.camera;\r\n\r\n        if (camera.isDirty)\r\n        {\r\n            this._data[TRANSFORM.X] = camera.getBoundsX();\r\n            this._data[TRANSFORM.Y] = camera.getBoundsY();\r\n\r\n            SetDirtyTransform(this.id);\r\n        }\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        super.destroy(reparentChildren);\r\n\r\n        this._data = null;\r\n    }\r\n}\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldAfterUpdateEvent: string = 'afterupdate';\r\n\r\nexport type WorldAfterUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldBeforeUpdateEvent: string = 'beforeupdate';\r\n\r\nexport type WorldBeforeUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\n\r\nexport const WorldPostRenderEvent: string = 'postrender';\r\n\r\nexport type WorldPostRenderEventHandler = (renderPass: IRenderPass, world: IBaseWorld) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldPreRenderEvent: string = 'prerender';\r\n\r\nexport type WorldPreRenderEventHandler = <T extends IBaseWorld> (world: T) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\nimport { IWorldRenderData } from '../IWorldRenderData';\r\n\r\nexport const WorldRenderEvent: string = 'render';\r\n\r\nexport type WorldRenderEventHandler = (renderData: IWorldRenderData, world: IBaseWorld) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldShutdownEvent: string = 'shutdown';\r\n\r\nexport type WorldShutdownEventHandler = (world: IBaseWorld) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldUpdateEvent: string = 'update';\r\n\r\nexport type WorldUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\r\n", "export const SceneDestroyEvent: string = 'destroy';\r\n\r\nexport type SceneDestroyEventHandler = () => void;\r\n", "import { Emit } from '../events/Emit';\r\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\r\nimport { GetFirstChildID } from '../components/hierarchy/GetFirstChildID';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { MoveNextUpdatable } from '../components/hierarchy/MoveNextUpdatable';\r\nimport { WillUpdate } from '../components/permissions/WillUpdate';\r\nimport { WorldUpdateEvent } from './events/WorldUpdateEvent';\r\n\r\nexport function UpdateWorld <T extends IBaseWorld> (world: T, delta: number, time: number): void\r\n{\r\n    if (!WillUpdate(world.id))\r\n    {\r\n        return;\r\n    }\r\n\r\n    const start = performance.now();\r\n\r\n    let next = GetFirstChildID(world.id);\r\n\r\n    let total = 0;\r\n\r\n    while (next > 0)\r\n    {\r\n        if (WillUpdate(next))\r\n        {\r\n            GameObjectCache.get(next).update(delta, time);\r\n\r\n            total++;\r\n        }\r\n\r\n        next = MoveNextUpdatable(next);\r\n    }\r\n\r\n    world.renderData.updated = total;\r\n    world.renderData.updateMs = performance.now() - start;\r\n\r\n    Emit(world, WorldUpdateEvent, delta, time);\r\n}\r\n", "import * as WorldEvents from './events';\r\n\r\nimport { Query, defineComponent, defineQuery } from 'bitecs';\r\n\r\nimport { Color } from '../components/color/Color';\r\nimport { CreateWorldRenderData } from './CreateWorldRenderData';\r\nimport { Emit } from '../events/Emit';\r\nimport { GameObject } from '../gameobjects/GameObject';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { IBaseCamera } from '../camera/IBaseCamera';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IScene } from '../scenes/IScene';\r\nimport { IWorldRenderData } from './IWorldRenderData';\r\nimport { Once } from '../events/Once';\r\nimport { RemoveChildren } from '../display/RemoveChildren';\r\nimport { ResetWorldRenderData } from './ResetWorldRenderData';\r\nimport { SceneDestroyEvent } from '../scenes/events/SceneDestroyEvent';\r\nimport { SetWillCacheChildren } from '../components/permissions/SetWillCacheChildren';\r\nimport { SetWillTransformChildren } from '../components/permissions/SetWillTransformChildren';\r\nimport { SetWorldID } from '../components/hierarchy/SetWorldID';\r\nimport { UpdateWorld } from './UpdateWorld';\r\nimport { WorldList } from './WorldList';\r\n\r\n//  The base World class. You should not create an instance of this, but instead extend it,\r\n//  or use a class that does, such as StaticWorld or World.\r\n\r\nexport class BaseWorld extends GameObject implements IBaseWorld\r\n{\r\n    readonly type: string = 'BaseWorld';\r\n\r\n    tag = defineComponent();\r\n\r\n    scene: IScene;\r\n\r\n    camera: IBaseCamera;\r\n\r\n    is3D: boolean = false;\r\n\r\n    updateDisplayList: boolean = true;\r\n\r\n    color: Color;\r\n\r\n    renderData: IWorldRenderData;\r\n\r\n    stack: Uint32Array;\r\n\r\n    private totalChildren: number = 0;\r\n    private totalChildrenQuery: Query;\r\n\r\n    constructor (scene: IScene)\r\n    {\r\n        super();\r\n\r\n        const id = this.id;\r\n        const tag = this.tag;\r\n\r\n        this.scene = scene;\r\n\r\n        this.totalChildrenQuery = defineQuery([ tag ]);\r\n\r\n        SetWorldID(id, id);\r\n\r\n        WorldList.get(scene).push(this);\r\n\r\n        this.color = new Color(id);\r\n\r\n        this.events = new Map();\r\n\r\n        this.renderData = CreateWorldRenderData();\r\n\r\n        //  TODO - Set from Game Config: The stack can be up to 256 layers deep\r\n        this.stack = new Uint32Array(256);\r\n\r\n        SetWillTransformChildren(id, false);\r\n        SetWillCacheChildren(id, false);\r\n\r\n        Once(scene, SceneDestroyEvent, () => this.destroy());\r\n    }\r\n\r\n    getNumChildren (): number\r\n    {\r\n        if (this.updateDisplayList)\r\n        {\r\n            this.totalChildren = this.totalChildrenQuery(GameObjectWorld).length;\r\n\r\n            this.updateDisplayList = false;\r\n        }\r\n\r\n        return this.totalChildren;\r\n    }\r\n\r\n    beforeUpdate (delta: number, time: number): void\r\n    {\r\n        ResetWorldRenderData(this.renderData);\r\n\r\n        Emit(this, WorldEvents.WorldBeforeUpdateEvent, delta, time, this);\r\n    }\r\n\r\n    //  Called after Scene.update.\r\n    //  Invokes 'update' on all children of the Scene.\r\n    update (delta: number, time: number): void\r\n    {\r\n        UpdateWorld(this, delta, time);\r\n    }\r\n\r\n    afterUpdate (delta: number, time: number): void\r\n    {\r\n        Emit(this, WorldEvents.WorldAfterUpdateEvent, delta, time, this);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    preRender (gameFrame: number): boolean\r\n    {\r\n        return true;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n    }\r\n\r\n    shutdown (): void\r\n    {\r\n        RemoveChildren(this);\r\n\r\n        Emit(this, WorldEvents.WorldShutdownEvent, this);\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        super.destroy(reparentChildren);\r\n\r\n        this.shutdown();\r\n\r\n        if (this.camera)\r\n        {\r\n            this.camera.destroy();\r\n        }\r\n\r\n        this.camera = null;\r\n    }\r\n}\r\n", "import { ClearDirtyChildTransform } from '../components/dirty/ClearDirtyChildTransform';\r\nimport { ClearDirtyWorldTransform } from '../components/dirty/ClearDirtyWorldTransform';\r\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\r\nimport { GetFirstChildID } from '../components/hierarchy/GetFirstChildID';\r\nimport { GetNextSiblingID } from '../components/hierarchy/GetNextSiblingID';\r\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\r\nimport { HasCustomDisplayList } from '../components/permissions/HasCustomDisplayList';\r\nimport { HasRenderableChildren } from '../components/permissions/HasRenderableChildren';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IsInView } from '../components/transform/IsInView';\r\nimport { WillCacheChildren } from '../components/permissions/WillCacheChildren';\r\nimport { WillRender } from '../components/permissions/WillRender';\r\n\r\nconst RENDER_LIST: IGameObject[] = [];\r\n\r\nlet RENDER_CHILD_TOTAL: number = 0;\r\nlet PROCESS_TOTAL: number = 0;\r\n\r\nexport function GetRenderList (): IGameObject[]\r\n{\r\n    return RENDER_LIST;\r\n}\r\n\r\nexport function GetRenderChildTotal (): number\r\n{\r\n    return RENDER_CHILD_TOTAL;\r\n}\r\n\r\nexport function GetProcessTotal (): number\r\n{\r\n    return PROCESS_TOTAL;\r\n}\r\n\r\nexport function ResetRenderChildTotal (): void\r\n{\r\n    RENDER_CHILD_TOTAL = 0;\r\n    PROCESS_TOTAL = 0;\r\n    RENDER_LIST.length = 0;\r\n}\r\n\r\nexport function RenderGLNode <T extends IRenderPass> (renderPass: T, id: number): void\r\n{\r\n    const inView = IsInView(id) || WillCacheChildren(id);\r\n\r\n    let gameObject;\r\n\r\n    PROCESS_TOTAL++;\r\n\r\n    if (inView)\r\n    {\r\n        gameObject = GameObjectCache.get(id);\r\n\r\n        gameObject.renderGL(renderPass);\r\n\r\n        RENDER_CHILD_TOTAL++;\r\n    }\r\n\r\n    if (HasCustomDisplayList(id))\r\n    {\r\n        gameObject = GameObjectCache.get(id);\r\n\r\n        gameObject.renderGL(renderPass);\r\n\r\n        RENDER_CHILD_TOTAL++;\r\n\r\n        const children = gameObject.getChildren(renderPass);\r\n\r\n        const numChildren = children.length;\r\n\r\n        for (let i = 0; i < numChildren; i++)\r\n        {\r\n            const childGameObject = children[i];\r\n            const childID = childGameObject.id;\r\n\r\n            PROCESS_TOTAL++;\r\n\r\n            if (WillRender(childID))\r\n            {\r\n                if (GetNumChildren(childID))\r\n                {\r\n                    RenderGLNode(renderPass, childID);\r\n                }\r\n                else\r\n                {\r\n                    childGameObject.renderGL(renderPass);\r\n                    childGameObject.postRenderGL(renderPass);\r\n\r\n                    RENDER_CHILD_TOTAL++;\r\n                }\r\n            }\r\n        }\r\n\r\n        gameObject.postRenderGL(renderPass);\r\n    }\r\n    else\r\n    {\r\n        const numChildren = HasRenderableChildren(id, renderPass.isCameraDirty());\r\n\r\n        if (numChildren)\r\n        {\r\n            let childID = GetFirstChildID(id);\r\n\r\n            for (let i = 0; i < numChildren; i++)\r\n            {\r\n                PROCESS_TOTAL++;\r\n\r\n                if (WillRender(childID))\r\n                {\r\n                    if (GetNumChildren(childID))\r\n                    {\r\n                        RenderGLNode(renderPass, childID);\r\n                    }\r\n                    else if (IsInView(childID))\r\n                    {\r\n                        const childGameObject = GameObjectCache.get(childID);\r\n\r\n                        childGameObject.renderGL(renderPass);\r\n                        childGameObject.postRenderGL(renderPass);\r\n\r\n                        RENDER_CHILD_TOTAL++;\r\n                    }\r\n                }\r\n\r\n                childID = GetNextSiblingID(childID);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (inView)\r\n    {\r\n        gameObject.postRenderGL(renderPass);\r\n    }\r\n\r\n    ClearDirtyChildTransform(id);\r\n    ClearDirtyWorldTransform(id);\r\n}\r\n", "import { HasChildren } from '../components/hierarchy/HasChildren';\r\nimport { HasCustomDisplayList } from '../components/permissions/HasCustomDisplayList';\r\nimport { HasDirtyDisplayList } from '../components/dirty/HasDirtyDisplayList';\r\nimport { WillUpdateTransform } from '../components/dirty/WillUpdateTransform';\r\n\r\nexport function ProcessNode (node: number, cameraUpdated: boolean): boolean\r\n{\r\n    if (HasCustomDisplayList(node))\r\n    {\r\n        return HasDirtyDisplayList(node);\r\n    }\r\n    else if (HasChildren(node) && (cameraUpdated || WillUpdateTransform(node)))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n", "import { ClearDirtyColor } from '../components/dirty/ClearDirtyColor';\r\nimport { ColorComponent } from '../components/color/ColorComponent';\r\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\r\nimport { HasDirtyColor } from '../components/dirty/HasDirtyColor';\r\nimport { HasDirtyTransform } from '../components/dirty/HasDirtyTransform';\r\nimport { HasDirtyWorldTransform } from '../components/dirty/HasDirtyWorldTransform';\r\nimport { IWorldRenderData } from './IWorldRenderData';\r\nimport { SetInViewFromBounds } from '../components/transform/SetInViewFromBounds';\r\nimport { SetQuadColor } from '../components/vertices/SetQuadColor';\r\nimport { UpdateTransforms } from '../components/transform/UpdateTransforms';\r\n\r\nexport function UpdateNode (id: number, parentID: number, checkColor: boolean, checkTransform: boolean, cx: number, cy: number, cright: number, cbottom: number, forceUpdate: boolean, parentIsDisplayList: boolean, renderData?: IWorldRenderData): void\r\n{\r\n    renderData.dirtyQuad++;\r\n\r\n    if (checkColor && HasDirtyColor(id))\r\n    {\r\n        const r = ColorComponent.r[id] / 255;\r\n        const g = ColorComponent.g[id] / 255;\r\n        const b = ColorComponent.b[id] / 255;\r\n        const a = ColorComponent.a[id];\r\n\r\n        SetQuadColor(id, r, g, b, a);\r\n\r\n        ClearDirtyColor(id);\r\n\r\n        renderData.dirtyColor++;\r\n    }\r\n\r\n    if (checkTransform)\r\n    {\r\n        let hasUpdated = false;\r\n\r\n        if (HasDirtyTransform(id))\r\n        {\r\n            UpdateTransforms(id, parentID, false, cx, cy, cright, cbottom);\r\n\r\n            hasUpdated = true;\r\n\r\n            renderData.dirtyLocal++;\r\n        }\r\n        else if (HasDirtyWorldTransform(parentID))\r\n        {\r\n            UpdateTransforms(id, parentID, true, cx, cy, cright, cbottom);\r\n\r\n            hasUpdated = true;\r\n\r\n            renderData.dirtyWorld++;\r\n        }\r\n        else if (forceUpdate)\r\n        {\r\n            SetInViewFromBounds(id, cx, cy, cright, cbottom);\r\n\r\n            renderData.dirtyView++;\r\n        }\r\n\r\n        if (hasUpdated && parentIsDisplayList)\r\n        {\r\n            GameObjectCache.get(parentID).onUpdateChild(id);\r\n        }\r\n    }\r\n}\r\n", "import { ClearDirtyChildColor } from '../components/dirty/ClearDirtyChildColor';\r\nimport { ClearDirtyChildTransform } from '../components/dirty/ClearDirtyChildTransform';\r\nimport { Emit } from '../events/Emit';\r\nimport { GetFirstChildID } from '../components/hierarchy/GetFirstChildID';\r\nimport { GetNextSiblingID } from '../components/hierarchy/GetNextSiblingID';\r\nimport { HasCustomDisplayList } from '../components/permissions/HasCustomDisplayList';\r\nimport { HasDirtyChildColor } from '../components/dirty/HasDirtyChildColor';\r\nimport { HasDirtyChildTransform } from '../components/dirty/HasDirtyChildTransform';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { ProcessNode } from './ProcessNode';\r\nimport { UpdateNode } from './UpdateNode';\r\nimport { WorldPreRenderEvent } from './events/WorldPreRenderEvent';\r\n\r\nexport function PreRenderWorld <T extends IBaseWorld> (world: T, gameFrame: number): boolean\r\n{\r\n    const start = performance.now();\r\n\r\n    const id = world.id;\r\n\r\n    const renderData = world.renderData;\r\n\r\n    renderData.gameFrame = gameFrame;\r\n\r\n    const camera = world.camera;\r\n    const cameraUpdated = camera.isDirty;\r\n\r\n    Emit(world, WorldPreRenderEvent, world);\r\n\r\n    const checkColor = HasDirtyChildColor(id);\r\n    const checkTransform = HasDirtyChildTransform(id) || cameraUpdated;\r\n\r\n    if (!checkColor && !checkTransform)\r\n    {\r\n        //  Nothing needs updating, so let's get out of here\r\n        return false;\r\n    }\r\n\r\n    const cx = camera.getBoundsX();\r\n    const cy = camera.getBoundsY();\r\n    const cright = camera.getBoundsRight();\r\n    const cbottom = camera.getBoundsBottom();\r\n\r\n    const stack = world.stack;\r\n\r\n    stack[0] = id;\r\n\r\n    let stackIndex = 1;\r\n    let parentNode = id;\r\n    let node = GetFirstChildID(id);\r\n    let parentIsDisplayList = false;\r\n\r\n    stackBlock:\r\n    {\r\n        while (stackIndex > 0)\r\n        {\r\n            UpdateNode(node, parentNode, checkColor, checkTransform, cx, cy, cright, cbottom, cameraUpdated, parentIsDisplayList, renderData);\r\n\r\n            //  Dive as deep as we can go, adding all parents to the stack for _this branch_\r\n            //  If the parent isn't dirty and has no dirty children, go no further down this branch\r\n\r\n            while (ProcessNode(node, cameraUpdated))\r\n            {\r\n                stack[stackIndex++] = node;\r\n\r\n                parentNode = node;\r\n                parentIsDisplayList = HasCustomDisplayList(node);\r\n\r\n                node = GetFirstChildID(node);\r\n\r\n                UpdateNode(node, parentNode, checkColor, checkTransform, cx, cy, cright, cbottom, cameraUpdated, parentIsDisplayList, renderData);\r\n            }\r\n\r\n            //  We're at the bottom of the branch\r\n            //  We know 'node' doesn't have any children, but the next sibling might\r\n            //  Move horizontally through the siblings, until we hit one with kids, or the end.\r\n\r\n            let next = GetNextSiblingID(node);\r\n\r\n            let climb = true;\r\n\r\n            while (next && climb)\r\n            {\r\n                if (ProcessNode(next, cameraUpdated))\r\n                {\r\n                    //  The 'next' sibling has a child, so we're going deeper\r\n                    climb = false;\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    UpdateNode(next, parentNode, checkColor, checkTransform, cx, cy, cright, cbottom, cameraUpdated, parentIsDisplayList, renderData);\r\n\r\n                    next = GetNextSiblingID(next);\r\n                }\r\n            }\r\n\r\n            //  The moment we get here, we need to treat it like a whole new branch\r\n            //  We have either run out of siblings, or found one with children\r\n\r\n            if (climb)\r\n            {\r\n                //  No children and no more siblings, so let's climb\r\n                //  Go back up the stack until we find a node with a sibling\r\n\r\n                while (next === 0)\r\n                {\r\n                    node = stack[--stackIndex];\r\n\r\n                    if (!node)\r\n                    {\r\n                        break stackBlock;\r\n                    }\r\n\r\n                    next = GetNextSiblingID(node);\r\n                }\r\n\r\n                parentNode = stack[stackIndex - 1];\r\n                parentIsDisplayList = HasCustomDisplayList(parentNode);\r\n            }\r\n\r\n            //  'next' now contains the sibling of the stack parent, set it to 'node'\r\n            node = next;\r\n        }\r\n    }\r\n\r\n    ClearDirtyChildColor(id);\r\n    ClearDirtyChildTransform(id);\r\n\r\n    world.getNumChildren();\r\n\r\n    renderData.preRenderMs = performance.now() - start;\r\n\r\n    return true;\r\n}\r\n", "import * as WorldEvents from './events';\r\n\r\nimport { GetProcessTotal, GetRenderChildTotal, RenderGLNode, ResetRenderChildTotal } from './RenderGLNode';\r\n\r\nimport { Begin } from '../renderer/webgl1/renderpass/Begin';\r\nimport { Emit } from '../events/Emit';\r\nimport { GetFirstChildID } from '../components/hierarchy/GetFirstChildID';\r\nimport { GetNextSiblingID } from '../components/hierarchy/GetNextSiblingID';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { PopColor } from '../renderer/webgl1/renderpass/PopColor';\r\nimport { SetColor } from '../renderer/webgl1/renderpass/SetColor';\r\nimport { WillRender } from '../components/permissions/WillRender';\r\n\r\nexport function RenderGLWorld <T extends IBaseWorld, P extends IRenderPass> (world: T, renderPass: P): void\r\n{\r\n    SetColor(renderPass, world.color);\r\n\r\n    Emit(world, WorldEvents.WorldRenderEvent, renderPass, world);\r\n\r\n    const camera = world.camera;\r\n    const renderData = world.renderData;\r\n\r\n    const start = performance.now();\r\n\r\n    Begin(renderPass, camera);\r\n\r\n    ResetRenderChildTotal();\r\n\r\n    let id = GetFirstChildID(world.id);\r\n\r\n    while (id > 0)\r\n    {\r\n        if (WillRender(id))\r\n        {\r\n            RenderGLNode(renderPass, id);\r\n        }\r\n\r\n        id = GetNextSiblingID(id);\r\n    }\r\n\r\n    PopColor(renderPass, world.color);\r\n\r\n    //#ifdef RENDER_STATS\r\n    renderData.renderMs = performance.now() - start;\r\n    renderData.numChildren = world.getNumChildren();\r\n    // renderData.fps = world.scene.game.time.fps;\r\n    // renderData.delta = world.scene.game.time.delta;\r\n    renderData.rendered = GetRenderChildTotal();\r\n    renderData.processed = GetProcessTotal();\r\n    // renderData.renderList = GetRenderList();\r\n\r\n    const gameStats = world.scene.game.renderStats;\r\n\r\n    gameStats.rendered += renderData.rendered;\r\n    gameStats.dirtyColor += renderData.dirtyColor;\r\n    gameStats.dirtyLocal += renderData.dirtyLocal;\r\n    gameStats.dirtyView += renderData.dirtyView;\r\n    gameStats.dirtyWorld += renderData.dirtyWorld;\r\n    gameStats.dirtyQuad += renderData.dirtyQuad;\r\n    gameStats.processed += renderData.processed;\r\n    gameStats.renderMs += renderData.renderMs;\r\n    gameStats.numChildren = renderData.numChildren;\r\n    gameStats.preRenderMs += renderData.preRenderMs;\r\n    gameStats.updated += renderData.updated;\r\n    gameStats.updateMs += renderData.updateMs;\r\n    //#endif\r\n\r\n    camera.postRender();\r\n\r\n    Emit(world, WorldEvents.WorldPostRenderEvent, renderPass, world);\r\n}\r\n", "import { BaseCamera } from './BaseCamera';\r\nimport { ClearDirtyTransform } from '../components/dirty/ClearDirtyTransform';\r\nimport { HasDirtyTransform } from '../components/dirty/HasDirtyTransform';\r\nimport { IWorldCamera } from './IWorldCamera';\r\nimport { Position } from '../components/transform/Position';\r\nimport { SetBounds } from '../components/transform/SetBounds';\r\n\r\n//  A World Camera has a size, position and scale.\r\n\r\nexport class WorldCamera extends BaseCamera implements IWorldCamera\r\n{\r\n    readonly type: string = 'WorldCamera';\r\n\r\n    position: Position;\r\n\r\n    constructor (width: number, height: number)\r\n    {\r\n        super(width, height);\r\n\r\n        this.position = new Position(this.id, 0, 0);\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        this.position.x = value;\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return this.position.x;\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        this.position.y = value;\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return this.position.y;\r\n    }\r\n\r\n    setPosition (x: number, y?: number): this\r\n    {\r\n        this.position.set(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    preRender (): boolean\r\n    {\r\n        const id = this.id;\r\n\r\n        if (HasDirtyTransform(id))\r\n        {\r\n            const x = this.x;\r\n            const y = this.y;\r\n\r\n            const w = this.size.width;\r\n            const h = this.size.height;\r\n\r\n            const ox = -x + (w / 2);\r\n            const oy = -y + (h / 2);\r\n\r\n            const bx = ox - (w / 2);\r\n            const by = oy - (h / 2);\r\n\r\n            SetBounds(id, bx, by, bx + w, by + h);\r\n\r\n            const data = this.matrix.data;\r\n\r\n            data[12] = this.x;\r\n            data[13] = this.y;\r\n\r\n            ClearDirtyTransform(id);\r\n\r\n            this.isDirty = true;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n", "import { BaseWorld } from './BaseWorld';\r\nimport { GetRenderList } from './RenderGLNode';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IScene } from '../scenes/IScene';\r\nimport { IWorld } from './IWorld';\r\nimport { PreRenderWorld } from './PreRenderWorld';\r\nimport { RenderGLWorld } from './RenderGLWorld';\r\nimport { RendererInstance } from '../renderer/RendererInstance';\r\nimport { UpdateWorld } from './UpdateWorld';\r\nimport { WorldCamera } from '../camera/WorldCamera';\r\n\r\nexport class World extends BaseWorld implements IWorld\r\n{\r\n    readonly type: string = 'World';\r\n\r\n    declare camera: WorldCamera;\r\n\r\n    constructor (scene: IScene)\r\n    {\r\n        super(scene);\r\n\r\n        const renderer = RendererInstance.get();\r\n\r\n        this.camera = new WorldCamera(renderer.width, renderer.height);\r\n    }\r\n\r\n    //  Called after Scene.update.\r\n    //  Invokes 'update' on all children of the Scene.\r\n    update (delta: number, time: number): void\r\n    {\r\n        this.camera.preRender();\r\n\r\n        UpdateWorld(this, delta, time);\r\n    }\r\n\r\n    preRender (gameFrame: number): boolean\r\n    {\r\n        return PreRenderWorld(this, gameFrame);\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        RenderGLWorld(this, renderPass);\r\n    }\r\n\r\n    getRenderList (): IGameObject[]\r\n    {\r\n        return GetRenderList();\r\n    }\r\n}\r\n", "import { BackgroundColor, BatchSize, GlobalVar, Parent, Scenes, WebGL } from '../../../../phaser-genesis/src/config';\r\nimport { DownKey, LeftKey, RightKey, UpKey } from '../../../../phaser-genesis/src/input/keyboard/keys';\r\nimport { GetTexture, Texture } from '../../../../phaser-genesis/src/textures';\r\nimport { SpatialGridLayer, Sprite, Text } from '../../../../phaser-genesis/src/gameobjects';\r\n\r\nimport { AddChild } from '../../../../phaser-genesis/src/display';\r\nimport { AnimatedSprite } from '../../../../phaser-genesis/src/gameobjects/animatedsprite/AnimatedSprite';\r\nimport { Animation } from '../../../../phaser-genesis/src/animation/Animation';\r\nimport { Between } from '../../../../phaser-genesis/src/math';\r\nimport { CreateAnimationFromAtlas } from '../../../../phaser-genesis/src/animation/CreateAnimationFromAtlas';\r\nimport { CursorKeyCameraControls } from '../../../../phaser-genesis/src/camera/controls/CursorKeyCameraControls';\r\nimport { Game } from '../../../../phaser-genesis/src/Game';\r\nimport { GameObjectWorld } from '../../../../phaser-genesis/src/GameObjectWorld';\r\nimport { GetRandom } from '../../../../phaser-genesis/src/utils/array/GetRandom';\r\nimport { Keyboard } from '../../../../phaser-genesis/src/input/keyboard';\r\nimport { LoadAtlasFile } from '../../../../phaser-genesis/src/loader/files/LoadAtlasFile';\r\nimport { LoadImageFile } from '../../../../phaser-genesis/src/loader/files/LoadImageFile';\r\nimport { Mouse } from '../../../../phaser-genesis/src/input/mouse/Mouse';\r\nimport { On } from '../../../../phaser-genesis/src/events/On';\r\nimport { Play } from '../../../../phaser-genesis/src/animation/Play';\r\nimport { Scene } from '../../../../phaser-genesis/src/scenes/Scene';\r\nimport { SetBackgroundStyle } from '../../../../phaser-genesis/src/gameobjects/text/SetBackgroundStyle';\r\nimport { SetLineSpacing } from '../../../../phaser-genesis/src/gameobjects/text/SetLineSpacing';\r\nimport { SetPadding } from '../../../../phaser-genesis/src/gameobjects/text/SetPadding';\r\nimport { StartStats } from '../../live/libs/stats.js';\r\nimport { StaticLayer } from '../../../../phaser-genesis/src/gameobjects/staticlayer/StaticLayer';\r\nimport { Transform2DComponent } from '../../../../phaser-genesis/src/components/transform/Transform2DComponent';\r\nimport { World } from '../../../../phaser-genesis/src/world/World';\r\nimport { WorldCamera } from '../../../../phaser-genesis/src/camera/WorldCamera';\r\nimport { hasComponent } from 'bitecs';\r\n\r\nlet worldWidth = 512;\r\nlet worldHeight = 512;\r\nlet gridSize = 512;\r\nlet gridWidth = 0;\r\n\r\nclass Fireball extends AnimatedSprite\r\n{\r\n    speedX: number;\r\n    speedY: number;\r\n\r\n    constructor (fireballAnimation)\r\n    {\r\n        super(Between(0, worldWidth), Between(0, worldHeight), 'fireball');\r\n\r\n        this.speedX = Between(1, 8);\r\n        this.speedY = Between(1, 8);\r\n\r\n        this.rotation = Math.PI - Math.atan2(this.speedY, this.speedX);\r\n\r\n        Play(fireballAnimation, { repeat: -1, frameRate: 1 }, this);\r\n    }\r\n\r\n    update (delta: number, now: number): void\r\n    {\r\n        super.update(delta, now);\r\n\r\n        this.x -= this.speedX;\r\n        this.y += this.speedY;\r\n\r\n        if (this.x < 0)\r\n        {\r\n            this.x = worldWidth;\r\n        }\r\n\r\n        if (this.y > worldHeight)\r\n        {\r\n            this.y = 0;\r\n        }\r\n    }\r\n}\r\n\r\nclass Demo extends Scene\r\n{\r\n    world: World;\r\n    texture: Texture;\r\n\r\n    grassLayer: SpatialGridLayer;\r\n    itemsLayer: SpatialGridLayer;\r\n\r\n    fireballAnimation: Animation;\r\n    stats: Text;\r\n\r\n    constructor ()\r\n    {\r\n        super();\r\n\r\n        this.create();\r\n    }\r\n\r\n    async create ()\r\n    {\r\n        await LoadAtlasFile('items', 'assets/land.png', 'assets/land.json');\r\n        await LoadImageFile('grass', 'assets/textures/grass-plain.png');\r\n        await LoadAtlasFile('fireball', 'assets/fireball.png', 'assets/fireball.json');\r\n        await LoadImageFile('logo', 'assets/logo.png');\r\n\r\n        const world = new World(this);\r\n        \r\n        this.grassLayer = new SpatialGridLayer(256, 256, false);\r\n        this.itemsLayer = new SpatialGridLayer(256, 256, false);\r\n\r\n        this.itemsLayer.onSortChildren = (a: Sprite, b: Sprite) =>\r\n        {\r\n            return a.y - b.y;\r\n        }\r\n\r\n        AddChild(world, this.grassLayer);\r\n        AddChild(world, this.itemsLayer);\r\n\r\n        this.world = world;\r\n\r\n        // this.camera = this.world.camera;\r\n\r\n        this.texture = GetTexture('items');\r\n\r\n        this.fireballAnimation = CreateAnimationFromAtlas({ key: 'fire', texture: 'fireball', prefix: 'trail_', start: 0, end: 12, zeroPad: 2 });\r\n\r\n        this.addGrid();\r\n\r\n        const staticLayer = new StaticLayer(world.camera);\r\n\r\n        this.stats = new Text(20, 580, 'Click to expand the World\\nCursors to scroll').setOrigin(0, 1);\r\n\r\n        SetPadding(8, 8, 8, 8, this.stats);\r\n        SetLineSpacing(20, this.stats);\r\n        SetBackgroundStyle('rgba(0, 0, 150, 0.8)', 6, this.stats);\r\n\r\n        AddChild(staticLayer, this.stats);\r\n\r\n        AddChild(world, staticLayer);\r\n\r\n        const mouse = new Mouse();\r\n\r\n        On(mouse, 'pointerdown', (x) => {\r\n\r\n            if (window['game'].renderStats.numChildren > 2000000)\r\n            {\r\n                return;\r\n            }\r\n\r\n            this.addGrid();\r\n\r\n        });\r\n\r\n        world.camera.setPosition(0, 50);\r\n\r\n        new CursorKeyCameraControls(world, 16, 16);\r\n\r\n        StartStats(this.game);\r\n    }\r\n\r\n    addGrid ()\r\n    {\r\n        const startX = (gridWidth * gridSize);\r\n        const startY = (gridWidth * gridSize);\r\n\r\n        gridWidth++;\r\n\r\n        for (let i = 0; i < gridWidth; i++)\r\n        {\r\n            this.addLand(startX, gridSize * i);\r\n        }\r\n\r\n        for (let i = 0; i < gridWidth - 1; i++)\r\n        {\r\n            this.addLand(gridSize * i, startY);\r\n        }\r\n\r\n        for (let i = 0; i < (gridWidth * 8); i++)\r\n        {\r\n            const fireball = new Fireball(this.fireballAnimation);\r\n\r\n            AddChild(this.world, fireball);\r\n\r\n            window['fire' + fireball.id] = fireball;\r\n        }\r\n\r\n        worldWidth += 512;\r\n        worldHeight += 512;\r\n    }\r\n\r\n    addLand (wx, wy)\r\n    {\r\n        //  Grass texture is 512 x 512\r\n        AddChild(this.grassLayer, new Sprite(wx, wy, 'grass').setOrigin(0, 0));\r\n\r\n        const frames = Array.from(this.texture.frames.keys());\r\n\r\n        //  Remove __BASE texture\r\n        frames.shift();\r\n\r\n        for (let y = 0; y < 12; y++)\r\n        {\r\n            for (let x = 0; x < 12; x++)\r\n            {\r\n                const frame = GetRandom(frames);\r\n\r\n                const rx = Between(wx + 16, wx + 498);\r\n                const ry = Between(wy + 16, wy + 498);\r\n\r\n                AddChild(this.itemsLayer, new Sprite(rx, ry, 'items', frame).setOrigin(0.5, 1).setScale(0.35, 0.35));\r\n            }\r\n        }\r\n    }\r\n\r\n    update (): void\r\n    {\r\n        if (!this.stats)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const total = window['game'].renderStats.numChildren;\r\n\r\n        this.stats.setText([\r\n            'Click to expand the World',\r\n            `World size: ${worldWidth} x ${worldHeight}`,\r\n            `Total sprites: ${total}`\r\n        ]);\r\n    }\r\n}\r\n\r\nconst params = new URLSearchParams(document.location.search);\r\n    \r\nlet total = parseInt(params.get('t'));\r\n\r\nif (!total || total === 0)\r\n{\r\n    total = 16;\r\n}\r\n\r\nconst game = new Game(\r\n    WebGL(),\r\n    BatchSize(4096),\r\n    Parent('gameParent'),\r\n    GlobalVar('Phaser4'),\r\n    BackgroundColor(0x0a0a0a),\r\n    Scenes(Demo)\r\n);\r\n\r\nwindow['game'] = game;\r\n"],
  "mappings": "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",
  "names": []
}
